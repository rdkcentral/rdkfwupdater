cscope 15 /home/SRC_CODE/rdkfwupdater               0001015239
	@src/cedmInterface/codebigUtils.c

19 
	~"rdkv_cdl.h
"

20 
	~"rdkv_cdl_log_wøµî.h
"

21 
	~"codebigUtûs.h
"

23 
	~"rfcöãrÁ˚.h
"

24 
	~"rdk_fwdl_utûs.h
"

25 
	~"devi˚_≠i.h
"

29 
	#URL_DELIMITER
 '?'

	)

55 
	$doCodeBigSignög
–
£rvî_ty≥
, c⁄° *
SignI≈ut
, *
signuæ
, 
size_t
 
signuæsize
, *
outhhódî
, size_à
outHódîSize
 )

58 
	}
}

	@src/cedmInterface/codebigUtils.h

19 #i‚de‡ 
_CODEBIG_DL_H_


20 
	#_CODEBIG_DL_H_


	)

22 
	#MAX_DIR_LEN
 256

	)

23 
	#MAX_HEADER_LEN
 512

	)

24 
	#MAX_FMT_LEN
 32

	)

26 
	#INVALID_SERVICE
 0

	)

27 
	#SSR_SERVICE
 1

	)

28 
	#XCONF_SERVICE
 2

	)

29 
	#CIXCONF_SERVICE
 4

	)

30 
	#DAC15_SERVICE
 14

	)

32 
doCodeBigSignög
(
£rvî_ty≥
, c⁄° * 
SignI≈ut
, *
signuæ
, 
size_t
 
signuæsize
, *
outhhódî
, size_à
outHódîSize
);

	@src/cedmInterface/mtlsUtils.c

19 
	~"mésUtûs.h
"

20 
	~"devi˚utûs.h
"

21 #ifde‡
LIBRDKCONFIG_BUILD


22 
	~"rdkc⁄fig.h
"

25 #ifde‡
LIBRDKCERTSELECTOR


30 
MésAuthSètus
 
	$gëMés˚π
(
MésAuth_t
 *
£c
, 
rdk˚π£À˘‹_h
* 
±hisCîtSñ
) {

39  
MTLS_CERT_FETCH_SUCCESS
;

40 
	}
}

46 
	$gëMés˚π
(
MésAuth_t
 *
£c
) {

56  
MTLS_FAILURE
;

57 
	}
}

	@src/cedmInterface/mtlsUtils.h

19 #i‚de‡
VIDEO_CORE_MTLSUTILS_H_


20 
	#VIDEO_CORE_MTLSUTILS_H_


	)

22 
	~<°dio.h
>

23 
	~<°dlib.h
>

24 
	~<°rög.h
>

26 
	~"devi˚_°©us_hñ≥r.h
"

27 
	~"rdkv_cdl_log_wøµî.h
"

28 #i‚de‡
GTEST_ENABLE


29 
	~"sy°em_utûs.h
"

30 
	~"uæHñ≥r.h
"

33 #ifde‡
LIBRDKCERTSELECTOR


34 
	~"rdk˚π£À˘‹.h
"

38 
	#RDKSSACLI
 "GëKey %s"

	)

39 
	#GETCONFIGFILE_STATERED
 "GëC⁄figFûe"

	)

40 
	#DAC15DEFAULT
 "URL"

	)

41 
	#CIXCONFDEFAULT
 "c⁄figuæ"

	)

42 
	#DEVXCONFDEFAULT
 "deÁu…uæ"

	)

43 
	#XCONFDEFAULT
 "xc⁄f"

	)

45 #ifde‡
LIBRDKCERTSELECTOR


47 
	#CURL_MTLS_LOCAL_CERTPROBLEM
 58

	)

50 
	mSTATE_RED_CERT_FETCH_FAILURE
 = -2,

51 
	mMTLS_CERT_FETCH_FAILURE
 = -1,

52 
	mMTLS_CERT_FETCH_SUCCESS
 = 0

53 } 
	tMésAuthSètus
;

55 
MésAuthSètus
 
gëMés˚π
(
MésAuth_t
 *
£c
, 
rdk˚π£À˘‹_h
* 
±hisCîtSñ
);

57 
	#MTLS_SUCCESS
 1

	)

58 
	#MTLS_FAILURE
 -1

	)

60 
gëMés˚π
(
MésAuth_t
 *
£c
);

	@src/chunk.c

19 
	~<sys/°©.h
>

21 
	~"ö˛ude/rdkv_cdl.h
"

22 
	~"rdkv_cdl_log_wøµî.h
"

23 
	~"mésUtûs.h
"

24 #i‚de‡
GTEST_ENABLE


25 
	~"dow∆ﬂdUtû.h
"

26 
	~"uæHñ≥r.h
"

29 #ifde‡
GTEST_ENABLE


30 
	#CURLE_OK
 0

	)

33 *
cuæ
;

34 
f‹˚_exô
;

39 
size_t
 
	$gëC⁄ã¡Lígth
(c⁄° *
fûe
)

41 
size_t
 
˙t_Àn
 = 0;

42 
tbuff
[64] = {0};

43 *
tmp
 = 
NULL
;

44 
FILE
 *
Â
 = 
NULL
;

46 
Â
 = 
	`f›í
(
fûe
,"r");

47 i‡(
Â
 =
NULL
) {

48 
	`SWLOG_ERROR
( "Inside getContentLength() unableÅo open file\n");

49  
˙t_Àn
;

51 (
	`fgës
(
tbuff
, —buff)-1, 
Â
Ë!
NULL
)) {

52 
	`SWLOG_INFO
("%s\n", 
tbuff
);

53 i‡(
	`°r°r
(
tbuff
, "Content-Length: ")) {

54 
	`SWLOG_INFO
("C⁄ã¡_Ànghà°rög=%s\n", 
tbuff
);

55 
tmp
 = 
	`°rchr
(
tbuff
, ':');

56 i‡(
tmp
 !
NULL
) {

57 
˙t_Àn
 = 
	`©oi
(
tmp
 + 2);

61 
	`mem£t
(
tbuff
,'\0', (tbuff));

63 
	`SWLOG_INFO
("C⁄ã¡_Ànghà°rög=%u\n", 
˙t_Àn
);

66 
	`f˛o£
(
Â
);

67  
˙t_Àn
;

68 
	}
}

79 
	$chunkDow∆ﬂd
(
FûeDw∆_t
 *
pfûe_dw∆
, 
MésAuth_t
 *
£c
, 
•ìd_limô
, *
hâpcode
)

81 
ªt
 = -1;

82 
cuæ_ªt_code
 = -1;

83 
cuæ_code_hódî_ªq
 = -1;

84 
size_t
 
c⁄ã¡_Àn
 = 0;

85 
ønge
[16] = {0};

86 
fûe_size
 = 0;

87 
hódîfûe
[136];

89 i‡(
pfûe_dw∆
 =
NULL
 || 
hâpcode
 == NULL) {

90  
ªt
;

92 
	`¢¥ötf
(
hódîfûe
, (hódîfûe), "%s.hódî", 
pfûe_dw∆
->
∑th«me
);

93 
c⁄ã¡_Àn
 = 
	`gëC⁄ã¡Lígth
(
hódîfûe
);

94 
	`SWLOG_INFO
("c⁄ã¡_À¿%d fótched from hódîfûe=%s\n", 
c⁄ã¡_Àn
, 
hódîfûe
);

95 
	`t2Cou¡NŸify
("SYST_INFO_FetchFWCTN", 1);

96 i‡(((
	`fûePª£¡Check
(
pfûe_dw∆
->
∑th«me
)Ë=0Ë&& (
c⁄ã¡_Àn
 > 0)) {

97 
fûe_size
 = 
	`gëFûeSize
(
pfûe_dw∆
->
∑th«me
);

99 i‡(
fûe_size
 =
c⁄ã¡_Àn
) {

100 
	`SWLOG_INFO
("chunkDow∆ﬂd(ËExi°ög fûe_size=%dánd c⁄ã¡_Àn=%dáª same\n", 
fûe_size
, 
c⁄ã¡_Àn
);

101 
	`t2Cou¡NŸify
("SYST_INFO_SAME_FWCTN", 1);

102 *
hâpcode
 = 200;

103 
cuæ_ªt_code
 = 
CURLE_OK
;

104  
cuæ_ªt_code
;

105 } i‡(
fûe_size
 != -1) {

106 
	`¢¥ötf
(
ønge
,‘™ge), "%d-", 
fûe_size
);

107 
	`SWLOG_INFO
("chunkDow∆ﬂd(Ëfûêsize=%dándÑ™ge=%s\n", 
fûe_size
, 
ønge
);

109 
	`SWLOG_ERROR
–"chunkDow∆ﬂd(Ëîr‹ gëFûeSize=%s\n", 
pfûe_dw∆
->
∑th«me
);

113 
	`SWLOG_ERROR
–"chunkDow∆ﬂd(ËEº‹Åÿ¥o˚ed f‹ chunk dow∆ﬂd duêtÿbñowÑós⁄.\nC⁄ã¡ÜígthÇŸÖª£¡=%d o∏P¨tü»imagêfûênŸÖª£¡.\n", 
c⁄ã¡_Àn
);

114 
	`t2Cou¡NŸify
("SYST_ERR_FWCTNFetch", 1);

115  
cuæ_code_hódî_ªq
;

117 i‡(
hâpcode
 !
NULL
) {

118 *
hâpcode
 = 0;

120 
	`£tDw∆Sèã
(
RDKV_FWDNLD_DOWNLOAD_INIT
);

121 
cuæ
 = 
	`doCuæInô
();

122 
	`£tDw∆Sèã
(
RDKV_FWDNLD_DOWNLOAD_INPROGRESS
);

123 i‡(
cuæ
 !
NULL
) {

124 
cuæ_ªt_code
 = 
	`doHâpFûeDow∆ﬂd
(
cuæ
, 
pfûe_dw∆
, 
£c
, 
•ìd_limô
, 
ønge
, 
hâpcode
);

126 
	`SWLOG_ERROR
( "chunkDownload()Érror in doCurlInit\n");

127  
cuæ_ªt_code
;

129 
	`£tDw∆Sèã
(
RDKV_FWDNLD_DOWNLOAD_EXIT
);

130 i‡(
cuæ
 !
NULL
) {

131 
	`doSt›Dow∆ﬂd
(
cuæ
);

135 i‡(
f‹˚_exô
 =1 && (
cuæ_ªt_code
 == 23)) {

136 
	`unöôülize
(
INITIAL_VALIDATION_SUCCESS
);

137 
	`exô
(1);

139 
	`SWLOG_INFO
("chunkDow∆ﬂd(ËcuæÑë sètus=%u\n", 
cuæ_ªt_code
);

140 i‡(
cuæ_ªt_code
 == 33 || curl_ret_code == 36) {

141 
	`SWLOG_ERROR
–"chunkDow∆ﬂd(ËcuæÑëu¿33/36 Sÿgoög f‹ fuŒ Dow∆ﬂd:%u\n", 
cuæ_ªt_code
);

142 i‡((
	`fûePª£¡Check
(
pfûe_dw∆
->
∑th«me
)) == 0) {

143 
	`u∆ök
(
pfûe_dw∆
->
∑th«me
);

144 
	`u∆ök
(
hódîfûe
);

145 
	`£tDw∆Sèã
(
RDKV_FWDNLD_DOWNLOAD_INIT
);

146 
cuæ
 = 
	`doCuæInô
();

147 
	`£tDw∆Sèã
(
RDKV_FWDNLD_DOWNLOAD_INPROGRESS
);

149 i‡(
cuæ
 !
NULL
) {

150 
cuæ_ªt_code
 = 
	`doHâpFûeDow∆ﬂd
(
cuæ
, 
pfûe_dw∆
, 
£c
, 
•ìd_limô
, 
NULL
, 
hâpcode
);

152 
	`SWLOG_ERROR
( "chunkDownload()Érror in doCurlInitáfter curlÑeturn 33 or 36\n");

153  
cuæ_ªt_code
;

155 
	`£tDw∆Sèã
(
RDKV_FWDNLD_DOWNLOAD_EXIT
);

156 i‡(
cuæ
 !
NULL
) {

157 
	`doSt›Dow∆ﬂd
(
cuæ
);

161 i‡(
f‹˚_exô
 =1 && (
cuæ_ªt_code
 == 23)) {

162 
	`unöôülize
(
INITIAL_VALIDATION_SUCCESS
);

163 
	`exô
(1);

166 } i‡((
cuæ_ªt_code
 =0Ë&& ((
	`fûePª£¡Check
(
pfûe_dw∆
->
∑th«me
)) == 0)) {

167 
fûe_size
 = 0;

168 
fûe_size
 = 
	`gëFûeSize
(
pfûe_dw∆
->
∑th«me
);

169 
	`SWLOG_INFO
("chunkDow∆ﬂd(Ëcuæ sètu†suc˚ss=%u, fûesize=%d, c⁄ã¡_Àn=%d\n", 
cuæ_ªt_code
, 
fûe_size
, 
c⁄ã¡_Àn
);

170 i‡(
fûe_size
 =
c⁄ã¡_Àn
) {

171 
	`SWLOG_INFO
("chunkDownload() All file data Downloaded\n");

172 
	`£tDw∆Sèã
(
RDKV_FWDNLD_DOWNLOAD_COMPLETE
);

174 
	`SWLOG_ERROR
( "chunkDownload() Downloaded File Sizeánd contentÜength fetch from headeráreÇot same. So Go For Full Download\n");

175 
	`t2Cou¡NŸify
("SYST_ERR_DiffFWCTN_FLdnld", 1);

176 
	`SWLOG_ERROR
–"chunkDow∆ﬂd(ËFûêSize=%dánd c⁄ã¡Üí=%d\n", 
fûe_size
, 
c⁄ã¡_Àn
);

177 
	`£tDw∆Sèã
(
RDKV_FWDNLD_DOWNLOAD_INIT
);

178 
cuæ
 = 
	`doCuæInô
();

179 
	`£tDw∆Sèã
(
RDKV_FWDNLD_DOWNLOAD_INPROGRESS
);

181 i‡(
cuæ
 !
NULL
) {

182 
cuæ_ªt_code
 = 
	`doHâpFûeDow∆ﬂd
(
cuæ
, 
pfûe_dw∆
, 
£c
, 
•ìd_limô
, 
NULL
, 
hâpcode
);

184 
	`SWLOG_ERROR
( "chunkDownload()Érror in doCurlInitáfter contentÜengthÇot match\n");

187 
	`£tDw∆Sèã
(
RDKV_FWDNLD_DOWNLOAD_EXIT
);

188 i‡(
cuæ
 !
NULL
) {

189 
	`doSt›Dow∆ﬂd
(
cuæ
);

191 i‡(
f‹˚_exô
 =1 && (
cuæ_ªt_code
 == 23)) {

192 
	`unöôülize
(
INITIAL_VALIDATION_SUCCESS
);

193 
	`exô
(1);

197 
	`SWLOG_ERROR
–"chunkDow∆ﬂd(Ëcuæ sètu†Áû=%u\n", 
cuæ_ªt_code
);

198 
	`£tDw∆Sèã
(
RDKV_FWDNLD_DOWNLOAD_FAILED
);

201 if((
	`fûePª£¡Check
(
CURL_PROGRESS_FILE
)) == 0) {

202 
	`SWLOG_INFO
("%†: Cuæ Progªs†d©®F‹ Chunk Dow∆ﬂd...\n", 
__FUNCTION__
);

203 
	`logFûeD©a
(
CURL_PROGRESS_FILE
);

204 
	`u∆ök
(
CURL_PROGRESS_FILE
);

206  
cuæ_ªt_code
;

207 
	}
}

	@src/device_status_helper.c

19 
	~"devi˚_°©us_hñ≥r.h
"

20 
	~"rdkv_cdl.h
"

21 
	~"rdkv_cdl_log_wøµî.h
"

22 #i‚de‡
GTEST_ENABLE


23 
	~"rdk_fwdl_utûs.h
"

24 
	~"js⁄_∑r£.h
"

26 
	~"ürmI¡îÁ˚.h
"

27 
	~"rfcöãrÁ˚.h
"

28 
	~"dow∆ﬂd_°©us_hñ≥r.h
"

29 
	~"js⁄_¥o˚ss.h
"

30 
	~"devi˚_≠i.h
"

31 #i‚de‡
GTEST_ENABLE


32 
	~"comm⁄_devi˚_≠i.h
"

35 * 
°rˇ£°r
(c⁄° * 
s1
, c⁄° * 
s2
);

36 
Rfc_t
 
rfc_li°
;

43 
boﬁ
 
	$CuºítRu¬ögIn°
(c⁄° *
fûe
)

45 
boﬁ
 
°©us
 = 
Ál£
;

46 
FILE
 *
Â
 = 
NULL
;

47 
buf
[64] = {0};

48 *
tmp
 = 
NULL
;

49 
¥ocfûe
[78];

50 *
¨g
 = 
NULL
;

51 
size_t
 
size
 = 0;

53 i‡(
fûe
 !
NULL
) {

54 
Â
 = 
	`f›í
(
fûe
, "r");

55 i‡(
Â
 !
NULL
) {

56 
	`fgës
(
buf
, (buf), 
Â
);

57 
tmp
 = 
	`°rchr
(
buf
, '\n');

58 i‡(
tmp
 !
NULL
) {

59 *
tmp
 = '\0';

61 
	`f˛o£
(
Â
);

62 
Â
 = 
NULL
;

63 #i‚de‡
GTEST_ENABLE


64 
	`¢¥ötf
(
¥ocfûe
, ’rocfûe), "/¥oc/%s/cmdlöe", 
buf
);

66 
	`¢¥ötf
(
¥ocfûe
, ’rocfûe), "/tmp/cmdlöe.txt", 
buf
);

68 
	`SWLOG_INFO
("¥ocfûe=%s\n", 
¥ocfûe
);

70 
Â
 = 
	`f›í
(
¥ocfûe
, "r");

71 i‡(
Â
 !
NULL
) {

73 
	`gëdñim
(&
¨g
, &
size
, 0,
Â
) != -1){

74 i‡(
¨g
 !
NULL
) {

75 
	`SWLOG_INFO
("¥o¯íåyÖro˚s†«me:%s\n",
¨g
);

77 i‡((
	`°r°r
(
¨g
, "rdkvfwupgrader")) || (strstr(arg,"deviceInitiatedFWDnld"))) {

78 
	`SWLOG_INFO
("procÉntry cmdlineándÖrocessÇame matched.\nDevice initiated CDL is inÖrogress..\n");

79 
	`SWLOG_INFO
("Exiting withoutÅriggering device initiated firmware download.\n");

80 
	`t2Cou¡NŸify
("SYST_INFO_FWUpgrade_Exit", 1);

81 
°©us
 = 
åue
;

87 i‡(
¨g
 !
NULL
) {

88 
	`‰ì
(
¨g
);

90 
	`f˛o£
(
Â
);

92 
	`SWLOG_ERROR
("CuºítRu¬ögIn°():U«bÀÅÿ›íÅhêfûe:%s\n", 
¥ocfûe
);

95 
	`SWLOG_ERROR
("CuºítRu¬ögIn°():U«bÀÅÿ›íÅhêfûe:%s\n", 
fûe
);

98 
	`SWLOG_ERROR
("CurrentRunningInst(): FunctionÖarameter is NULL\n");

100  
°©us
;

101 
	}
}

106 
	$waôF‹Nç
()

108 
modñ
[16] = {0};

109 
ªt
 = -1;

110 
ªt
 = 
	`gëDevi˚Pr›îtyD©a
("MODEL_NUM", 
modñ
, (model));

111 i‡(
ªt
 =
UTILS_SUCCESS
) {

112 
	`SWLOG_INFO
("modñ = %s\n", 
modñ
);

114 i‡(0 !(
	`°∫cmp
(
modñ
, "RPI", 3))) {

115 0 !
	`fûePª£¡Check
("/tmp/stt_received")) {

116 
	`SWLOG_INFO
("Waiting for STT\n");

117 
	`¶ìp
(2);

119 
	`SWLOG_INFO
("Received STT flag\n");

122 
	`SWLOG_ERROR
("%s: gëDevi˚Pr›îtyD©a(Ëf‹ MODEL faû\n", 
__FUNCTION__
);

124 
	}
}

129 
boﬁ
 
	$isDnsResﬁve
(c⁄° *
dns_fûe_«me
)

131 
boﬁ
 
dns_°©us
 = 
Ál£
;

132 
boﬁ
 
°rög_check
 = 
Ál£
;

133 
FILE
 *
Â
 = 
NULL
;

134 
tbuff
[80] = {0};

135 *
tmp
;

136 i‡(
dns_fûe_«me
 =
NULL
) {

137 
	`SWLOG_ERROR
("isDnsResolve():Öarameter is NULL\n");

138  
dns_°©us
;

140 
Â
 = 
	`f›í
(
dns_fûe_«me
 , "r");

141 i‡(
Â
 !
NULL
) {

142 
NULL
 !(
	`fgës
(
tbuff
, —buff), 
Â
))) {

143 i‡(
NULL
 !(
	`°r°r
(
tbuff
, "nameserver"))) {

144 
°rög_check
 = 
åue
;

148 i‡(
°rög_check
 =
åue
) {

149 
tmp
 = 
	`°r°r
(
tbuff
, "nameserver");

150 
	`SWLOG_INFO
("dn†ªsﬁvêd©a=%s\n", 
tbuff
);

151 i‡(
tmp
 !
NULL
) {

152 
tmp
 =Åmp + 10;

153 i‡(*
tmp
 != '\0' && *tmp != '\n') {

154 
	`SWLOG_INFO
("dnsÇameserverÖresent.\n");

155 
dns_°©us
 = 
åue
;

159 
	`f˛o£
(
Â
);

161 
	`SWLOG_INFO
("dn†ªsﬁvêfûe:%†nŸÖª£¡\n", 
dns_fûe_«me
);

163  
dns_°©us
;

164 
	}
}

171 
boﬁ
 
	$CheckIProuãC⁄√˘ivôy
(c⁄° *
fûe_«me
)

173 
boﬁ
 
ù_°©us
 = 
Ál£
;

174 
boﬁ
 
°rög_check
 = 
Ál£
;

175 
FILE
 *
Â
 = 
NULL
;

176 
tbuff
[80] = {0};

177 *
tmp
;

178 
IpRouãC¡
 = 5;

179 i‡(
fûe_«me
 =
NULL
) {

180 
	`SWLOG_ERROR
("parameter is NULL\n");

181  
ù_°©us
;

183 
	`SWLOG_INFO
("CheckIPRouã Waôög f‹ Rouã C⁄fig %†fûe\n", 
IP_ROUTE_FLAG
);

184 
IpRouãC¡
--) {

185 i‡(0 =(
	`fûePª£¡Check
(
IP_ROUTE_FLAG
))) {

188 
	`¶ìp
(15);

190 i‡(
IpRouãC¡
 =0 && (0 =(
	`fûePª£¡Check
(
IP_ROUTE_FLAG
)))) {

191 
	`SWLOG_INFO
("%s:Ñouã fœg=%†nŸÖª£¡\n", 
__FUNCTION__
, 
IP_ROUTE_FLAG
);

192  
ù_°©us
;

194 
	`SWLOG_INFO
("CheckIPRoute Received Route Config file\n");

195 
Â
 = 
	`f›í
(
fûe_«me
 , "r");

196 i‡(
Â
 !
NULL
) {

197 
NULL
 !(
	`fgës
(
tbuff
, —buff), 
Â
))) {

198 i‡(
NULL
 !(
	`°r°r
(
tbuff
, "IPV"))) {

199 
°rög_check
 = 
åue
;

203 i‡(
°rög_check
 =
åue
) {

204 
tmp
 = 
	`°r°r
(
tbuff
, "IPV");

205 
	`SWLOG_INFO
("ùáddªss=%s\n", 
tbuff
);

206 i‡(
tmp
 !
NULL
 && (NULL !
	`°r°r
(tmp, "IPV4"))) {

213 
	`SWLOG_INFO
("deÁu…Ñouã∏Lök Loˇ»IPV4áddªs†¥e£¡=%s\n", 
tmp
);

214 }i‡(
tmp
 !
NULL
 && (NULL !
	`°r°r
(tmp, "IPV6"))) {

215 
	`SWLOG_INFO
("deÁu…Ñouã∏Lök Loˇ»IPV6áddªs†¥e£¡=%s\n", 
tmp
);

217 
	`SWLOG_ERROR
("IPáddressÅype doesÇot found\n");

220 
	`SWLOG_ERROR
("Fûê%†d€†nŸ havêIPáddªs†öÖr›î f‹m©\n", 
fûe_«me
);

222 
	`f˛o£
(
Â
);

224 
	`SWLOG_INFO
("ùÑouã fûe:%†nŸÖª£¡\n", 
fûe_«me
);

226 i‡–
åue
 =
	`isC⁄√˘edToI¡î√t
()) {

227 
	`SWLOG_INFO
("Device is online\n");

228 
ù_°©us
 = 
åue
;

230 
	`SWLOG_INFO
("Device isÇot online\n");

231 
ù_°©us
 = 
Ál£
;

233  
ù_°©us
;

234 
	}
}

239 
boﬁ
 
	$upd©eOPTOUTFûe
(c⁄° *
›tout_fûe_«me
)

241 
boﬁ
 
›t_°©us
 = 
Ál£
;

242 
boﬁ
 
íf‹˚_›tout_£t
 = 
Ál£
;

243 
FILE
 *
Â
 = 
NULL
;

244 
FILE
 *
Â_wrôe
 = 
NULL
;

245 
tbuff
[80] = {0};

246 *
upd©e_d©a
 = "softwareoptout=ENFORCE_OPTOUT\n";

247 
ªt
 = -1;

248 i‡(
›tout_fûe_«me
 =
NULL
) {

249 
	`SWLOG_ERROR
("%s:Ö¨amëî i†NULL\n", 
__FUNCTION__
);

250  
›t_°©us
;

252 
Â_wrôe
 = 
	`f›í
(
MAINTENANCE_MGR_RECORD_UPDATE_FILE
, "w");

253 i‡(
Â_wrôe
 =
NULL
) {

254 
	`SWLOG_ERROR
("%s: U«bÀÅÿ¸óã fûe:%s\n", 
__FUNCTION__
, 
MAINTENANCE_MGR_RECORD_UPDATE_FILE
);

255  
›t_°©us
;

257 
Â
 = 
	`f›í
(
›tout_fûe_«me
 , "r");

258 i‡(
Â
 !
NULL
) {

259 
NULL
 !(
	`fgës
(
tbuff
, —buff), 
Â
))) {

260 i‡((
NULL
 !(
	`°r°r
(
tbuff
, "softwareoptout"))) && (NULL != (strstr(tbuff, "BYPASS_OPTOUT")))) {

261 
	`SWLOG_INFO
("›touà£àto:%s\n", 
upd©e_d©a
);

262 
	`Âuts
(
upd©e_d©a
, 
Â_wrôe
);

263 
íf‹˚_›tout_£t
 = 
åue
;

265 
	`Âuts
(
tbuff
, 
Â_wrôe
);

268 
	`f˛o£
(
Â
);

269 
	`f˛o£
(
Â_wrôe
);

270 i‡(
íf‹˚_›tout_£t
 =
åue
) {

272 
ªt
 = 
	`ª«me
(
MAINTENANCE_MGR_RECORD_UPDATE_FILE
, 
›tout_fûe_«me
);

273 i‡(
ªt
 == 0) {

274 
	`SWLOG_INFO
("ª«mê›touàfûêtÿ%s\n", 
›tout_fûe_«me
);

275 
›t_°©us
 = 
åue
;

277 
	`SWLOG_ERROR
("ÁûÅÿª«mê›touàfûêtÿ%s:Éº‹=%d\n", 
›tout_fûe_«me
, 
ªt
);

281 
	`SWLOG_ERROR
("›touàfûe:%†nŸÖª£¡\n", 
›tout_fûe_«me
);

282 
	`f˛o£
(
Â_wrôe
);

284 
	`u∆ök
(
MAINTENANCE_MGR_RECORD_UPDATE_FILE
);

285  
›t_°©us
;

286 
	}
}

291 
boﬁ
 
	$checkCodebigAc˚ss
()

293 
ªt
 = -1;

294 
boﬁ
 
codebigE«bÀ
 = 
Ál£
;

295 
ªt
 = 
	`v_£cuª_sy°em
("GetServiceUrl 2Åemp");

296 
	`SWLOG_INFO
("Exô codêf‹ codebigcheck:%d\n", 
ªt
);

297 i‡(
ªt
 == 0) {

298 
	`SWLOG_INFO
("CodebigAc˚s†Pª£¡:%d\n", 
ªt
);

299 
codebigE«bÀ
 = 
åue
;

301 
	`SWLOG_INFO
("CodebigAc˚s†NŸ Pª£¡:%d\n", 
ªt
);

303  
codebigE«bÀ
;

304 
	}
}

308 
	$isSèãRedSuµ‹ãd
() {

309 
ªt
 = -1;

310 
ªt
 = 
	`fûePª£¡Check
(
STATE_RED_SPRT_FILE
);

311 if(
ªt
 == 0) {

312 
	`SWLOG_INFO
("isSèãRedSuµ‹ãd(): Ye†fûê¥e£¡:%s\n", 
STATE_RED_SPRT_FILE
);

315 
	`SWLOG_INFO
("isSèãRedSuµ‹ãd(): No:%s\n", 
STATE_RED_SPRT_FILE
);

317 
	}
}

323 
	$isInSèãRed
() {

324 
ªt
 = -1;

325 
°©eRed
 = 0;

326 
ªt
 = 
	`isSèãRedSuµ‹ãd
();

327 if(
ªt
 == 0) {

328 
	`SWLOG_INFO
("isInSèãRed(): Nÿªt:%d\n", 
°©eRed
);

329  
°©eRed
;

331 
ªt
 = 
	`fûePª£¡Check
(
STATEREDFLAG
);

332 if(
ªt
 == 0) {

333 
	`SWLOG_INFO
("isInSèãRed(): Ye†FœgÖr£¡:%s. Devi˚ i†ö sèãªd\n", 
STATEREDFLAG
);

334 
°©eRed
 = 1;

336 
	`SWLOG_INFO
("isInSèãRed(): NÿFœg NŸÖr£¡:%s. Devi˚ i†nŸ i¿°©îed\n", 
STATEREDFLAG
);

338  
°©eRed
;

339 
	}
}

341 
	$un£tSèãRed
()

343 
ªt
 = -1;

344 
ªt
 = 
	`fûePª£¡Check
(
STATEREDFLAG
);

345 i‡(
ªt
 == 0) {

346 
	`SWLOG_INFO
("RED:unsetStateRed: Exiting State Red\n");

347 
	`u∆ök
(
STATEREDFLAG
);

349 
	`SWLOG_INFO
("RED:unsetStateRed: Not in State Red\n");

351 
	}
}

357 
	$checkAndE¡îSèãRed
(
cuæªt
, c⁄° *
dißbÀSètsUpd©e
) {

358 
ªt
 = -1;

359 
FILE
 *
Â
 = 
NULL
;

360 
FWDow∆ﬂdSètus
 
fwdls
;

361 
ªt
 = 
	`isSèãRedSuµ‹ãd
();

362 if(
ªt
 == 0) {

365 
ªt
 = 
	`isInSèãRed
();

366 if(
ªt
 == 1) {

367 
	`SWLOG_INFO
("RED checkAndEnterStateRed: device stateÑedÑecovery flagálready set\n");

368 
	`t2Cou¡NŸify
("SYST_INFO_RedstateSet", 1);

371 if((
cuæªt
 == 35) || (curlret == 51) || (curlret == 53) || (curlret == 54) || (curlret == 58) || (curlret == 59) || (curlret == 60)

372 || (
cuæªt
 == 64) || (curlret == 66) || (curlret == 77) || (curlret == 80) || (curlret == 82) || (curlret == 83) || (curlret == 90)

373 || (
cuæªt
 == 91)|| (curlret == 495)) {

374 
	`SWLOG_INFO
("RED checkAndE¡îSèãRed: Cuæ SSL/TLSÉº‹ %d. Së Sèã Red Recovîy Fœgánd Exô!!!", 
cuæªt
);

375 
	`t2Cou¡NŸify
("CDLrdkp‹èl_•lô", 
cuæªt
);

377 if(
	`ªmove
(
DIRECT_BLOCK_FILENAME
) != 0){

378 
	`≥º‹
("Error deleting DIRECT_BLOCK_FAILURE");

380 if(
	`ªmove
(
CB_BLOCK_FILENAME
) != 0){

381 
	`≥º‹
("Error deleting CB_BLOCK_FILENAME");

383 if(
	`ªmove
(
HTTP_CDL_FLAG
) != 0){

384 
	`≥º‹
("Error deleting HTTP_CDL_FLAG");

388 
	`¢¥ötf
(
fwdls
.
mëhod
, (fwdls.method), "Method|xconf\n");

389 
	`¢¥ötf
(
fwdls
.
¥Ÿo
, (fwdls.proto), "Proto|\n");

390 
	`¢¥ötf
(
fwdls
.
°©us
, (fwdls.status), "Status|Failure\n");

391 
	`¢¥ötf
(
fwdls
.
ªboŸ
, (fwdls.reboot), "Reboot|\n");

392 
	`¢¥ötf
(
fwdls
.
ÁûuªRós⁄
, (fwdls.failureReason), "FailureReason|TLS/SSL Error\n");

393 
	`¢¥ötf
(
fwdls
.
d∆dVî¢
, (fwdls.dnldVersn), "DnldVersn|\n");

394 
	`¢¥ötf
(
fwdls
.
d∆dfûe
, (fwdls.dnldfile), "DnldFile|\n");

395 
	`¢¥ötf
(
fwdls
.
d∆duæ
, (fwdls.dnldurl), "DnldURL|\n");

396 
fwdls
.
œ°run
[0] = 0;

398 
	`¢¥ötf
(
fwdls
.
FwUpd©eSèã
, (fwdls.FwUpdateState), "FwUpdateState|Failed\n");

399 
fwdls
.
DñayDow∆ﬂd
[0] = 0;

401 
	`upd©eFWDow∆ﬂdSètus
(&
fwdls
, 
dißbÀSètsUpd©e
);

403 
	`unöôülize
(
INITIAL_VALIDATION_SUCCESS
);

404 
Â
 = 
	`f›í
(
STATEREDFLAG
, "w");

405 if(
Â
 !
NULL
) {

406 
	`f˛o£
(
Â
);

408 
	`exô
(1);

411 if–(
	`fûePª£¡Check
–
RED_STATE_REBOOT
 ) =
RDK_API_SUCCESS
) ) {

412 
	`SWLOG_INFO
("%†: RED Recovîy com∂ëed\n", 
__FUNCTION__
);

413 
	`evítM™agî
(
RED_STATE_EVENT
, 
RED_RECOVERY_COMPLETED
);

414 
	`u∆ök
(
RED_STATE_REBOOT
);

417 
	}
}

425 
	$checkVideoSètus
(c⁄° *
devi˚_«me
) {

426 
ªt
 = -1;

427 
FILE
 *
Â
 = 
NULL
;

428 
fûe_«me
[64] = { 0 };

429 
°r_gªp
[16] = { 0 };

430 
tbuff
[80] = { 0 };

431 *
tmp
 = 
NULL
;

433 if(
devi˚_«me
 =
NULL
) {

434 
	`SWLOG_ERROR
("checkVideoStatus()Öarameter is NULL\n");

435  
ªt
;

439 if((0 =(
	`°∫cmp
(
devi˚_«me
, "LLAMA", 5))) || ((0 == (strncmp(device_name, "PLATCO", 6))))) {

440 
	`°∫˝y
(
fûe_«me
, "/sys/class/vdec/vdec_status", (file_name) - 1);

441 
fûe_«me
[(file_name) - 1] = '\0';

442 
	`°∫˝y
(
°r_gªp
, "frame width", (str_grep) - 1);

443 
°r_gªp
[(str_grep) - 1] = '\0';

445 
	`°∫˝y
(
fûe_«me
, "/proc/brcm/video_decoder", (file_name) - 1);

446 
fûe_«me
[(file_name) - 1] = '\0';

447 
	`°∫˝y
(
°r_gªp
, "pts", (str_grep) - 1);

448 
°r_gªp
[(str_grep) - 1] = '\0';

450 
	`SWLOG_INFO
("checkVideoSètus(Ëdevi˚Çame=%†™d checkög fûe=%s\n", 
devi˚_«me
, 
fûe_«me
);

451 
Â
 = 
	`f›í
(
fûe_«me
, "r");

452 if(
Â
 =
NULL
) {

453 
	`SWLOG_ERROR
("checkVideoSètus(Ëu«bÀÅÿ›í fûe=%s\n", 
fûe_«me
);

454  
ªt
;

456 (
	`fgës
(
tbuff
, —buffË- 1, 
Â
)Ë!
NULL
) {

457 
tmp
 = 
	`°r°r
(
tbuff
, 
°r_gªp
);

458 if(
tmp
 !
NULL
) {

459 
	`SWLOG_INFO
("checkVideoSètus(Ëvideÿ‰amêd©a=%s\n", 
tmp
);

460 
ªt
 = 1;

466 
	`f˛o£
(
Â
);

467  
ªt
;

468 
	}
}

477 
	$isThrŸéeE«bÀd
(c⁄° *
devi˚_«me
, c⁄° *
ªboŸ_immedüã_Êag
, 
≠p_mode
) {

478 
ªt
 = -1;

479 
video_∂y_°©us
 = -1;

480 i‡((
devi˚_«me
 =
NULL
Ë|| (
ªboŸ_immedüã_Êag
 == NULL)) {

481 
	`SWLOG_ERROR
("%s: P¨amëî i†NULL\n", 
__FUNCTION__
);

482  
ªt
;

484 
	`SWLOG_INFO
("isThrŸéeE«bÀd(): Devi˚Ty≥=%†ReboŸImmedüãFœg=%s\n", 
devi˚_«me
, 
ªboŸ_immedüã_Êag
);

485 if((
	`°rcmp
(
rfc_li°
.
rfc_thrŸée
, "true")) == 0) {

486 
video_∂y_°©us
 = 
	`checkVideoSètus
(
devi˚_«me
);

487 if(
video_∂y_°©us
 =1 || 
≠p_mode
 =
APP_BACKGROUND
) {

488 if(
	`°∫cmp
(
ªboŸ_immedüã_Êag
, "false", 5) == 0) {

489 
ªt
 = 1;

490 
	`SWLOG_INFO
("Videÿi†Såómög. Hí˚, C⁄töuög wôhÅhêThrŸéêMode. VideÿPœy Sètus=%d\n", 
video_∂y_°©us
);

492 
	`SWLOG_INFO
("Videÿi†Såómög, buà˛oudImmedüãReboŸFœg i†%s. C⁄töuög wôh U¡hrŸéêMode. VideÿPœy Sètus=%d\n", 
ªboŸ_immedüã_Êag
, 
video_∂y_°©us
);

495 
	`SWLOG_INFO
("Video isÇotÖlaying. Throttle mode isÇotÉnable\n");

498 
	`SWLOG_INFO
("ThrŸéêíabÀÑf¯i†%s\n", 
rfc_li°
.
rfc_thrŸée
);

500  
ªt
;

501 
	}
}

507 
	$isOCSPE«bÀ
()

509 
Êag_oc•°≠lög
 = 0;

510 
Êag_oc•
 = 0;

511 
ªt
 = -1;

512 
ªt
 = 
	`fûePª£¡Check
(
E«bÀOCSPSè∂ög
);

513 if(
ªt
 == 0) {

514 
Êag_oc•°≠lög
 = 1;

516 
ªt
 = 
	`fûePª£¡Check
(
E«bÀOCSP
);

517 if(
ªt
 == 0) {

518 
Êag_oc•
 = 1;

520 
	`SWLOG_INFO
("isOCSPE«bÀ(Ë: oc• sètus=%d\n", (
Êag_oc•°≠lög
 && 
Êag_oc•
));

521  (
Êag_oc•°≠lög
 && 
Êag_oc•
);

522 
	}
}

529 
boﬁ
 
	$isUpgødeInProgªss
()

531 
boﬁ
 
°©us
 = 
Ál£
;

532 i‡((
RDK_API_SUCCESS
 =
	`fûePª£¡Check
(
HTTP_CDL_FLAG
)Ë|| (RDK_API_SUCCESS =fûePª£¡Check(
SNMP_CDL_FLAG
)Ë|| (RDK_API_SUCCESS =fûePª£¡Check(
ECM_CDL_FLAG
))) {

533 
°©us
 = 
åue
;

535  
°©us
;

536 
	}
}

548 
	$gëFûeLa°ModifyTime
(*
fûe_«me
)

550 
°©
 
©å
;

551 
ªt
 = 0;

552 i‡(
fûe_«me
 =
NULL
) {

553 
	`SWLOG_ERROR
("%†: P¨amëî i†NULL\n", 
__FUNCTION__
);

554  
ªt
;

556 
	`mem£t
(&
©å
, '\0', (attr));

557 
ªt
 = 
	`°©
(
fûe_«me
, &
©å
);

558 i‡(
ªt
 != 0) {

559 
	`SWLOG_ERROR
("%s: Fûe: %†nŸÖª£¡: %d\n", 
__FUNCTION__
, 
fûe_«me
, 
ªt
);

562 
	`SWLOG_INFO
("%†: La° modÅime: %lu\n", 
__FUNCTION__
, 
©å
.
°_mtime
);

563  
©å
.
°_mtime
;

564 
	}
}

570 
time_t
 
	$gëCuºítSysTimeSec
()

572 
time_t
 
cuπime
 = 
	`time
(0);

573 i‡(
cuπime
 =((
time_t
) -1)) {

574 
	`SWLOG_INFO
("%†:Åimêªtu∫Éº‹\n", 
__FUNCTION__
);

577 
	`SWLOG_INFO
("%†: cuºíàsy°emÅime=%lu\n", 
__FUNCTION__
, 
cuπime
);

579  
cuπime
;

580 
	}
}

586 
	$isDw∆Block
(
ty≥
)

588 
ªt
 = -1;

589 
block_time
 = 0;

590 
fûe_«me
[128] = {0};

591 
cuºít_time
 = 0;

592 
œ°_mod_time
 = 0;

593 
modifiˇti⁄_time
 = 0;

594 
ªmtime
 = 0;

595 
block
 = 0;

597 i‡(
ty≥
 =
HTTP_SSR_DIRECT
 ||Åy≥ =
HTTP_XCONF_DIRECT
) {

598 
	`¢¥ötf
(
fûe_«me
, (fûe_«me), "%s", 
DIRECT_BLOCK_FILENAME
);

599 
block_time
 = 86400;

600 } i‡(
ty≥
 =
HTTP_SSR_CODEBIG
 ||Åy≥ =
HTTP_XCONF_CODEBIG
) {

601 
	`¢¥ötf
(
fûe_«me
, (fûe_«me), "%s", 
CB_BLOCK_FILENAME
);

602 
block_time
 = 1800;

604  
ªt
;

606 *
ªq_ty≥
 = ((
ty≥
 =
HTTP_SSR_DIRECT
 ||Åy≥ =
HTTP_XCONF_DIRECT
) ? "direct" : "codebig");

607 
	`SWLOG_INFO
(" %†: Checkög f‹ %s\n", 
__FUNCTION__
, 
ªq_ty≥
);

608 
œ°_mod_time
 = 
	`gëFûeLa°ModifyTime
(
fûe_«me
);

609 i‡(
œ°_mod_time
 != 0) {

610 
cuºít_time
 = 
	`gëCuºítSysTimeSec
();

611 
modifiˇti⁄_time
 = 
cuºít_time
 - 
œ°_mod_time
;

612 
	`SWLOG_INFO
("%†modtime=%u\n",
ªq_ty≥
, 
modifiˇti⁄_time
);

613 
ªmtime
 = (
block_time
/60Ë- (
modifiˇti⁄_time
/60);

614 
	`SWLOG_INFO
("%†ªmtime=%u\n",
ªq_ty≥
, 
ªmtime
);

615 i‡(
modifiˇti⁄_time
 <
block_time
) {

616 
	`SWLOG_INFO
("ImageUpgøde: La° %†Áûed blockög i†°û»vÆid f‹ %d mös,Öªvítög dúe˘\n", 
ªq_ty≥
, 
ªmtime
);

617 
block
 = 1;

619 
	`SWLOG_INFO
("ImageUpgøde: La° %†Áûed blockög ha†expúed,Ñemovög %s,áŒowög dúe˘\n", 
ªq_ty≥
, 
fûe_«me
);

620 
	`u∆ök
(
fûe_«me
);

623  
block
;

624 
	}
}

631 
boﬁ
 
	$isDñayFWDow∆ﬂdA˘ive
(
DñayDow∆ﬂdXc⁄f
, c⁄° *
maöt
, 
åiggî_ty≥
)

633 
dñay_£c
;

635 
dñay_£c
 = 
DñayDow∆ﬂdXc⁄f
 * 60;

636 
	`SWLOG_INFO
("%s: Devi˚ c⁄figuªd wôh dow∆ﬂd dñay o‡%d möuãs.\n", 
__FUNCTION__
, 
DñayDow∆ﬂdXc⁄f
);

637 if(
dñay_£c
 > 0 && 
åiggî_ty≥
 != 5) {

638 i‡((
maöt
 !
NULL
Ë&& (!
	`°∫cmp
(maint, "true", 4))) {

639 
	`SWLOG_INFO
("%s: SídögÉvíàtÿMaöã«n˚ Plugö wôh Eº‹ bef‹êexô\n", 
__FUNCTION__
);

641 
	`evítM™agî
("Maöã«n˚MGR" ,
MAINT_FWDOWNLOAD_ERROR
);

643 
	`¶ìp
(
dñay_£c
);

645  
åue
;

646 
	}
}

652 
boﬁ
 
	$isPDRIE«bÀ
()

654 
boﬁ
 
°©us
 = 
Ál£
;

655 *
dev_¥›_«me
 = "PDRI_ENABLED";

656 
ªt
 = -1;

657 
pdri_°©us
[64] = {0};

658 
ªt
 = 
	`gëDevi˚Pr›îtyD©a
(
dev_¥›_«me
, 
pdri_°©us
, (pdri_status));

659 i‡(
ªt
 =
UTILS_SUCCESS
) {

660 
	`SWLOG_INFO
("%s:Ödrò°©u†‰om devi˚.¥›îty fûe=%s\n", 
__FUNCTION__
, 
pdri_°©us
);

661 
°©us
 = 
åue
;

663 
	`SWLOG_INFO
("%s: P-DRI UpgødêUnsuµ‹ãd !!\n", 
__FUNCTION__
);

665  
°©us
;

666 
	}
}

668 
boﬁ
 
	$GëPDRIVîsi⁄
–*
pPdriVîsi⁄
, 
size_t
 
szBufSize
 )

670 *
tmp
 = 
NULL
;

671 
boﬁ
 
bRë
 = 
Ál£
;

673 if–
pPdriVîsi⁄
 !
NULL
 )

675 *
pPdriVîsi⁄
 = 0;

676 if–
	`isPDRIE«bÀ
(Ë=
åue
 )

678 
	`GëPDRIFûeName
–
pPdriVîsi⁄
, 
szBufSize
 );

680 
	`SWLOG_INFO
–"cuºíàpdròimagê%s\n", 
pPdriVîsi⁄
 );

681 
tmp
 = 
	`°r°r
–
pPdriVîsi⁄
, ".bin" );

682 if–
tmp
 !
NULL
 )

684 *
tmp
 = 0;

685 
	`SWLOG_INFO
–"A·î Removög .bö = %s\n", 
pPdriVîsi⁄
 );

687 
bRë
 = 
åue
;

690  
bRë
;

691 
	}
}

700 
boﬁ
 
	$checkPDRIUpgøde
(c⁄° *
dw∆_pdri_img
)

702 
boﬁ
 
°©us
 = 
Ál£
;

703 
cur_pdri_vîsi⁄
[64];

705 i‡(
dw∆_pdri_img
 =
NULL
)

707 
	`SWLOG_ERROR
("%s:Ö¨amëî i†NULL\n", 
__FUNCTION__
);

711 
°©us
 = 
	`GëPDRIVîsi⁄
–
cur_pdri_vîsi⁄
, (cur_pdri_version) );

712 if–
°©us
 =
åue
 )

714 
	`SWLOG_INFO
("cuºíàpdròimagê%†™dÑeque°ed imagê%s\n",
cur_pdri_vîsi⁄
, 
dw∆_pdri_img
);

715 i‡(
	`°rˇ£°r
(
dw∆_pdri_img
, 
cur_pdri_vîsi⁄
))

717 
	`SWLOG_INFO
("cuºíàpdròimagê%†™dÑeque°ed dw∆Ödròimagê%s\n", 
cur_pdri_vîsi⁄
, 
dw∆_pdri_img
);

718 
	`SWLOG_INFO
("PDRI version ofÅheáctive imageándÅhe imageÅo be upgradedáreÅhe same. No upgradeÑequired.\n");

719 
°©us
 = 
Ál£
;

723 
°©us
 = 
åue
;

728 
	`SWLOG_INFO
("PDRIÇot supported\n");

731  
°©us
;

732 
	}
}

734 
boﬁ
 
	$œ°Dw∆Img
(*
img_«me
, 
size_t
 
img_«me_size
)

736 
œ°_dw∆_img_«me
[64] = {0};

737 
boﬁ
 
°©us
 = 
Ál£
;

738 
tbuff
[64];

739 
ödex
 = 0;

740 
FILE
 *
Â
 = 
NULL
;

741 
tbuff
[0] = 0;

743 i‡(
img_«me_size
 > (
œ°_dw∆_img_«me
)) {

744 
	`SWLOG_INFO
("%s: I≈uàbuf„∏sizêi†gª©îÅh™ %d\n", 
__FUNCTION__
, (
œ°_dw∆_img_«me
));

745  
°©us
;

747 i‡(
œ°_dw∆_img_«me
[0] == 0) {

748 
Â
 = 
	`f›í
("/opt/cdl_flashed_file_name", "r");

749 i‡(
Â
 !
NULL
) {

750 
	`fgës
(
tbuff
, —buff), 
Â
);

751 
	`SWLOG_INFO
("œ°D∆dFûêtbuff: %s\n", 
tbuff
);

752 
ödex
 = 
	`°rc•n
(
tbuff
, "\n");

753 i‡(
ödex
 > 0 && (ödex < (
tbuff
))) {

754 
tbuff
[
ödex
] = '\0';

756 
	`¢¥ötf
(
œ°_dw∆_img_«me
, ÷a°_dw∆_img_«me), "%s", 
tbuff
);

757 
	`¢¥ötf
(
img_«me
, 
img_«me_size
, "%s", 
œ°_dw∆_img_«me
);

758 
	`SWLOG_INFO
("œ°D∆dFûe: %s\n", 
œ°_dw∆_img_«me
);

759 
	`SWLOG_INFO
("Imagê«mêªtu∫ÅÿˇŒî fun˘i⁄: %s\n", 
img_«me
);

760 
	`f˛o£
(
Â
);

761 
°©us
 = 
åue
;

764 
	`¢¥ötf
(
img_«me
, 
img_«me_size
, "%s", 
œ°_dw∆_img_«me
);

765 
	`SWLOG_INFO
("O±imizêœ°D∆dFûe: %s\n", 
img_«me
);

766 
°©us
 = 
åue
;

768  
°©us
;

769 
	}
}

771 
boﬁ
 
	$cuºítImg
(*
img_«me
, 
size_t
 
img_«me_size
)

773 
cur_img_«me
[64] = {0};

774 
boﬁ
 
°©us
 = 
Ál£
;

775 
tbuff
[64];

776 
ödex
 = 0;

777 
FILE
 *
Â
 = 
NULL
;

778 
tbuff
[0] = 0;

780 i‡(
img_«me_size
 > (
cur_img_«me
)) {

781 
	`SWLOG_INFO
("%s: I≈uàbuf„∏sizêi†gª©îÅh™ %d\n", 
__FUNCTION__
, (
cur_img_«me
));

782  
°©us
;

784 i‡(
cur_img_«me
[0] == 0) {

785 
Â
 = 
	`f›í
("/tmp/currently_running_image_name", "r");

786 i‡(
Â
 !
NULL
) {

787 
	`fgës
(
tbuff
, —buff), 
Â
);

788 
	`SWLOG_INFO
("cuºítImgÅbuff: %s\n", 
tbuff
);

789 
ödex
 = 
	`°rc•n
(
tbuff
, "\n");

790 i‡(
ödex
 > 0 && (ödex < (
tbuff
))) {

791 
tbuff
[
ödex
] = '\0';

793 
	`¢¥ötf
(
cur_img_«me
, (cur_img_«me), "%s", 
tbuff
);

794 
	`¢¥ötf
(
img_«me
, 
img_«me_size
, "%s", 
cur_img_«me
);

795 
	`SWLOG_INFO
("cuºítImg: %s\n", 
cur_img_«me
);

796 
	`SWLOG_INFO
("cuºítImg: %s\n", 
img_«me
);

797 
	`f˛o£
(
Â
);

798 
°©us
 = 
åue
;

801 
	`¢¥ötf
(
img_«me
, 
img_«me_size
, "%s", 
cur_img_«me
);

802 
	`SWLOG_INFO
("O±imizêcuºítImg: %s\n", 
img_«me
);

803 
°©us
 = 
åue
;

805  
°©us
;

806 
	}
}

808 
boﬁ
 
	$¥evFœshedFûe
(*
img_«me
, 
size_t
 
img_«me_size
)

810 
¥ev_img_«me
[64] = {0};

811 
boﬁ
 
°©us
 = 
Ál£
;

812 
tbuff
[64];

813 
ödex
 = 0;

814 
tbuff
[0] = 0;

816 i‡(
img_«me_size
 > (
¥ev_img_«me
)) {

817 
	`SWLOG_INFO
("%s: I≈uàbuf„∏sizêi†gª©îÅh™ %d\n", 
__FUNCTION__
, (
¥ev_img_«me
));

818  
°©us
;

820 i‡(
¥ev_img_«me
[0] == 0) {

821 
FILE
 *
Â
;

822 
Â
 = 
	`f›í
(
PREVIOUS_FLASHED_IMAGE
, "r");

823 i‡(
Â
 !
NULL
) {

824 
	`fgës
(
tbuff
, —buff), 
Â
);

825 
	`SWLOG_INFO
("¥evImgÅbuff: %s\n", 
tbuff
);

826 
ödex
 = 
	`°rc•n
(
tbuff
, "\n");

827 i‡(
ödex
 > 0 && (ödex < (
tbuff
))) {

828 
tbuff
[
ödex
] = '\0';

830 
	`¢¥ötf
(
¥ev_img_«me
, ’ªv_img_«me), "%s", 
tbuff
);

831 
	`¢¥ötf
(
img_«me
, 
img_«me_size
, "%s", 
¥ev_img_«me
);

832 
	`SWLOG_INFO
("¥evImg: %s\n", 
img_«me
);

833 
	`f˛o£
(
Â
);

834 
°©us
 = 
åue
;

837 
	`¢¥ötf
(
img_«me
, 
img_«me_size
, "%s", 
¥ev_img_«me
);

838 
	`SWLOG_INFO
("O±imizê¥evImg: %s\n", 
img_«me
);

839 
°©us
 = 
åue
;

841  
°©us
;

842 
	}
}

851 
boﬁ
 
	$checkF‹VÆidPCIUpgøde
(
åiggî_ty≥
, c⁄° *
myfwvîsi⁄
, c⁄° *
˛oudFWVîsi⁄
, c⁄° *
˛oudFWFûe
)

853 
boﬁ
 
pci_vÆid_°©us
 = 
Ál£
;

854 
boﬁ
 
œ°_dw∆_°©us
 = 
Ál£
;

855 
boﬁ
 
cuºít_img_°©us
 = 
Ál£
;

856 
œ°_dw∆_img
[64] = {0};

857 
cuºít_img
[64] = {0};

858 
FWDow∆ﬂdSètus
 
fwdls
;

860 i‡(
myfwvîsi⁄
 =
NULL
 || 
˛oudFWVîsi⁄
 =NULL || 
˛oudFWFûe
 == NULL) {

861 
	`SWLOG_INFO
("%s: P¨amëî i†NULL\n", 
__FUNCTION__
);

862  
Ál£
;

864 
	`SWLOG_INFO
("Xconf image/PDRI configuration Check\n");

865 i‡((
	`°r°r
(
˛oudFWFûe
, "_PDRI_")Ë!
NULL
) {

866 
	`SWLOG_INFO
("PDRI image is wrongly configuredás Cloud Firmware Value\n");

867  
pci_vÆid_°©us
;

869 
	`SWLOG_INFO
("Triggî Ty≥=%d\n", 
åiggî_ty≥
);

870 
œ°_dw∆_°©us
 = 
	`œ°Dw∆Img
(
œ°_dw∆_img
, (last_dwnl_img));

871 
cuºít_img_°©us
 = 
	`cuºítImg
(
cuºít_img
, (current_img));

872 
	`SWLOG_INFO
("œ°_dw∆_°©us=%ò™d cuºít_img_°©us=%i\n", 
œ°_dw∆_°©us
, 
cuºít_img_°©us
);

873 
	`SWLOG_INFO
("myfwvîsi⁄:%s\n", 
myfwvîsi⁄
);

874 
	`SWLOG_INFO
("˛oudFWVîsi⁄:%s\n", 
˛oudFWVîsi⁄
);

875 
	`SWLOG_INFO
("˛oudFWFûe:%s\n",
˛oudFWFûe
);

876 
	`t2VÆNŸify
("˛oudFWFûe_•lô", (*)
˛oudFWFûe
);

877 
	`SWLOG_INFO
("œ°dw∆fûe:%s\n", 
œ°_dw∆_img
);

878 
	`SWLOG_INFO
("cuºítImg:%s\n", 
cuºít_img
);

879 i‡(
åiggî_ty≥
 == 1 ||Årigger_type == 4) {

880 i‡((
Ál£
 =
cuºít_img_°©us
Ë|| (Ál£ =
œ°_dw∆_°©us
)) {

881 
	`SWLOG_INFO
("UnableÅo fetch currentÑunning image fileÇame orÜast download file\n");

882 
	`SWLOG_INFO
("Error identified with image file comparison !!! Proceeding with firmware version check.\n");

883 i‡(
	`°rˇ£cmp
(
myfwvîsi⁄
, 
˛oudFWVîsi⁄
)) {

884 
	`SWLOG_INFO
("Fúmw¨êvîsi⁄†¨êdif„ª¡ myFWVîsi⁄ : %†™d cloudFWVîsi⁄ : %s\n", 
myfwvîsi⁄
, 
˛oudFWVîsi⁄
);

885 
pci_vÆid_°©us
 = 
åue
;

888 i‡(
åue
 =
cuºít_img_°©us
) {

889 i‡(
	`°rˇ£cmp
(
cuºít_img
, 
˛oudFWFûe
)) {

890 
	`SWLOG_INFO
("pci file checkÅrue\n");

891 
pci_vÆid_°©us
 = 
åue
;

892  
pci_vÆid_°©us
;

896 i‡(
Ál£
 =
pci_vÆid_°©us
) {

897 i‡((
åue
 =
cuºít_img_°©us
Ë&& (
	`°rˇ£cmp
(
cuºít_img
, 
˛oudFWFûe
))) {

898 i‡((
åue
 =
œ°_dw∆_°©us
Ë&& (
	`°rˇ£cmp
(
œ°_dw∆_img
, 
˛oudFWFûe
))) {

899 
	`SWLOG_INFO
("pci File Check isÅrue\n");

900 
pci_vÆid_°©us
 = 
åue
;

902 
	`SWLOG_INFO
("FW version ofÅhe standby imageándÅhe imageÅo be upgradedáreÅhe same. No upgradeÑequired.\n");

903 
	`t2Cou¡NŸify
("SYST_INFO_SwdlSameImg_Stndby", 1);

905 
	`evítM™agî
(
FW_STATE_EVENT
, 
FW_STATE_NO_UPGRADE_REQUIRED
);

906 
	`upd©eUpgødeFœg
(2);

909 
	`SWLOG_INFO
("FW version ofÅheáctive imageándÅhe imageÅo be upgradedáreÅhe same. No upgradeÑequired.\n");

910 
	`t2Cou¡NŸify
("SYST_INFO_swdlSameImg", 1);

912 
	`evítM™agî
(
FW_STATE_EVENT
, 
FW_STATE_NO_UPGRADE_REQUIRED
);

913 
	`upd©eUpgødeFœg
(2);

916 i‡(
Ál£
 =
pci_vÆid_°©us
) {

917 
	`¢¥ötf
(
fwdls
.
mëhod
, (fwdls.method), "Method|xconf\n");

918 
	`¢¥ötf
(
fwdls
.
¥Ÿo
, (fwdls.proto), "Proto|http\n");

919 
	`¢¥ötf
(
fwdls
.
°©us
, (fwdls.status), "Status|No upgradeÇeeded\n");

920 
	`¢¥ötf
(
fwdls
.
ªboŸ
, (fwdls.reboot), "Reboot|\n");

921 
	`¢¥ötf
(
fwdls
.
ÁûuªRós⁄
, (fwdls.failureReason), "Failure|Versions Match\n");

922 
	`¢¥ötf
(
fwdls
.
d∆dVî¢
, (fwdls.d∆dVî¢), "D∆dVî¢|%s\n",
˛oudFWVîsi⁄
);

923 
	`¢¥ötf
(
fwdls
.
d∆dfûe
, (fwdls.d∆dfûe), "D∆dFûe|%s\n", 
˛oudFWFûe
);

924 
	`¢¥ötf
(
fwdls
.
d∆duæ
, (fwdls.dnldurl), "DnldURL|\n");

925 
	`¢¥ötf
(
fwdls
.
œ°run
, (fwdls.lastrun), "LastRun|\n");

926 
	`¢¥ötf
(
fwdls
.
FwUpd©eSèã
, (fwdls.FwUpdateState), "FwUpdateState|No upgradeÇeeded\n");

927 
	`¢¥ötf
(
fwdls
.
DñayDow∆ﬂd
, (fwdls.DelayDownload), "DelayDownload|\n");

928 
	`upd©eFWDow∆ﬂdSètus
(&
fwdls
, "no");

930  
pci_vÆid_°©us
;

931 
	}
}

	@src/deviceutils/device_api.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

22 
	~<˘y≥.h
>

23 
	~<°dboﬁ.h
>

24 
	~<time.h
>

26 #i‚de‡
GTEST_ENABLE


27 
	~"uæHñ≥r.h
"

28 
	~"rdk_fwdl_utûs.h
"

29 
	~"sy°em_utûs.h
"

32 
	~"rdkv_cdl.h
"

33 
	~"js⁄_∑r£.h
"

34 
	~"rdkv_cdl_log_wøµî.h
"

35 
	~"devi˚_≠i.h
"

36 
	~"devi˚utûs.h
"

37 
	~"devi˚_°©us_hñ≥r.h
"

38 
	~"rfcöãrÁ˚.h
"

40 
	#MAC_ADDRESS_LEN
 17

	)

53 
size_t
 
	$GëSîvîUæFûe
–*
pSîvUæ
, 
size_t
 
szBufSize
, *
pFûeName
 )

55 
FILE
 *
Â
;

56 *
pHâp
, *
pLb
;

57 
size_t
 
i
 = 0;

58 
buf
[256];

60 if–
pSîvUæ
 !
NULL
 && 
pFûeName
 != NULL )

62 *
pSîvUæ
 = 0;

63 if–(
Â
 = 
	`f›í
–
pFûeName
, "r" )Ë!
NULL
 )

65 
pHâp
 = 
NULL
;

66  (
pHâp
 =
NULL
Ë&& (
	`fgës
–
buf
, (buf), 
Â
 ) != NULL) )

68 if–(
pHâp
 = 
	`°r°r
–
buf
, "hâps://" )Ë!
NULL
 )

70 if–(
pLb
 = 
	`°rchr
–
buf
, ()'#' )Ë!
NULL
 )

72 if–
pLb
 <
pHâp
 )

74 
pHâp
 = 
NULL
;

79 *
pLb
 = 0;

82 
pLb
 = 
pHâp
 + 8;

83  *
pLb
 )

85 if–(!
	`iß um
–*
pLb
 ) && *pLb !'.' && *pLb !'/' && *pLb !'-' && *pLb !'_' && *pLb !':'Ë|| 
	`is•a˚
( *pLb ) )

87 *
pLb
 = 0;

90 ++
pLb
;

94 
	`f˛o£
–
Â
 );

95 if–
pHâp
 !
NULL
 )

97 
i
 = 
	`¢¥ötf
–
pSîvUæ
, 
szBufSize
, "%s", 
pHâp
 );

102 
	`SWLOG_INFO
–"GëSîvîUæ: %†ˇn'àbê›íed\n", 
pFûeName
 );

107 
	`SWLOG_ERROR
( "GetServerUrlFile: Error, inputárgument NULL\n" );

109  
i
;

110 
	}
}

276 
size_t
 
	$GëAddôi⁄ÆFwVîInfo
–*
pAddôi⁄ÆFwVîInfo
, 
size_t
 
szBufSize
 )

278 
size_t
 
Àn
 = 0;

280 if–
pAddôi⁄ÆFwVîInfo
 !
NULL
 )

282 
Àn
 = 
	`GëPDRIFûeName
–
pAddôi⁄ÆFwVîInfo
, 
szBufSize
 );

283 if–
Àn
 < 
szBufSize
 )

285 
Àn
 +
	`GëRemŸeInfo
–(
pAddôi⁄ÆFwVîInfo
 +Üí), (
szBufSize
 -Üen) );

290 
	`SWLOG_ERROR
( "GetAdditionalFwVerInfo: Error, inputárgument NULL\n" );

293  
Àn
;

294 
	}
}

305 
size_t
 
	$GëPDRIFûeName
–*
pPDRIFûíame
, 
size_t
 
szBufSize
 )

307 *
pTmp
;

308 
size_t
 
Àn
 = 0;

310 if–
pPDRIFûíame
 !
NULL
 )

312 
Àn
 = 
	`RunComm™d
–
eM‰Utû
, "--PDRIVîsi⁄", 
pPDRIFûíame
, 
szBufSize
 );

313 if–
Àn
 && ((
pTmp
 = 
	`°rˇ£°r
–
pPDRIFûíame
, "Áûed" )Ë=
NULL
) )

315 
	`SWLOG_INFO
–"GëPDRIFûeName: PDRI Vîsi⁄ = %s\n", 
pPDRIFûíame
 );

316 
	`t2VÆNŸify
("PDRI_Vîsi⁄_•lô", 
pPDRIFûíame
);

320 *
pPDRIFûíame
 = 0;

321 
Àn
 = 0;

322 
	`SWLOG_ERROR
( "GetPDRIFileName: PDRI filenameÑetrieving Failed ...\n" );

327 
	`SWLOG_ERROR
( "GetPDRIFileName: Error, inputárgument NULL\n" );

329  
Àn
;

330 
	}
}

343 
size_t
 
	$GëIn°ÆÀdBundÀs
(*
pBundÀs
, 
size_t
 
szBufSize
)

345 
JSON
 *
pJs⁄T›
;

346 
JSON
 *
pJs⁄
;

347 *
pJs⁄Så
;

348 
size_t
 
Àn
;

349 
size_t
 
szRu¬ögLí
 = 0;

350 
mëaD©aFûeLi°_°
 *
ö°ÆÀdBundÀLi°Node
 = 
NULL
, *
tmpNode
 = NULL;

352 i‡(
pBundÀs
 !
NULL
)

354 *
pBundÀs
 = 0;

355 
ö°ÆÀdBundÀLi°Node
 = 
	`gëIn°ÆÀdBundÀFûeLi°
();

357 
ö°ÆÀdBundÀLi°Node
 !
NULL
)

359 
	`SWLOG_INFO
("GëIn°ÆÀdBundÀs: cÆlög GëJs⁄ wôhárg = %s\n", 
ö°ÆÀdBundÀLi°Node
->
fûeName
);

360 
pJs⁄Så
 = 
	`GëJs⁄
(
ö°ÆÀdBundÀLi°Node
->
fûeName
);

361 i‡(
pJs⁄Så
 !
NULL
)

363 
	`SWLOG_INFO
("GëIn°ÆÀdBundÀs:ÖJs⁄Så = %s\n", 
pJs⁄Så
);

364 
pJs⁄T›
 = 
	`P¨£Js⁄Så
(
pJs⁄Så
);

365 
	`SWLOG_INFO
("GëIn°ÆÀdBundÀs: P¨£Js⁄SåÑëu∫ed =%s\n", 
pJs⁄Så
);

366 
pJs⁄
 = 
pJs⁄T›
;

367 i‡(
pJs⁄T›
 !
NULL
)

369 
pJs⁄
 !
NULL
)

371 
Àn
 = 
	`GëJs⁄VÆ
(
pJs⁄
, "«me", 
ö°ÆÀdBundÀLi°Node
->
fûeName
, (installedBundleListNode->fileName));

372 i‡(
Àn
)

374 i‡(
szRu¬ögLí
)

376 *(
pBundÀs
 + 
szRu¬ögLí
) = ',';

377 ++
szRu¬ögLí
;

379 
Àn
 = 
	`¢¥ötf
(
pBundÀs
 + 
szRu¬ögLí
, 
szBufSize
 - szRu¬ögLí, "%s:", 
ö°ÆÀdBundÀLi°Node
->
fûeName
);

380 
szRu¬ögLí
 +
Àn
;

381 
Àn
 = 
	`GëJs⁄VÆ
(
pJs⁄
, "vîsi⁄", 
ö°ÆÀdBundÀLi°Node
->
fûeName
, (installedBundleListNode->fileName));

382 
Àn
 = 
	`¢¥ötf
(
pBundÀs
 + 
szRu¬ögLí
, 
szBufSize
 - szRu¬ögLí, "%s", 
ö°ÆÀdBundÀLi°Node
->
fûeName
);

383 
	`SWLOG_INFO
("Upd©ed BundÀ†%s\n", 
pBundÀs
);

384 
szRu¬ögLí
 +
Àn
;

386 
pJs⁄
 =ÖJs⁄->
√xt
;

388 
	`FªeJs⁄
(
pJs⁄T›
);

390 
	`‰ì
(
pJs⁄Så
);

392 
tmpNode
 = 
ö°ÆÀdBundÀLi°Node
;

393 
ö°ÆÀdBundÀLi°Node
 = in°ÆÀdBundÀLi°Node->
√xt
;

394 
	`‰ì
(
tmpNode
);

396 
	`SWLOG_INFO
("GëIn°ÆÀdBundÀs:ÖBundÀ†%s\n", 
pBundÀs
);

397 
	`SWLOG_INFO
("GëIn°ÆÀdBundÀs: szRu¬ögLí = %zu\n", 
szRu¬ögLí
);

400  
szRu¬ögLí
;

401 
	}
}

564 
size_t
 
	$GëOsCœss
–*
pOsCœss
, 
size_t
 
szBufSize
 )

566 
size_t
 
i
 = 0;

567 
whﬂmi
[8];

568 
ªt
 = -1;

569 if–
pOsCœss
 !
NULL
 )

571 
whﬂmi
[0] = 0;

572 
ªt
 = 
	`gëDevi˚Pr›îtyD©a
("WHOAMI_SUPPORT", 
whﬂmi
, (whoami));

573 i‡(
ªt
 =
UTILS_SUCCESS
)

575 
	`SWLOG_INFO
("whﬂmòi†%s\n", 
whﬂmi
);

579 
	`SWLOG_ERROR
("%s: gëDevi˚Pr›îtyD©a(Ëf‹ whﬂmòÁû\n", 
__FUNCTION__
);

581 *
pOsCœss
 = 0;

582 i‡(0 =(
	`°∫cmp
(
whﬂmi
, "true", 4)))

584 
i
 = 
	`ªad_RFCPr›îty
–"OsCœss", 
RFC_OS_CLASS
, 
pOsCœss
, 
szBufSize
 );

585 if–
i
 =
READ_RFC_FAILURE
 )

587 
	`SWLOG_ERROR
–"GëOsCœss:Ñód_RFCPr›îty(ËÁûed Sètu†%d\n", 
i
 );

588 
i
 = 
	`¢¥ötf
–
pOsCœss
, 
szBufSize
, "Not Available" );

592 
i
 = 
	`°∫Àn
–
pOsCœss
, 
szBufSize
 );

597 
	`SWLOG_INFO
( "GetOsClass: whoami isÇotÉnable Status\n");

598 
i
 = 
	`¢¥ötf
–
pOsCœss
, 
szBufSize
, "Not Available" );

603 
	`SWLOG_ERROR
( "GetOsClass: Error, inputárgument NULL\n" );

605  
i
;

606 
	}
}

618 
size_t
 
	$GëSîülNum
–*
pSîülNum
, 
size_t
 
szBufSize
 )

620 
size_t
 
i
 = 0;

622 if–
pSîülNum
 !
NULL
 )

624 *
pSîülNum
 = 0;

625 
i
 = 
	`ªad_RFCPr›îty
–"SîülNumbî", 
RFC_SERIALNUM
, 
pSîülNum
, 
szBufSize
 );

626 if–
i
 =
READ_RFC_FAILURE
 )

628 
	`SWLOG_ERROR
–"GëSîülNum:Ñód_RFCPr›îty(ËÁûed Sètu†%d\n", 
i
 );

629 
i
 = 
	`¢¥ötf
–
pSîülNum
, 
szBufSize
, "Not Available" );

633 
i
 = 
	`°∫Àn
–
pSîülNum
, 
szBufSize
 );

638 
	`SWLOG_ERROR
( "GetSerialNum: Error, inputárgument NULL\n" );

640  
i
;

641 
	}
}

649 
size_t
 
	$GëMigøti⁄Ródy
–*
pMRComp⁄íts
, 
size_t
 
szBufSize
 )

651 
size_t
 
i
 = 0;

653 if–
pMRComp⁄íts
 !
NULL
 )

655 
i
 = 
	`ªad_RFCPr›îty
–"Migøti⁄Ródy", 
MR_ID
, 
pMRComp⁄íts
, 
szBufSize
 );

656 if–
i
 =
READ_RFC_FAILURE
 )

658 
i
 = 0;

659 
	`SWLOG_ERROR
–"GëMigøti⁄Ródy:Ñód_RFCPr›îty(ËÁûed Sètu†%d\n", 
i
 );

663 
i
 = 
	`°∫Àn
–
pMRComp⁄íts
, 
szBufSize
 );

668 
	`SWLOG_ERROR
( "GetMigrationReady: Error, inputárgument NULL\n" );

670  
i
;

671 
	}
}

683 
size_t
 
	$GëEx≥rõn˚
–*
pEx≥rõn˚
, 
size_t
 
szBufSize
 )

685 
Dow∆ﬂdD©a
 
DwnLoc
;

686 
JSON
 *
pJs⁄
;

687 
JSON
 *
pIãm
;

688 
size_t
 
i
 = 0;

689 
po°_d©a
[] = "{\"jsonrpc\":\"2.0\",\"id\":\"3\",\"method\":\"org.rdk.AuthService.getExperience\", \"params\":{}}";

691 if–
pEx≥rõn˚
 !
NULL
 )

693 *
pEx≥rõn˚
 = 0;

695 if–
	`ÆlocDowndLﬂdD©aMem
–&
DwnLoc
, 
DEFAULT_DL_ALLOC
 ) == 0 )

697 
	`gëJs⁄Rpc
–
po°_d©a
, &
DwnLoc
 );

702 
pJs⁄
 = 
	`P¨£Js⁄Så
–(*)
DwnLoc
.
pvOut
 );

704 if–
pJs⁄
 !
NULL
 )

706 
pIãm
 = 
	`GëJs⁄Iãm
–
pJs⁄
, "result" );

707 if–
pIãm
 !
NULL
 )

709 
i
 = 
	`GëJs⁄VÆ
–
pIãm
, "ex≥rõn˚", 
pEx≥rõn˚
, 
szBufSize
 );

710 if–!*
pEx≥rõn˚
 )

712 *
pEx≥rõn˚
 = 'X';

713 *(
pEx≥rõn˚
 + 1) = '1';

714 *(
pEx≥rõn˚
 + 2) = 0;

717 
	`FªeJs⁄
–
pJs⁄
 );

720 if–
DwnLoc
.
pvOut
 !
NULL
 )

722 
	`‰ì
–
DwnLoc
.
pvOut
 );

728 
	`SWLOG_ERROR
( "GetExperience: Error, inputárgument NULL\n" );

730  
i
;

731 
	}
}

743 
size_t
 
	$GëAccou¡ID
–*
pAccou¡ID
, 
size_t
 
szBufSize
 )

745 
size_t
 
i
 = 0;

747 if–
pAccou¡ID
 !
NULL
 )

749 
i
 = 
	`ªad_RFCPr›îty
–"Accou¡ID", 
RFC_ACCOUNTID
, 
pAccou¡ID
, 
szBufSize
 );

750 if–
i
 =
READ_RFC_FAILURE
 )

752 
i
 = 
	`¢¥ötf
–
pAccou¡ID
, 
szBufSize
, "Unknown" );

753 
	`SWLOG_ERROR
–"GëAccou¡ID:Ñód_RFCPr›îty(ËÁûed Sètu†%d\n", 
i
 );

757 
i
 = 
	`°∫Àn
–
pAccou¡ID
, 
szBufSize
 );

763 
	`SWLOG_ERROR
( "GetAccountID: Error, inputárgument NULL\n" );

765  
i
;

766 
	}
}

1038 
size_t
 
	$GëRemŸeInfo
–*
pRemŸeInfo
, 
size_t
 
szBufSize
 )

1040 
size_t
 
Àn
, 
sztŸÀn
 = 0;

1041 
JSON
 *
pJs⁄
, *
pIãm
;

1042 *
pJs⁄Så
;

1043 
size_t
 
szBufRemaöög
;

1044 
ödex
, 
num
;

1046 if–
pRemŸeInfo
 !
NULL
 )

1048 *
pRemŸeInfo
 = 0;

1049 
pJs⁄Så
 = 
	`GëJs⁄
–
PERIPHERAL_JSON_FILE
 );

1050 if–
pJs⁄Så
 !
NULL
 )

1052 
szBufRemaöög
 = 
szBufSize
;

1053 
pJs⁄
 = 
	`P¨£Js⁄Så
–
pJs⁄Så
 );

1054 if–
pJs⁄
 !
NULL
 )

1056 if–
	`IsJs⁄Aºay
–
pJs⁄
 ) )

1058 
num
 = 
	`GëJs⁄AºaySize
–
pJs⁄
 );

1059  
ödex
 = 0; index < 
num
; index++ )

1061 
pIãm
 = 
	`GëJs⁄AºayIãm
–
pJs⁄
, 
ödex
 );

1062 if–
pIãm
 !
NULL
 )

1064 
Àn
 = 
	`BuûdRemŸeInfo
–
pIãm
, 
pRemŸeInfo
 + 
sztŸÀn
, 
szBufRemaöög
, 
åue
 );

1065 
sztŸÀn
 +
Àn
;

1066 if–
Àn
 <
szBufRemaöög
 )

1068 
szBufRemaöög
 -
Àn
;

1070 if–
szBufRemaöög
 <= 1 )

1072 
	`SWLOG_INFO
–"%s: WARNING, buf„∏i†fuŒánd wû»bêåunˇãd, sztŸÀn=%zu\n", 
__FUNCTION__
, 
sztŸÀn
 );

1080 
sztŸÀn
 = 
	`BuûdRemŸeInfo
–
pJs⁄
, 
pRemŸeInfo
, 
szBufSize
, 
åue
 );

1082 
	`FªeJs⁄
–
pJs⁄
 );

1084 
	`‰ì
–
pJs⁄Så
 );

1089 
	`SWLOG_ERROR
( "GetRemoteInfo: Error, inputárgument NULL\n" );

1091 
	`SWLOG_INFO
–"%s:Ñëu∫ög sztŸÀn=%zu\n", 
__FUNCTION__
, 
sztŸÀn
 );

1092  
sztŸÀn
;

1093 
	}
}

1106 
size_t
 
	$GëRemŸeVîs
–*
pRemŸeVîs
 , 
size_t
 
szBufSize
 )

1108 
size_t
 
Àn
 = 0;

1109 
JSON
 *
pJs⁄
, *
pIãm
;

1110 *
pJs⁄Så
;

1111 
ödex
, 
num
;

1113 if–
pRemŸeVîs
 !
NULL
 )

1115 *
pRemŸeVîs
 = 0;

1116 
pJs⁄Så
 = 
	`GëJs⁄
–
PERIPHERAL_JSON_FILE
 );

1117 if–
pJs⁄Så
 !
NULL
 )

1119 
pJs⁄
 = 
	`P¨£Js⁄Så
–
pJs⁄Så
 );

1120 if–
pJs⁄
 !
NULL
 )

1122 if–
	`IsJs⁄Aºay
–
pJs⁄
 ) )

1124 
num
 = 
	`GëJs⁄AºaySize
–
pJs⁄
 );

1125  
ödex
 = 0; index < 
num
; index++ )

1127 
pIãm
 = 
	`GëJs⁄AºayIãm
–
pJs⁄
, 
ödex
 );

1128 if–
pIãm
 !
NULL
 )

1130 
Àn
 +
	`BuûdRemŸeInfo
–
pIãm
, 
pRemŸeVîs
 +Üí, 
szBufSize
 -Üí, 
Ál£
 );

1136 
Àn
 = 
	`BuûdRemŸeInfo
–
pJs⁄
, 
pRemŸeVîs
 , 
szBufSize
, 
Ál£
 );

1138 
	`FªeJs⁄
–
pJs⁄
 );

1140 
	`‰ì
–
pJs⁄Så
 );

1145 
	`SWLOG_INFO
( "GetRemoteVers: Error, inputárgument NULL\n" );

1148  
Àn
;

1149 
	}
}

1161 
size_t
 
	$GëRdmM™i„°Vîsi⁄
–*
pRdmM™i„°Vîsi⁄
, 
size_t
 
szBufSize
 )

1163 
size_t
 
Àn
 = 0;

1165 #ifde‡
GETRDMMANIFESTVERSION_IN_SCRIPT


1166 if–
pRdmM™i„°Vîsi⁄
 !
NULL
 )

1168 *
pRdmM™i„°Vîsi⁄
 = 0;

1169 
Àn
 = 
	`RunComm™d
–
eGëIn°ÆÀdRdmM™i„°Vîsi⁄
, 
NULL
, 
pRdmM™i„°Vîsi⁄
, 
szBufSize
 );

1173 
	`SWLOG_INFO
( "GetRdmManifestVersion: Error, inputárgument NULL\n" );

1178  
Àn
;

1179 
	}
}

1193 
size_t
 
	$GëTR181Uæ
–
TR181URL
 
eURL
, *
pUæOut
, 
size_t
 
szBufSize
 )

1195 *
pDeÁu…URL
 = 
NULL
;

1196 *
pURLName
 = 
NULL
;

1197 *
pURLTy≥
 = 
NULL
;

1198 
size_t
 
Àn
 = 0;

1199 
°©us
;

1201 if–
pUæOut
 !
NULL
 )

1203  
eURL
 )

1205 
eRecovîy
 :

1206 
pDeÁu…URL
 = 
RECOVERYDEFAULT
;

1207 
pURLName
 = 
RFC_RECOVERYURL
;

1208 
pURLTy≥
 = 
RECOVERYURL
;

1211 
eAutoEx˛ude
 :

1212 
pDeÁu…URL
 = 
AUTOEXCLUDEDEFAULT
;

1213 
pURLName
 = 
RFC_AUTOEXCLUDEURL
;

1214 
pURLTy≥
 = 
AUTOEXCLUDEURL
;

1217 
eBoŸ°øp
 :

1218 
pDeÁu…URL
 = 
BOOTSTRAPDEFAULT
;

1219 
pURLName
 = 
RFC_BOOTSTRAPURL
;

1220 
pURLTy≥
 = 
BOOTSTRAPURL
;

1223 
eDevXc⁄f
 :

1224 
pDeÁu…URL
 = 
DEVXCONFDEFAULT
;

1225 
pURLName
 = 
RFC_DEVXCONFURL
;

1226 
pURLTy≥
 = 
DEVXCONFURL
;

1229 
eCIXc⁄f
 :

1230 
pDeÁu…URL
 = 
CIXCONFDEFAULT
;

1231 
pURLName
 = 
RFC_CIXCONFURL
;

1232 
pURLTy≥
 = 
CIXCONFURL
;

1235 
eXc⁄f
 :

1236 
pDeÁu…URL
 = 
XCONFDEFAULT
;

1237 
pURLName
 = 
RFC_XCONFURL
;

1238 
pURLTy≥
 = 
XCONFURL
;

1241 
eDac15
 :

1242 
pDeÁu…URL
 = 
DAC15DEFAULT
;

1243 
pURLName
 = 
RFC_DAC15URL
;

1244 
pURLTy≥
 = 
DAC15URL
;

1248 
	`SWLOG_ERROR
–"GëTR181Uæ: Unknow¿URLÅy≥ %d\n", 
eURL
 );

1253 
°©us
 = 
	`ªad_RFCPr›îty
–
pURLTy≥
, 
pURLName
, 
pUæOut
, 
szBufSize
 );

1254 if–
°©us
 =
READ_RFC_FAILURE
 )

1256 if–
pDeÁu…URL
 !
NULL
 )

1258 
Àn
 = 
	`¢¥ötf
–
pUæOut
, 
szBufSize
, "%s", 
pDeÁu…URL
 );

1259 
	`SWLOG_INFO
–"GëTR181Uæ: RFCPr›îtyÇŸ found, deÁu…ögÅÿ%s\n", 
pUæOut
 );

1263 
	`SWLOG_INFO
( "GetTR181Url: RFCPropertyÇot foundándÇo default URLÖrovided\n" );

1268 
Àn
 = 
	`°∫Àn
–
pUæOut
, 
szBufSize
 );

1270 
	`SWLOG_INFO
–"GëTR181Uæ:ÖUæOuà%s\n", 
pUæOut
 );

1274 
	`SWLOG_ERROR
( "GetTR181Url: Error, inputárgument NULL\n" );

1277  
Àn
;

1278 
	}
}

1290 
size_t
 
	$GëSîvURL
–*
pSîvURL
, 
size_t
 
szBufSize
 )

1292 
size_t
 
Àn
 = 0;

1293 
BUILDTYPE
 
eBuûdTy≥
;

1294 
buf
[
URL_MAX_LEN
];

1295 
boﬁ
 
skù
 = 
Ál£
;

1296 
boﬁ
 
dbgSîvi˚s
 = 
	`isDebugSîvi˚sE«bÀd
();

1298 if–
pSîvURL
 !
NULL
 )

1300 *
pSîvURL
 = 0;

1301 
	`GëBuûdTy≥
–
buf
, (buf), &
eBuûdTy≥
 );

1302 if–
	`isInSèãRed
() )

1304 if(–
eBuûdTy≥
 !
ePROD
 ) || ( 
dbgSîvi˚s
 =
åue
 ))

1306 
Àn
 = 
	`GëSîvîUæFûe
–
pSîvURL
, 
szBufSize
, 
STATE_RED_CONF
 );

1308 if–
Àn
 =0 || *
pSîvURL
 == 0 )

1310 
Àn
 = 
	`GëTR181Uæ
–
eRecovîy
, 
pSîvURL
, 
szBufSize
 );

1315 if(–
eBuûdTy≥
 !
ePROD
 ) || ( 
dbgSîvi˚s
 =
åue
 ))

1317 if–(
	`fûePª£¡Check
–
SWUPDATE_CONF
 ) =
RDK_API_SUCCESS
) )

1319 
Àn
 = 
	`GëSîvîUæFûe
–
pSîvURL
, 
szBufSize
, 
SWUPDATE_CONF
 );

1320 if–!
Àn
 )

1322 
	`SWLOG_INFO
( "Device configured withán invalid overriden URL!!! Exiting from Image UpgradeÖrocess..!\n" );

1323 
	`t2VÆNŸify
("SYST_WARN_UPGD_SKIP", 
pSîvURL
);

1324 
skù
 = 
åue
;

1328 if–
Àn
 =0 && 
skù
 =
Ál£
 )

1330 if–
eBuûdTy≥
 !
ePROD
 )

1332 
Àn
 = 
	`GëTR181Uæ
–
eAutoEx˛ude
, 
pSîvURL
, 
szBufSize
 );

1334 if–*
pSîvURL
 == 0 )

1336 *
buf
 = 0;

1337 
	`GëTR181Uæ
–
eBoŸ°øp
, 
buf
, (buf) );

1338 if–*
buf
 != 0 )

1340 
Àn
 = 
	`¢¥ötf
–
pSîvURL
, 
szBufSize
, "%s/xc⁄f/swu/°b", 
buf
 );

1344 if–
eBuûdTy≥
 =
eQA
 )

1346 
Àn
 = 
	`GëTR181Uæ
–
eDevXc⁄f
, 
pSîvURL
, 
szBufSize
 );

1350 
	`GëTR181Uæ
–
eXc⁄f
, 
buf
, (buf) );

1351 
Àn
 = 
	`¢¥ötf
–
pSîvURL
, 
szBufSize
, "hâps://%s/xc⁄f/swu/°b/", 
buf
 );

1360 
	`SWLOG_ERROR
( "GetServURL: Error, inputárgument NULL\n" );

1362  
Àn
;

1363 
	}
}

	@src/deviceutils/device_api.h

19 #i‚de‡
__DEVICE_API_H__


20 
	#__DEVICE_API_H__


	)

22 #i‚de‡
GETRDMMANIFESTVERSION_IN_SCRIPT


23 
	#GETRDMMANIFESTVERSION_IN_SCRIPT


	)

26 #i‚de‡
GTEST_ENABLE


27 
	~"rdk_fwdl_utûs.h
"

28 * 
°rˇ£°r
(c⁄° * 
s1
, c⁄° * 
s2
);

31 
	~"comm⁄_devi˚_≠i.h
"

33 
	#URL_MAX_LEN
 512

	)

36 
	meRecovîy
,

37 
	meAutoEx˛ude
,

38 
	meBoŸ°øp
,

39 
	meDevXc⁄f
,

40 
	meCIXc⁄f
,

41 
	meXc⁄f
,

42 
	meDac15


43 } 
	tTR181URL
 ;

45 
	#DEVICE_CAPABILITIES
 "ªboŸDecou∂ed&ˇ∑bûôõs=RCDL&ˇ∑bûôõs=suµ‹tsFuŒHâpUæ"

	)

46 #i‚de‡
GTEST_ENABLE


47 
	#BOOTSTRAP_FILE
 "/›t/£cuª/RFC/boŸ°øp.öi"

	)

48 
	#PARTNER_ID_FILE
 "/›t/www/authSîvi˚/∑π√rId3.d©"

	)

49 
	#VERSION_FILE
 "/vîsi⁄.txt"

	)

50 
	#ESTB_MAC_FILE
 "/tmp/.e°b_mac"

	)

52 
	#BOOTSTRAP_FILE
 "/tmp/boŸ°øp.öi"

	)

53 
	#PARTNER_ID_FILE
 "/tmp/∑π√rId3.d©"

	)

54 
	#VERSION_FILE
 "/tmp/vîsi⁄_ã°.txt"

	)

55 
	#ESTB_MAC_FILE
 "/tmp/.e°b_mac_gã°.txt"

	)

57 
	#OUTPUT_JSON_FILE
 "/›t/ouçut.js⁄"

	)

58 
	#OUTPUT_JSON_FILE_X86
 "/tmp/ouçut.js⁄"

	)

59 #i‚de‡
GTEST_ENABLE


60 
	#TIMEZONE_DST_FILE
 "/›t/≥rsi°ít/timeZ⁄eDST"

	)

61 
	#TIMEZONE_OFFSET_MAP
 "/ëc/timeZ⁄e_off£t_m≠"

	)

62 
	#STATE_RED_CONF
 "/›t/°©îedªcovry.c⁄f"

	)

63 
	#SWUPDATE_CONF
 "/›t/swupd©e.c⁄f"

	)

65 
	#TIMEZONE_DST_FILE
 "/tmp/timeZ⁄eDST"

	)

66 
	#TIMEZONE_OFFSET_MAP
 "/tmp/timeZ⁄e_off£t_m≠"

	)

67 
	#STATE_RED_CONF
 "/tmp/°©îedªcovry.c⁄f"

	)

68 
	#SWUPDATE_CONF
 "/tmp/swupd©e.c⁄f"

	)

70 
	#PERIPHERAL_JSON_FILE
 "/tmp/rc-¥oxy-∑øms.js⁄"

	)

72 
	#RFC_ACCOUNTID
 "Devi˚.Devi˚Info.X_RDKCENTRAL-COM_RFC.Fótuª.Accou¡Info.Accou¡ID"

	)

73 
	#RFC_SERIALNUM
 "Devi˚.Devi˚Info.SîülNumbî"

	)

74 
	#RFC_OS_CLASS
 "Devi˚.Devi˚Info.X_RDKCENTRAL-COM_RFC.BoŸ°øp.OsCœss"

	)

75 
	#MR_ID
 "Devi˚.Devi˚Info.Migøti⁄Pª∑ªr.Migøti⁄Ródy"

	)

77 
	#NO_URL
 
NULL


	)

79 
	#RFC_DAC15URL
 "Devi˚.Devi˚Info.X_RDKCENTRAL-COM_RFC.Sysöt.DAC15CDLUæ"

	)

80 
	#DAC15URL
 "DAC15CDLUæ"

	)

82 
	#RFC_XCONFURL
 "Devi˚.Devi˚Info.X_RDKCENTRAL-COM_RFC.Sysöt.Xc⁄fUæ"

	)

83 
	#XCONFURL
 "Xc⁄fUæ"

	)

85 
	#RFC_CIXCONFURL
 "Devi˚.Devi˚Info.X_RDKCENTRAL-COM_RFC.Sysöt.CIXc⁄fUæ"

	)

86 
	#CIXCONFURL
 "CIXc⁄fUæ"

	)

88 
	#RFC_DEVXCONFURL
 "Devi˚.Devi˚Info.X_RDKCENTRAL-COM_RFC.Sysöt.Xc⁄fDEVUæ"

	)

89 
	#DEVXCONFURL
 "Xc⁄fDEVUæ"

	)

91 
	#RFC_RECOVERYURL
 "Devi˚.Devi˚Info.X_RDKCENTRAL-COM_RFC.BoŸ°øp.Xc⁄fRecovîyUæ"

	)

92 
	#RECOVERYURL
 "Xc⁄fRecovîyUæ"

	)

93 
	#RECOVERYDEFAULT
 
NO_URL


	)

95 
	#RFC_AUTOEXCLUDEURL
 "Devi˚.Devi˚Info.X_RDKCENTRAL-COM_RFC.Fótuª.FWUpd©e.AutoEx˛uded.Xc⁄fUæ"

	)

96 
	#AUTOEXCLUDEURL
 "AxXc⁄fUæ"

	)

97 
	#AUTOEXCLUDEDEFAULT
 
NO_URL


	)

99 
	#RFC_BOOTSTRAPURL
 "Devi˚.Devi˚Info.X_RDKCENTRAL-COM_RFC.BoŸ°øp.Xc⁄fUæ"

	)

100 
	#BOOTSTRAPURL
 "BsXc⁄fUæ"

	)

101 
	#BOOTSTRAPDEFAULT
 
NO_URL


	)

114 
size_t
 
GëSîvîUæFûe
(*
pSîvUæ
, size_à
szBufSize
, *
pFûeName
);

139 
size_t
 
GëAddôi⁄ÆFwVîInfo
(*
pAddôi⁄ÆFwVîInfo
, size_à
szBufSize
);

150 
size_t
 
GëPDRIFûeName
(*
pPDRIFûíame
, size_à
szBufSize
);

162 
size_t
 
GëIn°ÆÀdBundÀs
(*
pBundÀs
, size_à
szBufSize
);

213 
size_t
 
GëOsCœss
–*
pOsCœss
, size_à
szBufSize
 );

225 
size_t
 
GëSîülNum
–*
pSîülNum
, size_à
szBufSize
);

239 
size_t
 
GëEx≥rõn˚
(*
pEx≥rõn˚
, size_à
szBufSize
);

252 
size_t
 
GëMigøti⁄Ródy
(*
pMRComp⁄íts
, size_à
szBufSize
);

265 
size_t
 
GëAccou¡ID
(*
pAccou¡ID
, size_à
szBufSize
);

267 #ifde‡
GTEST_ENABLE


343 
size_t
 
GëRemŸeInfo
(*
pRemŸeInfo
, size_à
szBufSize
);

356 
size_t
 
GëRemŸeVîs
(*
pRemŸeVîs
 , size_à
szBufSize
);

368 
size_t
 
GëRdmM™i„°Vîsi⁄
(*
pRdmM™i„°Vîsi⁄
, size_à
szBufSize
);

383 
size_t
 
GëTR181Uæ
(
TR181URL
 
eURL
, *
pUæOut
, size_à
szBufSize
);

396 
size_t
 
GëSîvURL
(*
pSîvURL
, size_à
szBufSize
);

	@src/deviceutils/deviceutils.c

19 
	~<°dlib.h
>

20 
	~<°dio.h
>

21 
	~<°rög.h
>

22 
	~<˘y≥.h
>

23 
	~<°dboﬁ.h
>

25 #i‚de‡
GTEST_ENABLE


26 
	~<£cuª_wøµî.h
>

27 
	~"dow∆ﬂdUtû.h
"

30 
	~"rdkv_cdl_log_wøµî.h
"

31 
	~"devi˚utûs.h
"

32 
	~"js⁄_∑r£.h
"

33 
	~<dúít.h
>

35 #i‚de‡
GTEST_ENABLE


36 
	#BUNDLE_METADATA_NVM_PATH
 "/medü/≠ps/ëc/˚πs"

	)

37 
	#BUNDLE_METADATA_RFS_PATH
 "/ëc/˚πs"

	)

39 
	#BUNDLE_METADATA_NVM_PATH
 "/tmp/˚πs"

	)

40 
	#BUNDLE_METADATA_RFS_PATH
 "/tmp/rfc/˚πs"

	)

43 
	#WPEFRAMEWORKSECURITYUTILITY
 "/u§/bö/WPEFømew‹kSecurôyUtûôy"

	)

44 
	#MFRUTIL
 "/usr/bin/mfr_util %s"

45 
	#MD5SUM
 "/u§/bö/md5sum %s"

	)

47 #ifde‡
GETRDMMANIFESTVERSION_IN_SCRIPT


48 
	#GETINSTALLEDRDMMANIFESTVERSIONSCRIPT
 "/lib/rdk/cdlSuµ‹t.sh gëIn°ÆÀdRdmM™i„°Vîsi⁄"

	)

51 
	#MAX_PERIPHERAL_ITEMS
 4

	)

53 *
	gpRemCålSåögs
[
MAX_PERIPHERAL_ITEMS
] = {

60 *
	gpNuŒSåögs
[
MAX_PERIPHERAL_ITEMS
] = {

67 *
	gpEquÆSåögs
[
MAX_PERIPHERAL_ITEMS
] = {

74 *
	gpTy≥Såögs
[
MAX_PERIPHERAL_ITEMS
] = {

81 *
	gpExtSåögs
[] = {

85 *
	gpPîùhîÆName
[
MAX_PERIPHERAL_ITEMS
] = {

245 
size_t
 
	$RunComm™d
–
SYSCMD
 
eSysCmd
, c⁄° *
pArgs
, *
pResu…
, 
size_t
 
szResu…Size
 )

247 
FILE
 *
Â
;

248 
size_t
 
nbyãs_ªad
 = 0;

250 if–
pResu…
 !
NULL
 && 
szResu…Size
 >= 1 )

252 *
pResu…
 = 0;

253  
eSysCmd
 )

255 
eMD5Sum
 :

256 if–
pArgs
 !
NULL
 )

258 
Â
 = 
	`v_£cuª_p›í
–"r", 
MD5SUM
, 
pArgs
 );

262 
Â
 = 
NULL
;

263 
	`SWLOG_ERROR
–"RunComm™d: Eº‹, %†ªquúe†™ i≈uà¨gumít\n", 
MD5SUM
 );

267 
eRdkSßCli
 :

268 if–
pArgs
 !
NULL
 )

270 
Â
 = 
	`v_£cuª_p›í
–"r", 
RDKSSACLI
, 
pArgs
 );

274 
Â
 = 
NULL
;

275 
	`SWLOG_ERROR
–"RunComm™d: Eº‹, %†ªquúe†™ i≈uà¨gumít\n", 
RDKSSACLI
 );

279 
eM‰Utû
 :

280 if–
pArgs
 !
NULL
 )

282 
Â
 = 
	`v_£cuª_p›í
–"r", 
MFRUTIL
, 
pArgs
 );

286 
Â
 = 
NULL
;

287 
	`SWLOG_ERROR
–"RunComm™d: Eº‹, %†ªquúe†™ i≈uà¨gumít\n", 
MFRUTIL
 );

291 
eW≥Fømew‹kSecurôyUtûôy
 :

292 
Â
 = 
	`v_£cuª_p›í
–"r", 
WPEFRAMEWORKSECURITYUTILITY
 );

296 #ifde‡
GETRDMMANIFESTVERSION_IN_SCRIPT


297 
eGëIn°ÆÀdRdmM™i„°Vîsi⁄
 :

298 
Â
 = 
	`v_£cuª_p›í
–"r", 
GETINSTALLEDRDMMANIFESTVERSIONSCRIPT
 );

303 
Â
 = 
NULL
;

304 
	`SWLOG_ERROR
–"RunComm™d: Eº‹, unknow¿ªque°Åy≥ %d\n", ()
eSysCmd
 );

308 if–
Â
 !
NULL
 )

310 
nbyãs_ªad
 = 
	`‰ód
–
pResu…
, 1, 
szResu…Size
 - 1, 
Â
 );

311 
	`v_£cuª_p˛o£
–
Â
 );

312 if–
nbyãs_ªad
 != 0 )

314 
	`SWLOG_INFO
–"%s: Suc˚ssfu»ªad %zu byãs\n", 
__FUNCTION__
, 
nbyãs_ªad
 );

315 
pResu…
[
nbyãs_ªad
] = '\0';

316 
nbyãs_ªad
 = 
	`°∫Àn
–
pResu…
, 
szResu…Size
 );

320 
	`SWLOG_ERROR
–"%†‰ód faûs:%d\n", 
__FUNCTION__
, 
nbyãs_ªad
 );

326 
	`SWLOG_ERROR
( "RunCommand: FailedÅo openÖipe commandÉxecution\n" );

331 
	`SWLOG_ERROR
( "RunCommand: Error, inputárgument invalid\n" );

333  
nbyãs_ªad
;

334 
	}
}

352 
size_t
 
	$BuûdRemŸeInfo
–
JSON
 *
pIãm
, *
pRemŸeInfo
, 
size_t
 
szMaxBuf
, 
boﬁ
 
bAddªmCål
 )

354 **
pPªfix
;

355 **
pMid
;

356 *
pSuffix
;

357 
size_t
 
szBufRemaöög
, 
szRu¬ögLí
 = 0;

358 
iLí
 = 0;

359 
i
 = 0;

360 
x
;

361 
¥odu˘Buf
[100];

362 
vîsi⁄Buf
[50];

364 if–
pIãm
 !
NULL
 && 
pRemŸeInfo
 != NULL )

366 
szBufRemaöög
 = 
szMaxBuf
;

367 
	`SWLOG_INFO
( "BuildRemoteInfo: Start\n" );

369 
i
 = 
	`GëJs⁄VÆ
–
pIãm
, "Produ˘", 
¥odu˘Buf
, (productBuf) );

370 if–
i
 )

372 if–
bAddªmCål
 =
åue
 )

374 
pPªfix
 = 
pRemCålSåögs
;

375 
pMid
 = 
pEquÆSåögs
;

376 
pSuffix
 = *
pNuŒSåögs
;

380 
pPªfix
 = 
pNuŒSåögs
;

381 
pMid
 = 
pTy≥Såögs
;

382 
pSuffix
 = *
pExtSåögs
;

394  
x
=0; x < 
MAX_PERIPHERAL_ITEMS
; x++ )

396 
i
 = 
	`GëJs⁄VÆ
–
pIãm
, 
pPîùhîÆName
[
x
], 
vîsi⁄Buf
, (versionBuf) );

397 if–
i
 )

399 
iLí
 = 
	`¢¥ötf
–
pRemŸeInfo
 + 
szRu¬ögLí
, 
szBufRemaöög
, "%s%s%s%s%s", *
pPªfix
, 
¥odu˘Buf
, *
pMid
, 
vîsi⁄Buf
, 
pSuffix
 );

400 i‡(
iLí
 >
szBufRemaöög
) {

401 
	`SWLOG_INFO
( "Buffer is Full\n" );

402 
iLí
 = 
szBufRemaöög
;

405 ++
pPªfix
;

406 ++
pMid
;

407 
szBufRemaöög
 -
iLí
;

408 
szRu¬ögLí
 +
iLí
;

412 
	`SWLOG_INFO
( "BuildRemoteInfo: End\n" );

416 
	`SWLOG_ERROR
( "BuildRemoteInfo: Error, inputárgument(s) invalid\n" );

418  (
size_t
)
iLí
;

419 
	}
}

426 
	$gëJs⁄Rpc
(*
po°_d©a
, 
Dow∆ﬂdD©a
* 
pJs⁄Rpc
 )

428 *
Cuæ_ªq
 = 
NULL
;

429 
tokí
[256];

430 
js⁄d©a
[256];

431 
hâpCode
 = 0;

432 
FûeDw∆_t
 
ªq_d©a
;

433 
cuæ_ªt_code
 = -1;

434 
hódî
[] = "Content-Type:ápplication/json";

435 
tokí_hódî
[300];

437 *
tokí
 = 0;

438 *
js⁄d©a
 = 0;

439 
	`RunComm™d
–
eW≥Fømew‹kSecurôyUtûôy
, 
NULL
, 
js⁄d©a
, (jsondata) );

441 
	`gëJRPCTokíD©a
(
tokí
, 
js⁄d©a
, (token));

442 i‡(
pJs⁄Rpc
->
pvOut
 !
NULL
) {

443 
ªq_d©a
.
pHódîD©a
 = 
hódî
;

444 
ªq_d©a
.
pDlHódîD©a
 = 
NULL
;

445 
	`¢¥ötf
(
tokí_hódî
, —okí_hódî), "Auth‹iz©i⁄: Bóª∏%s", 
tokí
);

446 
ªq_d©a
.
pPo°Fõlds
 = 
po°_d©a
;

447 
ªq_d©a
.
pDlD©a
 = 
pJs⁄Rpc
;

448 
	`¢¥ötf
(
ªq_d©a
.
uæ
, (req_data.url), "%s", "http://127.0.0.1:9998/jsonrpc");

449 
Cuæ_ªq
 = 
	`doCuæInô
();

450 i‡(
Cuæ_ªq
 !
NULL
) {

451 
cuæ_ªt_code
 = 
	`gëJs⁄RpcD©a
(
Cuæ_ªq
, &
ªq_d©a
, 
tokí_hódî
, &
hâpCode
 );

453 
	`doSt›Dow∆ﬂd
(
Cuæ_ªq
);

455 
	`SWLOG_ERROR
("%s: doCuæInô faû\n", 
__FUNCTION__
);

458 
	`SWLOG_ERROR
("%s: FaûedÅÿÆloˇã mem‹y usög mÆloc\n", 
__FUNCTION__
);

460  
cuæ_ªt_code
;

461 
	}
}

469 
	$gëJRPCTokíD©a
–*
tokí
, *
pJs⁄Så
, 
tokí_size
 )

471 
JSON
 *
pJs⁄
 = 
NULL
;

472 
°©us
[8];

473 
ªt
 = -1;

475 i‡(
tokí
 =
NULL
 || 
pJs⁄Så
 == NULL) {

476 
	`SWLOG_INFO
–"%s: P¨amëî i†NULL\n", 
__FUNCTION__
);

477  
ªt
;

479 *
°©us
 = 0;

480 
pJs⁄
 = 
	`P¨£Js⁄Så
–
pJs⁄Så
 );

481 if–
pJs⁄
 !
NULL
 )

483 
	`GëJs⁄VÆ
(
pJs⁄
, "tokí", 
tokí
, 
tokí_size
);

484 
	`GëJs⁄VÆ
(
pJs⁄
, "suc˚ss", 
°©us
, (status));

485 
	`SWLOG_INFO
–"%s: sètus:%s\n", 
__FUNCTION__
, 
°©us
);

486 
	`FªeJs⁄
–
pJs⁄
 );

487 
ªt
 = 0;

489  
ªt
;

490 
	}
}

497 
mëaD©aFûeLi°_°
 *
	$gëIn°ÆÀdBundÀFûeLi°
()

499 
mëaD©aFûeLi°_°
 *
mëad©aNVMls
 = 
NULL
, *
mëad©aRFSls
 = NULL, *
mëaD©aLi°
 = NULL;

501 
mëad©aNVMls
 = 
	`gëMëaD©aFûe
(
BUNDLE_METADATA_NVM_PATH
);

502 i‡(
mëad©aNVMls
 =
NULL
)

504 
	`SWLOG_INFO
("Certificate doesÇotÉxist in NVM Path\n");

507 
mëad©aRFSls
 = 
	`gëMëaD©aFûe
(
BUNDLE_METADATA_RFS_PATH
);

508 i‡(
mëad©aRFSls
 =
NULL
)

510 
	`SWLOG_INFO
("Certificate doesÇotÉxist in RFS Path\n");

513 i‡((
mëad©aNVMls
 =
NULL
Ë&& (
mëad©aRFSls
 == NULL))

515 
	`SWLOG_INFO
("No metadata found only in CPE");

517 i‡((
mëad©aNVMls
Ë&& (
mëad©aRFSls
 =
NULL
))

519 
mëaD©aLi°
 = 
mëad©aNVMls
;

520 
	`SWLOG_INFO
("Nÿmëad©®found o∆y i¿%s\n", 
BUNDLE_METADATA_NVM_PATH
);

522 i‡((
mëad©aNVMls
 =
NULL
Ë&& (
mëad©aRFSls
))

524 
mëaD©aLi°
 = 
mëad©aRFSls
;

525 
	`SWLOG_INFO
("Nÿmëad©®found o∆y i¿%s\n", 
BUNDLE_METADATA_RFS_PATH
);

527 i‡((
mëad©aNVMls
Ë&& (
mëad©aRFSls
))

529 
mëaD©aLi°
 = 
	`mîgeLi°s
(
mëad©aNVMls
, 
mëad©aRFSls
);

532  
mëaD©aLi°
;

533 
	}
}

540 
mëaD©aFûeLi°_°
 *
	$gëMëaD©aFûe
(*
dú
)

542 
mëaD©aFûeLi°_°
 *
√wnode
 = 
NULL
, *
¥evnode
 = NULL, *
hódNode
 = NULL;

543 
dúít
 *
pDúít
 = 
NULL
;

545 
DIR
 *
dúe˘‹y
 = 
	`›ídú
(
dú
);

546 i‡(
dúe˘‹y
)

548 (
pDúít
 = 
	`ªaddú
(
dúe˘‹y
)Ë!
NULL
)

550 i‡(
pDúít
->
d_ty≥
 =
DT_REG
 && 
	`°r°r
’Dúít->
d_«me
, "_∑ckage.js⁄"Ë!
NULL
)

552 
√wnode
 = (
mëaD©aFûeLi°_°
 *)
	`mÆloc
((metaDataFileList_st));

553 
	`SWLOG_INFO
("GëIn°ÆÀdBundÀs: found %s\n", 
pDúít
->
d_«me
);

554 
	`¢¥ötf
(
√wnode
->
fûeName
, “ewnode->fûeName), "%s/%s", 
dú
, 
pDúít
->
d_«me
);

555 
√wnode
->
√xt
 = 
NULL
;

556 i‡(
hódNode
 =
NULL
)

558 
hódNode
 = 
√wnode
;

559 
¥evnode
 = 
hódNode
;

563 
¥evnode
->
√xt
 = 
√wnode
;

564 
¥evnode
 = 
√wnode
;

568 
	`˛o£dú
(
dúe˘‹y
);

572 
	`SWLOG_INFO
("%†d€†nŸÉxi°\n", 
dú
);

574  
hódNode
;

575 
	}
}

583 
mëaD©aFûeLi°_°
 * 
	$mîgeLi°s
(
mëaD©aFûeLi°_°
 *
nvmLi°
, mëaD©aFûeLi°_° *
rfsLi°
)

585 
mëaD©aFûeLi°_°
 
tmp
;

586 
mëaD©aFûeLi°_°
 *
cuºítNVMNode
 = 
nvmLi°
;

587 
mëaD©aFûeLi°_°
 *
cuºítRFSNode
 = 
rfsLi°
;

588 
mëaD©aFûeLi°_°
 *
mëaD©aLi°
 = &
tmp
;

589 
mëaD©aFûeLi°_°
 *
√xt
 = 
NULL
, *
ªmoveDup
 = NULL;

590 
cmpvÆ
 = 0;

592 
tmp
.
√xt
 = 
NULL
;

593 
cuºítRFSNode
 && 
cuºítNVMNode
)

595 
cmpvÆ
 = 
	`°∫cmp
(
cuºítRFSNode
->
fûeName
,
cuºítNVMNode
->fileName, (currentRFSNode->fileName));

596 
√xt
 = (
cmpvÆ
 < 0Ë? 
cuºítRFSNode
 : 
cuºítNVMNode
;

598 
mëaD©aLi°
->
√xt
 =Çext;

599 
mëaD©aLi°
 = 
√xt
;

601 i‡(
cmpvÆ
 < 0)

603 
cuºítRFSNode
 = cuºítRFSNode->
√xt
;

607 
cuºítNVMNode
 = cuºítNVMNode->
√xt
;

611 
mëaD©aLi°
->
√xt
 = 
cuºítRFSNode
 ? cuºítRFSNodê: 
cuºítNVMNode
;

613 
ªmoveDup
 = 
tmp
.
√xt
;

615 
ªmoveDup
)

617 if(
ªmoveDup
->
√xt
 && 
	`°∫cmp
‘emoveDup->
fûeName
,ÑemoveDup->next->fileName, (removeDup->fileName)) == 0)

619 
ªmoveDup
->
√xt
 =ÑemoveDup->next->next;

621 
ªmoveDup
 =ÑemoveDup->
√xt
;

624  
tmp
.
√xt
;

626 
	}
}

	@src/deviceutils/deviceutils.h

19 #i‚de‡
__DEVICEUTILS_H__


20 
	#__DEVICEUTILS_H__


	)

22 #i‚de‡
GTEST_ENABLE


23 
	~"uæHñ≥r.h
"

25 
	~"js⁄_∑r£.h
"

26 
	~"mésUtûs.h
"

27 
	~"comm⁄_devi˚_≠i.h
"

29 #i‚de‡
GETRDMMANIFESTVERSION_IN_SCRIPT


30 
	#GETRDMMANIFESTVERSION_IN_SCRIPT


	)

34 
	meMD5Sum
,

35 
	meRdkSßCli
,

36 
	meM‰Utû
,

37 
	meW≥Fømew‹kSecurôyUtûôy


38 #ifde‡
GETRDMMANIFESTVERSION_IN_SCRIPT


39 ,
	meGëIn°ÆÀdRdmM™i„°Vîsi⁄


41 } 
	tSYSCMD
;

43 
	#DEFAULT_DL_ALLOC
 1024

	)

45 
	smëaD©aFûeLi°


47 
	mfûeName
[512];

48 
mëaD©aFûeLi°
 *
	m√xt
;

49 }
	tmëaD©aFûeLi°_°
;

121 
size_t
 
RunComm™d
(
SYSCMD
 
eSysCmd
, c⁄° *
pArgs
, *
pResu…
, size_à
szResu…Size
);

137 
size_t
 
BuûdRemŸeInfo
(
JSON
 *
pIãm
, *
pRemŸeInfo
, size_à
szMaxBuf
, 
boﬁ
 
bAddªmCål
);

144 
gëJs⁄Rpc
(*
po°_d©a
, 
Dow∆ﬂdD©a
* 
pJs⁄Rpc
);

152 
gëJRPCTokíD©a
(*
tokí
, *
pJs⁄Så
, 
tokí_size
);

162 
mëaD©aFûeLi°_°
 *
gëIn°ÆÀdBundÀFûeLi°
();

163 
mëaD©aFûeLi°_°
 *
gëMëaD©aFûe
(*
dú
);

164 
mëaD©aFûeLi°_°
 * 
mîgeLi°s
(mëaD©aFûeLi°_° *
nvmLi°
, mëaD©aFûeLi°_° *
rfsLi°
);

	@src/download_status_helper.c

19 
	~"dow∆ﬂd_°©us_hñ≥r.h
"

20 
	~"rfcöãrÁ˚.h
"

25 
	$upd©eFWDow∆ﬂdSètus
(
FWDow∆ﬂdSètus
 *
fwdls
, c⁄° *
dißbÀSètsUpd©e
) {

26 
FILE
 *
Â
;

29 i‡(
fwdls
 =
NULL
 || 
dißbÀSètsUpd©e
 == NULL) {

30 
	`SWLOG_ERROR
("updateFWDownloadStatus(): Parameter is NULL\n");

31  
FAILURE
;

33 if((
	`°rcmp
(
dißbÀSètsUpd©e
, "yes")) == 0) {

34 
	`SWLOG_INFO
("upd©eFWDow∆ﬂdSètus(): Sètu†Upd©êDißbÀ:%s\n", 
dißbÀSètsUpd©e
);

35  
SUCCESS
;

37 
Â
 = 
	`f›í
(
STATUS_FILE
, "w");

38 if(
Â
 =
NULL
) {

39 
	`SWLOG_ERROR
("upd©eFWDow∆ﬂdSètus(): f›í faûed:%s\n", 
STATUS_FILE
);

40  
FAILURE
;

42 
	`SWLOG_INFO
("upd©eFWDow∆ﬂdSètus(): GoögÅÿwrôe:%s\n", 
STATUS_FILE
);

44 
	`Ârötf
–
Â
, "%s", 
fwdls
->
mëhod
 );

45 
	`Ârötf
–
Â
, "%s", 
fwdls
->
¥Ÿo
 );

46 
	`Ârötf
–
Â
, "%s", 
fwdls
->
°©us
 );

47 
	`Ârötf
–
Â
, "%s", 
fwdls
->
ªboŸ
 );

48 
	`Ârötf
–
Â
, "%s", 
fwdls
->
ÁûuªRós⁄
 );

49 
	`Ârötf
–
Â
, "%s", 
fwdls
->
d∆dVî¢
 );

50 
	`Ârötf
–
Â
, "%s", 
fwdls
->
d∆dfûe
 );

51 
	`Ârötf
–
Â
, "%s", 
fwdls
->
d∆duæ
 );

52 
	`Ârötf
–
Â
, "%s", 
fwdls
->
œ°run
 );

53 
	`Ârötf
–
Â
, "%s", 
fwdls
->
FwUpd©eSèã
 );

54 
	`Ârötf
–
Â
, "%s", 
fwdls
->
DñayDow∆ﬂd
 );

55 
	`f˛o£
(
Â
);

56  
SUCCESS
;

57 
	}
}

63 
	$nŸifyDw∆Sètus
(c⁄° *
key
, c⁄° *
vÆue
, 
RFCVALDATATYPE
 
d©©y≥
) {

64 
ªt
 = 
WRITE_RFC_FAILURE
;

65 i‡(
key
 =
NULL
 || 
vÆue
 == NULL) {

66 
	`SWLOG_ERROR
("%s: P¨amëî i†NULL\n", 
__FUNCTION__
);

68 
ªt
 = 
	`wrôe_RFCPr›îty
("NŸifyDw∆St", 
key
, 
vÆue
, 
d©©y≥
);

70  
ªt
;

71 
	}
}

	@src/flash.c

19 
	~<sys/°©.h
>

20 
	~"rdkv_cdl.h
"

21 
	~"rdkv_cdl_log_wøµî.h
"

22 
	~"dow∆ﬂd_°©us_hñ≥r.h
"

23 
	~"devi˚_°©us_hñ≥r.h
"

24 
	~"ürmI¡îÁ˚.h
"

25 
	~"rfcöãrÁ˚.h
"

26 #i‚de‡
GTEST_ENABLE


27 
	~"rdk_fwdl_utûs.h
"

28 
	~"sy°em_utûs.h
"

30 
	~<sys/waô.h
>

31 
	~"devi˚utûs.h
"

42 
	$ÊashImage
(c⁄° *
£rvî_uæ
, c⁄° *
upgøde_fûe
, c⁄° *
ªboŸ_Êag
, c⁄° *
¥Ÿo
, 
upgøde_ty≥
, c⁄° *
maöt
)

44 
ªt
 = -1;

45 
boﬁ
 
medü˛õ¡
 = 
Ál£
;

46 *
ÁûuªRós⁄
 = 
NULL
;

47 
˝u_¨ch
[8] = {0};

48 
hódîöfofûe
[128] = {0};

49 
difw_∑th
[16] = {0};

50 *
rÊag
 = "0";

51 *
u±y≥
 = "pci";

52 *
fûe
 = 
NULL
;

53 
Êash_°©us
 = -1;

54 
FWDow∆ﬂdSètus
 
fwdls
;

55 
	`mem£t
(&
fwdls
, '\0', (fwdls));

57 i‡(
£rvî_uæ
 =
NULL
 || 
upgøde_fûe
 =NULL || 
ªboŸ_Êag
 =NULL || 
¥Ÿo
 =NULL || 
maöt
 == NULL) {

58 
	`SWLOG_ERROR
("%†: P¨amë∏i†NULL\n", 
__FUNCTION__
);

59  
ªt
;

61 i‡(0 =((
	`°∫cmp
(
ªboŸ_Êag
, "true", 4)))) {

62 
rÊag
 = "1";

63 
	`SWLOG_INFO
("ªboŸ fœg = %s\n", 
rÊag
);

65 
fûe
 = 
	`°ºchr
(
upgøde_fûe
, '/');

66 i‡(
fûe
 !
NULL
) {

67 
	`SWLOG_INFO
("upgødêfûê%s\n", 
fûe
);

68 
	`SWLOG_INFO
("upgødêfûê%s\n", 
fûe
+1);

70 
	`¢¥ötf
(
hódîöfofûe
, (hódîöfofûe), "%s.hódî", 
upgøde_fûe
);

71 
	`SWLOG_INFO
("Starting Image Flashing ...\n");

72 
	`SWLOG_INFO
("UpgødêSîvî = %s\nUpgødêFûê%s\nReboŸ Fœg = %s\nUpgødê¥Ÿocﬁ = %s\nPDRI Upgødê%d\nImagê«mê%s\nhódîfûe=%s\n", 
£rvî_uæ
, 
upgøde_fûe
, 
ªboŸ_Êag
, 
¥Ÿo
, 
upgøde_ty≥
, 
fûe
, 
hódîöfofûe
);

73 i‡(
upgøde_ty≥
 =
PDRI_UPGRADE
) {

74 
	`SWLOG_INFO
("Upd©ög PDRI imagêwôh %s\n", 
upgøde_fûe
);

76 
medü˛õ¡
 = 
	`isMedüClõ¡Devi˚
();

77 i‡(
åue
 =
medü˛õ¡
) {

78 
	`evítM™agî
(
IMG_DWL_EVENT
, 
IMAGE_FWDNLD_FLASH_INPROGRESS
);

80 
ªt
 = 
	`gëDevi˚Pr›îtyD©a
("CPU_ARCH", 
˝u_¨ch
, (cpu_arch));

81 i‡(
ªt
 =
UTILS_SUCCESS
) {

82 
	`SWLOG_INFO
("˝u_¨ch = %s\n", 
˝u_¨ch
);

84 
	`SWLOG_ERROR
("%s: gëDevi˚Pr›îtyD©a(Ëf‹ cpuárch faû\n", 
__FUNCTION__
);

86 
ªt
 = 
	`gëDevi˚Pr›îtyD©a
("DIFW_PATH", 
difw_∑th
, (difw_path));

87 i‡(
ªt
 =
UTILS_SUCCESS
) {

88 
	`SWLOG_INFO
("difwÖ©h = %s\n", 
difw_∑th
);

92 
	`SWLOG_ERROR
("%s: gëDevi˚Pr›îtyD©a(Ëf‹ DIFW_PATH faû\n", 
__FUNCTION__
);

94 i‡(0 =(
	`fûePª£¡Check
("/lib/rdk/imageFlasher.sh"))) {

98 i‡(
upgøde_ty≥
 =
PDRI_UPGRADE
) {

99 
u±y≥
 = "pdri";

100 
	`SWLOG_INFO
("upgødêty≥ = %s\n", 
u±y≥
);

102 
ªt
 = 
	`v_£cuª_sy°em
("/lib/rdk/imageFœshî.sh '%s' '%s' '%s' '%s' '%s' '%s'", 
¥Ÿo
, 
£rvî_uæ
, 
difw_∑th
, 
fûe
+1, 
rÊag
, 
u±y≥
);

103 
Êash_°©us
 = 
ªt
;

104 
	`SWLOG_INFO
("Êash_°©u†%dándÑë = %d\n",
Êash_°©us
, 
ªt
);

106 
	`SWLOG_ERROR
("imageFlasher.shÑequired for flash image. This is device specific implementation\n");

108 i‡(
Êash_°©us
 =0 && (
upgøde_ty≥
 !
PDRI_UPGRADE
)) {

109 
	`SWLOG_INFO
("doCDL success.\n");

110 
	`t2Cou¡NŸify
("SYST_INFO_CDLSuccess", 1);

112 i‡(
Êash_°©us
 != 0) {

113 
	`SWLOG_INFO
("Image Flashing failed\n");

114 
	`t2Cou¡NŸify
("SYST_ERR_imageflsfail", 1);

115 i‡(
Ál£
 =
medü˛õ¡
) {

116 
ÁûuªRós⁄
 = "RCDL Upgrade Failed";

117 i‡((
	`°∫cmp
(
˝u_¨ch
, "x86", 3)) == 0) {

118 
ÁûuªRós⁄
 = "ECMÅrigger failed";

121 
ÁûuªRós⁄
 = "Failed in flash write";

122 
	`evítM™agî
(
IMG_DWL_EVENT
, 
IMAGE_FWDNLD_FLASH_FAILED
);

123 i‡((
	`°∫cmp
(
maöt
, "true", 4)) == 0) {

124 
	`evítM™agî
("Maöã«n˚MGR", 
MAINT_FWDOWNLOAD_ERROR
);

125 
	`SWLOG_INFO
("Image Flash Failedánd send statusÅo MaintenanceMGR\n");

129 
	`¢¥ötf
(
fwdls
.
°©us
, (fwdls.status), "Status|Failure\n");

130 
	`¢¥ötf
(
fwdls
.
FwUpd©eSèã
, (fwdls.FwUpdateState), "FwUpdateState|Failed\n");

131 
	`¢¥ötf
(
fwdls
.
ÁûuªRós⁄
, (fwdls.failureReason), "FailureReason|%s\n", failureReason);

132 
	`evítM™agî
(
FW_STATE_EVENT
, 
FW_STATE_FAILED
);

133 
	`upd©eUpgødeFœg
(2);

134 } i‡(
åue
 =
medü˛õ¡
) {

135 
	`SWLOG_INFO
("Image Flashing is success\n");

136 
	`t2Cou¡NŸify
("SYST_INFO_ImgFlashOK", 1);

138 
	`¢¥ötf
(
fwdls
.
°©us
, (fwdls.status), "Status|Success\n");

139 
	`¢¥ötf
(
fwdls
.
FwUpd©eSèã
, (fwdls.FwUpdateState), "FwUpdateState|Validation complete\n");

140 
	`¢¥ötf
(
fwdls
.
ÁûuªRós⁄
, (fwdls.failureReason), "FailureReason|");

141 i‡(((
	`°∫cmp
(
maöt
, "åue", 4)Ë=0Ë&& (0 =(°∫cmp(
ªboŸ_Êag
, "true", 4)))) {

142 
	`evítM™agî
("Maöã«n˚MGR", 
MAINT_CRITICAL_UPDATE
);

143 
	`SWLOG_INFO
("Posting Critical update");

145 i‡(0 =
	`fûePª£¡Check
(
upgøde_fûe
)) {

146 
	`SWLOG_INFO
("ÊashImage: Fœshög com∂ëed. Dñëög Fûe:%s\n", 
upgøde_fûe
);

147 
	`u∆ök
(
upgøde_fûe
);

149 
	`po°Fœsh
(
maöt
, 
fûe
+1, 
upgøde_ty≥
, 
ªboŸ_Êag
);

150 
	`upd©eUpgødeFœg
(2);

152 i‡(
åue
 =
medü˛õ¡
 && (0 =
	`fûePª£¡Check
(
upgøde_fûe
))) {

153 
	`u∆ök
(
upgøde_fûe
);

155 i‡(0 =
	`fûePª£¡Check
(
hódîöfofûe
)) {

156 
	`SWLOG_INFO
("ÊashImage: Fœshög com∂ëed. Dñëög hódîfûêFûe:%s\n", 
hódîöfofûe
);

157 
	`u∆ök
(
hódîöfofûe
);

159 
	`¢¥ötf
(
fwdls
.
mëhod
, (fwdls.method), "Method|xconf\n");

160 
	`¢¥ötf
(
fwdls
.
¥Ÿo
, (fwdls.proto), "Proto|http\n");

161 
	`¢¥ötf
(
fwdls
.
ªboŸ
, (fwdls.ªboŸ), "ReboŸ|%s\n", 
ªboŸ_Êag
);

163 
	`¢¥ötf
(
fwdls
.
d∆dVî¢
, (fwdls.dnldVersn), "DnldVersn|\n");

164 
	`¢¥ötf
(
fwdls
.
d∆dfûe
, (fwdls.d∆dfûe), "D∆dFûe|%s\n", 
upgøde_fûe
);

165 
	`¢¥ötf
(
fwdls
.
d∆duæ
, (fwdls.d∆duæ), "D∆dURL|%s\n", 
£rvî_uæ
);

166 
	`¢¥ötf
(
fwdls
.
œ°run
, (fwdls.lastrun), "LastRun|\n");

167 
	`¢¥ötf
(
fwdls
.
DñayDow∆ﬂd
, (fwdls.DelayDownload), "DelayDownload|\n");

168 i‡(
upgøde_ty≥
 =
PDRI_UPGRADE
) {

169 
	`upd©eFWDow∆ﬂdSètus
(&
fwdls
, "yes");

171 
	`upd©eFWDow∆ﬂdSètus
(&
fwdls
, "no");

174  
Êash_°©us
;

175 
	}
}

185 
	$po°Fœsh
(c⁄° *
maöt
, c⁄° *
upgøde_fûe
, 
upgøde_ty≥
, c⁄° *
ªboŸ_Êag
)

187 
Dow∆ﬂdD©a
 
DwnLoc
;

188 
ªt
 = -1;

189 
devi˚_ty≥
[32];

190 
devi˚_«me
[32];

191 
°age2lock
[32] = {0};

192 
FILE
 *
Â
 = 
NULL
;

193 *
°age2fûe
 = 
NULL
;

194 *
tmp_°age2lock
 = 
NULL
;

195 
boﬁ
 
°_nŸify_Êag
 = 
Ál£
;

196 
po°_d©a
[] = "{\"jsonrpc\":\"2.0\",\"id\":\"3\",\"method\":\"org.rdk.FactoryProtect.1.setManufacturerData\",\"params\":{\"key\":\"deviceStage\",\"value\":\"stage2\"}}";

198 i‡(
maöt
 =
NULL
 || 
ªboŸ_Êag
 =NULL || 
upgøde_fûe
 == NULL) {

199 
	`SWLOG_ERROR
("%s: P¨amëî i†NULL\n", 
__FUNCTION__
);

200  
ªt
;

203 
Â
 = 
	`f›í
("/tmp/rdkvfw_sec_stage", "w");

204 i‡(
Â
 !
NULL
) {

205 
	`f˛o£
(
Â
);

207 
ªt
 = 
	`gëDevi˚Pr›îtyD©a
("DEVICE_TYPE", 
devi˚_ty≥
, (device_type));

208 i‡(
ªt
 =
UTILS_SUCCESS
) {

209 
	`SWLOG_INFO
("%s: devi˚_ty≥ = %s\n", 
__FUNCTION__
, 
devi˚_ty≥
);

211 
	`SWLOG_ERROR
("%s: gëDevi˚Pr›îtyD©a(Ëf‹ devi˚_ty≥ faû\n", 
__FUNCTION__
);

212  
ªt
;

214 
ªt
 = 
	`gëDevi˚Pr›îtyD©a
("DEVICE_NAME", 
devi˚_«me
, (device_name));

215 i‡(
ªt
 =
UTILS_SUCCESS
) {

216 
	`SWLOG_INFO
("%s: devi˚_«mê%s\n", 
__FUNCTION__
, 
devi˚_«me
);

218 
	`SWLOG_ERROR
("%s: gëDevi˚Pr›îtyD©a(Ëf‹ devi˚_«mêÁû\n", 
__FUNCTION__
);

219  
ªt
;

221 i‡(0 =(
	`°∫cmp
(
devi˚_«me
, "PLATCO", 6))) {

222 
ªt
 = 
	`gëDevi˚Pr›îtyD©a
("STAGE2LOCKFILE", 
°age2lock
, (stage2lock));

223 i‡(
ªt
 =
UTILS_SUCCESS
) {

224 
	`SWLOG_INFO
("%s: securôy sège2fûê«mê%s\n", 
__FUNCTION__
, 
°age2lock
);

226 i‡(
°age2lock
[0] == '"') {

227 
tmp_°age2lock
 = 
	`°rchr
(
°age2lock
+1, '"');

228 i‡(
tmp_°age2lock
 !
NULL
) {

229 *
tmp_°age2lock
 = '\0';

231 
	`SWLOG_INFO
("Securôy sègêfûê«me=%s\n", 
°age2lock
+1);

232 
°age2fûe
 = 
°age2lock
+1;

233 i‡(
°age2fûe
 !
NULL
) {

234 
	`SWLOG_INFO
("Securôy sègêfûê«mêa·îÑemovê•ecü»ch¨a˘î=%s\n", 
°age2fûe
);

237 
°age2fûe
 = 
°age2lock
;

239 i‡(0 !(
	`fûePª£¡Check
(
°age2fûe
))) {

240 
	`°¨tFa˘‹yPrŸe˘Sîvi˚
();

241 
	`¶ìp
(2);

243 if–
	`ÆlocDowndLﬂdD©aMem
–&
DwnLoc
, 
DEFAULT_DL_ALLOC
 ) == 0 )

245 
	`gëJs⁄Rpc
(
po°_d©a
, &
DwnLoc
);

246 
Â
 = 
	`f›í
(
°age2fûe
, "w");

247 i‡(
Â
 !
NULL
) {

248 
	`SWLOG_INFO
("Security stage file created\n");

249 
	`f˛o£
(
Â
);

251 
	`SWLOG_ERROR
("UnableÅo create Security stage file\n");

253 if–
DwnLoc
.
pvOut
 !
NULL
 )

255 
	`‰ì
–
DwnLoc
.
pvOut
 );

260 
	`SWLOG_ERROR
("%s: gëDevi˚Pr›îtyD©a(Ëf‹ devi˚_«mêÁû\n", 
__FUNCTION__
);

263 
°_nŸify_Êag
 = 
	`isMmgbÀNŸifyE«bÀd
();

264 
	`evítM™agî
(
FW_STATE_EVENT
, 
FW_STATE_VALIDATION_COMPLETE
);

265 
	`evítM™agî
(
IMG_DWL_EVENT
, 
IMAGE_FWDNLD_FLASH_COMPLETE
);

266 if–
	`isInSèãRed
() ) {

267 
	`evítM™agî
(
RED_STATE_EVENT
, 
RED_RECOVERY_PROGRAMMED
);

268 
	`SWLOG_INFO
("CreatingÑed_state_reboot file\n");

269 
Â
 = 
	`f›í
(
RED_STATE_REBOOT
, "w");

270 i‡(
Â
 !
NULL
) {

271 
	`f˛o£
(
Â
);

274 i‡((
	`°∫cmp
(
devi˚_ty≥
, "brﬂdb™d", 9)Ë&& (0 =(°∫cmp(
maöt
, "true", 4)))) {

275 
	`evítM™agî
("Maöã«n˚MGR", 
MAINT_FWDOWNLOAD_COMPLETE
);

277 
	`¶ìp
(5);

278 
	`sync
();

279 i‡(0 !(
	`fûePª£¡Check
("/tmp/fw_preparing_to_reboot"))) {

280 
Â
 = 
	`f›í
("/tmp/fw_preparing_to_reboot", "w");

281 i‡(
Â
 =
NULL
) {

282 
	`SWLOG_ERROR
("Error creating file /tmp/fw_preparing_to_reboot\n");

284 
	`SWLOG_INFO
("Creating flag forÖreparingÅoÑebootÉvent sentÅo AS/EPG\n");

285 
	`f˛o£
(
Â
);

287 
	`evítM™agî
(
FW_STATE_EVENT
,
FW_STATE_PREPARING_TO_REBOOT
);

289 i‡(
upgøde_ty≥
 =
PDRI_UPGRADE
) {

290 
	`SWLOG_INFO
("Reboot Not Neededáfter PDRI Upgrade..!\n");

292 
	`SWLOG_INFO
("%†: Upgøded fûê%s\n", 
__FUNCTION__
, 
upgøde_fûe
);

293 
Â
 = 
	`f›í
("/opt/cdl_flashed_file_name", "w");

294 i‡(
Â
 !
NULL
) {

295 
	`Ârötf
(
Â
, "%s\n", 
upgøde_fûe
);

296 
	`f˛o£
(
Â
);

298 i‡(0 =(
	`°∫cmp
(
maöt
, "true", 4))) {

299 
	`evítM™agî
("Maöã«n˚MGR", 
MAINT_REBOOT_REQUIRED
);

300 i‡(0 =(
	`°∫cmp
(
devi˚_«me
, "PLATCO", 6)Ë&& (0 =(°∫cmp(
ªboŸ_Êag
, "true", 4)))) {

301 
	`SWLOG_INFO
("SendÇotificationÅoÑeboot in 10mins dueÅo critical upgrade\n");

302 
	`evítM™agî
(
FW_STATE_EVENT
, 
FW_STATE_CRITICAL_REBOOT
);

303 
	`SWLOG_INFO
("Sleeping for 600 sec beforeÑebootingÅhe STB\n");

304 
	`¶ìp
(600);

305 
	`SWLOG_INFO
("Application Reboot Timer of 600Éxpired, Rebooting from RDK\n");

307 
	`v_£cuª_sy°em
("sh /rebootNow.sh -s '%s' -o '%s'","UpgradeReboot_rdkvfwupgrader", "RebootingÅhe box from RDK for Pending Critical Firmware Upgrade...");

309 
	`upd©eOPTOUTFûe
(
MAINTENANCE_MGR_RECORD_FILE
);

311 i‡(0 =(
	`°∫cmp
(
ªboŸ_Êag
, "true", 4))) {

312 
	`SWLOG_INFO
("Download is complete. RebootingÅhe boxÇow...\n");

313 
	`SWLOG_INFO
("Trigger RebootPendingNotification in background\n");

314 i‡(
åue
 =
°_nŸify_Êag
) {

315 
	`SWLOG_INFO
("RDKV_REBOOT : Setting RebootPendingNotification beforeÑeboot\n");

316 
	`nŸifyDw∆Sètus
(
RFC_FW_REBOOT_NOTIFY
, 
REBOOT_PENDING_DELAY
, 
RFC_UINT
);

317 
	`SWLOG_INFO
("RDKV_REBOOT : RebootPendingNotification SET succeeded\n");

319 
	`un£tSèãRed
();

320 
	`SWLOG_INFO
("sleep for 2 secÅo sendÑebootÖendingÇotification\n");

321 
	`¶ìp
(2);

323 
	`v_£cuª_sy°em
("sh /rebootNow.sh -s '%s' -o '%s'", "UpgradeReboot_rdkvfwupgrader", "RebootingÅhe boxáfter Firmware Image Upgrade...");

328 
	}
}

	@src/iarmInterface/iarmInterface.c

19 
	~<°dboﬁ.h
>

20 #i‡
deföed
(
IARM_ENABLED
)

22 
	~"ürmI¡îÁ˚.h
"

24 #ifde‡
CTRLM_ENABLED


25 
	~"˘æm_ùc_devi˚_upd©e.h
"

28 
	~"rdkv_cdl_log_wøµî.h
"

29 
	~<cuæ/cuæ.h
>

30 
	~"js⁄_¥o˚ss.h
"

31 #i‚de‡
GTEST_ENABLE


32 
	~"uæHñ≥r.h
"

33 
	~"js⁄_∑r£.h
"

35 
	~"devi˚utûs.h
"

37 
gëAµMode
();

38 
	#IARM_RDKVFWUPGRADER_EVENT
 "RDKVFWEvít"

	)

46 
	$evítM™agî
(c⁄° *
cur_evít_«me
, c⁄° *
evít_°©us
) {

47 
	sevítLi°
 {

48 
gch¨
* 
evít_«me
;

49 
sys_°©e_evít
;

50 } 
evít_li°
[] = {

51 { "ImageDwldEvít", 
IARM_BUS_SYSMGR_SYSSTATE_FIRMWARE_DWNLD
 },

52 { "Fúmw¨eSèãEvít", 
IARM_BUS_SYSMGR_SYSSTATE_FIRMWARE_UPDATE_STATE
 },

53 { "RedSèãEvít", 
IARM_BUS_SYSMGR_SYSSTATE_RED_RECOV_UPDATE_STATE
 }

55 
IARM_Bus_SYSMgr_EvítD©a_t
 
evít_d©a
;

56 
i
;

57 
Àn
 = (
evít_li°
Ë/ (
evítLi°
);

58 
IARM_Resu…_t
 
ªt_code
 = 
IARM_RESULT_SUCCESS
;

59 
boﬁ
 
evít_m©ch
 = 
Ál£
;

62 if(
cur_evít_«me
 =
NULL
 || 
evít_°©us
 == NULL) {

63 
	`SWLOG_ERROR
("eventManager() failed dueÅo NULLÖarameter\n");

67 
	`SWLOG_INFO
("%s: Gíî©êIARM_BUS_NAME cuºíàevít=%s\n", 
__FUNCTION__
, 
cur_evít_«me
);

68 #ifde‡
EN_MAINTENANCE_MANAGER


69 i‡–!(
	`°∫cmp
(
cur_evít_«me
,"MaintenanceMGR", 14)) ) {

70 
IARM_Bus_MaötMGR_EvítD©a_t
 
öfoSètus
;

71 
maö_mgr_evít
;

73 
	`mem£t
–&
öfoSètus
, 0, (
IARM_Bus_MaötMGR_EvítD©a_t
) );

74 
maö_mgr_evít
 = 
	`©oi
(
evít_°©us
);

75 
	`SWLOG_INFO
(">>>>> Idítifõd Maöã«n˚MGR wôhÉvíàvÆue=%u", 
maö_mgr_evít
);

76 
öfoSètus
.
d©a
.
maöã«n˚_moduÀ_°©us
.
°©us
 = (
IARM_Maöt_moduÀ_°©us_t
)
maö_mgr_evít
;

77 
ªt_code
=
	`IARM_Bus_Brﬂdˇ°Evít
(
IARM_BUS_MAINTENANCE_MGR_NAME
,(
IARM_EvítId_t
)
IARM_BUS_MAINTENANCEMGR_EVENT_UPDATE
, (*)&
öfoSètus
, (infoStatus));

78 
	`SWLOG_INFO
(">>>>> IARM %† Evíà = %d",(
ªt_code
 =
IARM_RESULT_SUCCESS
) ? "SUCCESS" : "FAILURE",\

79 
öfoSètus
.
d©a
.
maöã«n˚_moduÀ_°©us
.
°©us
);

83 if–!(
	`°∫cmp
–
cur_evít_«me
,"PeripheralUpgradeEvent", 22 )) )

85 #ifde‡
CTRLM_ENABLED


86 
˘æm_devi˚_upd©e_ürm_ˇŒ_upd©e_avaûabÀ_t
 
fúmw¨eInfo
;

87 
IARM_Resu…_t
 
ªsu…
;

88 *
pSaved
;

89 * 
evít_°©us_c›y
 = 
	`°rdup
(
evít_°©us
);

90 if(
evít_°©us_c›y
 =
NULL
) {

91 
	`SWLOG_ERROR
("eventManager() failed dueÅo strdupÑeturned NULL\n");

95 
	`SWLOG_INFO
–"%s:Évít_°©u†%s\n", 
__FUNCTION__
, 
evít_°©us
 );

96 
fúmw¨eInfo
.
≠i_ªvisi⁄
 = 
CTRLM_DEVICE_UPDATE_IARM_BUS_API_REVISION
;

97 
	`¢¥ötf
–
fúmw¨eInfo
.
fúmw¨eLoˇti⁄
, (firmwareInfo.firmwareLocation), "%s",

98 
	`°πok_r
–
evít_°©us_c›y
, ":", &
pSaved
 ) );

99 
	`¢¥ötf
–
fúmw¨eInfo
.
fúmw¨eNames
, (fúmw¨eInfo.
fúmw¨eLoˇti⁄
), "%s",

100 
	`°πok_r
–
NULL
, ":", &
pSaved
 ) );

101 
	`SWLOG_INFO
( "%s: firmwareInfo.firmwareLocation = %s\nfirmwareInfo.firmwareNames = %s\n",

102 
__FUNCTION__
, 
fúmw¨eInfo
.
fúmw¨eLoˇti⁄
, fúmw¨eInfo.
fúmw¨eNames
 );

104 
ªsu…
 = 
	`IARM_Bus_CÆl
–
CTRLM_MAIN_IARM_BUS_NAME
,

105 
CTRLM_DEVICE_UPDATE_IARM_CALL_UPDATE_AVAILABLE
,

106 (*)&
fúmw¨eInfo
,

107 (
fúmw¨eInfo
) );

109 
	`SWLOG_INFO
("%†: IARM_Bus_CÆ»ªsu… = %d\n", 
__FUNCTION__
, ()
ªsu…
 );

110 
	`‰ì
(
evít_°©us_c›y
);

112 
	`SWLOG_INFO
( "%s:Évent_status = %s -Ço control managerávailable,ÇotÖrocessing IARMÉvent\n",

113 
__FUNCTION__
, 
evít_°©us
 );

118 
	`SWLOG_INFO
–"%s:Évít_°©u†%u\n", 
__FUNCTION__
, 
	`©oi
(
evít_°©us
) );

119  
i
 = 0; i < 
Àn
; i++ ) {

120 if(!(
	`°rcmp
(
cur_evít_«me
, 
evít_li°
[
i
].
evít_«me
))) {

121 
evít_d©a
.
d©a
.
sy°emSèãs
.
°©eId
 = 
evít_li°
[
i
].
sys_°©e_evít
;

122 
evít_d©a
.
d©a
.
sy°emSèãs
.
°©e
 = 
	`©oi
(
evít_°©us
);

123 
evít_m©ch
 = 
åue
;

127 if(
evít_m©ch
 =
åue
) {

128 
evít_d©a
.
d©a
.
sy°emSèãs
.
îr‹
 = 0;

129 
ªt_code
 = 
	`IARM_Bus_Brﬂdˇ°Evít
(
IARM_BUS_SYSMGR_NAME
, (
IARM_EvítId_t
Ë
IARM_BUS_SYSMGR_EVENT_SYSTEMSTATE
, (*Ë&
evít_d©a
,

130 (
evít_d©a
));

131 if(
ªt_code
 =
IARM_RESULT_SUCCESS
) {

132 
	`SWLOG_INFO
("%†: >> IARM SUCCESS Evít=%s,sysSèãEvít=%d\n", 
__FUNCTION__
, 
evít_li°
[
i
].
evít_«me
,Évít_li°[i].
sys_°©e_evít
);

134 
	`SWLOG_ERROR
("%†: >> IARM FAILURE Evít=%s,sysSèãEvít=%d\n", 
__FUNCTION__
, 
evít_li°
[
i
].
evít_«me
,Évít_li°[i].
sys_°©e_evít
);

137 
	`SWLOG_ERROR
("%s: Thîê¨ênÿm©chög IARM sy†evít†f‹ %s\n", 
__FUNCTION__
, 
cur_evít_«me
);

140 
	`SWLOG_INFO
("%†: IARM_evít_£ndî closög\n", 
__FUNCTION__
);

141 
	}
}

149 
	$Dw∆St›EvítH™dÀr
(c⁄° *
ow√r
, 
IARM_EvítId_t
 
evítId
, *
d©a
, 
size_t
 
Àn
)

151 
≠p_mode
 = -1;

152 
ªcv_≠p_mode
 = -1;

153 i‡(
d©a
 =
NULL
) {

154 
	`SWLOG_ERROR
("%s: D©®i†NULL\n", 
__FUNCTION__
);

157 
	`SWLOG_ERROR
("%s: I¿evíàD©®ªcv\n", 
__FUNCTION__
);

158 
ªcv_≠p_mode
 = *((*)
d©a
);

159 
	`SWLOG_INFO
("%s: D©®ªcv:%d\n", 
__FUNCTION__
, *((*)
d©a
));

160 
evítId
)

162 
IARM_BUS_RDKVFWUPGRADER_MODECHANGED
:

164 
≠p_mode
 = 
	`gëAµMode
();

165 i‡(
ªcv_≠p_mode
 !
≠p_mode
) {

166 
	`öãru±Dw∆
(
ªcv_≠p_mode
);

168 
	`SWLOG_INFO
("Cuºíà≠∞modê%dándÑecõvedáµ modê%d i†ßme\n", 
≠p_mode
, 
ªcv_≠p_mode
);

177 
	}
}

185 
boﬁ
 
	$isC⁄√˘ed
()

187 
IARM_Resu…_t
 
ªs
;

188 
isRegi°îed
 = 0;

189 
ªs
 = 
	`IARM_Bus_IsC⁄√˘ed
(
IARM_RDKVFWUPGRADER_EVENT
, &
isRegi°îed
);

190 
	`SWLOG_INFO
("IARM_Bus_IsC⁄√˘ed: %d (%d)", 
ªs
, 
isRegi°îed
);

192 i‡(
isRegi°îed
 == 1) {

193  
åue
;

195  
Ál£
;

197 
	}
}

204 
	$öô_evít_h™dÀr
()

206 
IARM_Resu…_t
 
ªs
;

207 i‡(
	`isC⁄√˘ed
()) {

208 
	`SWLOG_INFO
("IARMálready connected\n");

210 
ªs
 = 
	`IARM_Bus_Inô
(
IARM_RDKVFWUPGRADER_EVENT
);

211 
	`SWLOG_INFO
("IARM_Bus_Inô: %d\n", 
ªs
);

212 i‡(
ªs
 =
IARM_RESULT_SUCCESS
 ||Ñe†=
IARM_RESULT_INVALID_STATE
) {

213 
	`SWLOG_INFO
("SUCCESS: IARM_Bus_Init done!\n");

215 
ªs
 = 
	`IARM_Bus_C⁄√˘
();

216 
	`SWLOG_INFO
("IARM_Bus_C⁄√˘: %d\n", 
ªs
);

217 i‡(
ªs
 =
IARM_RESULT_SUCCESS
 ||Ñe†=
IARM_RESULT_INVALID_STATE
) {

218 i‡(
	`isC⁄√˘ed
()) {

219 
	`SWLOG_INFO
("SUCCESS: IARM_Bus_Connect done!\n");

222 
	`SWLOG_ERROR
("IARM_Bus_C⁄√˘ faûuª: %d\n", 
ªs
);

225 
	`SWLOG_ERROR
("IARM_Bus_Inô faûuª: %d\n", 
ªs
);

228 
ªs
 = 
	`IARM_Bus_Regi°îEvítH™dÀr
(
IARM_BUS_RDKVFWUPGRADER_MGR_NAME
, 
IARM_BUS_RDKVFWUPGRADER_MODECHANGED
, 
Dw∆St›EvítH™dÀr
);

229 
	`SWLOG_INFO
("%s: IARM_Bus_Regi°îEvítH™dÀ∏ªt=%d\n", 
__FUNCTION__
, 
ªs
);

233 
	}
}

241 
	$ãrm_evít_h™dÀr
()

243 
IARM_Resu…_t
 
ªs
 = 0;

244 
ªs
 = 
	`IARM_Bus_UnRegi°îEvítH™dÀr
(
IARM_BUS_RDKVFWUPGRADER_MGR_NAME
, 
IARM_BUS_RDKVFWUPGRADER_MODECHANGED
);

245 
	`SWLOG_INFO
("Suc˚ssfuŒyÅîmö©edáŒÉvíàh™dÀrs:%d\n",
ªs
);

246 
	`IARM_Bus_Disc⁄√˘
();

247 
	`IARM_Bus_Tîm
();

249 
	}
}

251 
boﬁ
 
	$isC⁄√˘edToI¡î√t
 ()

253 
boﬁ
 
isc⁄√˘ed
 = 
Ál£
;

255 
Dow∆ﬂdD©a
 
DwnLoc
;

256 
JSON
 *
pJs⁄
 = 
NULL
;

257 
JSON
 *
pIãm
 = 
NULL
;

258 
JSON
 *
ªs_vÆ
 = 
NULL
;

260 
po°_d©a4
[] = "{\"jsonrpc\":\"2.0\",\"id\":\"42\",\"method\": \"org.rdk.NetworkManager.IsConnectedToInternet\", \"params\" : { \"ipversion\" : \"IPv4\"}}";

261 
po°_d©a6
[] = "{\"jsonrpc\":\"2.0\",\"id\":\"42\",\"method\": \"org.rdk.NetworkManager.IsConnectedToInternet\", \"params\" : { \"ipversion\" : \"IPv6\"}}";

262 
°©us
[20];

263 if–
	`ÆlocDowndLﬂdD©aMem
–&
DwnLoc
, 
DEFAULT_DL_ALLOC
 ) == 0 )

265 i‡(0 !
	`gëJs⁄Rpc
(
po°_d©a4
, &
DwnLoc
))

267 
	`SWLOG_INFO
("%†:: isc⁄√˘ed Js⁄Rp¯ˇŒ faûed\n",
__FUNCTION__
);

268  
isc⁄√˘ed
;

270 
pJs⁄
 = 
	`P¨£Js⁄Så
–(*)
DwnLoc
.
pvOut
 );

272 if–
pJs⁄
 !
NULL
 )

274 
pIãm
 = 
	`GëJs⁄Iãm
–
pJs⁄
, "result" );

275 
ªs_vÆ
 = 
	`GëJs⁄Iãm
–
pIãm
, "status" );

276 if–
pIãm
 !
NULL
 )

278 
	`°∫˝y
(
°©us
, 
ªs_vÆ
->
vÆue°rög
, (status));

279 
	`SWLOG_INFO
("%†:: sètu†%s\n",
__FUNCTION__
, 
°©us
);

280 i‡(
	`°rcmp
(
°©us
, "NO_INTERNET") != 0) {

281 
	`SWLOG_INFO
("%†:: ipv4 check o∆yÑëu∫\n",
__FUNCTION__
);

282 
isc⁄√˘ed
 = 
åue
;

286 i‡(0 !
	`gëJs⁄Rpc
(
po°_d©a6
, &
DwnLoc
))

288 
	`SWLOG_INFO
("%†:: isc⁄√˘ed Js⁄Rp¯ˇŒ faûed\n",
__FUNCTION__
);

289  
isc⁄√˘ed
;

291 
pJs⁄
 = 
	`P¨£Js⁄Så
–(*)
DwnLoc
.
pvOut
 );

292 if–
pJs⁄
 !
NULL
 )

294 
pIãm
 = 
	`GëJs⁄Iãm
–
pJs⁄
, "result" );

295 
ªs_vÆ
 = 
	`GëJs⁄Iãm
–
pIãm
, "status" );

296 if–
pIãm
 !
NULL
 )

298 
	`°∫˝y
(
°©us
, 
ªs_vÆ
->
vÆue°rög
, (status));

299 
	`SWLOG_INFO
("%†:: sètu†%s\n",
__FUNCTION__
, 
°©us
);

300 i‡(
	`°rcmp
(
°©us
, "NO_INTERNET") != 0) {

301 
isc⁄√˘ed
 = 
åue
;

302 
	`SWLOG_INFO
("%†:: Róched ipv6 check\n",
__FUNCTION__
);

307 
	`SWLOG_INFO
("%†:: isc⁄√˘ed sètu†%d\n",
__FUNCTION__
,
isc⁄√˘ed
);

309 
	`FªeJs⁄
–
pJs⁄
 );

311 if–
DwnLoc
.
pvOut
 !
NULL
 )

313 
	`‰ì
–
DwnLoc
.
pvOut
 );

316  
isc⁄√˘ed
;

317 
	}
}

323 
	$evítM™agî
(c⁄° *
cur_evít_«me
, c⁄° *
evít_°©us
) {

325 
	}
}

327 
	$ãrm_evít_h™dÀr
()

330 
	}
}

331 
	$öô_evít_h™dÀr
()

334 
	}
}

335 
boﬁ
 
	$isC⁄√˘edToI¡î√t
 ()

337  
åue
;

338 
	}
}

	@src/include/device_status_helper.h

19 #i‚de‡
VIDEO_DEVICE_STATUS_HELPER_H_


20 
	#VIDEO_DEVICE_STATUS_HELPER_H_


	)

22 
	~<°dboﬁ.h
>

23 
	~<time.h
>

25 
	#DNS_RESOLV_FILE
 "/ëc/ªsﬁv.dnsmasq"

	)

26 
	#IP_ROUTE_FLAG
 "/tmp/rouã_avaûabÀ"

	)

27 
	#GATEWAYIP_FILE
 "/tmp/.G©ewayIP_dÊåouã"

	)

28 
	#ROUTE_FLAG_MAX_CHECK
 5

	)

29 
	#MAINTENANCE_MGR_RECORD_FILE
 "/›t/maöã«n˚_mgr_ªc‹d.c⁄f"

	)

31 
	#MAINTENANCE_MGR_RECORD_UPDATE_FILE
 "/›t/.mm_ªc‹d_upd©e.c⁄f"

	)

32 
	#FLAG_MAX_CHECK
 5

	)

34 #ifde‡
GTEST_ENABLE


35 
	#RDK_API_SUCCESS
 0

	)

36 
	~<f˙é.h
>

37 
	~<sys/°©.h
>

40 
boﬁ
 
isDevi˚RódyF‹Dow∆ﬂd
();

41 
isSèãRedSuµ‹ãd
();

42 
isInSèãRed
();

43 
checkAndE¡îSèãRed
(
cuæªt
, const *);

44 
checkVideoSètus
(c⁄° *
devi˚_«me
);

45 
isThrŸéeE«bÀd
(c⁄° *
devi˚_«me
, c⁄° *
ªboŸ_immedüã_Êag
, 
≠p_mode
);

46 
isOCSPE«bÀ
();

47 
isCodeBigFÆlBackE«bÀd
();

48 
isDw∆Block
(
ty≥
);

49 
boﬁ
 
isUpgødeInProgªss
();

50 
time_t
 
gëCuºítSysTimeSec
();

51 
boﬁ
 
isDñayFWDow∆ﬂdA˘ive
(
DñayDow∆ﬂdXc⁄f
, c⁄° *
maöt
, 
åiggî_ty≥
);

52 
boﬁ
 
isPDRIE«bÀ
();

53 
boﬁ
 
checkPDRIUpgøde
(c⁄° *
dw∆_pdri_img
);

54 
boﬁ
 
checkF‹VÆidPCIUpgøde
(
åiggî_ty≥
, c⁄° *
myfwvîsi⁄
, c⁄° *
˛oudFWVîsi⁄
, c⁄° *
˛oudFWFûe
);

55 
boﬁ
 
œ°Dw∆Img
(*
img_«me
, 
size_t
 
img_«me_size
);

56 
boﬁ
 
cuºítImg
(*
img_«me
, 
size_t
 
img_«me_size
);

57 
un£tSèãRed
();

58 
boﬁ
 
GëPDRIVîsi⁄
(*
pPdriVîsi⁄
, 
size_t
 
szBufSize
);

59 
boﬁ
 
upd©eOPTOUTFûe
(c⁄° *
›tout_fûe_«me
);

60 
boﬁ
 
CheckIProuãC⁄√˘ivôy
(c⁄° *
fûe_«me
);

61 
boﬁ
 
isDnsResﬁve
(c⁄° *
dns_fûe_«me
);

62 
boﬁ
 
checkCodebigAc˚ss
();

63 
boﬁ
 
CuºítRu¬ögIn°
(c⁄° *
fûe
);

64 
boﬁ
 
œ°Dw∆Img
(*
img_«me
, 
size_t
 
img_«me_size
);

65 
waôF‹Nç
();

66 
boﬁ
 
¥evFœshedFûe
(*
img_«me
, 
size_t
 
img_«me_size
);

67 
gëFûeLa°ModifyTime
(*
fûe_«me
);

	@src/include/download_status_helper.h

19 #i‚de‡
VIDEO_DOWNLOAD_STATUS_HELPER_H_


20 
	#VIDEO_DOWNLOAD_STATUS_HELPER_H_


	)

22 
	~"rdkv_cdl.h
"

23 
	~"rfcöãrÁ˚.h
"

24 
	#MIN_BUFF_SIZE2
 
MIN_BUFF_SIZE1
 + 40

	)

25 
	#MIN_BUFF_SIZE3
 
MIN_BUFF_SIZE
 + 64

	)

27 
	sFWDow∆ﬂdSètus
 {

28 
	mmëhod
[
MIN_BUFF_SIZE1
];

29 
	m¥Ÿo
[
MIN_BUFF_SIZE1
];

30 
	m°©us
[
MIN_BUFF_SIZE2
];

31 
	mªboŸ
[
MIN_BUFF_SIZE1
];

32 
	mÁûuªRós⁄
[
MIN_BUFF_SIZE3
];

33 
	md∆dVî¢
[
MAX_BUFF_SIZE1
];

34 
	md∆dfûe
[
MAX_BUFF_SIZE1
];

35 
	md∆duæ
[
MAX_BUFF_SIZE
];

36 
	mœ°run
[
MAX_BUFF_SIZE1
];

37 
	mFwUpd©eSèã
[
MIN_BUFF_SIZE
];

38 
	mDñayDow∆ﬂd
[
MIN_BUFF_SIZE1
];

42 
upd©eFWDow∆ﬂdSètus
(
FWDow∆ﬂdSètus
 *
fwdls
, c⁄° *
dißbÀSètsUpd©e
) ;

43 
nŸifyDw∆Sètus
(c⁄° *
key
, c⁄° *
vÆue
, 
RFCVALDATATYPE
 
d©©y≥
);

	@src/include/iarmInterface.h

19 #i‚de‡
VIDEO_IARMINTERFACE_IARMINTERFACE_H_


20 
	#VIDEO_IARMINTERFACE_IARMINTERFACE_H_


	)

22 #i‡
deföed
(
IARM_ENABLED
)

23 #i‚de‡
GTEST_ENABLE


24 
	~"sysMgr.h
"

25 
	~"libIARMC‹e.h
"

26 
	~"libIBus.h
"

27 
	~"libIBusD´m⁄.h
"

28 
	~<glib.h
>

30 #ifde‡
EN_MAINTENANCE_MANAGER


31 
	~"maöã«n˚MGR.h
"

34 #ifde‡
GTEST_ENABLE


36 
	tIARM_EvítId_t
;

37 
	#IARM_BUS_SYSMGR_NAME
 "SYSMGR"

	)

38 
	e_IARM_Resu…_t


40 
	mIARM_RESULT_SUCCESS
,

41 
	mIARM_RESULT_INVALID_PARAM
,

42 
	mIARM_RESULT_INVALID_STATE
,

43 } 
	tIARM_Resu…_t
;

45 
	e_SYSMgr_EvítId_t
 {

46 
	mIARM_BUS_SYSMGR_EVENT_SYSTEMSTATE
,

47 
	mIARM_BUS_SYSMGR_EVENT_IMAGE_DNLD
,

48 
	mIARM_BUS_SYSMGR_EVENT_USB_MOUNT_CHANGED
,

49 
	mIARM_BUS_SYSMGR_EVENT_MAX


50 } 
	tIARM_Bus_SYSMgr_EvítId_t
;

52 
	s_IARM_BUS_SYSMgr_EvítD©a_t
{

54 
	s_CARD_FWDNLD_DATA
 {

55 
	mevítTy≥
;

56 
	m°©us
;

57 } 
	mˇrdFWDNLD
;

58 
	s_IMAGE_FWDNLD_DATA
 {

59 
	m°©us
;

60 } 
	mimageFWDNLD
;

61 
	s_Sy°emSèãs
 {

62 
	m°©eId
;

63 
	m°©e
;

64 
	mîr‹
;

65 
	m∑ylﬂd
[128];

66 } 
	msy°emSèãs
;

68 } 
	md©a
;

69 }
	tIARM_Bus_SYSMgr_EvítD©a_t
;

71 
	#IARM_BUS_SYSMGR_SYSSTATE_FIRMWARE_UPDATE_STATE
 1

	)

72 
	#IARM_BUS_SYSMGR_SYSSTATE_FIRMWARE_DWNLD
 2

	)

73 
	#IARM_BUS_SYSMGR_SYSSTATE_RED_RECOV_UPDATE_STATE
 3

	)

75 
	tgch¨
;

80 
	#IARM_BUS_RDKVFWUPGRADER_MGR_NAME
 "RdkvFWupgødî"

	)

81 
	#IARM_BUS_RDKVFWUPGRADER_MODECHANGED
 0

	)

82 
	#IARM_BUS_NETSRVMGR_API_isC⁄√˘edToI¡î√t
 "isC⁄√˘edToI¡î√t"

	)

83 
	#IARM_BUS_NM_SRV_MGR_NAME
 "NET_SRV_MGR"

	)

86 
	#IMAGE_FWDNLD_UNINITIALIZED
 "0"

	)

87 
	#IMAGE_FWDNLD_DOWNLOAD_INPROGRESS
 "1"

	)

88 
	#IMAGE_FWDNLD_DOWNLOAD_COMPLETE
 "2"

	)

89 
	#IMAGE_FWDNLD_DOWNLOAD_FAILED
 "3"

	)

90 
	#IMAGE_FWDNLD_FLASH_INPROGRESS
 "4"

	)

91 
	#IMAGE_FWDNLD_FLASH_COMPLETE
 "5"

	)

92 
	#IMAGE_FWDNLD_FLASH_FAILED
 "6"

	)

95 
	#MAINT_FWDOWNLOAD_COMPLETE
 "8"

	)

96 
	#MAINT_FWDOWNLOAD_ERROR
 "9"

	)

97 
	#MAINT_FWDOWNLOAD_ABORTED
 "10"

	)

98 
	#MAINT_CRITICAL_UPDATE
 "11"

	)

99 
	#MAINT_REBOOT_REQUIRED
 "12"

	)

100 
	#MAINT_FWDOWNLOAD_INPROGRESS
 "15"

	)

101 
	#MAINT_FWDOWNLOAD_FG
 "17"

	)

102 
	#MAINT_FWDOWNLOAD_BG
 "18"

	)

105 
	#FW_STATE_UNINITIALIZED
 "0"

	)

106 
	#FW_STATE_REQUESTING
 "1"

	)

107 
	#FW_STATE_DOWNLOADING
 "2"

	)

108 
	#FW_STATE_FAILED
 "3"

	)

109 
	#FW_STATE_DOWNLOAD_COMPLETE
 "4"

	)

110 
	#FW_STATE_VALIDATION_COMPLETE
 "5"

	)

111 
	#FW_STATE_PREPARING_TO_REBOOT
 "6"

	)

112 
	#FW_STATE_ONHOLD_FOR_OPTOUT
 "7"

	)

113 
	#FW_STATE_CRITICAL_REBOOT
 "8"

	)

114 
	#FW_STATE_NO_UPGRADE_REQUIRED
 "9"

	)

117 
	#RED_RECOVERY_COMPLETED
 "0"

	)

118 
	#RED_RECOVERY_STARTED
 "1"

	)

119 
	#RED_RECOVERY_DOWNLOADED
 "2"

	)

120 
	#RED_RECOVERY_PROGRAMMED
 "3"

	)

128 
evítM™agî
(c⁄° *
cur_evít_«me
, c⁄° *
evít_°©us
) ;

129 
ãrm_evít_h™dÀr
();

130 
öô_evít_h™dÀr
();

131 
öãru±Dw∆
(
≠p_mode
);

132 
boﬁ
 
isC⁄√˘edToI¡î√t
 ();

	@src/include/json_process.h

19 #i‚de‡
_JSON_PROCESS_H_


20 
	#_JSON_PROCESS_H_


	)

22 
	~<°ddef.h
>

24 
	#CLD_URL_MAX_LEN
 512

	)

26 
	sxc⁄f_ª•⁄£
 {

27 
	m˛oudFWFûe
[128];

28 
	m˛oudFWLoˇti⁄
[
CLD_URL_MAX_LEN
];

29 
	mùv6˛oudFWLoˇti⁄
[
CLD_URL_MAX_LEN
];

30 
	m˛oudFWVîsi⁄
[64];

31 
	m˛oudDñayDow∆ﬂd
[8];

32 
	m˛oudPrŸo
[6];

33 
	m˛oudImmedüãReboŸFœg
[12];

34 
	m≥rùhîÆFúmw¨es
[256];

35 
	mdlCîtBundÀ
[64];

36 
	m˛oudPDRIVîsi⁄
[64];

37 
	mrdmC©ÆogueVîsi⁄
[512];

38 } 
	tXCONFRES
;

40 
¥o˚ssJs⁄Re•⁄£
(
XCONFRES
 *
ª•⁄£
, c⁄° *
myfwvîsi⁄
, c⁄° *
modñ
, c⁄° *
maöt
);

41 
gëXc⁄fRe•D©a
(
XCONFRES
 *
pRe•⁄£
, *
pJs⁄Så
);

42 
size_t
 
¸óãJs⁄Såög
(*
pPo°FõldOut
, size_à
szPo°FõldOut
);

	@src/include/rdkv_cdl.h

19 #i‚de‡ 
_RDKV_CDL_H_


20 
	#_RDKV_CDL_H_


	)

22 
	~<°dio.h
>

23 
	~<°rög.h
>

24 
	~<°dlib.h
>

25 
	~<uni°d.h
>

26 
	~<öây≥s.h
>

27 
	~<˘y≥.h
>

29 
	~<°dboﬁ.h
>

31 #i‚de‡
GTEST_ENABLE


32 #ifde‡
T2_EVENT_ENABLED


33 
	~<ãÀmëry_busmesßge_£ndî.h
>

35 
	~<£cuª_wøµî.h
>

36 
	~"uæHñ≥r.h
"

39 
	~"mésUtûs.h
"

40 
	~"js⁄_¥o˚ss.h
"

42 
	#SUCCESS
 1

	)

43 
	#FAILURE
 -1

	)

45 
	#RDKV_FW_UPGRADER
 "RdkvFwUpgødî"

	)

47 
	#CURL_PID_FILE
 "/tmp/.cuæ.pid"

	)

48 
	#FWDNLD_PID_FILE
 "/tmp/.fwd∆d.pid"

	)

50 #i‚de‡
GTEST_ENABLE


51 
	#STATE_RED_SPRT_FILE
 "/lib/rdk/°©eRedRecovîy.sh"

	)

52 
	#STATEREDFLAG
 "/tmp/°©eRedE«bÀd"

	)

54 
	#STATE_RED_SPRT_FILE
 "/tmp/°©eSuµ‹t"

	)

55 
	#STATEREDFLAG
 "/tmp/°©eRedE«bÀd"

	)

57 
	#DIRECT_BLOCK_FILENAME
 "/tmp/.œ°dúe˘Áû_cdl"

	)

58 
	#CB_BLOCK_FILENAME
 "/tmp/.œ°codebigÁû_cdl"

	)

59 
	#HTTP_CDL_FLAG
 "/tmp/devi˚_öôüãd_rcdl_ö_¥ogªss"

	)

60 
	#SNMP_CDL_FLAG
 "/tmp/devi˚_öôüãd_¢mp_cdl_ö_¥ogªss"

	)

61 
	#ECM_CDL_FLAG
 "/tmp/ecm_öôüãd_cdl_ö_¥ogªss"

	)

62 
	#E«bÀOCSPSè∂ög
 "/tmp/.E«bÀOCSPSè∂ög"

	)

63 
	#E«bÀOCSP
 "/tmp/.E«bÀOCSPCA"

	)

64 
	#PREVIOUS_FLASHED_IMAGE
 "/›t/¥evious_Êashed_fûe_«me"

	)

65 
	#CURRENTLY_RUNNING_IMAGE
 "/tmp/cuºíéy_ru¬ög_image_«me"

	)

66 
	#CDL_FLASHED_IMAGE
 "/›t/cdl_Êashed_fûe_«me"

	)

67 
	#CB_RETRY_COUNT
 1

	)

68 
	#RETRY_COUNT
 2

	)

69 
	#HTTP_SSR_DIRECT
 0

	)

70 
	#HTTP_SSR_CODEBIG
 1

	)

71 
	#HTTP_XCONF_DIRECT
 2

	)

72 
	#HTTP_XCONF_CODEBIG
 3

	)

73 
	#HTTP_UNKNOWN
 5

	)

74 
	#PCI_UPGRADE
 0

	)

75 
	#PDRI_UPGRADE
 1

	)

76 
	#XCONF_UPGRADE
 2

	)

77 
	#PERIPHERAL_UPGRADE
 3

	)

79 
	#INITIAL_VALIDATION_SUCCESS
 0

	)

80 
	#INITIAL_VALIDATION_FAIL
 1

	)

81 
	#INITIAL_VALIDATION_DWNL_INPROGRESS
 2

	)

82 
	#INITIAL_VALIDATION_DWNL_COMPLETED
 3

	)

85 
	#STATUS_FILE
 "/›t/fwd∆d°©us.txt"

	)

87 
	#MAX_BUFF_SIZE
 512

	)

88 
	#MAX_BUFF_SIZE1
 256

	)

89 
	#MIN_BUFF_SIZE
 64

	)

90 
	#MIN_BUFF_SIZE1
 32

	)

91 
	#SMALL_SIZE_BUFF
 8

	)

92 
	#DWNL_PATH_FILE_LEN
 128

	)

96 
	#TLS
 "--ésv1.2"

	)

98 
	#FILE_CONTENT_LEN
 "/tmp/.chunk_dow∆ﬂd_cuæ_hódîs"

	)

99 
	#DIFDPID
 "/tmp/DIFD.pid"

	)

101 
	#HTTP_CODE_FILE
 "/›t/xc⁄f_cuæ_hâpcode"

	)

102 
	#CURL_PROGRESS_FILE
 "/›t/cuæ_¥ogªss"

	)

103 
	#DWNL_URL_VALUE
 "/›t/.d∆dURL"

	)

104 
	#RED_STATE_REBOOT
 "/›t/ªd_°©e_ªboŸ"

	)

106 
	#IARM_EVENT_BINARY_LOCATION
 "/u§/bö/IARM_evít_£ndî"

	)

107 
	#IMG_DWL_EVENT
 "ImageDwldEvít"

	)

108 
	#FW_STATE_EVENT
 "Fúmw¨eSèãEvít"

	)

109 
	#RED_STATE_EVENT
 "RedSèãEvít"

	)

111 
	#HTTP_SUCCESS
 200

	)

112 
	#HTTP_CHUNK_SUCCESS
 206

	)

113 
	#HTTP_PAGE_NOT_FOUND
 404

	)

114 
	#CURL_SUCCESS
 0

	)

115 
	#CURL_COULDNT_RESOLVE_HOST
 6

	)

116 
	#CURL_CONNECTIVITY_ISSUE
 7

	)

117 
	#CURLTIMEOUT
 28

	)

118 
	#CURL_LOW_BANDWIDTH
 18

	)

119 
	#CHUNK_DWNL_ENABLE
 1

	)

120 
	#DWNL_BLOCK
 -2

	)

121 
	#REBOOT_PENDING_DELAY
 "2"

	)

122 
	#CODEBIG_SIGNING_FAILED
 -7

	)

124 
	#RDKV_FWDNLD_UNINITIALIZED
 0

	)

125 
	#RDKV_FWDNLD_DOWNLOAD_INIT
 1

	)

126 
	#RDKV_FWDNLD_DOWNLOAD_INPROGRESS
 2

	)

127 
	#RDKV_FWDNLD_DOWNLOAD_EXIT
 3

	)

128 
	#RDKV_FWDNLD_DOWNLOAD_COMPLETE
 4

	)

129 
	#RDKV_FWDNLD_DOWNLOAD_FAILED
 5

	)

130 
	#RDKV_FWDNLD_FLASH_INPROGRESS
 6

	)

131 
	#RDKV_FWDNLD_FLASH_COMPLETE
 7

	)

132 
	#RDKV_FWDNLD_FLASH_FAILED
 8

	)

133 
	#RDKV_XCONF_FWDNLD_DOWNLOAD_INIT
 9

	)

134 
	#RDKV_XCONF_FWDNLD_DOWNLOAD_INPROGRESS
 10

	)

135 
	#RDKV_XCONF_FWDNLD_DOWNLOAD_EXIT
 12

	)

136 
	#RDKV_XCONF_FWDNLD_DOWNLOAD_COMPLETE
 13

	)

137 
	#RDKV_XCONF_FWDNLD_DOWNLOAD_FAILED
 14

	)

139 
	#APP_BACKGROUND
 0

	)

140 
	#APP_FOREGROUND
 1

	)

142 
dow∆ﬂdFûe
–
£rvî_ty≥
, c⁄° * 
¨tiÁ˘Loˇti⁄Uæ
, c⁄° * 
loˇlDow∆ﬂdLoˇti⁄
, * 
pPo°Fõlds
, *
hâpCode
 );

143 
codebigdow∆ﬂdFûe
–
£rvî_ty≥
, c⁄° * 
¨tiÁ˘Loˇti⁄Uæ
, c⁄° * 
loˇlDow∆ﬂdLoˇti⁄
, *
pPo°Fõlds
, *
hâpCode
 );

144 
chunkDow∆ﬂd
(
FûeDw∆_t
 *
pfûe_dw∆
, 
MésAuth_t
 *
£c
, 
•ìd_limô
, *
hâpcode
);

145 
ªåyDow∆ﬂd
(
£rvî_ty≥
, c⁄° * 
¨tiÁ˘Loˇti⁄Uæ
, c⁄° * 
loˇlDow∆ﬂdLoˇti⁄
, *
pPo°Fõlds
, 
ªåy_˙t
, 
dñay
, *
hâpCode
 );

146 
ÁŒBack
(
£rvî_ty≥
, c⁄° * 
¨tiÁ˘Loˇti⁄Uæ
, c⁄° * 
loˇlDow∆ﬂdLoˇti⁄
, *
pPo°Fõlds
, *
hâpCode
);

147 
unöôülize
();

148 
öôülize
();

149 
logFûeD©a
(c⁄° *
fûe_∑th
);

151 
checkTriggîUpgøde
(
XCONFRES
 *
pRe•⁄£
, c⁄° *
modñ
);

152 
ÊashImage
(c⁄° *
£rvî_uæ
, c⁄° *
upgøde_fûe
, c⁄° *
ªboŸ_Êag
, c⁄° *
¥Ÿo
, 
upgøde_ty≥
, c⁄° *
maöt
);

153 
po°Fœsh
(c⁄° *
maöt
, c⁄° *
upgøde_fûe
, 
upgøde_ty≥
, c⁄° *
ªboŸ_Êag
);

154 
upd©eUpgødeFœg
(
a˘i⁄
);

155 
t2Cou¡NŸify
(*
m¨kî
, 
vÆ
);

156 
t2VÆNŸify
(*
m¨kî
, *
vÆ
);

157 
£tAµMode
(
mode
);

158 
gëAµMode
();

159 
£tDw∆Sèã
(
°©e
);

160 
gëDw∆Sèã
();

161 
°¨tFa˘‹yPrŸe˘Sîvi˚
();

162 
öôülVÆid©i⁄
();

	@src/include/rdkv_upgrade.h

1 #i‚de‡
RDKV_UTILS_H_


2 
	#RDKV_UTILS_H_


	)

4 #ifde‡
__˝lu•lus


8 
	~"rdkv_cdl.h
"

15 
rdkv_utûs_öô
();

20 
rdkv_utûs_˛ónup
();

33 
rdkv_upgøde_ªque°
(
upgøde_ty≥
, 
£rvî_ty≥
,

34 c⁄° * 
¨tiÁ˘Loˇti⁄Uæ
, c⁄° * 
dwŒoc
,

35 *
pPo°Fõlds
, *
pHâp_code
,*
immed_ªboŸ_Êag
,
dñay_dw∆
 ,

36 *
œ°run
, *
dißbÀSètsUpd©e
, 
Devi˚Pr›îty_t
 *
devi˚_öfo
);

38 #ifde‡
__˝lu•lus


	@src/include/rfcinterface.h

19 #i‚de‡
VIDEO_RFCINTERFACE_RFCINTERFACE_H_


20 
	#VIDEO_RFCINTERFACE_RFCINTERFACE_H_


	)

23 
	~<°dboﬁ.h
>

26 #i‡
deföed
(
RFC_API_ENABLED
)

27 #i‚de‡
GTEST_ENABLE


28 
	~"rfˇpi.h
"

32 
	~<°dio.h
>

33 
	~<°dlib.h
>

34 
	~<°rög.h
>

36 
	#RFC_VALUE_BUF_SIZE
 512

	)

37 
	#READ_RFC_SUCCESS
 1

	)

38 
	#READ_RFC_FAILURE
 -1

	)

39 
	#READ_RFC_NOTAPPLICABLE
 0

	)

40 
	#WRITE_RFC_SUCCESS
 1

	)

41 
	#WRITE_RFC_FAILURE
 -1

	)

42 
	#WRITE_RFC_NOTAPPLICABLE
 0

	)

44 #ifde‡
GTEST_ENABLE


47 
	sgã°_rfc
 {

48 
	mvÆue
[32];

49 
	m«me
[32];

50 
	mty≥
;

51 
	m°©us
;

52 }
	tRFC_P¨amD©a_t
;

54 
	mWDMP_FAILURE
 = 0,

55 
	mWDMP_SUCCESS
,

56 
	mWDMP_ERR_DEFAULT_VALUE


57 }
	tWDMP_STATUS
;

59 
	#WDMP_STRING
 1

	)

60 
	#WDMP_UINT
 3

	)

61 
	#WDMP_BOOLEAN
 2

	)

66 
	mRFC_STRING
=1,

67 
	mRFC_BOOL
,

68 
	mRFC_UINT


69 }
	tRFCVALDATATYPE
;

71 
	srfcdëaûs
 {

72 
	mrfc_thrŸée
[
RFC_VALUE_BUF_SIZE
];

73 
	mrfc_t›•ìd
[
RFC_VALUE_BUF_SIZE
];

74 
	mrfc_ö¸_cdl
[
RFC_VALUE_BUF_SIZE
];

75 
	mrfc_més
[
RFC_VALUE_BUF_SIZE
];

76 }
	tRfc_t
;

78 
	#RFC_THROTTLE
 "Devi˚.Devi˚Info.X_RDKCENTRAL-COM_RFC.Fótuª.SWDLSpLimô.E«bÀ"

	)

79 
	#RFC_TOPSPEED
 "Devi˚.Devi˚Info.X_RDKCENTRAL-COM_RFC.Fótuª.SWDLSpLimô.T›S≥ed"

	)

80 
	#RFC_INCR_CDL
 "Devi˚.Devi˚Info.X_RDKCENTRAL-COM_RFC.Fótuª.In¸emíèlCDL.E«bÀ"

	)

81 
	#RFC_MTLS
 "Devi˚.Devi˚Info.X_RDKCENTRAL-COM_RFC.Fótuª.MTLS.mTlsXC⁄fDow∆ﬂd.E«bÀ"

	)

82 
	#RFC_MNG_NOTIFY
 "Devi˚.Devi˚Info.X_RDKCENTRAL-COM_RFC.Fótuª.M™agóbÀNŸifiˇti⁄.E«bÀ"

	)

84 
	#RFC_FW_DWNL_START
 "Devi˚.Devi˚Info.X_RDKCENTRAL-COM_xOpsDevi˚Mgmt.RPC.Fúmw¨eDow∆ﬂdSèπedNŸifiˇti⁄"

	)

85 
	#RFC_FW_DWNL_END
 "Devi˚.Devi˚Info.X_RDKCENTRAL-COM_xOpsDevi˚Mgmt.RPC.Fúmw¨eDow∆ﬂdCom∂ëedNŸifiˇti⁄"

	)

86 
	#RFC_FW_REBOOT_NOTIFY
 "Devi˚.Devi˚Info.X_RDKCENTRAL-COM_xOpsDevi˚Mgmt.RPC.ReboŸPídögNŸifiˇti⁄"

	)

87 
	#RFC_FW_AUTO_EXCLUDE
 "Devi˚.Devi˚Info.X_RDKCENTRAL-COM_RFC.Fótuª.FWUpd©e.AutoEx˛uded.E«bÀ"

	)

88 
	#RFC_DEBUGSRV
 "Devi˚.Devi˚Info.X_RDKCENTRAL-COM_RFC.Idítôy.DbgSîvi˚s.E«bÀ"

	)

90 
gëRFCSëtögs
(
Rfc_t
 *
rfc_li°
);

92 
ªad_RFCPr›îty
(* 
ty≥
, c⁄° * 
key
, *
d©a
, 
size_t
 
d©asize
);

93 
wrôe_RFCPr›îty
(* 
ty≥
, c⁄° * 
key
, c⁄° *
d©a
, 
RFCVALDATATYPE
 
d©©y≥
);

95 
isMésE«bÀd
(const *);

96 
isIn¸emëÆCDLE«bÀ
(c⁄° *
fûe_«me
);

97 
boﬁ
 
isMmgbÀNŸifyE«bÀd
();

98 
boﬁ
 
isDebugSîvi˚sE«bÀd
();

	@src/json_process.c

19 
	~"js⁄_¥o˚ss.h
"

20 
	~"rdkv_cdl.h
"

21 
	~"rdkv_cdl_log_wøµî.h
"

22 
	~"dow∆ﬂd_°©us_hñ≥r.h
"

23 
	~"devi˚_°©us_hñ≥r.h
"

24 
	~"ürmI¡îÁ˚.h
"

25 #i‚de‡
GTEST_ENABLE


26 
	~"rdk_fwdl_utûs.h
"

27 
	~"sy°em_utûs.h
"

29 
	~"js⁄_∑r£.h
"

30 
	~"devi˚utûs.h
"

31 
	~"comm⁄_devi˚_≠i.h
"

34 
size_t
 
	$¸óãJs⁄Såög
–*
pPo°FõldOut
, 
size_t
 
szPo°FõldOut
 )

36 *
pTmpPo°
 = 
pPo°FõldOut
;

37 
size_t
 
Àn
, 
tŸÀn
 = 0, 
ªmaöÀn
;

38 
ªt
 = -1;

39 
tmpbuf
[400];

40 
˝u¨ch
[16];

41 
devi˚«me
[32];

43 
˝u¨ch
[0] = 0;

44 
devi˚«me
[0] = 0;

45 
ªt
 = 
	`gëDevi˚Pr›îtyD©a
("CPU_ARCH", 
˝u¨ch
, (cpuarch));

46 i‡(
ªt
 =
UTILS_SUCCESS
) {

47 
	`SWLOG_INFO
("˝u_¨ch = %s\n", 
˝u¨ch
);

49 
	`SWLOG_ERROR
("%s: gëDevi˚Pr›îtyD©a(Ëf‹ cpuárch faû\n", 
__FUNCTION__
);

51 
ªt
 = 
	`gëDevi˚Pr›îtyD©a
("DEVICE_NAME", 
devi˚«me
, (devicename));

52 i‡(
ªt
 =
UTILS_SUCCESS
) {

53 
	`SWLOG_INFO
("DEVICE_NAME = %s\n", 
devi˚«me
);

55 
	`SWLOG_ERROR
("%s: gëDevi˚Pr›îtyD©a(Ëdevi˚ÇamêÁû\n", 
__FUNCTION__
);

58 
Àn
 = 
	`GëE°bMac
–
tmpbuf
, (tmpbuf) );

59 if–
Àn
 )

61 
ªmaöÀn
 = 
szPo°FõldOut
 - 
tŸÀn
;

62 
tŸÀn
 +
	`¢¥ötf
–(
pTmpPo°
 +ÅŸÀn), 
ªmaöÀn
, "eStbMac=%s", 
tmpbuf
 );

64 
Àn
 = 
	`GëFúmw¨eVîsi⁄
–
tmpbuf
, (tmpbuf) );

65 if–
Àn
 )

67 if–
tŸÀn
 )

69 *(
pTmpPo°
 + 
tŸÀn
) = '&';

70 ++
tŸÀn
;

72 
ªmaöÀn
 = 
szPo°FõldOut
 - 
tŸÀn
;

73 
tŸÀn
 +
	`¢¥ötf
–
pTmpPo°
 +ÅŸÀn, 
ªmaöÀn
, "fúmw¨eVîsi⁄=%s", 
tmpbuf
 );

75 
Àn
 = 
	`GëAddôi⁄ÆFwVîInfo
–
tmpbuf
, (tmpbuf) );

76 if–
Àn
 )

78 if–
tŸÀn
 )

80 *(
pTmpPo°
 + 
tŸÀn
) = '&';

81 ++
tŸÀn
;

83 
ªmaöÀn
 = 
szPo°FõldOut
 - 
tŸÀn
;

84 
tŸÀn
 +
	`¢¥ötf
–(
pTmpPo°
 +ÅŸÀn), 
ªmaöÀn
, "addôi⁄ÆFwVîInfo=%s", 
tmpbuf
 );

86 
Àn
 = 
	`GëBuûdTy≥
–
tmpbuf
, —mpbuf), 
NULL
 );

87 if–
Àn
 )

89 if–
tŸÀn
 )

91 *(
pTmpPo°
 + 
tŸÀn
) = '&';

92 ++
tŸÀn
;

94 
ªmaöÀn
 = 
szPo°FõldOut
 - 
tŸÀn
;

95 
tŸÀn
 +
	`¢¥ötf
–(
pTmpPo°
 +ÅŸÀn), 
ªmaöÀn
, "ív=%s", 
tmpbuf
 );

97 
	`SWLOG_INFO
("Calling GetModelNum function\n");

98 
Àn
 = 
	`GëModñNum
–
tmpbuf
, (tmpbuf) );

99 if–
Àn
 )

101 if–
tŸÀn
 )

103 *(
pTmpPo°
 + 
tŸÀn
) = '&';

104 ++
tŸÀn
;

106 
ªmaöÀn
 = 
szPo°FõldOut
 - 
tŸÀn
;

107 
tŸÀn
 +
	`¢¥ötf
–(
pTmpPo°
 +ÅŸÀn), 
ªmaöÀn
, "modñ=%s", 
tmpbuf
 );

109 
Àn
 = 
	`GëMFRName
–
tmpbuf
, (tmpbuf) );

110 if–
Àn
 )

112 if–
tŸÀn
 )

114 *(
pTmpPo°
 + 
tŸÀn
) = '&';

115 ++
tŸÀn
;

117 
ªmaöÀn
 = 
szPo°FõldOut
 - 
tŸÀn
;

118 
tŸÀn
 +
	`¢¥ötf
–(
pTmpPo°
 +ÅŸÀn), 
ªmaöÀn
, "m™uÁ˘uªr=%s", 
tmpbuf
 );

120 
Àn
 = 
	`GëP¨äîId
–
tmpbuf
, (tmpbuf) );

121 if–
Àn
 )

123 if–
tŸÀn
 )

125 *(
pTmpPo°
 + 
tŸÀn
) = '&';

126 ++
tŸÀn
;

128 
ªmaöÀn
 = 
szPo°FõldOut
 - 
tŸÀn
;

129 
tŸÀn
 +
	`¢¥ötf
–(
pTmpPo°
 +ÅŸÀn), 
ªmaöÀn
, "∑π√rId=%s", 
tmpbuf
 );

130 
ªmaöÀn
 = 
szPo°FõldOut
 - 
tŸÀn
;

131 
tŸÀn
 +
	`¢¥ötf
–(
pTmpPo°
 +ÅŸÀn), 
ªmaöÀn
, "&activationInProgress=false" );

135 if–
tŸÀn
 )

137 *(
pTmpPo°
 + 
tŸÀn
) = '&';

138 ++
tŸÀn
;

140 
ªmaöÀn
 = 
szPo°FõldOut
 - 
tŸÀn
;

141 
tŸÀn
 +
	`¢¥ötf
–(
pTmpPo°
 +ÅŸÀn), 
ªmaöÀn
, "activationInProgress=true" );

143 
Àn
 = 
	`GëOsCœss
–
tmpbuf
, (tmpbuf) );

144 if–
Àn
 )

146 if–
tŸÀn
 )

148 *(
pTmpPo°
 + 
tŸÀn
) = '&';

149 ++
tŸÀn
;

151 
ªmaöÀn
 = 
szPo°FõldOut
 - 
tŸÀn
;

152 
tŸÀn
 +
	`¢¥ötf
–(
pTmpPo°
 +ÅŸÀn), 
ªmaöÀn
, "osCœss=%s", 
tmpbuf
 );

154 
Àn
 = 
	`GëAccou¡ID
–
tmpbuf
, (tmpbuf) );

155 if–
Àn
 )

157 if–
tŸÀn
 )

159 *(
pTmpPo°
 + 
tŸÀn
) = '&';

160 ++
tŸÀn
;

162 
ªmaöÀn
 = 
szPo°FõldOut
 - 
tŸÀn
;

163 
tŸÀn
 +
	`¢¥ötf
–(
pTmpPo°
 +ÅŸÀn), 
ªmaöÀn
, "accou¡Id=%s", 
tmpbuf
 );

165 
Àn
 = 
	`GëEx≥rõn˚
–
tmpbuf
, (tmpbuf) );

166 if–
Àn
 )

168 if–
tŸÀn
 )

170 *(
pTmpPo°
 + 
tŸÀn
) = '&';

171 ++
tŸÀn
;

173 
ªmaöÀn
 = 
szPo°FõldOut
 - 
tŸÀn
;

174 
tŸÀn
 +
	`¢¥ötf
–(
pTmpPo°
 +ÅŸÀn), 
ªmaöÀn
, "ex≥rõn˚=%s", 
tmpbuf
 );

176 
Àn
 = 
	`GëMigøti⁄Ródy
–
tmpbuf
, (tmpbuf) );

177 if–
Àn
 )

179 if–
tŸÀn
 )

181 *(
pTmpPo°
 + 
tŸÀn
) = '&';

182 ++
tŸÀn
;

184 
ªmaöÀn
 = 
szPo°FõldOut
 - 
tŸÀn
;

185 
tŸÀn
 +
	`¢¥ötf
–(
pTmpPo°
 +ÅŸÀn), 
ªmaöÀn
, "migøti⁄Ródy=%s", 
tmpbuf
 );

187 
Àn
 = 
	`GëSîülNum
–
tmpbuf
, (tmpbuf) );

188 if–
Àn
 )

190 if–
tŸÀn
 )

192 *(
pTmpPo°
 + 
tŸÀn
) = '&';

193 ++
tŸÀn
;

195 
ªmaöÀn
 = 
szPo°FõldOut
 - 
tŸÀn
;

196 
tŸÀn
 +
	`¢¥ötf
–(
pTmpPo°
 +ÅŸÀn), 
ªmaöÀn
, "£rül=%s", 
tmpbuf
 );

198 
Àn
 = 
	`GëUTCTime
–
tmpbuf
, (tmpbuf) );

199 if–
Àn
 )

201 if–
tŸÀn
 )

203 *(
pTmpPo°
 + 
tŸÀn
) = '&';

204 ++
tŸÀn
;

206 
ªmaöÀn
 = 
szPo°FõldOut
 - 
tŸÀn
;

207 
tŸÀn
 +
	`¢¥ötf
–(
pTmpPo°
 +ÅŸÀn), 
ªmaöÀn
, "loˇ…ime=%s", 
tmpbuf
 );

209 
Àn
 = 
	`GëIn°ÆÀdBundÀs
–
tmpbuf
, (tmpbuf) );

210 if–
tŸÀn
 )

212 *(
pTmpPo°
 + 
tŸÀn
) = '&';

213 ++
tŸÀn
;

215 
ªmaöÀn
 = 
szPo°FõldOut
 - 
tŸÀn
;

216 
tŸÀn
 +
	`¢¥ötf
–(
pTmpPo°
 +ÅŸÀn), 
ªmaöÀn
, "dlCîtBundÀ=%s", 
tmpbuf
 );

217 
Àn
 = 
	`GëRdmM™i„°Vîsi⁄
–
tmpbuf
, (tmpbuf) );

218 if–
tŸÀn
 )

220 *(
pTmpPo°
 + 
tŸÀn
) = '&';

221 ++
tŸÀn
;

223 
ªmaöÀn
 = 
szPo°FõldOut
 - 
tŸÀn
;

224 
tŸÀn
 +
	`¢¥ötf
–(
pTmpPo°
 +ÅŸÀn), 
ªmaöÀn
, "rdmC©ÆogueVîsi⁄=%s", 
tmpbuf
 );

226 
Àn
 = 
	`GëTimez⁄e
–
tmpbuf
, 
˝u¨ch
, (tmpbuf) );

227 if–
Àn
 )

229 if–
tŸÀn
 )

231 *(
pTmpPo°
 + 
tŸÀn
) = '&';

232 ++
tŸÀn
;

234 
ªmaöÀn
 = 
szPo°FõldOut
 - 
tŸÀn
;

235 
tŸÀn
 +
	`¢¥ötf
–(
pTmpPo°
 +ÅŸÀn), 
ªmaöÀn
, "timez⁄e=%s", 
tmpbuf
 );

237 
	`waôF‹Nç
();

238 
Àn
 = 
	`GëC≠abûôõs
–
tmpbuf
, (tmpbuf) );

239 if–
Àn
 )

241 if–
tŸÀn
 )

243 *(
pTmpPo°
 + 
tŸÀn
) = '&';

244 ++
tŸÀn
;

246 
ªmaöÀn
 = 
szPo°FõldOut
 - 
tŸÀn
;

247 
tŸÀn
 +
	`¢¥ötf
–(
pTmpPo°
 +ÅŸÀn), 
ªmaöÀn
, "ˇ∑bûôõs=%s", 
tmpbuf
 );

249 
	`SWLOG_INFO
–"¸óãJs⁄Såög:ÅŸÀ¿%d\n%s\n", 
tŸÀn
, 
pPo°FõldOut
 );

250  
tŸÀn
;

251 
	}
}

254 
	$gëXc⁄fRe•D©a
–
XCONFRES
 *
pRe•⁄£
, *
pJs⁄Så
 )

256 
JSON
 *
pJs⁄
 = 
NULL
;

257 
ªt
 = -1;

259 if–
pRe•⁄£
 !
NULL
 )

261 
pJs⁄
 = 
	`P¨£Js⁄Så
–
pJs⁄Så
 );

262 if–
pJs⁄
 !
NULL
 )

264 
	`GëJs⁄VÆ
–
pJs⁄
, "fúmw¨eDow∆ﬂdPrŸocﬁ", 
pRe•⁄£
->
˛oudPrŸo
, (pResponse->cloudProto) );

265 
	`GëJs⁄VÆ
–
pJs⁄
, "fúmw¨eFûíame", 
pRe•⁄£
->
˛oudFWFûe
, (pResponse->cloudFWFile) );

266 
	`GëJs⁄VÆ
–
pJs⁄
, "fúmw¨eLoˇti⁄", 
pRe•⁄£
->
˛oudFWLoˇti⁄
, (pResponse->cloudFWLocation) );

267 
	`GëJs⁄VÆ
–
pJs⁄
, "fúmw¨eVîsi⁄", 
pRe•⁄£
->
˛oudFWVîsi⁄
, (pResponse->cloudFWVersion) );

268 
	`GëJs⁄VÆ
–
pJs⁄
, "ªboŸImmedüãly", 
pRe•⁄£
->
˛oudImmedüãReboŸFœg
, (pResponse->cloudImmediateRebootFlag) );

269 
	`GëJs⁄VÆ
–
pJs⁄
, "addôi⁄ÆFwVîInfo", 
pRe•⁄£
->
˛oudPDRIVîsi⁄
, (pResponse->cloudPDRIVersion) );

270 
	`GëJs⁄VÆ
–
pJs⁄
, "dñayDow∆ﬂd", 
pRe•⁄£
->
˛oudDñayDow∆ﬂd
, (pResponse->cloudDelayDownload) );

271 
	`GëJs⁄VÆC⁄èöög
–
pJs⁄
, "ªmCål", 
pRe•⁄£
->
≥rùhîÆFúmw¨es
, (pResponse->peripheralFirmwares) );

272 
	`t2VÆNŸify
("SYST_INFO_PRXR_Vî_•lô", 
pRe•⁄£
->
≥rùhîÆFúmw¨es
);

273 
	`GëJs⁄VÆ
–
pJs⁄
, "dlCîtBundÀ", 
pRe•⁄£
->
dlCîtBundÀ
, (pResponse->dlCertBundle) );

274 
	`°∫cmp
(
pRe•⁄£
->
dlCîtBundÀ
, "lxyupd©e-bundÀ:", 17)?1:
	`t2VÆNŸify
("lxybundleversion_split",ÖResponse->dlCertBundle + 17);

275 
	`GëJs⁄VÆ
–
pJs⁄
, "rdmC©ÆogueVîsi⁄", 
pRe•⁄£
->
rdmC©ÆogueVîsi⁄
, (pResponse->rdmCatalogueVersion) );

276 
	`GëJs⁄VÆ
–
pJs⁄
, "ùv6Fúmw¨eLoˇti⁄", 
pRe•⁄£
->
ùv6˛oudFWLoˇti⁄
, (pResponse->ipv6cloudFWLocation) );

278 
	`FªeJs⁄
–
pJs⁄
 );

279 
ªt
 = 0;

284 
	`SWLOG_INFO
("getXconfRespData: inputÖarameter is NULL\n");

287  
ªt
;

288 
	}
}

290 
boﬁ
 
	$vÆid©eImage
(c⁄° *
image_«me
, c⁄° *
modñ
)

292 
boﬁ
 
°©us
 = 
Ál£
;

293 i‡(
image_«me
 =
NULL
 || 
modñ
 == NULL) {

294 
	`SWLOG_INFO
("%s:Ö¨amëî i†NULL\n", 
__FUNCTION__
);

295  
°©us
;

297 i‡((
	`°r°r
(
image_«me
, 
modñ
)Ë!
NULL
) {

298 
°©us
 = 
åue
;

300  
°©us
;

301 
	}
}

310 
	$¥o˚ssJs⁄Re•⁄£
(
XCONFRES
 *
ª•⁄£
, c⁄° *
myfwvîsi⁄
, c⁄° *
modñ
, c⁄° *
maöt
)

312 
boﬁ
 
vÆid_img
 = 
Ál£
;

313 
boﬁ
 
vÆid_pdri_img
 = 
åue
;

314 
boﬁ
 
ªt_°©us
 = 
Ál£
;

315 
œ°_dw∆_img
[64];

316 
cuºít_img
[64];

317 
FILE
 *
Â
 = 
NULL
;

318 
ªt
 = -1;

320 
œ°_dw∆_img
[0] = 0;

321 
cuºít_img
[0] = 0;

323 if–
ª•⁄£
 !
NULL
 && 
myfwvîsi⁄
 !NULL && 
modñ
 != NULL )

325 
	`makeHâpHâps
–
ª•⁄£
->
˛oudFWLoˇti⁄
, (response->cloudFWLocation) );

326 
	`makeHâpHâps
–
ª•⁄£
->
ùv6˛oudFWLoˇti⁄
, (response->ipv6cloudFWLocation) );

328 
	`SWLOG_INFO
("˛oudFWFûe: %s\n", 
ª•⁄£
->
˛oudFWFûe
);

329 
	`SWLOG_INFO
("˛oudFWLoˇti⁄: %s\n", 
ª•⁄£
->
˛oudFWLoˇti⁄
);

330 
	`SWLOG_INFO
("ùv6˛oudFWLoˇti⁄: %s\n", 
ª•⁄£
->
ùv6˛oudFWLoˇti⁄
);

331 
	`SWLOG_INFO
("˛oudFWVîsi⁄: %s\n", 
ª•⁄£
->
˛oudFWVîsi⁄
);

332 
	`SWLOG_INFO
("˛oudDñayDow∆ﬂd: %s\n", 
ª•⁄£
->
˛oudDñayDow∆ﬂd
);

333 
	`SWLOG_INFO
("˛oudPrŸo: %s\n", 
ª•⁄£
->
˛oudPrŸo
);

334 
	`SWLOG_INFO
("˛oudImmedüãReboŸFœg: %s\n", 
ª•⁄£
->
˛oudImmedüãReboŸFœg
);

335 
	`SWLOG_INFO
("≥rùhîÆFúmw¨es: %s\n", 
ª•⁄£
->
≥rùhîÆFúmw¨es
);

336 
	`SWLOG_INFO
("dlCîtBundÀ: %s\n", 
ª•⁄£
->
dlCîtBundÀ
);

337 
	`SWLOG_INFO
("˛oudPDRIVîsi⁄: %s\n", 
ª•⁄£
->
˛oudPDRIVîsi⁄
);

338 
	`SWLOG_INFO
("rdmC©ÆogueVîsi⁄: %s\n", 
ª•⁄£
->
rdmC©ÆogueVîsi⁄
);

340 
Â
 = 
	`f›í
("/tmp/.xconfssrdownloadurl", "w");

341 i‡(
Â
 !
NULL
) {

342 
	`Ârötf
(
Â
, "%s\n", 
ª•⁄£
->
˛oudFWLoˇti⁄
);

343 
	`f˛o£
(
Â
);

346 if–*
ª•⁄£
->
rdmC©ÆogueVîsi⁄
 &&

347 (
Â
=
	`f›í
–"/tmp/.xc⁄fRdmC©ÆogueVîsi⁄", "w" )Ë!
NULL
 )

349 
	`SWLOG_INFO
–"Upd©ög RDM C©Æoguêvîsi⁄ %†‰om XCONF i¿/tmp/.xc⁄fRdmC©ÆogueVîsi⁄ fûe\n", 
ª•⁄£
->
rdmC©ÆogueVîsi⁄
 );

350 
	`Ârötf
–
Â
, "%s\n", 
ª•⁄£
->
rdmC©ÆogueVîsi⁄
 );

351 
	`f˛o£
–
Â
 );

353 i‡(
ª•⁄£
->
dlCîtBundÀ
[0] != 0) {

354 
	`SWLOG_INFO
("CallingÑdm Versioned_app downloadÅoÖrocess bundle update\n");

355 i‡(
	`ac˚ss
("/u§/bö/rdm", 
F_OK
) == 0) {

357 
	`SWLOG_INFO
("RDM binary isÖresent\n");

358 
	`v_£cuª_sy°em
("rdm -v \"%s\" >> /›t/logs/rdm_°©us.log 2>&1", 
ª•⁄£
->
dlCîtBundÀ
);

359 
	`SWLOG_INFO
("RDM Versionedápp Download startedánd completed\n");

360 } i‡(
	`ac˚ss
("/ëc/rdm/rdmBundÀMgr.sh", 
F_OK
) == 0) {

362 
	`SWLOG_INFO
("RDM binary isÇotÖresent, using scripts\n");

363 
	`v_£cuª_sy°em
("sh /ëc/rdm/rdmBundÀMgr.sh '%s' '%s' >> /›t/logs/rdm_°©us.log 2>&1", 
ª•⁄£
->
dlCîtBundÀ
,Ñe•⁄£->
˛oudFWLoˇti⁄
);

364 
	`SWLOG_INFO
("RDM Versionedápp Download startedánd completed\n");

367 
	`SWLOG_INFO
(" File Not Present .. Download Failed \n");

370 
vÆid_img
 = 
	`vÆid©eImage
(
ª•⁄£
->
˛oudFWFûe
, 
modñ
);

371 i‡((*(
ª•⁄£
->
˛oudPDRIVîsi⁄
)) != 0) {

372 
	`SWLOG_INFO
("Validate PDRI image with device modelÇumber\n");

373 
vÆid_pdri_img
 = 
	`vÆid©eImage
(
ª•⁄£
->
˛oudPDRIVîsi⁄
, 
modñ
);

375 i‡((
Ál£
 =
vÆid_img
Ë|| (Ál£ =
vÆid_pdri_img
)) {

376 
	`SWLOG_INFO
("Imagêc⁄figuªd i†nŸ o‡modñ %s.. SkùpögÅhêupgøde\nExôög from ImagêUpgødê¥o˚ss..!\n", 
modñ
);

377 
	`evítM™agî
(
FW_STATE_EVENT
, 
FW_STATE_FAILED
);

378 i‡(0 =(
	`°∫cmp
(
maöt
, "true", 4))) {

379 
	`evítM™agî
 ("Maöã«n˚MGR", 
MAINT_FWDOWNLOAD_ERROR
);

381 
	`u∆ök
(
HTTP_CODE_FILE
);

382 
ªt
 = 1;

384 
ªt
 = 0;

386 
ªt_°©us
 = 
	`œ°Dw∆Img
(
œ°_dw∆_img
, (last_dwnl_img));

387 
	`SWLOG_INFO
("œ°_dw∆_°©us=%i\n", 
ªt_°©us
);

388 
ªt_°©us
 = 
	`cuºítImg
(
cuºít_img
, (current_img));

389 
	`SWLOG_INFO
("cuºít_img_°©us=%i\n", 
ªt_°©us
);

390 
	`SWLOG_INFO
("myFWVîsi⁄ = %s\n", 
myfwvîsi⁄
);

391 
	`SWLOG_INFO
("myFWFûê%s\n", 
cuºít_img
);

392 
	`SWLOG_INFO
("œ°D∆dFûê%s\n", 
œ°_dw∆_img
);

393 
	`SWLOG_INFO
("˛oudFWVîsi⁄ = %s\n", 
ª•⁄£
->
˛oudFWVîsi⁄
);

394 
	`SWLOG_INFO
("˛oudFWFûê%s\n", 
ª•⁄£
->
˛oudFWFûe
);

398 
	`SWLOG_ERROR
("%†ERROR: O√ o∏m‹êöpuà∑ømëî†¨êNULL\n", 
__FUNCTION__
);

400  
ªt
;

401 
	}
}

	@src/rdkv_main.c

19 
	~<°dlib.h
>

20 
	~<°dio.h
>

21 
	~<°rög.h
>

22 
	~<°rögs.h
>

23 
	~<sys/°©.h
>

24 
	~<±hªad.h
>

25 
	~<sig«l.h
>

27 
	~"rdkv_cdl.h
"

28 
	~"rdkv_upgøde.h
"

29 
	~"rdkv_cdl_log_wøµî.h
"

30 #i‚de‡
GTEST_ENABLE


31 
	~"dow∆ﬂdUtû.h
"

32 
	~"uæHñ≥r.h
"

34 
	~"dow∆ﬂd_°©us_hñ≥r.h
"

35 
	~"devi˚_°©us_hñ≥r.h
"

36 
	~"ürmI¡îÁ˚.h
"

37 
	~"rfcöãrÁ˚.h
"

38 
	~"codebigUtûs.h
"

39 
	~"mésUtûs.h
"

40 #i‚de‡
GTEST_ENABLE


41 
	~"rdk_fwdl_utûs.h
"

42 
	~"sy°em_utûs.h
"

43 
	~"rdk_loggî_mûe°⁄e.h
"

45 
	~"mis˚Œ™eous.h
"

47 
	~"js⁄_¥o˚ss.h
"

48 
	~"devi˚_≠i.h
"

49 
	~"devi˚utûs.h
"

50 
	~"comm⁄_devi˚_≠i.h
"

52 
	~<°dlib.h
>

53 
	~<°dio.h
>

54 
	~<°rög.h
>

55 
	~<°rögs.h
>

57 
	#JSON_STR_LEN
 1000

	)

59 
	#DOWNLOADED_PERIPHERAL_VERSION
 "/tmp/dow∆ﬂded_≥rùhîÆ_vîsi⁄s.txt"

	)

60 
	#MAX_VER_LEN
 10

	)

61 
	#TWO_FIFTY_SIX
 256

	)

62 
	#DOWNLOADED_VERS_SIZE
 
TWO_FIFTY_SIX


	)

63 
	#URL_MAX_LEN1
 
URL_MAX_LEN
 + 128

	)

64 
	#DWNL_PATH_FILE_LEN1
 
DWNL_PATH_FILE_LEN
 + 32

	)

69 
Devi˚Pr›îty_t
 
	gdevi˚_öfo
;

70 
ImageDëaûs_t
 
	gcur_img_dëaû
;

71 
Rfc_t
 
	grfc_li°
;

73 
boﬁ
 
	gisCrôiˇlUpd©e
 = 
Ál£
;

75 
	gdißbÀSètsUpd©e
[4] = { 0 };

76 
	gl⁄g_ãrm_˚π
 = 0;

78 
	gœ°run
[64] = { 0 };

79 
	gimmed_ªboŸ_Êag
[12] = { 0 };

80 
	gdñay_dw∆
 = 0;

82 
	g¥Ÿo
 = 1;

83 
	gåiggî_ty≥
 = 0;

84 
	gDw∆Sèã
 = 
RDKV_FWDNLD_UNINITIALIZED
;

85 *
	gcuæ
 = 
NULL
;

86 
±hªad_muãx_t
 
	gmutuex_dw∆_°©e
 = 
PTHREAD_MUTEX_INITIALIZER
;

87 
±hªad_muãx_t
 
	g≠p_mode_°©us
 = 
PTHREAD_MUTEX_INITIALIZER
;

88 
	g≠p_mode
 = 1;

89 
	gf‹˚_exô
 = 0;

96 
	$£tAµMode
(
mode
)

98 
	`±hªad_muãx_lock
(&
≠p_mode_°©us
);

99 
≠p_mode
 = 
mode
;

100 
	`SWLOG_INFO
("%s:áµ modê%d\n", 
__FUNCTION__
, 
≠p_mode
);

101 
	`±hªad_muãx_u∆ock
(&
≠p_mode_°©us
);

102 
	}
}

107 
	$gëAµMode
()

109 
mode
 = 1;

110 
	`±hªad_muãx_lock
(&
≠p_mode_°©us
);

111 
mode
 = 
≠p_mode
;

112 
	`±hªad_muãx_u∆ock
(&
≠p_mode_°©us
);

113 
	`SWLOG_INFO
("%s:áµ modê%d\n", 
__FUNCTION__
, 
mode
);

114  
mode
;

115 
	}
}

120 
	$£tDw∆Sèã
(
°©e
)

122 
	`±hªad_muãx_lock
(&
mutuex_dw∆_°©e
);

123 
Dw∆Sèã
 = 
°©e
;

124 
	`±hªad_muãx_u∆ock
(&
mutuex_dw∆_°©e
);

125 
	`SWLOG_INFO
("%s: sètu†%d\n", 
__FUNCTION__
, 
°©e
);

126 
	}
}

131 
	$gëDw∆Sèã
()

133 
curdw∆_°©e
 = 0;

134 
	`±hªad_muãx_lock
(&
mutuex_dw∆_°©e
);

135 
curdw∆_°©e
 = 
Dw∆Sèã
;

136 
	`±hªad_muãx_u∆ock
(&
mutuex_dw∆_°©e
);

137 
	`SWLOG_INFO
("%s: sètu†%d\n", 
__FUNCTION__
, 
curdw∆_°©e
);

138  
curdw∆_°©e
;

139 
	}
}

145 
	$öãru±Dw∆
(
≠p_mode
)

147 
dw∆_°©e
 = 0;

148 
cuæ_ªt
 = 99;

149 
•ìd
 = 0;

150 
byãs_dw∆ed
 = 0;

151 
	`SWLOG_INFO
("Checking Interupt download\n");

152 
	`£tAµMode
(
≠p_mode
);

153 
dw∆_°©e
 = 
	`gëDw∆Sèã
();

154 i‡((0 =(
	`°∫cmp
(
rfc_li°
.
rfc_thrŸée
, "åue", 4))Ë&& (
dw∆_°©e
 =
RDKV_FWDNLD_DOWNLOAD_INPROGRESS
)) {

155 
byãs_dw∆ed
 = 
	`doGëDw∆Byãs
(
cuæ
);

156 
	`SWLOG_INFO
("Byã†Dow∆ﬂded = %u\n", 
byãs_dw∆ed
);

157 i‡(
≠p_mode
 == 0) {

158 
•ìd
 = 
	`©oi
(
rfc_li°
.
rfc_t›•ìd
);

160 i‡(
•ìd
 == 0) {

161 
f‹˚_exô
 = 1;

162 
	`SWLOG_INFO
("≠∞modêi†backgroundánd dow∆ﬂd s≥ed i†£àto:%d\n", 
•ìd
);

164 
	`£tF‹˚St›
(1);

165 i‡(!(
	`°∫cmp
(
devi˚_öfo
.
maöt_°©us
, "true", 4))) {

166 
	`evítM™agî
("Maöã«n˚MGR", 
MAINT_FWDOWNLOAD_ERROR
);

168 
	`evítM™agî
(
FW_STATE_EVENT
, 
FW_STATE_FAILED
);

169 
	`SWLOG_INFO
("Download is goingÅo stop\n");

172 i‡(
cuæ
 !
NULL
 && 
byãs_dw∆ed
 > 0) {

173 
	`SWLOG_INFO
("Pau£ dow∆ﬂdánd u≈au£ wôh s≥ed %s=>%u\n", 
rfc_li°
.
rfc_t›•ìd
, 
•ìd
);

174 
cuæ_ªt
 = 
	`doI¡îu±Dw∆
(
cuæ
, 
•ìd
);

176 } i‡(
≠p_mode
 == 1){

177 
•ìd
 = 0;

178 i‡(
cuæ
 !
NULL
 && 
byãs_dw∆ed
 > 0) {

179 
	`SWLOG_INFO
("Pau£ dow∆ﬂdánd u≈au£ wôh UnThrŸéêmodê%u\n", 
•ìd
);

180 
cuæ_ªt
 = 
	`doI¡îu±Dw∆
(
cuæ
, 
•ìd
);

184 
	`SWLOG_INFO
("ThrŸéêrfc=%s\nFûêDow∆ﬂdáÃeday com∂ëed o∏nŸ sèπed\n", 
rfc_li°
.
rfc_thrŸée
);

187 i‡(
cuæ_ªt
 =
DWNL_UNPAUSE_FAIL
) {

188 
	`SWLOG_ERROR
("Cuæ U≈au£ faû:%d\n", 
cuæ_ªt
);

189 
	`doSt›Dow∆ﬂd
(
cuæ
);

190 
cuæ
 = 
NULL
;

192 
	}
}

194 
	$h™dÀ_sig«l
(
no
, 
sigöfo_t
* 
öfo
, * 
uc
)

197 
	`SWLOG_INFO
("Raise SIGUSR1 signal\n");

198 
f‹˚_exô
 = 1;

199 
	`£tF‹˚St›
(1);

200 i‡(!(
	`°∫cmp
(
devi˚_öfo
.
maöt_°©us
, "true", 4))) {

201 
	`evítM™agî
("Maöã«n˚MGR", 
MAINT_FWDOWNLOAD_ERROR
);

203 
	`evítM™agî
(
FW_STATE_EVENT
, 
FW_STATE_FAILED
);

204 
	`SWLOG_INFO
("Download is goingÅo stopándáborted\n");

205 
	`upd©eUpgødeFœg
(2);

206 
	}
}

213 
boﬁ
 
	$ßvePID
(c⁄° *
fûe
, *
d©a
)

215 
boﬁ
 
°©us
 = 
Ál£
;

216 
FILE
 *
Â
 = 
NULL
;

218 i‡((
fûe
 !
NULL
Ë&& (
d©a
 != NULL)) {

219 
Â
 = 
	`f›í
(
fûe
, "w");

220 if(
Â
 =
NULL
) {

221 
	`SWLOG_INFO
("ßvePID(Ë%†u«bÀÅÿ¸óã fûe=\n", 
fûe
);

223 
	`SWLOG_INFO
("ßvePID(Ë=%†tÿfûe=%s\n", 
d©a
, 
fûe
);

224 
	`Âuts
(
d©a
, 
Â
);

225 
	`f˛o£
(
Â
);

226 
°©us
 = 
åue
;

229  
°©us
;

230 
	}
}

237 
	$gëPidSt‹e
(c⁄° *
devi˚
, c⁄° *
maöt_wödow
) {

238 
pid_t
 
pid
;

239 
d©a
[16] = { 0 };

240 i‡(
devi˚
 =
NULL
 || 
maöt_wödow
 == NULL) {

241 
	`SWLOG_ERROR
("getPidStore()Öarameter is NULL\n");

244 
pid
 = 
	`gëpid
();

245 
	`¢¥ötf
(
d©a
,(d©a), "%u\n", 
pid
);

246 
	`SWLOG_INFO
("gëPidSt‹e(Ëpid=%u i¿°rög=%s\n", 
pid
, 
d©a
);

247 
	`ßvePID
(
CURL_PID_FILE
, 
d©a
);

248 
	`ßvePID
(
FWDNLD_PID_FILE
, 
d©a
);

249 
	}
}

319 
boﬁ
 
	$checkF‹TlsEº‹s
(
cuæ_code
, c⁄° *
ty≥
)

321 i‡(
ty≥
 =
NULL
) {

322 
	`SWLOG_ERROR
("%†:Åy≥Ö¨amëî i†NULLánd cuæÉº‹=%d\n", 
__FUNCTION__
, 
cuæ_code
);

323  
Ál£
;

325 if((
cuæ_code
 == 35) || (curl_code == 51) || (curl_code == 53) || (curl_code == 54) || (curl_code == 58) || (curl_code == 59) || (curl_code == 60)

326 || (
cuæ_code
 == 64) || (curl_code == 66) || (curl_code == 77) || (curl_code == 80) || (curl_code == 82) || (curl_code == 83)

327 || (
cuæ_code
 == 90) || (curl_code == 91)) {

328 
	`TLSLOG
(
TLS_LOG_ERR
, "HTTPS %†ÁûedÅÿc⁄√˘Åÿ%†£rvî wôh cuæÉº‹ codê%d", 
TLS
, 
ty≥
, 
cuæ_code
);

330  
åue
;

331 
	}
}

338 
	$dw∆Eº‹
(
cuæ_code
, 
hâp_code
, 
£rvî_ty≥
)

340 
ãÀmëry_d©a
[32];

341 
devi˚_ty≥
[32];

342 
FWDow∆ﬂdSètus
 
fwdls
;

343 
ÁûuªRós⁄
[128];

344 *
ty≥
 = "Direct";

346 *
ÁûuªRós⁄
 = 0;

347 if(
cuæ_code
 == 22) {

348 
	`¢¥ötf
(
ãÀmëry_d©a
, (telemetry_data), "swdl_failed");

349 
	`t2Cou¡NŸify
(
ãÀmëry_d©a
, 1);

350 }if(
cuæ_code
 == 18 || curl_code == 7) {

351 
	`¢¥ötf
(
ãÀmëry_d©a
, —ñemëry_d©a), "swdl_Áûed_%d", 
cuæ_code
);

352 
	`t2Cou¡NŸify
(
ãÀmëry_d©a
, 1);

354 *
ãÀmëry_d©a
 = 0;

355 
	`SWLOG_ERROR
("%†: CDL i†su•íded duêtÿCuæ %d Eº‹\n", 
__FUNCTION__
, 
cuæ_code
);

356 
	`t2Cou¡NŸify
("CDLsu•íded_•lô", 
cuæ_code
);

358 
	`checkF‹TlsEº‹s
(
cuæ_code
, 
ty≥
);

359 
	`¢¥ötf
–
devi˚_ty≥
, (devi˚_ty≥), "%s", 
devi˚_öfo
.
dev_ty≥
 );

360 if(
cuæ_code
 !0 || (
hâp_code
 != 200 && http_code != 206) || http_code == 495) {

361 i‡(
£rvî_ty≥
 =
HTTP_SSR_DIRECT
) {

362 
	`SWLOG_ERROR
("%†: FaûedÅÿdow∆ﬂd imagê‰omÇ‹mÆ SSR codêdow∆ﬂd sîvî wôhÑë:%d, hâpcode:%d\n", 
__FUNCTION__
, 
cuæ_code
, 
hâp_code
);

363 
	`t2Cou¡NŸify
("SYST_ERR_cdl_ssr", 1);

364 i‡(
hâp_code
 == 302)

366 
	`t2Cou¡NŸify
("SYST_INFO_Http302", 1);

369 if((
	`°rcmp
(
devi˚_ty≥
, "mediaclient")) == 0) {

370 if(
hâp_code
 == 0) {

371 
	`¢¥ötf
–
ÁûuªRós⁄
, (failureReason), "FailureReason|Image Download Failed -UnableÅo connect\n" );

372 }if(
hâp_code
 == 404) {

373 
	`¢¥ötf
–
ÁûuªRós⁄
, (failureReason), "FailureReason|Image Download Failed -ServerÇot Found\n" );

374 }if(
hâp_code
 == 495) {

375 + 
	`¢¥ötf
–
ÁûuªRós⁄
, (failureReason), "FailureReason|Image Download Failed -Client certificateÉxpired\n" );

376 }if(
hâp_code
 >= 500 && http_code <= 511) {

377 
	`¢¥ötf
–
ÁûuªRós⁄
, (failureReason), "FailureReason|Image Download Failed -ErrorÑesponse from server\n" );

379 
	`¢¥ötf
–
ÁûuªRós⁄
, (failureReason), "FailureReason|Image Download Failed - Unknown\n" );

383 
	`evítM™agî
(
IMG_DWL_EVENT
, 
IMAGE_FWDNLD_DOWNLOAD_FAILED
);

385 if((
hâp_code
 == 0) || (http_code == 495)) {

386 
	`¢¥ötf
–
ÁûuªRós⁄
, (failureReason), "FailureReason|ESTB Download Failure");

390 
	`evítM™agî
(
IMG_DWL_EVENT
, 
IMAGE_FWDNLD_DOWNLOAD_FAILED
);

393 
	`¢¥ötf
(
fwdls
.
mëhod
, (fwdls.method), "Method|xconf\n");

394 
	`¢¥ötf
(
fwdls
.
¥Ÿo
, (fwdls.proto), "Proto|http\n");

395 
	`¢¥ötf
(
fwdls
.
°©us
, (fwdls.status), "Status|Failure\n");

396 
	`¢¥ötf
(
fwdls
.
ªboŸ
, (fwdls.reboot), "Reboot|false\n");

397 
	`¢¥ötf
(
fwdls
.
ÁûuªRós⁄
, (fwdls.failureReason), "%s", failureReason);

398 
	`¢¥ötf
(
fwdls
.
d∆dVî¢
, (fwdls.dnldVersn), "DnldVersn|\n");

399 
	`¢¥ötf
(
fwdls
.
d∆dfûe
, (fwdls.dnldfile), "DnldFile|\n");

400 
	`¢¥ötf
(
fwdls
.
d∆duæ
, (fwdls.dnldurl), "DnldURL|\n");

401 
	`¢¥ötf
(
fwdls
.
œ°run
, (fwdls.lastrun), "LastRun|%s\n",Üastrun);

402 
	`¢¥ötf
(
fwdls
.
FwUpd©eSèã
, (fwdls.FwUpdateState), "FwUpdateState|Failed\n");

403 
	`¢¥ötf
(
fwdls
.
DñayDow∆ﬂd
, (fwdls.DelayDownload), "DelayDownload|\n");

404 
	`upd©eFWDow∆ﬂdSètus
(&
fwdls
, 
dißbÀSètsUpd©e
);

407 if–
hâp_code
 == 495 ) {

408 
	`SWLOG_INFO
("%†: CÆlög checkAndE¡îSèãRed(Ëwôh code:%d\n", 
__FUNCTION__
, 
hâp_code
);

409 
	`checkAndE¡îSèãRed
(
hâp_code
, 
dißbÀSètsUpd©e
);

411 
	`SWLOG_INFO
("%†: CÆlög checkAndE¡îSèãRed(Ëwôh code:%d\n", 
__FUNCTION__
, 
cuæ_code
);

412 
	`checkAndE¡îSèãRed
(
cuæ_code
, 
dißbÀSètsUpd©e
);

414 
	}
}

421 
	$öôülize
() {

422 
Dow∆ﬂdD©a
 
DwnLoc
;

423 
ªt
 = -1;

424 
po°_d©a
[] = "{\"jsonrpc\":\"2.0\",\"id\":\"3\",\"method\":\"org.rdk.MaintenanceManager.1.getMaintenanceMode\",\"params\":{}}";

426 #ifde‡
T2_EVENT_ENABLED


427 
	`t2_öô
("rdkfwupgrader");

430 *
cur_img_dëaû
.
cur_img_«me
 = 0;

431 *
rfc_li°
.
rfc_ö¸_cdl
 = 0;

432 *
rfc_li°
.
rfc_més
 = 0;

433 *
rfc_li°
.
rfc_thrŸée
 = 0;

434 *
rfc_li°
.
rfc_t›•ìd
 = 0;

436 
ªt
 = 
	`gëDevi˚Pr›îtõs
(&
devi˚_öfo
);

437 if(-1 =
ªt
) {

438 
	`SWLOG_INFO
("getDeviceProperties()Ñeturn fail\n");

439  
ªt
 ;

441 
ªt
 = 
	`gëImageDëaûs
(&
cur_img_dëaû
);

442 if(-1 =
ªt
) {

443 
	`SWLOG_INFO
("getImageDetails()Ñeturn fail\n");

444  
ªt
 ;

446 
	`gëRFCSëtögs
(&
rfc_li°
);

447 
ªt
 = 
	`¸óãDú
(
devi˚_öfo
.
difw_∑th
);

448 i‡(-1 =
ªt
) {

449 
	`SWLOG_INFO
("¸óãDú(Ëªtu∫ faû. DúÇame:%s\n", 
devi˚_öfo
.
difw_∑th
);

450  
ªt
;

452 
	`öô_evít_h™dÀr
();

453 i‡(0 =(
	`°∫cmp
(
devi˚_öfo
.
maöt_°©us
, "true", 4))) {

454 
DwnLoc
.
pvOut
 = 
NULL
;

455 
DwnLoc
.
d©asize
 = 0;

456 
DwnLoc
.
memsize
 = 0;

457 if–
	`ÆlocDowndLﬂdD©aMem
–&
DwnLoc
, 
DEFAULT_DL_ALLOC
 ) == 0 )

459 
	`gëJs⁄Rpc
(
po°_d©a
, &
DwnLoc
);

460 if–(
	`°r°r
((*)
DwnLoc
.
pvOut
, "BACKGROUND")Ë!
NULL
 ) {

461 
	`SWLOG_INFO
("%s: Sëtög modêtÿBACKGROUND\n", 
__FUNCTION__
);

462 
	`£tAµMode
(0);

464 
	`‰ì
–
DwnLoc
.
pvOut
 );

468 
	}
}

474 
	$unöôülize
(
fwDw∆Sètus
) {

475 #ifde‡
T2_EVENT_ENABLED


476 
	`t2_unöô
();

478 
	`±hªad_muãx_de°roy
(&
mutuex_dw∆_°©e
);

479 
	`±hªad_muãx_de°roy
(&
≠p_mode_°©us
);

480 
	`ãrm_evít_h™dÀr
();

481 
	`upd©eUpgødeFœg
(2);

482 if((
fwDw∆Sètus
 !
INITIAL_VALIDATION_DWNL_INPROGRESS
Ë&& ((
	`fûePª£¡Check
(
DIFDPID
)) == 0)) {

483 
	`SWLOG_INFO
("Deleting DIFD.pid file\n");

484 
	`u∆ök
(
DIFDPID
);

486 
	`log_exô
();

487 
	}
}

493 
	$ßveHTTPCode
(
hâp_code
)

495 
hâp
[8] = { 0 };

496 
FILE
 *
Â
 = 
NULL
;

498 
	`¢¥ötf
–
hâp
, (hâp), "%03ld\n", ()
hâp_code
 );

499 
Â
 = 
	`f›í
(
HTTP_CODE_FILE
, "w");

500 if(
Â
 =
NULL
) {

501 
	`SWLOG_ERROR
("%†: f›í faûed:%s\n", 
__FUNCTION__
, 
HTTP_CODE_FILE
);

503 
	`SWLOG_INFO
("ßveHTTPCode(ËWrôög hâpcode=%†tÿfûe:%s\n", 
hâp
, 
HTTP_CODE_FILE
);

504 
	`Âuts
(
hâp
, 
Â
);

505 
	`f˛o£
(
Â
);

507 
	}
}

515 #i‚de‡
GTEST_BASIC


516 
	$codebigdow∆ﬂdFûe
–
£rvî_ty≥
, c⁄° * 
¨tiÁ˘Loˇti⁄Uæ
, c⁄° * 
loˇlDow∆ﬂdLoˇti⁄
, * 
pPo°Fõlds
, *
hâpCode
 ) {

517 
signFaûed
 = 1;

518 
FûeDw∆_t
 
fûe_dw∆
;

519 
oAuthHódî
[
BIG_BUF_LEN
] = "Authorization: OAuthÑealm=\"\", ";

520 
cuæ_ªt_code
 = -1;

521 
hódîInfoFûe
[136];

523 i‡(
¨tiÁ˘Loˇti⁄Uæ
 =
NULL
 || 
loˇlDow∆ﬂdLoˇti⁄
 =NULL || 
hâpCode
 == NULL) {

524 
	`SWLOG_ERROR
("%s: P¨amëî i†NULL\n", 
__FUNCTION__
);

525  
cuæ_ªt_code
;

527 *
hâpCode
 = 0;

529 #ifde‡
DEBUG_CODEBIG_CDL


530 if–
	`fûePª£¡Check
–"/tmp/.f‹˚CodebigFaûuª" ) =
RDK_API_SUCCESS
 )

532 
	`SWLOG_ERROR
("%s: F‹cög Codebig Faûuª!!\n", 
__FUNCTION__
);

533 
	`ßveHTTPCode
(*
hâpCode
);

534  
CURLTIMEOUT
;

538 i‡(
	`isDw∆Block
(
£rvî_ty≥
)) {

539 
	`SWLOG_ERROR
("%s: Codebig Dow∆ﬂd i†block\n", 
__FUNCTION__
);

540 
cuæ_ªt_code
 = 
DWNL_BLOCK
;

541  
cuæ_ªt_code
;

544 
	`SWLOG_INFO
("Using Codebig Image upgrade connection\nCheck if codebig isápplicable forÅhe Device\n");

545 
	`t2Cou¡NŸify
("SYST_INFO_cb_xconf", 1);

547 i‡((
£rvî_ty≥
 =
HTTP_XCONF_CODEBIG
Ë&& (
Ál£
 =(
	`checkCodebigAc˚ss
()))) {

548 
	`SWLOG_ERROR
("%s: Codebig Imagêupgødêi†nŸ suµ‹ãd.\n", 
__FUNCTION__
);

549  
cuæ_ªt_code
;

551 i‡(
Ál£
 =(
	`isMedüClõ¡Devi˚
())) {

552 
	`SWLOG_ERROR
("%s: Codebig Imagêupgødêi†nŸ suµ‹ãd.Suµ‹ài†⁄ly f‹ medü˛õ¡ devi˚\n", 
__FUNCTION__
);

553  
cuæ_ªt_code
;

556 
	`mem£t
(&
fûe_dw∆
, '\0', (
FûeDw∆_t
));

557 
fûe_dw∆
.
chunk_dw∆_ªåy_time
 = 0;

559 if–
£rvî_ty≥
 =
HTTP_XCONF_CODEBIG
 )

561 if–(
signFaûed
=
	`doCodeBigSignög
(
£rvî_ty≥
, 
pPo°Fõlds
, 
fûe_dw∆
.
uæ
, (file_dwnl.url),

562 
oAuthHódî
, (oAuthHeader) )) == 0 )

564 
fûe_dw∆
.
pDlD©a
 = (
Dow∆ﬂdD©a
 *)
loˇlDow∆ﬂdLoˇti⁄
;

565 *(
fûe_dw∆
.
∑th«me
) = 0;

566 
fûe_dw∆
.
pPo°Fõlds
 = 
NULL
;

567 
fûe_dw∆
.
pHódîD©a
 = 
NULL
;

568 
fûe_dw∆
.
pDlHódîD©a
 = 
NULL
;

569 *
hódîInfoFûe
 = 0;

574 if–(
signFaûed
=
	`doCodeBigSignög
(
£rvî_ty≥
, 
¨tiÁ˘Loˇti⁄Uæ
, 
fûe_dw∆
.
uæ
, (file_dwnl.url),

575 
oAuthHódî
, (oAuthHeader) )) == 0 )

577 
	`°∫˝y
(
fûe_dw∆
.
∑th«me
, (*)
loˇlDow∆ﬂdLoˇti⁄
, (file_dwnl.pathname)-1);

578 
fûe_dw∆
.
∑th«me
[(file_dwnl.pathname)-1] = '\0';

579 
fûe_dw∆
.
pDlD©a
 = 
NULL
;

580 
fûe_dw∆
.
pHódîD©a
 = 
oAuthHódî
;

581 
fûe_dw∆
.
pDlHódîD©a
 = 
NULL
;

582 
fûe_dw∆
.
pPo°Fõlds
 = 
NULL
;

583 
	`¢¥ötf
(
hódîInfoFûe
, (hódîInfoFûe), "%s.hódî", 
fûe_dw∆
.
∑th«me
);

587 if–
signFaûed
 == 0 )

589 i‡(
£rvî_ty≥
 =
HTTP_SSR_CODEBIG
) {

590 
	`SWLOG_INFO
("TryingÅo communicate with SSR via CodeBig server\nAttempting Codebig firmware download\n");

593 i‡(
£rvî_ty≥
 =
HTTP_XCONF_CODEBIG
) {

594 
	`£tDw∆Sèã
(
RDKV_XCONF_FWDNLD_DOWNLOAD_INIT
);

596 
	`£tDw∆Sèã
(
RDKV_FWDNLD_DOWNLOAD_INIT
);

598 
cuæ
 = 
	`doCuæInô
();

599 i‡(
cuæ
 !
NULL
) {

600 i‡(
£rvî_ty≥
 =
HTTP_XCONF_CODEBIG
) {

601 
	`£tDw∆Sèã
(
RDKV_XCONF_FWDNLD_DOWNLOAD_INPROGRESS
);

603 
	`£tDw∆Sèã
(
RDKV_FWDNLD_DOWNLOAD_INPROGRESS
);

605 
cuæ_ªt_code
 = 
	`doAuthHâpFûeDow∆ﬂd
(
cuæ
 ,&
fûe_dw∆
, 
hâpCode
);

606 i‡(
£rvî_ty≥
 =
HTTP_XCONF_CODEBIG
) {

607 
	`£tDw∆Sèã
(
RDKV_XCONF_FWDNLD_DOWNLOAD_EXIT
);

609 
	`£tDw∆Sèã
(
RDKV_FWDNLD_DOWNLOAD_EXIT
);

612 
	`doSt›Dow∆ﬂd
(
cuæ
);

613 
cuæ
 = 
NULL
;

615 i‡(
f‹˚_exô
 =1 && (
cuæ_ªt_code
 == 23)) {

616 
	`unöôülize
(
INITIAL_VALIDATION_SUCCESS
);

617 
	`exô
(1);

621 if((
	`fûePª£¡Check
(
CURL_PROGRESS_FILE
)) == 0) {

622 
	`SWLOG_INFO
("%†: Cuæ Progªs†d©a...\n", 
__FUNCTION__
);

623 
	`logFûeD©a
(
CURL_PROGRESS_FILE
);

624 
	`u∆ök
(
CURL_PROGRESS_FILE
);

626 i‡(
cuæ_ªt_code
 != 0) {

627 
	`£tDw∆Sèã
(
RDKV_FWDNLD_DOWNLOAD_FAILED
);

628 if–*(
fûe_dw∆
.
∑th«me
) != 0 )

630 
	`u∆ök
(
fûe_dw∆
.
∑th«me
);

631 
	`u∆ök
(
hódîInfoFûe
);

634 i‡((
cuæ_ªt_code
 =0Ë&& (*
hâpCode
 == 200 || *httpCode == 206)) {

635 
	`£tDw∆Sèã
(
RDKV_FWDNLD_DOWNLOAD_COMPLETE
);

636 
	`SWLOG_INFO
("%†: Codebig fúmw¨êdow∆ﬂd Suc˚s†-Ñë:%d hâp_code:%d\n", 
__FUNCTION__
, 
cuæ_ªt_code
, *
hâpCode
);

637 
	`t2Cou¡NŸify
("SYS_INFO_CodBPASS", 1);

642 *
hâpCode
 = 0;

643 
cuæ_ªt_code
 = 
CODEBIG_SIGNING_FAILED
;

644 
	`SWLOG_ERROR
–"%†: Codebig signög faûed, sîvîÅy≥ = %d,áb‹tög dow∆ﬂd!!\n", 
__FUNCTION__
, 
£rvî_ty≥
 );

646 
	`ßveHTTPCode
(*
hâpCode
);

647  
cuæ_ªt_code
;

648 
	}
}

656 #i‚de‡
GTEST_BASIC


657 
	$dow∆ﬂdFûe
–
£rvî_ty≥
, c⁄° * 
¨tiÁ˘Loˇti⁄Uæ
, c⁄° * 
loˇlDow∆ﬂdLoˇti⁄
, * 
pPo°Fõlds
, *
hâpCode
 ){

659 
≠p_mode
 = 0;

661 #ifde‡
LIBRDKCERTSELECTOR


662 
MésAuthSètus
 
ªt
 = 
MTLS_CERT_FETCH_SUCCESS
;

664 
ªt
 = -1 ;

666 
MésAuth_t
 
£c
;

667 
°©e_ªd
 = -1;

668 
max_dw∆_•ìd
 = 0;

669 
cuæ_ªt_code
 = -1;

670 
FûeDw∆_t
 
fûe_dw∆
;

671 
chunk_dw∆
 = 0;

672 
més_íabÀ
 = 1;

673 
hódîInfoFûe
[136] = {0};

675 i‡(
¨tiÁ˘Loˇti⁄Uæ
 =
NULL
 || 
loˇlDow∆ﬂdLoˇti⁄
 =NULL || 
hâpCode
 == NULL) {

676 
	`SWLOG_ERROR
("%s: P¨amëî i†NULL\n", 
__FUNCTION__
);

677  
ªt
;

679 
≠p_mode
 = 
	`gëAµMode
();

680 
	`mem£t
(&
£c
, '\0', (
MésAuth_t
));

681 
	`mem£t
(&
fûe_dw∆
, '\0', (
FûeDw∆_t
));

683 
°©e_ªd
 = 
	`isInSèãRed
();

684 #ifde‡
LIBRDKCERTSELECTOR


685 
rdk˚π£À˘‹_h
 
thisCîtSñ
 = 
NULL
;

686 i‡(
thisCîtSñ
 =
NULL
) {

687 c⁄° * 
˚πGroup
 = (
°©e_ªd
 == 1) ? "RCVRY" : "MTLS";

688 
thisCîtSñ
 = 
	`rdk˚π£À˘‹_√w
(
DEFAULT_CONFIG
, 
DEFAULT_HROT
, 
˚πGroup
);

689 i‡(
thisCîtSñ
 =
NULL
) {

690 
	`SWLOG_ERROR
("%s, %†Cîà£À˘‹ inôüliz©i⁄ faûed\n", 
__FUNCTION__
, (
°©e_ªd
 == 1) ? "StateÑed" : "normal state");

691  
cuæ_ªt_code
;

693 
	`SWLOG_INFO
("%s, %†Cîà£À˘‹ inôülized suc˚ssfuŒy\n", 
__FUNCTION__
, (
°©e_ªd
 == 1) ? "StateÑed" : "normal state");

696 
	`SWLOG_INFO
("%s, Cîà£À˘‹áÃódy inôülized,ÑeusögÅhêexi°ög in°™˚\n", 
__FUNCTION__
);

700 *
hâpCode
 = 0;

701 
fûe_dw∆
.
chunk_dw∆_ªåy_time
 = (((
	`°∫cmp
(
immed_ªboŸ_Êag
, "false", 5)) == 0) ? 10 : 0);

702 
	`°∫˝y
(
fûe_dw∆
.
uæ
, 
¨tiÁ˘Loˇti⁄Uæ
, (file_dwnl.url)-1);

703 
fûe_dw∆
.
uæ
[(file_dwnl.url)-1] = '\0';

704 if–
£rvî_ty≥
 =
HTTP_SSR_DIRECT
 )

706 
	`°∫˝y
(
fûe_dw∆
.
∑th«me
, (*)
loˇlDow∆ﬂdLoˇti⁄
, (file_dwnl.pathname)-1);

707 
fûe_dw∆
.
∑th«me
[(file_dwnl.pathname)-1] = '\0';

708 
fûe_dw∆
.
pDlD©a
 = 
NULL
;

709 
	`¢¥ötf
(
hódîInfoFûe
, (hódîInfoFûe), "%s.hódî", 
fûe_dw∆
.
∑th«me
);

713 
fûe_dw∆
.
pDlD©a
 = (
Dow∆ﬂdD©a
 *)
loˇlDow∆ﬂdLoˇti⁄
;

714 *(
fûe_dw∆
.
∑th«me
) = 0;

716 
fûe_dw∆
.
pPo°Fõlds
 =ÖPostFields;

718 i‡(
	`isDw∆Block
(
£rvî_ty≥
)) {

719 
	`SWLOG_ERROR
("%s: Dúe˘ Dow∆ﬂd i†blocked\n", 
__FUNCTION__
);

720 
cuæ_ªt_code
 = 
DWNL_BLOCK
;

721 #ifde‡
LIBRDKCERTSELECTOR


722 i‡(
thisCîtSñ
 !
NULL
) {

723 
	`rdk˚π£À˘‹_‰ì
(&
thisCîtSñ
);

726  
cuæ_ªt_code
;

728 i‡(
£rvî_ty≥
 =
HTTP_SSR_DIRECT
) {

729 
	`SWLOG_INFO
("%†:TryögÅÿcommuniˇã wôh SSR vü TLS sîvî\n", 
__FUNCTION__
);

730 
	`t2Cou¡NŸify
("SYST_INFO_TLS_xconf", 1);

732 i‡((1 =(
	`isThrŸéeE«bÀd
(
devi˚_öfo
.
dev_«me
, 
immed_ªboŸ_Êag
, 
≠p_mode
)))) {

733 i‡(0 =(
	`°∫cmp
(
rfc_li°
.
rfc_thrŸée
, "true", 4))) {

734 
max_dw∆_•ìd
 = 
	`©oi
(
rfc_li°
.
rfc_t›•ìd
);

735 
	`SWLOG_INFO
("%†: ThrŸéê„©uª i†E«bÀ\n", 
__FUNCTION__
);

736 
	`t2Cou¡NŸify
("SYST_INFO_Thrtl_Enable", 1);

737 i‡(
max_dw∆_•ìd
 == 0) {

738 
	`SWLOG_INFO
("%†: ThrŸéê•ìd sëÅÿ0. SÿexôögÅhêdow∆ﬂdÖro˚ss\n", 
__FUNCTION__
);

739 i‡(!(
	`°∫cmp
(
devi˚_öfo
.
maöt_°©us
, "true", 4))) {

740 
	`evítM™agî
("Maöã«n˚MGR", 
MAINT_FWDOWNLOAD_ERROR
);

742 
	`evítM™agî
(
FW_STATE_EVENT
, 
FW_STATE_FAILED
);

743 
	`unöôülize
(
INITIAL_VALIDATION_SUCCESS
);

744 
	`exô
(1);

747 
	`SWLOG_INFO
("%†: ThrŸéê„©uª i†DißbÀ\n", 
__FUNCTION__
);

750 
	`SWLOG_INFO
("%†: ThrŸéêi†DißbÀ\n", 
__FUNCTION__
);

753 i‡(1 =(
	`isOCSPE«bÀ
())) {

754 
	`SWLOG_INFO
("%†: E«bÀ OCSP check\n", 
__FUNCTION__
);

755 
fûe_dw∆
.
s¶vîify
 = 
åue
;

757 
	`SWLOG_INFO
("%†: DißbÀ OCSP check\n", 
__FUNCTION__
);

759 
	`gëPidSt‹e
(
devi˚_öfo
.
dev_«me
, devi˚_öfo.
maöt_°©us
);

760 i‡((
	`°rcmp
(
dißbÀSètsUpd©e
, "yes")Ë&& (
£rvî_ty≥
 =
HTTP_SSR_DIRECT
)) {

761 
chunk_dw∆
 = 
	`isIn¸emëÆCDLE«bÀ
(
fûe_dw∆
.
∑th«me
);

763 #i‚de‡
LIBRDKCERTSELECTOR


764 
	`SWLOG_INFO
("Fetching MTLS credential for SSR/XCONF\n");

765 
ªt
 = 
	`gëMés˚π
(&
£c
);

766 i‡(-1 =
ªt
) {

767 
	`SWLOG_ERROR
("%†: gëMés˚π(ËFótchög MTLS faû. Goög F‹ NON MTLS:%d\n", 
__FUNCTION__
, 
ªt
);

768 
més_íabÀ
 = -1;

770 
	`SWLOG_INFO
("MTLS i†íabÀ\nMTLS cªd†f‹ SSR fëchedÑë=%d\n", 
ªt
);

771 
	`t2Cou¡NŸify
("SYS_INFO_MTLS_enable", 1);

774 (
£rvî_ty≥
 =
HTTP_SSR_DIRECT
Ë? 
	`£tDw∆Sèã
(
RDKV_FWDNLD_DOWNLOAD_INIT
Ë: sëDw∆Sèã(
RDKV_XCONF_FWDNLD_DOWNLOAD_INIT
);

775 #ifde‡
LIBRDKCERTSELECTOR


777 
	`SWLOG_INFO
("Fetching MTLS credential for SSR/XCONF\n");

778 
ªt
 = 
	`gëMés˚π
(&
£c
, &
thisCîtSñ
);

779 
	`SWLOG_INFO
("%s, gëMés˚π fun˘i⁄Ñë vÆuê%d\n", 
__FUNCTION__
, 
ªt
);

781 i‡(
ªt
 =
MTLS_CERT_FETCH_FAILURE
) {

782 
	`SWLOG_ERROR
("%†:Ñë=%d\n", 
__FUNCTION__
, 
ªt
);

783 
	`SWLOG_ERROR
("%†: AŒ MTLS cît†¨êÁûed. FÆlög backÅÿ°©êªd.\n", 
__FUNCTION__
);

784 
	`checkAndE¡îSèãRed
(
CURL_MTLS_LOCAL_CERTPROBLEM
, 
dißbÀSètsUpd©e
);

785  
cuæ_ªt_code
;

786 } i‡(
ªt
 =
STATE_RED_CERT_FETCH_FAILURE
) {

787 
	`SWLOG_ERROR
("%†: SèãÑed cîàÁûed.\n", 
__FUNCTION__
);

788  
cuæ_ªt_code
;

790 
	`SWLOG_INFO
("MTLS i†íabÀd\nMTLS cªd†f‹ SSR fëchedÑë=%d\n", 
ªt
);

791 
	`t2Cou¡NŸify
("SYS_INFO_MTLS_enable", 1);

795 i‡((1 =
°©e_ªd
)) {

796 
	`SWLOG_INFO
("RED:stateÑedÑecoveryáttempting MTLS connectionÅo XCONF server\n");

797 i‡(
CHUNK_DWNL_ENABLE
 =
chunk_dw∆
) {

798 
	`SWLOG_INFO
("RED: Calling chunkDownload() in stateÑedÑecovery\n");

799 
	`t2Cou¡NŸify
("SYST_INFO_RedStateRecovery", 1);

800 
cuæ_ªt_code
 = 
	`chunkDow∆ﬂd
(&
fûe_dw∆
, &
£c
, 
max_dw∆_•ìd
, 
hâpCode
);

803 
cuæ
 = 
	`doCuæInô
();

804 i‡(
cuæ
 !
NULL
) {

805 (
£rvî_ty≥
 =
HTTP_SSR_DIRECT
Ë? 
	`£tDw∆Sèã
(
RDKV_FWDNLD_DOWNLOAD_INPROGRESS
Ë: sëDw∆Sèã(
RDKV_XCONF_FWDNLD_DOWNLOAD_INPROGRESS
);

806 
cuæ_ªt_code
 = 
	`doHâpFûeDow∆ﬂd
(
cuæ
, &
fûe_dw∆
, &
£c
, 
max_dw∆_•ìd
, 
NULL
, 
hâpCode
);

807 (
£rvî_ty≥
 =
HTTP_SSR_DIRECT
Ë? 
	`£tDw∆Sèã
(
RDKV_FWDNLD_DOWNLOAD_EXIT
Ë: sëDw∆Sèã(
RDKV_XCONF_FWDNLD_DOWNLOAD_EXIT
);

808 i‡(
cuæ
 !
NULL
) {

809 
	`doSt›Dow∆ﬂd
(
cuæ
);

810 
cuæ
 = 
NULL
;

812 i‡(
f‹˚_exô
 =1 && (
cuæ_ªt_code
 == 23)) {

813 
	`unöôülize
(
INITIAL_VALIDATION_SUCCESS
);

814 
	`exô
(1);

818 } if(1 =
més_íabÀ
) {

819 i‡(
CHUNK_DWNL_ENABLE
 =
chunk_dw∆
) {

820 
	`SWLOG_INFO
("Calling chunkDownload() with cert mTlsXConfDownloadÉnable\n");

821 
cuæ_ªt_code
 = 
	`chunkDow∆ﬂd
(&
fûe_dw∆
, &
£c
, 
max_dw∆_•ìd
, 
hâpCode
);

824 
	`SWLOG_INFO
("Calling doHttpFileDownload() with cert mTlsXConfDownloadÉnable\n");

825 
cuæ
 = 
	`doCuæInô
();

826 i‡(
cuæ
 !
NULL
) {

827 (
£rvî_ty≥
 =
HTTP_SSR_DIRECT
Ë? 
	`£tDw∆Sèã
(
RDKV_FWDNLD_DOWNLOAD_INPROGRESS
Ë: sëDw∆Sèã(
RDKV_XCONF_FWDNLD_DOWNLOAD_INPROGRESS
);

828 
cuæ_ªt_code
 = 
	`doHâpFûeDow∆ﬂd
(
cuæ
, &
fûe_dw∆
, &
£c
, 
max_dw∆_•ìd
, 
NULL
, 
hâpCode
);

829 (
£rvî_ty≥
 =
HTTP_SSR_DIRECT
Ë? 
	`£tDw∆Sèã
(
RDKV_FWDNLD_DOWNLOAD_EXIT
Ë: sëDw∆Sèã(
RDKV_XCONF_FWDNLD_DOWNLOAD_EXIT
);

830 i‡(
cuæ
 !
NULL
) {

831 
	`doSt›Dow∆ﬂd
(
cuæ
);

832 
cuæ
 = 
NULL
;

834 i‡(
f‹˚_exô
 =1 && (
cuæ_ªt_code
 == 23)) {

835 
	`unöôülize
(
INITIAL_VALIDATION_SUCCESS
);

836 
	`exô
(1);

841 i‡(
CHUNK_DWNL_ENABLE
 =
chunk_dw∆
) {

842 
	`SWLOG_INFO
("Calling chunkDownload() with cert mTlsXConfDownload disable\n");

843 
cuæ_ªt_code
 = 
	`chunkDow∆ﬂd
(&
fûe_dw∆
, 
NULL
, 
max_dw∆_•ìd
, 
hâpCode
);

846 
	`SWLOG_INFO
("Calling doHttpFileDownload() with cert mTlsXConfDownload disable\n");

847 
cuæ
 = 
	`doCuæInô
();

848 i‡(
cuæ
 !
NULL
) {

849 (
£rvî_ty≥
 =
HTTP_SSR_DIRECT
Ë? 
	`£tDw∆Sèã
(
RDKV_FWDNLD_DOWNLOAD_INPROGRESS
Ë: sëDw∆Sèã(
RDKV_XCONF_FWDNLD_DOWNLOAD_INPROGRESS
);

850 
cuæ_ªt_code
 = 
	`doHâpFûeDow∆ﬂd
(
cuæ
, &
fûe_dw∆
, 
NULL
, 
max_dw∆_•ìd
, NULL, 
hâpCode
);

851 (
£rvî_ty≥
 =
HTTP_SSR_DIRECT
Ë? 
	`£tDw∆Sèã
(
RDKV_FWDNLD_DOWNLOAD_EXIT
Ë: sëDw∆Sèã(
RDKV_XCONF_FWDNLD_DOWNLOAD_EXIT
);

852 i‡(
cuæ
 !
NULL
) {

853 
	`doSt›Dow∆ﬂd
(
cuæ
);

854 
cuæ
 = 
NULL
;

856 i‡(
f‹˚_exô
 =1 && (
cuæ_ªt_code
 == 23)) {

857 
	`unöôülize
(
INITIAL_VALIDATION_SUCCESS
);

858 
	`exô
(1);

863 i‡(
	`°rcmp
(
dißbÀSètsUpd©e
, "yes"Ë&& (
CHUNK_DWNL_ENABLE
 !
chunk_dw∆
)) {

864 
chunk_dw∆
 = 
	`isIn¸emëÆCDLE«bÀ
(
fûe_dw∆
.
∑th«me
);

866 
	`SWLOG_INFO
("%†: A·î cuæÑeque°Åhêcuæ sètu†%dánd hâp=%dánd chunk dow∆ﬂd=%d\n", 
__FUNCTION__
, 
cuæ_ªt_code
, *
hâpCode
, 
chunk_dw∆
);

867 } 
chunk_dw∆
 && (
CURL_LOW_BANDWIDTH
 =
cuæ_ªt_code
 || 
CURLTIMEOUT
 == curl_ret_code));

868 #ifde‡
LIBRDKCERTSELECTOR


869 } 
	`rdk˚π£À˘‹_£tCuæSètus
(
thisCîtSñ
, 
cuæ_ªt_code
, 
fûe_dw∆
.
uæ
Ë=
TRY_ANOTHER
);

871 if((
	`fûePª£¡Check
(
CURL_PROGRESS_FILE
)) == 0) {

872 
	`SWLOG_INFO
("%†: Cuæ Progªs†d©a...\n", 
__FUNCTION__
);

873 
	`logFûeD©a
(
CURL_PROGRESS_FILE
);

874 
	`u∆ök
(
CURL_PROGRESS_FILE
);

876 i‡((
cuæ_ªt_code
 =
CURL_SUCCESS
Ë&& (*
hâpCode
 =
HTTP_SUCCESS
 || *hâpCodê=
HTTP_CHUNK_SUCCESS
)) {

877 (
£rvî_ty≥
 =
HTTP_SSR_DIRECT
Ë? 
	`£tDw∆Sèã
(
RDKV_FWDNLD_DOWNLOAD_COMPLETE
Ë: sëDw∆Sèã(
RDKV_XCONF_FWDNLD_DOWNLOAD_COMPLETE
);

878 if(
£rvî_ty≥
 =
HTTP_SSR_DIRECT
)

880 
	`SWLOG_INFO
("%†: Dúe˘ ImagêupgødêSuc˚ss: cuæÑë:%d hâp_code:%d\n", 
__FUNCTION__
, 
cuæ_ªt_code
, *
hâpCode
);

881 
	`t2Cou¡NŸify
("SYS_INFO_DirectSuccess", 1);

885 
	`SWLOG_INFO
("%†: Dúe˘ Imagêupgødêc⁄√˘i⁄ suc˚ss: cuæÑë:%d hâp_code:%d\n", 
__FUNCTION__
, 
cuæ_ªt_code
, *
hâpCode
);

888 
	`SWLOG_ERROR
("%†: Dúe˘ ImagêupgødêFaû: cuæÑë:%d hâp_code:%d\n", 
__FUNCTION__
, 
cuæ_ªt_code
, *
hâpCode
);

889 (
£rvî_ty≥
 =
HTTP_SSR_DIRECT
Ë? 
	`£tDw∆Sèã
(
RDKV_FWDNLD_DOWNLOAD_FAILED
Ë: sëDw∆Sèã(
RDKV_XCONF_FWDNLD_DOWNLOAD_FAILED
);

890 
	`dw∆Eº‹
(
cuæ_ªt_code
, *
hâpCode
, 
£rvî_ty≥
);

891 if–*(
fûe_dw∆
.
∑th«me
) != 0 )

893 
	`u∆ök
(
fûe_dw∆
.
∑th«me
);

894 
	`u∆ök
(
hódîInfoFûe
);

897 
	`ßveHTTPCode
(*
hâpCode
);

898  
cuæ_ªt_code
;

899 
	}
}

911 
	$ªåyDow∆ﬂd
(
£rvî_ty≥
, c⁄° * 
¨tiÁ˘Loˇti⁄Uæ
, c⁄° * 
loˇlDow∆ﬂdLoˇti⁄
, *
pPo°Fõlds
, 
ªåy_˙t
, 
dñay
, *
hâpCode
 ){

912 
cuæ_ªt_code
 = -1;

913 
ªåy_com∂ëed
 = 1;

915 i‡(
¨tiÁ˘Loˇti⁄Uæ
 =
NULL
 || 
loˇlDow∆ﬂdLoˇti⁄
 =NULL || 
hâpCode
 == NULL) {

916 
	`SWLOG_ERROR
("%s: P¨amëî i†NULL\n", 
__FUNCTION__
);

917  
cuæ_ªt_code
;

919 i‡(
£rvî_ty≥
 =
HTTP_SSR_DIRECT
 || sîvî_ty≥ =
HTTP_XCONF_DIRECT
) {

920 if–
£rvî_ty≥
 =
HTTP_SSR_DIRECT
 )

922 
	`SWLOG_INFO
("%s: sîvîty≥=%d, uæ=%s,Üoc=%s, hâpcode=%d,ÅŸÆÑëry=%d, dñay=%d\n", 
__FUNCTION__
, 
£rvî_ty≥
, 
¨tiÁ˘Loˇti⁄Uæ
, (c⁄° *)
loˇlDow∆ﬂdLoˇti⁄
, *
hâpCode
, 
ªåy_˙t
, 
dñay
);

926 
	`SWLOG_INFO
("%s: sîvîty≥=%d, uæ=%s,Üoc=MEMORY, hâpcode=%d,Ñëry=%d, dñay=%d\n", 
__FUNCTION__
, 
£rvî_ty≥
, 
¨tiÁ˘Loˇti⁄Uæ
, *
hâpCode
, 
ªåy_˙t
, 
dñay
);

928  
ªåy_com∂ëed
 <
ªåy_˙t
) {

929 
	`¶ìp
(
dñay
);

930 
cuæ_ªt_code
 = 
	`dow∆ﬂdFûe
(
£rvî_ty≥
, 
¨tiÁ˘Loˇti⁄Uæ
, 
loˇlDow∆ﬂdLoˇti⁄
, 
pPo°Fõlds
, 
hâpCode
);

931 i‡((
cuæ_ªt_code
 =
CURL_SUCCESS
Ë&& (*
hâpCode
 =
HTTP_SUCCESS
 || *hâpCodê=
HTTP_CHUNK_SUCCESS
)) {

932 if(
£rvî_ty≥
 =
HTTP_SSR_DIRECT
)

934 
	`SWLOG_INFO
("%†: Dúe˘ ImagêupgødêSuc˚ss:Ñë:%d hâp_code:%d\n", 
__FUNCTION__
, 
cuæ_ªt_code
, *
hâpCode
);

935 
	`t2Cou¡NŸify
("SYS_INFO_DirectSuccess", 1);

939 
	`SWLOG_INFO
("%†: Dúe˘ Imagêupgødêc⁄√˘i⁄ suc˚ss:Ñë:%d hâp_code:%d\n", 
__FUNCTION__
, 
cuæ_ªt_code
, *
hâpCode
);

942 } i‡(*
hâpCode
 =
HTTP_PAGE_NOT_FOUND
) {

943 (
£rvî_ty≥
 =
HTTP_SSR_DIRECT
Ë? 
	`SWLOG_INFO
("%†: Re˚ived 404Ñe•⁄£ f‹ Dúe˘ Imagêupgøde, RëryÜogi¯nŸÇìded\n", 
__FUNCTION__
) : SWLOG_INFO("%s : Received 404Ñesponse Direct Image upgrade from xconf, RetryÜogicÇotÇeeded\n", __FUNCTION__);

945 } if(
cuæ_ªt_code
 =
DWNL_BLOCK
) {

948 (
£rvî_ty≥
 =
HTTP_SSR_DIRECT
Ë? 
	`SWLOG_INFO
("%†: Dúe˘ Imagêupgødêªtu∫:Ñëry=%dÑë:%d hâp_code:%d\n", 
__FUNCTION__
, 
ªåy_com∂ëed
, 
cuæ_ªt_code
, *
hâpCode
) : SWLOG_INFO("%s : Direct Image upgrade connectionÑeturn:Ñetry=%dÑet:%d http_code:%d\n", __FUNCTION__,Ñetry_completed, curl_ret_code, *httpCode);

950 
ªåy_com∂ëed
++;

952 } i‡(
£rvî_ty≥
 =
HTTP_SSR_CODEBIG
 || sîvî_ty≥ =
HTTP_XCONF_CODEBIG
) {

953 
ªåy_com∂ëed
 <
ªåy_˙t
) {

954 
	`¶ìp
(
dñay
);

955 
cuæ_ªt_code
 = 
	`codebigdow∆ﬂdFûe
(
£rvî_ty≥
, 
¨tiÁ˘Loˇti⁄Uæ
, 
loˇlDow∆ﬂdLoˇti⁄
, 
pPo°Fõlds
, 
hâpCode
);

956 i‡((
cuæ_ªt_code
 =
CURL_SUCCESS
Ë&& (*
hâpCode
 =
HTTP_SUCCESS
 || *hâpCodê=
HTTP_CHUNK_SUCCESS
)) {

957 
	`SWLOG_INFO
("%†: Codebig ImagêupgødêSuc˚ss:Ñë:%d hâp_code:%d\n", 
__FUNCTION__
, 
cuæ_ªt_code
, *
hâpCode
);

959 } i‡(*
hâpCode
 =
HTTP_PAGE_NOT_FOUND
) {

960 (
£rvî_ty≥
 =
HTTP_SSR_CODEBIG
Ë? 
	`SWLOG_INFO
("%†: Re˚ived 404Ñe•⁄£ f‹ Codebig Imagêupgøde, RëryÜogi¯nŸÇìded\n", 
__FUNCTION__
) : SWLOG_INFO("%s : Received 404Ñesponse Codebig Image upgrade from xconf, RetryÜogicÇotÇeeded\n", __FUNCTION__);

962 } i‡(
cuæ_ªt_code
 =
DWNL_BLOCK
 || cuæ_ªt_codê=
CODEBIG_SIGNING_FAILED
) {

965 
	`SWLOG_INFO
("%†: Codebig Imagêupgødêªtu∫:Ñëry=%dÑë:%d hâp_code:%d\n", 
__FUNCTION__
, 
ªåy_com∂ëed
, 
cuæ_ªt_code
, *
hâpCode
);

967 
ªåy_com∂ëed
++;

970 *
hâpCode
 = 0;

971 
	`SWLOG_ERROR
("%s: InvÆid Sîvî Ty≥=%d\n", 
__FUNCTION__
, 
£rvî_ty≥
);

973  
cuæ_ªt_code
;

974 
	}
}

983 
	$ÁŒBack
(
£rvî_ty≥
, c⁄° * 
¨tiÁ˘Loˇti⁄Uæ
, c⁄° * 
loˇlDow∆ﬂdLoˇti⁄
, *
pPo°Fõlds
, *
hâpCode
) {

984 
cuæ_ªt_code
 = -1;

986 i‡(
¨tiÁ˘Loˇti⁄Uæ
 =
NULL
 || 
loˇlDow∆ﬂdLoˇti⁄
 =NULL || 
hâpCode
 == NULL) {

987 
	`SWLOG_ERROR
("%s: P¨amëî i†NULL\n", 
__FUNCTION__
);

988  
cuæ_ªt_code
;

991 i‡(
£rvî_ty≥
 =
HTTP_SSR_DIRECT
 || sîvî_ty≥ =
HTTP_XCONF_DIRECT
) {

992 
	`SWLOG_INFO
("%s: cÆlög dow∆ﬂdFûe\n", 
__FUNCTION__
 );

993 
cuæ_ªt_code
 = 
	`dow∆ﬂdFûe
(
£rvî_ty≥
, 
¨tiÁ˘Loˇti⁄Uæ
, 
loˇlDow∆ﬂdLoˇti⁄
, 
pPo°Fõlds
, 
hâpCode
);

994 i‡(*
hâpCode
 !
HTTP_SUCCESS
 && *hâpCodê!
HTTP_CHUNK_SUCCESS
 && *httpCode != 404) {

995 
	`SWLOG_ERROR
("%†: Dúe˘ imagêupgødêÁûovîÑeque° faûedÑëu∫=%d, hâpcode=%d\n", 
__FUNCTION__
, 
cuæ_ªt_code
, *
hâpCode
);

997 
	`SWLOG_INFO
("%†: Dúe˘ imagêupgødêÁûovîÑeque°Ñe˚ivedÑëu∫=%d, hâpcode=%d\n", 
__FUNCTION__
, 
cuæ_ªt_code
, *
hâpCode
);

999 } i‡(
£rvî_ty≥
 =
HTTP_SSR_CODEBIG
 || sîvî_ty≥ =
HTTP_XCONF_CODEBIG
) {

1001 
	`SWLOG_INFO
("%s: cÆlögÑëryDow∆ﬂd\n", 
__FUNCTION__
 );

1002 
cuæ_ªt_code
 = 
	`ªåyDow∆ﬂd
(
£rvî_ty≥
, 
¨tiÁ˘Loˇti⁄Uæ
, 
loˇlDow∆ﬂdLoˇti⁄
, 
pPo°Fõlds
, 
CB_RETRY_COUNT
, 10, 
hâpCode
);

1003 i‡((
cuæ_ªt_code
 =
CURL_SUCCESS
Ë&& (*
hâpCode
 =
HTTP_SUCCESS
 || *hâpCodê=
HTTP_CHUNK_SUCCESS
)) {

1004 
	`SWLOG_INFO
("%†: Codebig ImagêupgødêSuc˚ss:Ñë=%d hâpcode=%d\n", 
__FUNCTION__
, 
cuæ_ªt_code
, *
hâpCode
);

1005 i‡((
	`fûePª£¡Check
(
DIRECT_BLOCK_FILENAME
)) != 0) {

1006 
	`¸óãFûe
(
DIRECT_BLOCK_FILENAME
);

1007 
	`SWLOG_INFO
("%†: U£ CodeBigánd Blockög Dúe˘áâem±†f‹ 24hrs\n", 
__FUNCTION__
);

1009 } i‡((*
hâpCode
 !
HTTP_PAGE_NOT_FOUND
Ë&& (
cuæ_ªt_code
 != -1)){

1011 
	`SWLOG_INFO
("%†: Codebig ImagêupgødêFaû:Ñë=%d hâpcode=%d\n", 
__FUNCTION__
, 
cuæ_ªt_code
, *
hâpCode
);

1012 i‡((
	`fûePª£¡Check
(
CB_BLOCK_FILENAME
)) != 0) {

1013 
	`¸óãFûe
(
CB_BLOCK_FILENAME
);

1014 
	`SWLOG_INFO
("%†: Swôch Dúe˘ánd Blockög Codebig f‹ 30mös,\n", 
__FUNCTION__
);

1018 i‡(
£rvî_ty≥
 =
HTTP_SSR_DIRECT
 || sîvî_ty≥ =
HTTP_XCONF_DIRECT
) {

1019 
	`SWLOG_INFO
("%†: fÆ»back Dúe˘ Dow∆ﬂd. cuæÑëu∫ code=%dánd hâp=%d\n", 
__FUNCTION__
, 
cuæ_ªt_code
, *
hâpCode
);

1020 } i‡(
£rvî_ty≥
 =
HTTP_SSR_CODEBIG
 || sîvî_ty≥ =
HTTP_XCONF_CODEBIG
) {

1021 
	`SWLOG_INFO
("%†: fÆ»back Codebig Dow∆ﬂd. cuæÑëu∫ code=%dánd hâp=%d\n", 
__FUNCTION__
, 
cuæ_ªt_code
, *
hâpCode
);

1023 
	`SWLOG_ERROR
("%s: InvÆid Sîvî Ty≥=%d\n", 
__FUNCTION__
, 
£rvî_ty≥
);

1025  
cuæ_ªt_code
;

1026 
	}
}

1030 
	$upd©eUpgødeFœg
(
a˘i⁄
)

1032 *
Êag_fûe
 = 
NULL
;

1033 i‡(0 =(
	`°∫cmp
(
devi˚_öfo
.
dev_ty≥
, "mediaclient", 11))) {

1034 
Êag_fûe
 = "/tmp/.imageDnldInProgress";

1035 } i‡(
¥Ÿo
 == 1) {

1036 
Êag_fûe
 = 
HTTP_CDL_FLAG
;

1038 
Êag_fûe
 = 
SNMP_CDL_FLAG
;

1040 i‡(
a˘i⁄
 == 1) {

1041 
	`¸óãFûe
(
Êag_fûe
);

1042 } i‡(
a˘i⁄
 =2 && (0 =(
	`fûePª£¡Check
(
Êag_fûe
)))) {

1043 
	`u∆ök
(
Êag_fûe
);

1045 
	}
}

1052 
	$gëOPTOUTVÆue
(c⁄° *
fûe_«me
)

1054 
°©us
 = -1;

1055 
FILE
 *
Â
 = 
NULL
;

1056 
tbuff
[80] = {0};

1058 i‡(
fûe_«me
 =
NULL
) {

1059  
°©us
;

1062 
Â
 = 
	`f›í
(
fûe_«me
, "r");

1063 i‡(
Â
 !
NULL
) {

1064 
NULL
 !
	`fgës
(
tbuff
, —buff), 
Â
)) {

1065 i‡(
	`°r°r
(
tbuff
,"softwareoptout")) {

1066 
	`SWLOG_INFO
("so·w¨e›touàvÆuê=%s.\n", 
tbuff
);

1071 
	`SWLOG_ERROR
("U«bÀÅÿ›í fûe=%s\n", 
fûe_«me
);

1072  
°©us
;

1075 i‡(
	`°r°r
(
tbuff
, "IGNORE_UPDATE")) {

1076 
°©us
 = 1;

1077 }if(
	`°r°r
(
tbuff
, "ENFORCE_OPTOUT")) {

1078 
°©us
 = 0;

1080 
	`f˛o£
(
Â
);

1081  
°©us
;

1082 
	}
}

1084 
	$≥rùhîÆ_fúmw¨e_dndl
–*
pCloudFWLoˇti⁄
, *
pPîùhîÆFúmw¨es
 )

1086 
FILE
 *
Â
;

1087 *
pPîùhFW
;

1088 *
pSavedFW
;

1089 *
pSavedDëaûs
;

1090 *
pFW
;

1091 *
pDevi˚Name
;

1092 *
pDevi˚Ty≥
;

1093 *
pDevi˚Vî
;

1094 *
pPªvDlVîs
 = 
NULL
;

1095 *
pDow∆ﬂdedVîs
;

1096 *
pTmp
;

1097 
size_t
 
szLí
;

1098 
size_t
 
szRu¬ögLí
 = 0;

1099 
iVîCmp
;

1100 
iRë
 = 0;

1101 
hâp_code
;

1102 
iCuæCode
;

1103 *
pCurVî
;

1104 *
pCurFW
;

1105 
cDLSt‹eLoc
[
DWNL_PATH_FILE_LEN
];

1106 
cSour˚URL
[
URL_MAX_LEN
];

1107 
cTmpCloudFW
[100];

1108 
cCurVîBuf
[200];

1109 
cTmpCurVîBuf
[(
cCurVîBuf
)];

1110 
cTmpPªvVîBuf
[(
cCurVîBuf
)];

1111 
boﬁ
 
bTriggîDL
;

1114 
	`SWLOG_INFO
–"%s:ÖPîùhîÆFúmw¨e†%s\n", 
__FUNCTION__
, 
pPîùhîÆFúmw¨es
 );

1116 
	`GëFûeC⁄ã¡s
–&
pPªvDlVîs
, 
DOWNLOADED_PERIPHERAL_VERSION
 );

1117 if–
pPªvDlVîs
 !
NULL
)

1119 
	`SWLOG_INFO
–"%s: PªvDow∆ﬂd Vîsi⁄†%s\n", 
__FUNCTION__
, 
pPªvDlVîs
 );

1122 
szLí
 = 
	`°∫Àn
–
pPîùhîÆFúmw¨es
, 959 ) + 1;

1123 
pPîùhFW
 = 
	`mÆloc
–
szLí
 );

1124 if–
pPîùhFW
 !
NULL
 )

1126 
pDow∆ﬂdedVîs
 = 
	`mÆloc
–
DOWNLOADED_VERS_SIZE
 );

1127 if–
pDow∆ﬂdedVîs
 !
NULL
 )

1129 *
pDow∆ﬂdedVîs
 = 0;

1131 
	`GëRemŸeVîs
–
cCurVîBuf
, (cCurVerBuf) );

1132 
	`SWLOG_INFO
–"%s: GëRemŸeVî†found cCurVîBu‡%s\n", 
__FUNCTION__
, 
cCurVîBuf
 );

1133 
	`¢¥ötf
–
pPîùhFW
, 
szLí
, "%s", 
pPîùhîÆFúmw¨es
 );

1134 
pFW
 = 
	`°πok_r
–
pPîùhFW
, ",", &
pSavedFW
 );

1136  
pFW
 !
NULL
 )

1138 
bTriggîDL
 = 
åue
;

1140 
	`SWLOG_INFO
–"%s:ÖFW = %s\n", 
__FUNCTION__
, 
pFW
 );

1141 
	`¢¥ötf
–
cTmpCloudFW
, (cTmpCloudFW), "%s", 
pFW
 );

1143 
pDevi˚Name
 = 
	`°πok_r
–
cTmpCloudFW
, "_", &
pSavedDëaûs
 );

1144 
pDevi˚Ty≥
 = 
	`°πok_r
–
NULL
, "_", &
pSavedDëaûs
 );

1145 
pDevi˚Vî
 = 
	`°πok_r
–
NULL
, "_", &
pSavedDëaûs
 );

1147 
	`SWLOG_INFO
–"%s:ÖDevi˚Namê%s\n", 
__FUNCTION__
, 
pDevi˚Name
 );

1148 
	`SWLOG_INFO
–"%s:ÖDevi˚Ty≥ = %s\n", 
__FUNCTION__
, 
pDevi˚Ty≥
 );

1149 
	`SWLOG_INFO
–"%s:ÖDevi˚Vî = %s\n", 
__FUNCTION__
, 
pDevi˚Vî
 );

1152 if–
bTriggîDL
 =
åue
 && 
pPªvDlVîs
 !
NULL
 && *pPrevDlVers )

1154 
	`¢¥ötf
–
cTmpPªvVîBuf
, (cTmpPªvVîBuf), "%s", 
pPªvDlVîs
 );

1155 
pTmp
 = 
	`°πok_r
–
cTmpPªvVîBuf
, ",", &
pSavedDëaûs
 );

1157  
pTmp
 !
NULL
 )

1159 
	`SWLOG_INFO
–"%s: FödögÖDevi˚Ty≥ = %†™dÖDevi˚Vî%†öÖTm∞%s\n", 
__FUNCTION__
, 
pDevi˚Ty≥
, 
pDevi˚Vî
, 
pTmp
 );

1160 if–
	`°r°r
–
pTmp
, 
pDevi˚Name
 ) && så°r–pTmp, 
pDevi˚Ty≥
 ) && så°r–pTmp, 
pDevi˚Vî
 ) )

1162 
bTriggîDL
 = 
Ál£
;

1163 
	`SWLOG_INFO
–"%s: Pªv dow∆ﬂded FWándÑeque°ed cloud FW dow∆ﬂd vîsi⁄†¨êthêßmê(%s)\n", 
__FUNCTION__
, 
pDevi˚Vî
 );

1167 
pTmp
 = 
	`°πok_r
–
NULL
, ",", &
pSavedDëaûs
 );

1171 if–
bTriggîDL
 =
åue
 )

1173 
	`¢¥ötf
–
cTmpCurVîBuf
, (cTmpCurVîBuf), "%s", 
cCurVîBuf
 );

1174 
pCurFW
 = 
	`°πok_r
–
cTmpCurVîBuf
, ",", &
pSavedDëaûs
 );

1175  
pCurFW
 !
NULL
 )

1183 if–(
pDevi˚Name
 !
NULL
Ë&& 
	`°r°r
–
pCurFW
,ÖDevi˚NamêË&& så°r–pCurFW, 
pDevi˚Ty≥
) )

1185 if–(
pCurVî
=
	`°ºchr
–
pCurFW
, '_' )Ë!
NULL
 )

1187 ++
pCurVî
;

1188 
iVîCmp
 = 
	`°∫cmp
–
pDevi˚Vî
, 
pCurVî
, 
MAX_VER_LEN
 );

1189 
	`SWLOG_INFO
–"%s: Com∑ªdÖDevi˚Vî = %†™dÖCurVî = %s, ouçuà%d\n", 
__FUNCTION__
, 
pDevi˚Vî
, 
pCurVî
, 
iVîCmp
 );

1190 if–
iVîCmp
 <= 0 )

1192 
	`SWLOG_INFO
–"%s: Thêvîsi⁄ i¿thêdevi˚ i†√wî o∏ßme,Çÿupgødê√eded\n", 
__FUNCTION__
 );

1193 
bTriggîDL
 = 
Ál£
;

1197 
pCurFW
 = 
	`°πok_r
–
NULL
, ",", &
pSavedDëaûs
 );

1200 if–
bTriggîDL
 =
åue
 )

1202 
	`¢¥ötf
–
cSour˚URL
, (cSour˚URL), "%s/%s.tgz", 
pCloudFWLoˇti⁄
, 
pFW
 );

1203 
	`¢¥ötf
–
cDLSt‹eLoc
, (cDLSt‹eLoc), "%s/%s.tgz", 
devi˚_öfo
.
difw_∑th
, 
pFW
 );

1205 
	`SWLOG_INFO
–"%s: fúmw¨êfûíamêwôhÖ©h = %s\n", 
__FUNCTION__
, 
cDLSt‹eLoc
 );

1206 if–
	`fûePª£¡Check
–
cDLSt‹eLoc
 ) != 0 )

1208 
	`¢¥ötf
–
cTmpCurVîBuf
, (cTmpCurVîBuf), "%s_%s_", 
pDevi˚Name
, 
pDevi˚Ty≥
 );

1209 
	`îa£TGZIãmsM©chög
–
devi˚_öfo
.
difw_∑th
, 
cTmpCurVîBuf
 );

1212 
	`SWLOG_INFO
–"%s: Reque°ög upgødêtÿ%†‰om %s\n", 
__FUNCTION__
, 
cDLSt‹eLoc
, 
cSour˚URL
 );

1213 
iCuæCode
 = 
	`rdkv_upgøde_ªque°
–
PERIPHERAL_UPGRADE
, 
HTTP_SSR_DIRECT
, 
cSour˚URL
, 
cDLSt‹eLoc
, 
NULL
, &
hâp_code
,
immed_ªboŸ_Êag
,
dñay_dw∆
 , 
œ°run
, 
dißbÀSètsUpd©e
, &
devi˚_öfo
);

1214 if–
iCuæCode
 =0 && 
hâp_code
 == 200 )

1216 if–
szRu¬ögLí
 )

1218 
	`¢¥ötf
–
pDow∆ﬂdedVîs
 + 
szRu¬ögLí
, 
DOWNLOADED_VERS_SIZE
 - szRunningLen, "," );

1219 ++
szRu¬ögLí
;

1221 
szRu¬ögLí
 +
	`¢¥ötf
–
pDow∆ﬂdedVîs
 + szRunningLen,

1222 
DOWNLOADED_VERS_SIZE
 - 
szRu¬ögLí
, "%s.tgz", 
pFW
 );

1224 
	`¢¥ötf
–
cTmpPªvVîBuf
, (cTmpPªvVîBuf), "%s.tgz i†suc˚ssful", 
pFW
 );

1225 
	`t2VÆNŸify
–"xr_fwd∆d_•lô", 
cTmpPªvVîBuf
 );

1229 
iRë
 = -1;

1230 
	`SWLOG_ERROR
( "%s: Peripheral download failed with curlÑeturn = %d, http_code = %d\n",

1231 
__FUNCTION__
, 
iCuæCode
, 
hâp_code
 );

1235 
pFW
 = 
	`°πok_r
–
NULL
, ",", &
pSavedFW
 );

1238 if–*
pDow∆ﬂdedVîs
 )

1240 if–(
Â
=
	`f›í
–
DOWNLOADED_PERIPHERAL_VERSION
, "a")Ë!
NULL
 )

1242 
	`Ârötf
–
Â
, "%s", 
pDow∆ﬂdedVîs
 );

1243 
	`f˛o£
–
Â
 );

1247 
	`SWLOG_ERROR
–"%s: U«bÀÅÿ›í %†f‹áµídög\n", 
__FUNCTION__
, 
DOWNLOADED_PERIPHERAL_VERSION
 );

1249 
	`¢¥ötf
–
cSour˚URL
, (cSour˚URL), "%s:%s", 
devi˚_öfo
.
difw_∑th
, 
pDow∆ﬂdedVîs
 );

1250 
	`evítM™agî
–"PîùhîÆUpgødeEvít", 
cSour˚URL
 );

1252 
	`‰ì
–
pDow∆ﬂdedVîs
 );

1254 
	`‰ì
–
pPîùhFW
 );

1257 if–
pPªvDlVîs
 !
NULL
)

1259 
	`‰ì
–
pPªvDlVîs
 );

1262  
iRë
;

1263 
	}
}

1266 
	$checkTriggîUpgøde
(
XCONFRES
 *
pRe•⁄£
, c⁄° *
modñ
)

1268 
hâp_code
;

1269 
upgøde_°©us
 = -1;

1270 
boﬁ
 
vÆid_pci_°©us
 = 
Ál£
;

1271 
pci_cuæ_code
 = -1;

1272 
pdri_cuæ_code
 = -1;

1273 
≥rùhîÆ_cuæ_code
 = -1;

1274 
imageHTTPURL
[
URL_MAX_LEN1
];

1275 
dwÕ©h_fûíame
[
DWNL_PATH_FILE_LEN1
];

1276 
FILE
 *
Â
 = 
NULL
;

1277 
›tout
 = -1;

1279 
imageHTTPURL
[0] = 0;

1280 
dwÕ©h_fûíame
[0] = 0;

1281 i‡(
modñ
 =
NULL
) {

1282 
	`SWLOG_ERROR
("%†: P¨amëî i†NULL\n", 
__FUNCTION__
);

1283  
upgøde_°©us
;

1285 i‡(
åue
 =
	`isUpgødeInProgªss
()) {

1286 
	`SWLOG_ERROR
("Exiting from DEVICE INITIATED HTTP CDL\nAnother upgrade is inÖrogress\n");

1287 i‡(!(
	`°∫cmp
(
devi˚_öfo
.
maöt_°©us
, "true", 4))) {

1288 
	`evítM™agî
("Maöã«n˚MGR", 
MAINT_FWDOWNLOAD_ERROR
);

1290 
	`unöôülize
(
INITIAL_VALIDATION_SUCCESS
);

1291 
	`exô
(1);

1293 i‡((
	`°r°r
(
pRe•⁄£
->
˛oudFWVîsi⁄
, 
modñ
)Ë=
NULL
) {

1294 
	`SWLOG_INFO
("cloudFWVersion isÉmpty. Do Nothing\n");

1295 
	`evítM™agî
(
FW_STATE_EVENT
, 
FW_STATE_FAILED
);

1297 
	`¢¥ötf
(
immed_ªboŸ_Êag
, (immed_ªboŸ_Êag), "%s", 
pRe•⁄£
->
˛oudImmedüãReboŸFœg
);

1298 
dñay_dw∆
 = 
	`©oi
(
pRe•⁄£
->
˛oudDñayDow∆ﬂd
);

1299 
	`SWLOG_INFO
("%s:ÑeboŸ_Êag =%†™d dñay_dw∆=%d\n", 
__FUNCTION__
, 
immed_ªboŸ_Êag
, 
dñay_dw∆
);

1300 
vÆid_pci_°©us
 = 
	`checkF‹VÆidPCIUpgøde
(
åiggî_ty≥
, 
cur_img_dëaû
.
cur_img_«me
, 
pRe•⁄£
->
˛oudFWVîsi⁄
,ÖRe•⁄£->
˛oudFWFûe
);

1301 i‡(
vÆid_pci_°©us
 =
åue
) {

1302 
	`SWLOG_INFO
("checkForValidPCIUpgradeÑeturnÅrue\n");

1303 i‡(0 =
	`°∫cmp
(
devi˚_öfo
.
maöt_°©us
, "true", 4)) {

1304 i‡((
	`°∫cmp
(
pRe•⁄£
->
˛oudImmedüãReboŸFœg
, "true", 4)) == 0) {

1305 
isCrôiˇlUpd©e
 = 
åue
;

1307 i‡(0 =
	`°∫cmp
(
devi˚_öfo
.
sw_›tout
, "true", 4)) {

1308 
›tout
 = 
	`gëOPTOUTVÆue
("/opt/maintenance_mgr_record.conf");

1309 i‡(
›tout
 =1 && 
isCrôiˇlUpd©e
 !
åue
) {

1310 
	`SWLOG_INFO
("OptOut: IGNORE UPDATE is set.Exiting !!\n");

1311 
	`evítM™agî
("Maöã«n˚MGR", 
MAINT_FWDOWNLOAD_ABORTED
);

1312 
	`unöôülize
(
INITIAL_VALIDATION_SUCCESS
);

1313 
	`exô
(1);

1314 }if((0 =
›tout
Ë&& (
åiggî_ty≥
 != 4)) {

1315 
	`evítM™agî
(
FW_STATE_EVENT
, 
FW_STATE_ONHOLD_FOR_OPTOUT
);

1316 
	`SWLOG_INFO
("OptOut: Event sent for on hold for OptOut\n");

1317 
	`evítM™agî
("Maöã«n˚MGR" ,
MAINT_FWDOWNLOAD_COMPLETE
);

1318 
	`SWLOG_INFO
("OptOut: Consent Required from User\n");

1319 
	`t2Cou¡NŸify
("SYST_INFO_NoConsentFlash", 1);

1320 
	`unöôülize
(
INITIAL_VALIDATION_SUCCESS
);

1321 
	`exô
(1);

1325 
	`¢¥ötf
(
imageHTTPURL
, (imageHTTPURL), "%s/%s", 
pRe•⁄£
->
˛oudFWLoˇti⁄
,ÖRe•⁄£->
˛oudFWFûe
);

1326 
	`SWLOG_INFO
("imageHTTPURL=%s\n", 
imageHTTPURL
);

1327 
Â
 = 
	`f›í
(
DWNL_URL_VALUE
, "w");

1328 i‡(
Â
 !
NULL
) {

1329 
	`Ârötf
(
Â
, "%s\n", 
imageHTTPURL
);

1330 
	`f˛o£
(
Â
);

1332 
	`¢¥ötf
(
dwÕ©h_fûíame
, (dwÕ©h_fûíame), "%s/%s", 
devi˚_öfo
.
difw_∑th
, 
pRe•⁄£
->
˛oudFWFûe
);

1333 
	`SWLOG_INFO
("DWNLÖ©h wôh imgÇame=%s\n", 
dwÕ©h_fûíame
);

1334 
	`îa£FﬁdîEx˚PømaFûe
(
devi˚_öfo
.
difw_∑th
, 
pRe•⁄£
->
˛oudFWFûe
, devi˚_öfo.
modñ
);

1335 
pci_cuæ_code
 = 
	`rdkv_upgøde_ªque°
(
PCI_UPGRADE
, 
HTTP_SSR_DIRECT
, 
imageHTTPURL
, 
dwÕ©h_fûíame
, 
NULL
, &
hâp_code
,
immed_ªboŸ_Êag
,
dñay_dw∆
 , 
œ°run
, 
dißbÀSètsUpd©e
, &
devi˚_öfo
);

1337 
	`SWLOG_INFO
("checkForValidPCIUpgradeÑeturn false\n");

1338 
pci_cuæ_code
 = 0;

1340 i‡((
	`°r°r
(
pRe•⁄£
->
˛oudPDRIVîsi⁄
, 
modñ
)Ë&& 
åue
 =(
	`isPDRIE«bÀ
())) {

1341 i‡((0 =
	`°∫cmp
(
pRe•⁄£
->
˛oudImmedüãReboŸFœg
, "åue", 4)Ë&& (
åue
 =
vÆid_pci_°©us
)) {

1342 
	`SWLOG_INFO
("cloudImmediateRebootFlag isÅrue, PCI Upgrade isÑequired. Skipping PDRI upgrade check ... \n");

1345 
	`SWLOG_INFO
("˛oudImmedüãReboŸFœg i†%s. Sèπög PDRI upgødêcheck ... \n", 
pRe•⁄£
->
˛oudImmedüãReboŸFœg
);

1346 i‡((
	`°r°r
(
pRe•⁄£
->
˛oudPDRIVîsi⁄
, ".bö")Ë=
NULL
) {

1347 
›tout
 = 
	`°∫Àn
–
pRe•⁄£
->
˛oudPDRIVîsi⁄
, (pResponse->cloudPDRIVersion) );

1348 
	`¢¥ötf
–
pRe•⁄£
->
˛oudPDRIVîsi⁄
 + 
›tout
, (pResponse->cloudPDRIVersion) - optout, ".bin" );

1349 
	`SWLOG_INFO
("Added .bö i¿pdròimage=%s\n", 
pRe•⁄£
->
˛oudPDRIVîsi⁄
);

1351 
	`¢¥ötf
(
imageHTTPURL
, (imageHTTPURL), "%s/%s", 
pRe•⁄£
->
˛oudFWLoˇti⁄
,ÖRe•⁄£->
˛oudPDRIVîsi⁄
);

1352 
	`SWLOG_INFO
("pdròimageHTTPURL=%s\n", 
imageHTTPURL
);

1353 
	`¢¥ötf
(
dwÕ©h_fûíame
, (dwÕ©h_fûíame), "%s/%s", 
devi˚_öfo
.
difw_∑th
, 
pRe•⁄£
->
˛oudPDRIVîsi⁄
);

1354 
	`SWLOG_INFO
("pdròDWNLÖ©h wôh imgÇame=%s\n", 
dwÕ©h_fûíame
);

1355 i‡(
åue
 =
vÆid_pci_°©us
 && 
pci_cuæ_code
 == 0) {

1356 
	`SWLOG_INFO
("Addingá sleep of 30secsÅoávoidÅhe PCI PDRIÑace condition during flashing\n");

1357 
	`¶ìp
(30);

1359 
	`¢¥ötf
(
dißbÀSètsUpd©e
, (disableStatsUpdate), "%s","yes");

1360 
pdri_cuæ_code
 = 
	`rdkv_upgøde_ªque°
(
PDRI_UPGRADE
, 
HTTP_SSR_DIRECT
, 
imageHTTPURL
, 
dwÕ©h_fûíame
, 
NULL
, &
hâp_code
,
immed_ªboŸ_Êag
,
dñay_dw∆
 , 
œ°run
, 
dißbÀSètsUpd©e
, &
devi˚_öfo
);

1361 
	`¢¥ötf
(
dißbÀSètsUpd©e
, (disableStatsUpdate), "%s","no");

1362 i‡(
pdri_cuæ_code
 == 100) {

1363 
pdri_cuæ_code
 = 0;

1367 
	`SWLOG_INFO
("cloudPDRIfile isÉmpty. Do Nothing\n");

1368 
pdri_cuæ_code
 = 0;

1370 i‡((0 =(
	`fûePª£¡Check
("/ëc/os-ªÀa£"))Ë&& (*
pRe•⁄£
->
≥rùhîÆFúmw¨es
 != 0)) {

1371 
	`°∫ˇt
(
pRe•⁄£
->
≥rùhîÆFúmw¨es
, ",", (pResponse->peripheralFirmwares) - 1);

1372 
pRe•⁄£
->
≥rùhîÆFúmw¨es
[(pResponse->peripheralFirmwares) - 1] = '\0';

1373 
	`SWLOG_INFO
("Triggîög PîùhîÆ Dow∆ﬂd cloudFWLoˇti⁄: %s\≈îùhîÆFúmw¨es: %s\n", 
pRe•⁄£
->
˛oudFWLoˇti⁄
,ÖRe•⁄£->
≥rùhîÆFúmw¨es
);

1374 
≥rùhîÆ_cuæ_code
 = 
	`≥rùhîÆ_fúmw¨e_dndl
–
pRe•⁄£
->
˛oudFWLoˇti⁄
,ÖRe•⁄£->
≥rùhîÆFúmw¨es
 );

1375 
	`SWLOG_INFO
("A·î Triggî PîùhîÆ Dow∆ﬂd sètus=%d\n", 
≥rùhîÆ_cuæ_code
);

1377 
	`SWLOG_INFO
("Skipping Peripheral Download\n");

1379 i‡((
pci_cuæ_code
 =0Ë&& (
pdri_cuæ_code
 == 0)) {

1380 
upgøde_°©us
 = 0;

1382  
upgøde_°©us
;

1383 
	}
}

1389 
	$°¨tFa˘‹yPrŸe˘Sîvi˚
()

1391 *
Cuæ_ªq
 = 
NULL
;

1392 
tokí
[256];

1393 
js⁄d©a
[256];

1394 
hâpCode
 = 0;

1395 
FûeDw∆_t
 
ªq_d©a
;

1396 
cuæ_ªt_code
 = -1;

1397 
hódî
[64] = "Content-Type:ápplication/json";

1398 
tokí_hódî
[300];

1399 
uæ
[128] = "http://127.0.0.1:9998/Service/Controller/Activate/org.rdk.FactoryProtect.1";

1401 *
tokí
 = 0;

1402 *
js⁄d©a
 = 0;

1403 
	`RunComm™d
–
eW≥Fømew‹kSecurôyUtûôy
, 
NULL
, 
js⁄d©a
, (jsondata) );

1405 
	`SWLOG_INFO
("tokí js⁄d©a=%s\n", 
js⁄d©a
);

1406 
	`gëJRPCTokíD©a
(
tokí
, 
js⁄d©a
, (token));

1407 
	`SWLOG_INFO
("tokíá·îÖ¨£=%s\n", 
tokí
);

1408 
ªq_d©a
.
pHódîD©a
 = 
hódî
;

1409 
ªq_d©a
.
pDlHódîD©a
 = 
NULL
;

1410 
	`¢¥ötf
(
tokí_hódî
, —okí_hódî), "Auth‹iz©i⁄: Bóª∏%s", 
tokí
);

1411 
ªq_d©a
.
pPo°Fõlds
 = 
NULL
;

1412 
ªq_d©a
.
pDlD©a
 = 
NULL
;

1413 
	`¢¥ötf
(
ªq_d©a
.
uæ
, (req_data.url), "%s", url);

1414 
	`SWLOG_INFO
("%s: uæ=%s\n", 
__FUNCTION__
, 
ªq_d©a
.
uæ
);

1415 
	`SWLOG_INFO
("%s: hódî=%s\n", 
__FUNCTION__
, 
ªq_d©a
.
pHódîD©a
);

1416 
	`SWLOG_INFO
("%s:Åokí_hódî=%s\n", 
__FUNCTION__
, 
tokí_hódî
);

1417 
Cuæ_ªq
 = 
	`doCuæInô
();

1418 i‡(
Cuæ_ªq
 !
NULL
) {

1419 
cuæ_ªt_code
 = 
	`doCuæPutReque°
(
Cuæ_ªq
, &
ªq_d©a
, 
tokí_hódî
, &
hâpCode
 );

1420 
	`SWLOG_INFO
("%s: cuæÑë code=%dánd hâ∞codê%d\n", 
__FUNCTION__
, 
cuæ_ªt_code
, 
hâpCode
);

1421 
	`doSt›Dow∆ﬂd
(
Cuæ_ªq
);

1423 
	`SWLOG_ERROR
("%s: doCuæInô faû\n", 
__FUNCTION__
);

1425  
cuæ_ªt_code
;

1426 
	}
}

1442 
	$MakeXc⁄fComms
–
XCONFRES
 *
pRe•⁄£
, 
£rvî_ty≥
, *
pHâp_code
 )

1444 
Dow∆ﬂdD©a
 
DwnLoc
;

1445 *
pJSONSå
 = 
NULL
;

1446 *
pSîvURL
 = 
NULL
;

1447 
size_t
 
Àn
 = 0;

1448 
ªt
 = -1;

1450 
DwnLoc
.
pvOut
 = 
NULL
;

1451 
DwnLoc
.
d©asize
 = 0;

1452 
DwnLoc
.
memsize
 = 0;

1453 *
pHâp_code
 = 0;

1454 if–
	`ÆlocDowndLﬂdD©aMem
–&
DwnLoc
, 
DEFAULT_DL_ALLOC
 ) == 0 )

1456 if–(
pJSONSå
=(*)
	`mÆloc
–
JSON_STR_LEN
 )Ë!
NULL
 )

1458 if–(
pSîvURL
=(*)
	`mÆloc
–
URL_MAX_LEN
 )Ë!
NULL
 )

1460 
Àn
 = 
	`GëSîvURL
–
pSîvURL
, 
URL_MAX_LEN
 );

1461 
	`SWLOG_INFO
–"MakeXc⁄fComms: sîvî URL %s\n", 
pSîvURL
 );

1462 if–
Àn
 )

1464 
Àn
 = 
	`¸óãJs⁄Såög
–
pJSONSå
, 
JSON_STR_LEN
 );

1465 
ªt
 = 
	`rdkv_upgøde_ªque°
–
XCONF_UPGRADE
, 
£rvî_ty≥
, 
pSîvURL
, &
DwnLoc
, 
pJSONSå
, 
pHâp_code
, 
immed_ªboŸ_Êag
, 
dñay_dw∆
 , 
œ°run
,
dißbÀSètsUpd©e
, &
devi˚_öfo
);

1466 if–
ªt
 =0 && *
pHâp_code
 =200 && 
DwnLoc
.
pvOut
 !
NULL
 )

1468 
	`SWLOG_INFO
–"MakeXc⁄fComms: CÆlög gëXc⁄fRe•D©®wôh i≈uà%s\n", (*)
DwnLoc
.
pvOut
 );

1469 
ªt
 = 
	`gëXc⁄fRe•D©a
–
pRe•⁄£
, (*)
DwnLoc
.
pvOut
 );

1471 if–(
	`fûePª£¡Check
–
RED_STATE_REBOOT
 ) =
RDK_API_SUCCESS
) ) {

1472 
	`SWLOG_INFO
("%†: RED Recovîy com∂ëed\n", 
__FUNCTION__
);

1473 
	`evítM™agî
(
RED_STATE_EVENT
, 
RED_RECOVERY_COMPLETED
);

1474 
	`u∆ök
(
RED_STATE_REBOOT
);

1480 
	`SWLOG_ERROR
( "MakeXconfComms:Ço valid server URL\n" );

1482 
	`‰ì
–
pSîvURL
 );

1486 
	`SWLOG_ERROR
("MakeXc⁄fComms: Faûed mÆlo¯f‹ sîvî URL o‡%d byãs\n", 
URL_MAX_LEN
 );

1488 
	`‰ì
–
pJSONSå
 );

1492 
	`SWLOG_ERROR
("MakeXc⁄fComms: Faûed mÆlo¯f‹ js⁄ såög o‡%d byãs\n", 
JSON_STR_LEN
 );

1494 if–
DwnLoc
.
pvOut
 !
NULL
 )

1496 
	`‰ì
–
DwnLoc
.
pvOut
 );

1499  
ªt
;

1500 
	}
}

1504 
	$c›yFûe
(c⁄° *
§c
, c⁄° *
èrgë
)

1506 
ªt
 = -1;

1507 
FILE
 *
§c_Â
 = 
NULL
;

1508 
FILE
 *
èrgë_Â
 = 
NULL
;

1509 
tbuff
[68] = {0};

1510 i‡(
§c
 !
NULL
 && 
èrgë
 != NULL) {

1511 
§c_Â
 = 
	`f›í
(
§c
, "r");

1512 i‡(
§c_Â
 !
NULL
) {

1513 
èrgë_Â
 = 
	`f›í
(
èrgë
, "w");

1514 i‡(
èrgë_Â
 !
NULL
) {

1515 
	`fgës
(
tbuff
, —buff), 
§c_Â
Ë!
NULL
) {

1516 
	`Âuts
(
tbuff
,
èrgë_Â
);

1518 
ªt
 = 0;

1519 
	`f˛o£
(
èrgë_Â
);

1521 
	`SWLOG_ERROR
("T¨gë Fûê›í faûed %s\n",
èrgë
);

1523 
	`f˛o£
(
§c_Â
);

1525 
	`SWLOG_ERROR
("Sour˚ Fûê›í faûed %s\n",
§c
);

1528 
	`SWLOG_ERROR
("Received FunctionÖarameter NULL\n");

1530  
ªt
;

1531 
	}
}

1536 
	$¥evCurUpd©eInfo
()

1538 
myFWVîsi⁄
[64];

1539 
cdlFœshedFûeName
[64];

1540 
¥evCdlFœshedFûeName
[64];

1541 
cuºítImage
[80];

1542 
ªt
 = -1;

1543 
FILE
 *
Â
;

1545 
	`GëFúmw¨eVîsi⁄
–
myFWVîsi⁄
, (myFWVersion));

1546 i‡((
	`fûePª£¡Check
(
CDL_FLASHED_IMAGE
)) == 0) {

1547 
	`œ°Dw∆Img
(
cdlFœshedFûeName
, (cdlFlashedFileName));

1548 i‡(!(
	`°r°r
(
cdlFœshedFûeName
, 
myFWVîsi⁄
))) {

1549 
	`SWLOG_INFO
("LooksÜikeÖrevious upgrade failed but flashed image status is showing success\n");

1550 i‡((
	`fûePª£¡Check
(
PREVIOUS_FLASHED_IMAGE
)) == 0) {

1551 
	`¥evFœshedFûe
(
¥evCdlFœshedFûeName
, (prevCdlFlashedFileName));

1552 i‡(
	`°r°r
(
¥evCdlFœshedFûeName
, 
myFWVîsi⁄
)) {

1553 
	`SWLOG_INFO
("Updating /tmp/currently_running_image_name withÖrevious successful flashed imagename\n");

1554 
	`c›yFûe
(
PREVIOUS_FLASHED_IMAGE
, 
CURRENTLY_RUNNING_IMAGE
);

1557 
	`SWLOG_INFO
("Previous flashed fileÇameÇot found !!! \n");

1558 
	`SWLOG_INFO
("Updating currently_running_image_name with cdl_flashed_file_name ... \n");

1559 
	`c›yFûe
(
CDL_FLASHED_IMAGE
, 
CURRENTLY_RUNNING_IMAGE
);

1563 
	`c›yFûe
(
CDL_FLASHED_IMAGE
, 
PREVIOUS_FLASHED_IMAGE
);

1564 
	`c›yFûe
(
CDL_FLASHED_IMAGE
, 
CURRENTLY_RUNNING_IMAGE
);

1567 
	`SWLOG_INFO
("cdl_flashed_file_name fileÇot found !!!\n");

1568 
	`¢¥ötf
(
cuºítImage
, (cuºítImage), "%s-sig√d.bö\n", 
myFWVîsi⁄
);

1569 
	`SWLOG_INFO
("Upd©ög cuºíéy_ru¬ög_image_«me:%s:wôh vîsi⁄.txà...\n", 
cuºítImage
);

1570 
Â
 = 
	`f›í
(
PREVIOUS_FLASHED_IMAGE
, "w");

1571 i‡(
Â
 !
NULL
) {

1572 
	`Âuts
(
cuºítImage
, 
Â
);

1573 
	`f˛o£
(
Â
);

1575 
Â
 = 
	`f›í
(
CURRENTLY_RUNNING_IMAGE
, "w");

1576 i‡(
Â
 !
NULL
) {

1577 
	`Âuts
(
cuºítImage
, 
Â
);

1578 
	`f˛o£
(
Â
);

1581 
ªt
 = 0;

1582  
ªt
;

1583 
	}
}

1592 
	$öôülVÆid©i⁄
()

1594 
°©us
 = 
INITIAL_VALIDATION_FAIL
;

1595 
boﬁ
 
Æªady_ru¬ög
 = 
Ál£
;

1596 
d©a
[
RFC_VALUE_BUF_SIZE
];

1597 
buf
[64];

1598 
BUILDTYPE
 
eBuûdTy≥
;

1599 
cuΩid
[16];

1600 
pid
;

1601 
ªt
 = -1;

1602 
FILE
 *
Â
 = 
NULL
;

1604 
	`GëBuûdTy≥
–
buf
, (buf), &
eBuûdTy≥
 );

1605 
ªt
 = 
	`ªad_RFCPr›îty
("AutoEx˛uded", 
RFC_FW_AUTO_EXCLUDE
, 
d©a
, (data));

1606 if(
ªt
 == -1) {

1607 
	`SWLOG_ERROR
("ªad_RFCPr›îty(Ëªtu∫ faûed Sètu†%d\n", 
ªt
);

1608 
°©us
 = 
INITIAL_VALIDATION_SUCCESS
;

1610 
	`SWLOG_INFO
("gëRFCSëtögs(Ërf¯AutoEx˛uded%s\n", 
d©a
);

1611 i‡((0 =(
	`°∫cmp
(
d©a
, "åue", 4))Ë&& (
eBuûdTy≥
 !
ePROD
)) {

1612 
	`SWLOG_ERROR
("DeviceÉxcluded from firmware update. Exiting !!\n");

1614 
°©us
 = 
INITIAL_VALIDATION_SUCCESS
;

1617 i‡(
°©us
 =
INITIAL_VALIDATION_SUCCESS
) {

1618 
Æªady_ru¬ög
 = 
	`CuºítRu¬ögIn°
(
DIFDPID
);

1619 i‡(
Æªady_ru¬ög
 =
åue
) {

1620 
	`SWLOG_INFO
("initialValidation(): Alreday one Instance isÑunning\n");

1621 
°©us
 = 
INITIAL_VALIDATION_DWNL_INPROGRESS
;

1622 }if((
	`fûePª£¡Check
("/tmp/fw_preparing_to_reboot")) == 0) {

1623 i‡(0 =(
	`°∫cmp
(
devi˚_öfo
.
maöt_°©us
, "true", 4))) {

1624 
	`evítM™agî
("Maöã«n˚MGR", 
MAINT_FWDOWNLOAD_COMPLETE
);

1626 
	`u∆ök
("/tmp/fw_preparing_to_reboot");

1627 
°©us
 = 
INITIAL_VALIDATION_DWNL_COMPLETED
;

1629 
Â
 = 
	`f›í
(
DIFDPID
, "w");

1630 i‡(
Â
 !
NULL
) {

1631 
pid
 = 
	`gëpid
();

1632 
	`¢¥ötf
(
cuΩid
, (cuΩid),"%d\n", 
pid
);

1633 
	`SWLOG_INFO
("cuºíàpid=%s:%u\n", 
cuΩid
, 
pid
);

1634 
	`Âuts
(
cuΩid
, 
Â
);

1635 
	`f˛o£
(
Â
);

1637 
	`SWLOG_ERROR
("unableÅo create file:/tmp/DIFD.pid\n");

1639 
	`¥evCurUpd©eInfo
();

1640 
°©us
 = 
INITIAL_VALIDATION_SUCCESS
;

1643  
°©us
;

1644 
	}
}

1646 #i‚de‡
GTEST_ENABLE


1648 
	$maö
(
¨gc
, *
¨gv
[]) {

1649 
XCONFRES
 
ª•⁄£
;

1650 
ªt
 = -1;

1651 
ªt_sig
 = -1;

1652 
i
;

1653 
ªt_cuæ_code
 = 1;

1654 
£rvî_ty≥
 = 
HTTP_XCONF_DIRECT
;

1655 
js⁄_ªs
 = -1;

1656 
hâp_code
;

1657 
siga˘i⁄
 
rdkv_√wa˘i⁄
;

1658 
	`mem£t
(&
rdkv_√wa˘i⁄
, '\0', (
siga˘i⁄
));

1659 
öô_vÆid©e_°©us
 = 
INITIAL_VALIDATION_FAIL
;

1661 
rdkv_√wa˘i⁄
.
ß_siga˘i⁄
 = 
h™dÀ_sig«l
;

1662 
rdkv_√wa˘i⁄
.
ß_Êags
 = 
SA_ONSTACK
 | 
SA_SIGINFO
;

1663 
	`log_öô
();

1664 
ªt_sig
 = 
	`siga˘i⁄
(
SIGUSR1
, &
rdkv_√wa˘i⁄
, 
NULL
);

1665 i‡(
ªt_sig
 == -1) {

1666 
	`SWLOG_ERROR
( "SIGUSR1 handler install fail\n");

1668 
	`SWLOG_INFO
( "SIGUSR1 handler install success\n");

1670 *
ª•⁄£
.
˛oudFWFûe
 = 0;

1671 *
ª•⁄£
.
˛oudFWLoˇti⁄
 = 0;

1672 *
ª•⁄£
.
ùv6˛oudFWLoˇti⁄
 = 0;

1673 *
ª•⁄£
.
˛oudFWVîsi⁄
 = 0;

1674 *
ª•⁄£
.
˛oudDñayDow∆ﬂd
 = 0;

1675 *
ª•⁄£
.
˛oudPrŸo
 = 0;

1676 *
ª•⁄£
.
˛oudImmedüãReboŸFœg
 = 0;

1677 *
ª•⁄£
.
≥rùhîÆFúmw¨es
 = 0;

1678 *
ª•⁄£
.
dlCîtBundÀ
 = 0;

1679 *
ª•⁄£
.
˛oudPDRIVîsi⁄
 = 0;

1680 
	`SWLOG_INFO
("Starting c methodÑdkvfwupgrader\n");

1681 
	`t2Cou¡NŸify
("SYST_INFO_C_CDL", 1);

1683 
	`¢¥ötf
(
dißbÀSètsUpd©e
, (disableStatsUpdate), "%s","no");

1685 
ªt
 = 
	`öôülize
();

1686 i‡(1 !
ªt
) {

1687 
	`SWLOG_ERROR
–"öôülize(): Faû:%d\n", 
ªt
);

1688 
	`log_exô
();

1689 
	`exô
(
ªt_cuæ_code
);

1691 if(
¨gc
 < 3) {

1692 
	`SWLOG_ERROR
( "Provide 2árguments. LessÅhan 2árgumentsÑeceived\n");

1693 
	`SWLOG_ERROR
("Retry Count (1)árgument willÇot beÖarsedás we will use hardcoded fallback mechanismádded \
=2 # SetÅhe Image UpgradeÅrigger Type \
:Ñdkvfwupgrader <failureÑetry count> <ImageÅrigger Type> \
Ñetry count: This value from DCM settings file, ifÇot \
Årigger Type : Bootup(1)/scheduled(2)/tr69 or SNMPÅriggered upgrade(3)/AppÅriggered upgrade(4)/(5) Delayed Download\n");

1698 i‡(0 =(
	`°∫cmp
(
devi˚_öfo
.
maöt_°©us
, "true", 4))) {

1699 
	`evítM™agî
("Maöã«n˚MGR", 
MAINT_FWDOWNLOAD_ERROR
);

1701 
	`log_exô
();

1702 
	`exô
(
ªt_cuæ_code
);

1704  
i
 = 0; i < 
¨gc
; i++ ) {

1705 
	`SWLOG_INFO
("[%d] = %s\n", 
i
, 
¨gv
[i]);

1709 
åiggî_ty≥
 = 
	`©oi
(
¨gv
[2]);

1710 i‡(
åiggî_ty≥
 == 1) {

1711 
	`SWLOG_INFO
("Image Upgrade During Bootup ..!\n");

1712 }i‡(
åiggî_ty≥
 == 2) {

1713 
	`SWLOG_INFO
("Scheduled Image Upgrade using cron ..!\n");

1714 
	`t2Cou¡NŸify
("SYST_INFO_SWUpgrdChck", 1);

1715 }if(
åiggî_ty≥
 == 3){

1716 
	`SWLOG_INFO
("TR-69/SNMPÅriggered Image Upgrade ..!\n");

1717 }if(
åiggî_ty≥
 == 4){

1718 
	`SWLOG_INFO
("AppÅriggered Image Upgrade ..!\n");

1719 }if(
åiggî_ty≥
 == 5){

1720 
	`SWLOG_INFO
("Delayed Trigger Image Upgrade ..!\n");

1721 }if(
åiggî_ty≥
 == 6){

1722 
	`SWLOG_INFO
("State Red Image Upgrade ..!\n");

1724 
	`SWLOG_INFO
("InvalidÅriggerÅype Image Upgrade ..!\n");

1725 i‡(0 =(
	`°∫cmp
(
devi˚_öfo
.
maöt_°©us
, "true", 4))) {

1726 
	`evítM™agî
("Maöã«n˚MGR", 
MAINT_FWDOWNLOAD_ERROR
);

1728 
	`log_exô
();

1729 
	`exô
(
ªt_cuæ_code
);

1731 
öô_vÆid©e_°©us
 = 
	`öôülVÆid©i⁄
();

1732 
	`SWLOG_INFO
("öô_vÆid©e_°©u†%d\n", 
öô_vÆid©e_°©us
);

1733 if–
öô_vÆid©e_°©us
 =
INITIAL_VALIDATION_SUCCESS
)

1735 
	`evítM™agî
(
FW_STATE_EVENT
, 
FW_STATE_UNINITIALIZED
);

1736 if–
	`isInSèãRed
() ) {

1737 
	`evítM™agî
(
RED_STATE_EVENT
, 
RED_RECOVERY_STARTED
);

1739 
	`evítM™agî
(
FW_STATE_EVENT
, 
FW_STATE_REQUESTING
);

1740 
ªt_cuæ_code
 = 
	`MakeXc⁄fComms
–&
ª•⁄£
, 
£rvî_ty≥
, &
hâp_code
 );

1742 
	`SWLOG_INFO
("XCONF Dow∆ﬂd com∂ëed wôh cuæ code:%d\n", 
ªt_cuæ_code
);

1743 if–
ªt_cuæ_code
 =0 && 
hâp_code
 == 200)

1745 
	`SWLOG_INFO
("XCONF Download Success\n");

1746 
js⁄_ªs
 = 
	`¥o˚ssJs⁄Re•⁄£
(&
ª•⁄£
, 
cur_img_dëaû
.
cur_img_«me
, 
devi˚_öfo
.
modñ
, devi˚_öfo.
maöt_°©us
);

1747 
	`SWLOG_INFO
("¥o˚ssJs⁄Re•⁄£Ñëu∫ed %d\n", 
js⁄_ªs
);

1748 i‡(0 =(
	`°∫cmp
(
ª•⁄£
.
˛oudPrŸo
, "tftp", 4))) {

1749 
¥Ÿo
 = 0;

1751 i‡((
¥Ÿo
 =1Ë&& (
js⁄_ªs
 == 0)) {

1752 
ªt_cuæ_code
 = 
	`checkTriggîUpgøde
(&
ª•⁄£
, 
devi˚_öfo
.
modñ
);

1754 *
msg
 = 
	`¥ötCuæEº‹
(
ªt_cuæ_code
);

1755 i‡(
msg
 !
NULL
) {

1756 
	`SWLOG_INFO
("cuæÑëu∫ codê=%dándÉº‹ mesßge=%s\n", 
ªt_cuæ_code
, 
msg
);

1757 
	`t2Cou¡NŸify
("CuæRë_•lô", 
ªt_cuæ_code
);

1759 
	`SWLOG_INFO
("rdkvfwupgødî d´m⁄Éxô cuæ code: %d\n", 
ªt_cuæ_code
);

1760 } i‡(
¥Ÿo
 == 0) {

1761 
	`SWLOG_INFO
("tftpÖrotocol supportÇotÖresent.\n");

1764 
	`SWLOG_INFO
("Invalid JSON Response.\n");

1767 
	`SWLOG_INFO
("XCONF Download Fail\n");

1770 i‡(
öô_vÆid©e_°©us
 =
INITIAL_VALIDATION_DWNL_INPROGRESS
){

1771 i‡(!(
	`°∫cmp
(
devi˚_öfo
.
maöt_°©us
, "true", 4))) {

1772 
	`evítM™agî
("Maöã«n˚MGR", 
MAINT_FWDOWNLOAD_INPROGRESS
);

1774 }if(
öô_vÆid©e_°©us
 =
INITIAL_VALIDATION_DWNL_COMPLETED
) {

1775 
	`SWLOG_INFO
("Software Update is completed by AS/EPG, Exiting from firmware download.\n");

1776 }i‡((
ªt_cuæ_code
 !0Ë|| (
js⁄_ªs
 != 0)) {

1777 i‡(!(
	`°∫cmp
(
devi˚_öfo
.
maöt_°©us
, "true", 4))) {

1778 
	`evítM™agî
("Maöã«n˚MGR", 
MAINT_FWDOWNLOAD_ERROR
);

1780 i‡(
åiggî_ty≥
 == 6) {

1781 
	`un£tSèãRed
();

1784 i‡(!(
	`°∫cmp
(
devi˚_öfo
.
maöt_°©us
, "true", 4))) {

1785 
	`evítM™agî
("Maöã«n˚MGR", 
MAINT_FWDOWNLOAD_COMPLETE
);

1789 
	`unöôülize
(
öô_vÆid©e_°©us
);

1790 
	`exô
(
ªt_cuæ_code
);

1791 
	}
}

	@src/rdkv_upgrade.c

1 
	~"rdkv_upgøde.h
"

2 
	~"rdkv_cdl_log_wøµî.h
"

3 
	~"devi˚_°©us_hñ≥r.h
"

4 
	~"dow∆ﬂd_°©us_hñ≥r.h
"

5 
	~"ürmI¡îÁ˚.h
"

6 
	~"rfcöãrÁ˚.h
"

7 
	~"devi˚utûs.h
"

8 
	~"rdk_loggî_mûe°⁄e.h
"

16 
	$t2Cou¡NŸify
(*
m¨kî
, 
vÆ
) {

17 #ifde‡
T2_EVENT_ENABLED


18 
	`t2_evít_d
(
m¨kî
, 
vÆ
);

20 
	}
}

22 
	$t2VÆNŸify
–*
m¨kî
, *
vÆ
 )

24 #ifde‡
T2_EVENT_ENABLED


25 
	`t2_evít_s
(
m¨kî
, 
vÆ
);

27 
	}
}

30 
boﬁ
 
	$checkt2VÆNŸify
–
iCuæCode
, 
iUpgødeTy≥
, *
Uæ
 )

32 *
pSèπSåög
 = "CERTERR, ";

33 
öum
;

34 
fqdn
[100];

35 
outbuf
[(
fqdn
) + 50];

36 
fmt
[25];

37 
boﬁ
 
bRë

Ál£
;

39 *
fqdn
 = 0;

40 
	`¢¥ötf
–
fmt
, (fmt), "hâps://%%%zu[^/?]", (
fqdn
) - 1 );

41 
öum
 = 
	`ssˇnf
–
Uæ
, 
fmt
, 
fqdn
 );

42  
iCuæCode
 )

59 if–
öum
 == 1 )

61 if–
iUpgødeTy≥
 =
PERIPHERAL_UPGRADE
 )

63 
	`¢¥ötf
–
outbuf
, (outbuf), "%sPCDL, %d, %s", 
pSèπSåög
, 
iCuæCode
, 
fqdn
 );

64 
	`TLSLOG
(
TLS_LOG_ERR
, "%s", 
outbuf
 );

65 
	`t2VÆNŸify
–"˚πîr_•lô", 
outbuf
 + 
	`°æí
(
pSèπSåög
) );

66 
bRë
 = 
åue
;

74  
bRë
;

75 
	}
}

81 
	$rdkv_utûs_öô
()

83 
	`SWLOG_INFO
("RDK firmware utilitiesÜibrary initialized\n");

85 
	}
}

90 
	$rdkv_utûs_˛ónup
()

92 
	`SWLOG_INFO
("RDK firmware utilitiesÜibrary cleaned up\n");

93 
	}
}

104 
	$rdkv_upgøde_ªque°
(
upgøde_ty≥
, 
£rvî_ty≥
,

105 c⁄° * 
¨tiÁ˘Loˇti⁄Uæ
, c⁄° * 
dwŒoc
,

106 *
pPo°Fõlds
, *
pHâp_code
,*
immed_ªboŸ_Êag
,
dñay_dw∆
 , *
œ°run
, *
dißbÀSètsUpd©e
, 
Devi˚Pr›îty_t
* 
devi˚_öfo
)

108 c⁄° * 
dwÕ©h_fûíame
 = 
NULL
;

109 
ªt_cuæ_code
 = -1;

110 
dw∆_°©us
[64];

111 
cuπime
;

112 
cuºít_time
[64];

113 *
dev_¥›_«me
 = "CPU_ARCH";

114 
˝u_¨ch
[8] = {0};

115 *
cmd_¨gs
 = "FWDNLD_STARTED";

116 
md5_sum
[128] = {0};

117 
boﬁ
 
°_nŸify_Êag
 = 
Ál£
;

118 
ªt
 = -1;

119 
FWDow∆ﬂdSètus
 
fwdls
;

120 
FILE
 *
Â
 = 
NULL
;

121 
Êash_°©us
 = -1;

123 i‡(
¨tiÁ˘Loˇti⁄Uæ
 =
NULL
 || 
dwŒoc
 =NULL || 
pHâp_code
 == NULL) {

124 
	`SWLOG_ERROR
("%s: P¨amëî i†NULL\n", 
__FUNCTION__
);

125  
ªt_cuæ_code
;

127 i‡(
upgøde_ty≥
 =
XCONF_UPGRADE
) {

128 
	`SWLOG_INFO
("TryingÅo communicate with XCONF server");

129 
	`t2Cou¡NŸify
("SYST_INFO_XCONFConnect", 1);

131 *
pHâp_code
 = 0;

133 if–
	`isDw∆Block
(
£rvî_ty≥
) )

135 if–
£rvî_ty≥
 =
HTTP_XCONF_DIRECT
 )

137 
£rvî_ty≥
 = 
HTTP_XCONF_CODEBIG
;

139 if–
£rvî_ty≥
 =
HTTP_XCONF_CODEBIG
 )

141 
£rvî_ty≥
 = 
HTTP_XCONF_DIRECT
;

143 if–
£rvî_ty≥
 =
HTTP_SSR_DIRECT
 )

145 
£rvî_ty≥
 = 
HTTP_SSR_CODEBIG
;

147 if–
£rvî_ty≥
 =
HTTP_SSR_CODEBIG
 )

149 
£rvî_ty≥
 = 
HTTP_SSR_DIRECT
;

152 if–
	`isDw∆Block
(
£rvî_ty≥
) )

154 
ªt_cuæ_code
 = 
DWNL_BLOCK
;

158 if–
ªt_cuæ_code
 !
DWNL_BLOCK
 )

160 if–
£rvî_ty≥
 =
HTTP_SSR_DIRECT
 || sîvî_ty≥ =
HTTP_SSR_CODEBIG
 )

162 
dwÕ©h_fûíame
 = (c⁄° *)
dwŒoc
;

163 i‡(
upgøde_ty≥
 =
PDRI_UPGRADE
 && (
Ál£
 =
	`checkPDRIUpgøde
(
dwÕ©h_fûíame
))) {

164 
ªt_cuæ_code
 = 100;

165  
ªt_cuæ_code
;

167 
	`upd©eUpgødeFœg
(1);

170 i‡(
upgøde_ty≥
 =
PCI_UPGRADE
 || upgøde_ty≥ =
PDRI_UPGRADE
) {

171 
°_nŸify_Êag
 = 
	`isMmgbÀNŸifyE«bÀd
();

174 
	`isDñayFWDow∆ﬂdA˘ive
(
dñay_dw∆
, 
devi˚_öfo
->
maöt_°©us
, 1);

175 
	`SWLOG_INFO
("Delayed Trigger Image Upgrade ..!\n");

176 i‡(
upgøde_ty≥
 =
PCI_UPGRADE
) {

177 
	`logMûe°⁄e
(
cmd_¨gs
);

178 }if(
upgøde_ty≥
 =
XCONF_UPGRADE
) {

179 
cmd_¨gs
 = "CONNECT_TO_XCONF_CDL";

180 
	`logMûe°⁄e
(
cmd_¨gs
);

183 i‡(
upgøde_ty≥
 =
PDRI_UPGRADE
) {

184 
	`SWLOG_INFO
("TriggeringÅhe Image Download ...\n");

185 
	`t2Cou¡NŸify
("SYS_INFO_swdltriggered", 1);

186 
	`SWLOG_INFO
("PDRI Dow∆ﬂd i¿Progªs†f‹ %s\n", 
dwÕ©h_fûíame
);

187 
	`evítM™agî
(
IMG_DWL_EVENT
, 
IMAGE_FWDNLD_UNINITIALIZED
);

188 }if(
upgøde_ty≥
 =
PCI_UPGRADE
) {

189 
	`SWLOG_INFO
("TriggeringÅhe Image Download ...\n");

190 
	`t2Cou¡NŸify
("SYS_INFO_swdltriggered", 1);

191 
	`SWLOG_INFO
("PCI Dow∆ﬂd i¿Progªs†f‹ %s\n", 
dwÕ©h_fûíame
);

192 
	`evítM™agî
(
IMG_DWL_EVENT
, 
IMAGE_FWDNLD_UNINITIALIZED
);

193 }if(
upgøde_ty≥
 =
PERIPHERAL_UPGRADE
) {

194 
	`SWLOG_INFO
–"TryögÅÿdow∆ﬂd %s\n", (*)
dwŒoc
 );

196 
	`SWLOG_INFO
("XCONF Download in Progress\n");

199 (
Ál£
 =(
	`isMedüClõ¡Devi˚
()))? 
	`¢¥ötf
(
dw∆_°©us
, (dwnl_status),"ESTB inÖrogress"):snprintf(dwnl_status, (dwnl_status), "Download In Progress");

201 i‡(
upgøde_ty≥
 =
PCI_UPGRADE
 || upgøde_ty≥ =
PDRI_UPGRADE
) {

202 
	`evítM™agî
(
FW_STATE_EVENT
, 
FW_STATE_DOWNLOADING
);

203 
	`evítM™agî
(
IMG_DWL_EVENT
, 
IMAGE_FWDNLD_DOWNLOAD_INPROGRESS
);

205 
	`¢¥ötf
(
fwdls
.
mëhod
, (fwdls.method), "Method|xconf\n" );

206 
	`¢¥ötf
(
fwdls
.
¥Ÿo
, (fwdls.proto), "Proto|http\n" );

207 
	`¢¥ötf
(
fwdls
.
°©us
, (fwdls.°©us), "Sètus|%s\n", 
dw∆_°©us
);

208 
	`¢¥ötf
(
fwdls
.
ªboŸ
, (fwdls.ªboŸ), "ReboŸ|%s\n", 
immed_ªboŸ_Êag
);

209 
	`¢¥ötf
(
fwdls
.
ÁûuªRós⁄
, (fwdls.failureReason), "Failure|" );

210 
	`¢¥ötf
(
fwdls
.
d∆dVî¢
, (fwdls.dnldVersn), "Failure|" );

211 
	`¢¥ötf
(
fwdls
.
d∆dfûe
, (fwdls.d∆dfûe), "D∆dFûe|%s\n", 
dwÕ©h_fûíame
 ? dwlpath_filename : "XCONF");

212 
	`¢¥ötf
(
fwdls
.
d∆duæ
, (fwdls.d∆duæ), "D∆dURL|%s\n", 
¨tiÁ˘Loˇti⁄Uæ
);

213 
	`¢¥ötf
(
fwdls
.
œ°run
, (fwdls.lastrun),"LastRun|%.240s\n",Üastrun);

214 
	`¢¥ötf
(
fwdls
.
FwUpd©eSèã
, (fwdls.FwUpdateState), "FwUpdateState|Downloading\n" );

215 
	`¢¥ötf
(
fwdls
.
DñayDow∆ﬂd
, (fwdls.DñayDow∆ﬂd), "DñayDow∆ﬂd|%d\n", 
dñay_dw∆
);

217 
	`upd©eFWDow∆ﬂdSètus
(&
fwdls
, 
dißbÀSètsUpd©e
);

219 
ªt
 = 
	`gëDevi˚Pr›îtyD©a
(
dev_¥›_«me
, 
˝u_¨ch
, ()(cpu_arch));

220 i‡(
ªt
 =
UTILS_SUCCESS
) {

221 
	`SWLOG_INFO
("˝u_¨ch = %s\n", 
˝u_¨ch
);

223 
	`SWLOG_ERROR
("%s: gëDevi˚Pr›îtyD©a(Ëf‹ %†Áû\n", 
__FUNCTION__
, 
dev_¥›_«me
);

226 i‡(
åue
 =
°_nŸify_Êag
) {

227 
cuπime
 = 
	`gëCuºítSysTimeSec
();

228 
	`¢¥ötf
(
cuºít_time
, (cuºít_time), "%lu", ()
cuπime
);

229 
	`SWLOG_INFO
("cuºít_timêˇlcuœãdá†%luánd %s\n", ()
cuπime
, 
cuºít_time
);

231 
	`nŸifyDw∆Sètus
(
RFC_FW_DWNL_START
, 
cuºít_time
, 
RFC_STRING
);

232 
	`SWLOG_INFO
("FirmwareDownloadStartedNotification SET succeeded\n");

235 i‡(
£rvî_ty≥
 =
HTTP_SSR_DIRECT
 || sîvî_ty≥ =
HTTP_XCONF_DIRECT
) {

236 
ªt_cuæ_code
 = 
	`dow∆ﬂdFûe
(
£rvî_ty≥
, 
¨tiÁ˘Loˇti⁄Uæ
, 
dwŒoc
, 
pPo°Fõlds
, 
pHâp_code
);

237 i‡((
£rvî_ty≥
 =
HTTP_XCONF_DIRECT
Ë&& (
ªt_cuæ_code
 == 6 ||Ñet_curl_code == 28)) {

238 
	`SWLOG_INFO
("%s: Checkög IPánd Rouã c⁄figuøti⁄\n", 
__FUNCTION__
);

239 i‡(
åue
 =(
	`CheckIProuãC⁄√˘ivôy
(
GATEWAYIP_FILE
))) {

240 
	`SWLOG_INFO
("%s: Checkög IPánd Rouã c⁄figuøti⁄ found\n", 
__FUNCTION__
);

241 
	`SWLOG_INFO
("%s: Checkög DNS Name£rvî c⁄figuøti⁄\n", 
__FUNCTION__
);

242 if(
åue
 =(
	`isDnsResﬁve
(
DNS_RESOLV_FILE
))) {

243 
	`SWLOG_INFO
("%s: DNS Name£rvî†¨êavaûabÀ\n", 
__FUNCTION__
);

245 
	`SWLOG_INFO
("%s: DNS Name£rvî†missög..!!\n", 
__FUNCTION__
);

248 
	`SWLOG_INFO
("%s: IPánd Rouã c⁄figuøti⁄ÇŸ found...!!\n", 
__FUNCTION__
);

251 i‡(*
pHâp_code
 =
HTTP_PAGE_NOT_FOUND
) {

252 
	`SWLOG_INFO
("%†: Re˚ived HTTPS 404 Re•⁄£ from Xc⁄‡Sîvî. RëryÜogi¯nŸÇìded\n", 
__FUNCTION__
);

253 
	`SWLOG_INFO
("%†: Cª©ög /tmp/.xc⁄fs§dow∆ﬂduæ wôh 404Ñe•⁄£ from Xc⁄f\n", 
__FUNCTION__
);

254 
Â
 = 
	`f›í
("/tmp/.xconfssrdownloadurl", "w");

255 i‡(
Â
 !
NULL
) {

256 
	`Ârötf
(
Â
, "%d\n", *
pHâp_code
);

257 
	`f˛o£
(
Â
);

259 
	`un£tSèãRed
();

261 i‡(
ªt_cuæ_code
 !
CURL_SUCCESS
 ||

262 (*
pHâp_code
 !
HTTP_SUCCESS
 && *pHâp_codê!
HTTP_CHUNK_SUCCESS
 && *pHâp_codê!
HTTP_PAGE_NOT_FOUND
)) {

263 
ªt_cuæ_code
 = 
	`ªåyDow∆ﬂd
(
£rvî_ty≥
, 
¨tiÁ˘Loˇti⁄Uæ
, 
dwŒoc
, 
pPo°Fõlds
, 
RETRY_COUNT
, 60, 
pHâp_code
);

264 i‡(
ªt_cuæ_code
 =
CURL_CONNECTIVITY_ISSUE
 || *
pHâp_code
 == 0) {

265 i‡(
£rvî_ty≥
 =
HTTP_SSR_DIRECT
) {

266 
	`SWLOG_ERROR
("%†: Dúe˘ ImagêupgødêFaûed: hâp_code:%d,áâem±ög codebig\n", 
__FUNCTION__
, *
pHâp_code
);

268 
	`SWLOG_ERROR
("%†: sídXCONFReque° Dúe˘ ImagêupgødêFaûed: hâp_code:%d,áâem±ög codebig\n", 
__FUNCTION__
, *
pHâp_code
);

270 if–
£rvî_ty≥
 =
HTTP_SSR_DIRECT
 )

272 
£rvî_ty≥
 = 
HTTP_SSR_CODEBIG
;

276 
£rvî_ty≥
 = 
HTTP_XCONF_CODEBIG
;

278 
ªt_cuæ_code
 = 
	`ÁŒBack
(
£rvî_ty≥
, 
¨tiÁ˘Loˇti⁄Uæ
, 
dwŒoc
, 
pPo°Fõlds
, 
pHâp_code
);

282 i‡(
£rvî_ty≥
 =
HTTP_SSR_CODEBIG
 || sîvî_ty≥ =
HTTP_XCONF_CODEBIG
) {

283 
ªt_cuæ_code
 = 
	`codebigdow∆ﬂdFûe
(
£rvî_ty≥
, 
¨tiÁ˘Loˇti⁄Uæ
, 
dwŒoc
, 
pPo°Fõlds
, 
pHâp_code
);

284 i‡(
ªt_cuæ_code
 !
CURL_SUCCESS
 ||

285 (*
pHâp_code
 !
HTTP_SUCCESS
 && *pHâp_codê!
HTTP_CHUNK_SUCCESS
 && *pHâp_codê!
HTTP_PAGE_NOT_FOUND
)) {

286 if–
ªt_cuæ_code
 !
CODEBIG_SIGNING_FAILED
 )

290 
ªt_cuæ_code
 = 
	`ªåyDow∆ﬂd
(
£rvî_ty≥
, 
¨tiÁ˘Loˇti⁄Uæ
, 
dwŒoc
, 
pPo°Fõlds
, 
CB_RETRY_COUNT
, 10, 
pHâp_code
);

292 i‡(
ªt_cuæ_code
 =
CURL_CONNECTIVITY_ISSUE
 || *
pHâp_code
 == 0) {

293 i‡(
£rvî_ty≥
 =
HTTP_SSR_CODEBIG
) {

294 
	`SWLOG_ERROR
("%†: Codebig dow∆ﬂd faûed: hâpcode=%d, Swôchög dúe˘\n", 
__FUNCTION__
, *
pHâp_code
);

296 
	`SWLOG_ERROR
("%†: sídXCONFReque° Codebig dow∆ﬂd faûed: hâp_code:%d, Swôchög dúe˘\n", 
__FUNCTION__
, *
pHâp_code
);

298 if–
£rvî_ty≥
 =
HTTP_SSR_CODEBIG
 )

300 
£rvî_ty≥
 = 
HTTP_SSR_DIRECT
;

304 
£rvî_ty≥
 = 
HTTP_XCONF_DIRECT
;

306 
ªt_cuæ_code
 = 
	`ÁŒBack
(
£rvî_ty≥
, 
¨tiÁ˘Loˇti⁄Uæ
, 
dwŒoc
, 
pPo°Fõlds
, 
pHâp_code
);

312 
	`SWLOG_ERROR
("InvÆid Sîvî Ty≥: %d\n", 
£rvî_ty≥
);

315 i‡(
ªt_cuæ_code
 !0 || (*
pHâp_code
 !
HTTP_CHUNK_SUCCESS
 && *pHâp_codê!
HTTP_SUCCESS
)) {

316 
	`evítM™agî
(
FW_STATE_EVENT
, 
FW_STATE_FAILED
);

317 
	`evítM™agî
(
IMG_DWL_EVENT
, 
IMAGE_FWDNLD_DOWNLOAD_FAILED
);

319 i‡(
åue
 =
°_nŸify_Êag
) {

320 
	`nŸifyDw∆Sètus
(
RFC_FW_DWNL_END
, "Ál£", 
RFC_BOOL
);

321 
	`SWLOG_INFO
("FirmwareDownloadCompletedNotification SETÅo false succeeded\n");

323 i‡(
upgøde_ty≥
 =
PDRI_UPGRADE
) {

324 
	`SWLOG_INFO
("PDRI image upgrade failure !!!\n");

325 
	`t2Cou¡NŸify
("SYST_ERR_PDRIUpg_failure", 1);

326 } i‡(
upgøde_ty≥
 =
XCONF_UPGRADE
 && 
ªt_cuæ_code
 == 6) {

327 
	`t2Cou¡NŸify
("xconf_couldnt_resolve", 1);

328 } i‡(
upgøde_ty≥
 =
PCI_UPGRADE
) {

329 
	`SWLOG_ERROR
("doCDL failed\n");

330 
	`t2Cou¡NŸify
("SYST_ERR_CDLFail", 1);

331 
cmd_¨gs
 = "FWDNLD_FAILED";

332 
	`logMûe°⁄e
(
cmd_¨gs
);

333 } i‡(
upgøde_ty≥
 =
PERIPHERAL_UPGRADE
) {

334 
	`checkt2VÆNŸify
–
ªt_cuæ_code
, 
upgøde_ty≥
, (*)
¨tiÁ˘Loˇti⁄Uæ
 );

336 
	`SWLOG_ERROR
("Invalid upgradeÅype\n");

338 
	`upd©eUpgødeFœg
(2);

339 } i‡((0 =
	`fûePª£¡Check
(
dwÕ©h_fûíame
)Ë&& (
upgøde_ty≥
 !
XCONF_UPGRADE
)) {

340 
	`SWLOG_INFO
("%†Loˇ»ImagêDow∆ﬂd Com∂ëed usög HTTPS TLSÖrŸocﬁ!\n", 
dwÕ©h_fûíame
);

341 
	`t2Cou¡NŸify
("SYST_INFO_FWCOMPLETE", 1);

342 
	`evítM™agî
(
FW_STATE_EVENT
, 
FW_STATE_DOWNLOAD_COMPLETE
);

344 
	`°∫˝y
(
fwdls
.
FwUpd©eSèã
, "FwUpdateState|Download complete\n", (fwdls.FwUpdateState)-1);

345 
fwdls
.
FwUpd©eSèã
[(fwdls.FwUpdateState)-1] = '\0';

346 
	`upd©eFWDow∆ﬂdSètus
(&
fwdls
, 
dißbÀSètsUpd©e
);

347 i‡(
åue
 =
°_nŸify_Êag
) {

348 
	`nŸifyDw∆Sètus
(
RFC_FW_DWNL_END
, "åue", 
RFC_BOOL
);

349 
	`SWLOG_INFO
("FirmwareDownloadCompletedNotification SETÅoÅrue succeeded\n");

351 i‡(
	`°∫cmp
(
˝u_¨ch
, "x86", 3)) {

352 
	`evítM™agî
(
IMG_DWL_EVENT
, 
IMAGE_FWDNLD_DOWNLOAD_COMPLETE
);

354 if–
	`isInSèãRed
() ) {

355 
	`SWLOG_INFO
("REDÑecovery download complete\n");

356 
	`evítM™agî
(
RED_STATE_EVENT
, 
RED_RECOVERY_DOWNLOADED
);

358 
	`SWLOG_INFO
("Dow∆ﬂded %†o‡sizê%d\n", 
dwÕ©h_fûíame
, 
	`gëFûeSize
(dwlpath_filename));

359 
	`t2Cou¡NŸify
("Fûesize_•lô", 
	`gëFûeSize
(
dwÕ©h_fûíame
));

360 *
md5_sum
 = 0;

361 
	`RunComm™d
–
eMD5Sum
, 
dwÕ©h_fûíame
, 
md5_sum
, (md5_sum) );

362 
	`SWLOG_INFO
("md5sum o‡%†: %s\n", 
dwÕ©h_fûíame
, 
md5_sum
);

363 i‡(
upgøde_ty≥
 =
PDRI_UPGRADE
) {

364 
	`SWLOG_INFO
("PDRI image upgrade successful.\n");

365 
	`t2Cou¡NŸify
("SYST_INFO_PDRIUpgSuccess", 1);

367 i‡(
upgøde_ty≥
 =
PCI_UPGRADE
 || upgøde_ty≥ =
PDRI_UPGRADE
) {

368 
	`£tDw∆Sèã
(
RDKV_FWDNLD_FLASH_INPROGRESS
);

369 
	`¢¥ötf
(
dw∆_°©us
, (dwnl_status), "Flashing In Progress");

370 
	`¢¥ötf
(
fwdls
.
°©us
, (fwdls.°©us), "Sètus|%s\n", 
dw∆_°©us
);

371 
	`upd©eFWDow∆ﬂdSètus
(&
fwdls
, 
dißbÀSètsUpd©e
);

372 
Êash_°©us
 = 
	`ÊashImage
(
¨tiÁ˘Loˇti⁄Uæ
, 
dwÕ©h_fûíame
, 
immed_ªboŸ_Êag
, "2", 
upgøde_ty≥
, 
devi˚_öfo
->
maöt_°©us
);

373 i‡(
upgøde_ty≥
 =
PCI_UPGRADE
) {

374 i‡(
Êash_°©us
 !0 && 
upgøde_ty≥
 =
PCI_UPGRADE
) {

375 
	`SWLOG_ERROR
("doCDL failed\n");

376 
	`t2Cou¡NŸify
("SYST_ERR_CDLFail", 1);

377 
	`£tDw∆Sèã
(
RDKV_FWDNLD_FLASH_FAILED
);

378 
cmd_¨gs
 = "FWDNLD_FAILED";

379 
	`logMûe°⁄e
(
cmd_¨gs
);

381 
	`£tDw∆Sèã
(
RDKV_FWDNLD_FLASH_COMPLETE
);

382 
cmd_¨gs
 = "FWDNLD_COMPLETED";

383 
	`logMûe°⁄e
(
cmd_¨gs
);

386 
	`SWLOG_INFO
("PDRI image Flash upgrade successful.\n");

393 
	`SWLOG_INFO
("%†: AŒ upgøde†blocked, skùpög upgøde\n", 
__FUNCTION__
);

396  
ªt_cuæ_code
;

397 
	}
}

	@src/rfcInterface/rfcinterface.c

19 
	~"rfcöãrÁ˚.h
"

21 
	~"rdkv_cdl_log_wøµî.h
"

22 #i‚de‡
GTEST_ENABLE


23 
	~"rdk_fwdl_utûs.h
"

24 
	~"sy°em_utûs.h
"

32 
	$gëRFCSëtögs
(
Rfc_t
 *
rfc_li°
) {

33 
ªt
 = -1;

34 
d©a
[
RFC_VALUE_BUF_SIZE
];

36 i‡(
rfc_li°
 =
NULL
) {

37 
	`SWLOG_ERROR
("gëRFCSëtögs(): P¨amëî i†NULLÑë%d\n", 
ªt
);

38  
ªt
;

40 
ªt
 = 
	`ªad_RFCPr›îty
("SWDLSpLimô", 
RFC_THROTTLE
, 
d©a
, (data));

41 if(
ªt
 == -1) {

42 
	`SWLOG_ERROR
("gëRFCSëtögs(ËÁûed Sètu†%d\n", 
ªt
);

44 
	`°∫˝y
(
rfc_li°
->
rfc_thrŸée
, 
d©a
, 
RFC_VALUE_BUF_SIZE
 - 1);

45 
rfc_li°
->
rfc_thrŸée
[
RFC_VALUE_BUF_SIZE
 - 1] = '\0';

46 
	`SWLOG_INFO
("gëRFCSëtögs(Ërf¯thrŸée%s\n", 
rfc_li°
->
rfc_thrŸée
);

48 
ªt
 = 
	`ªad_RFCPr›îty
("SWDLSpLimô", 
RFC_TOPSPEED
, 
d©a
, (data));

49 if(
ªt
 == -1) {

50 
	`SWLOG_ERROR
("gëRFCSëtögs(ËÁûed Sètu†%d\n", 
ªt
);

52 
	`°∫˝y
(
rfc_li°
->
rfc_t›•ìd
, 
d©a
, 
RFC_VALUE_BUF_SIZE
 - 1);

53 
rfc_li°
->
rfc_t›•ìd
[
RFC_VALUE_BUF_SIZE
 - 1] = '\0';

54 
	`SWLOG_INFO
("gëRFCSëtögs(Ërf¯t›•ìd%s\n", 
rfc_li°
->
rfc_t›•ìd
);

56 
ªt
 = 
	`ªad_RFCPr›îty
("In¸emíèlCDL", 
RFC_INCR_CDL
, 
d©a
, (data));

57 if(
ªt
 == -1) {

58 
	`SWLOG_ERROR
("gëRFCSëtögs(ËÁûed Sètu†%dánd %s\n", 
ªt
, 
rfc_li°
->
rfc_ö¸_cdl
);

60 
	`°∫˝y
(
rfc_li°
->
rfc_ö¸_cdl
, 
d©a
, 
RFC_VALUE_BUF_SIZE
 - 1);

61 
rfc_li°
->
rfc_ö¸_cdl
[
RFC_VALUE_BUF_SIZE
 - 1] = '\0';

62 
	`SWLOG_INFO
("gëRFCSëtögs(Ërf¯In¸emíèlCDL%s\n", 
rfc_li°
->
rfc_ö¸_cdl
);

64 
ªt
 = 
	`ªad_RFCPr›îty
("MTLS", 
RFC_MTLS
, 
d©a
, (data));

65 if(
ªt
 == -1) {

66 
	`SWLOG_ERROR
("gëRFCSëtögs(Ërfc%†Áûed Sètu†%d\n", 
RFC_MTLS
, 
ªt
);

68 
	`°∫˝y
(
rfc_li°
->
rfc_més
, 
d©a
, 
RFC_VALUE_BUF_SIZE
 - 1);

69 
rfc_li°
->
rfc_més
[
RFC_VALUE_BUF_SIZE
 - 1] = '\0';

70 
	`SWLOG_INFO
("gëRFCSëtögs(Ërf¯més%s\n", 
rfc_li°
->
rfc_més
);

73 
	}
}

75 #i‡
deföed
(
RFC_API_ENABLED
)

82 
	$ªad_RFCPr›îty
(* 
ty≥
, c⁄° * 
key
, *
out_vÆue
, 
size_t
 
d©asize
) {

83 
RFC_P¨amD©a_t
 
∑øm
;

84 
d©a_Àn
;

85 
ªt
 = 
READ_RFC_FAILURE
;

87 if(
key
 =
NULL
 || 
out_vÆue
 =NULL || 
d©asize
 =0 || 
ty≥
 == NULL) {

88 
	`SWLOG_ERROR
("read_RFCProperty() one or more input valuesáre invalid\n");

89  
ªt
;

92 
WDMP_STATUS
 
°©us
 = 
	`gëRFCP¨amëî
(
ty≥
, 
key
, &
∑øm
);

93 if(
°©us
 =
WDMP_SUCCESS
 || sètu†=
WDMP_ERR_DEFAULT_VALUE
) {

94 
d©a_Àn
 = 
	`°æí
(
∑øm
.
vÆue
);

95 if(
d©a_Àn
 >2 && (
∑øm
.
vÆue
[0] == '"') && (param.value[data_len - 1] == '"')) {

97 
	`¢¥ötf
–
out_vÆue
, 
d©asize
, "%s", &
∑øm
.
vÆue
[1] );

98 *(
out_vÆue
 + 
d©a_Àn
 - 2) = 0;

100 
	`¢¥ötf
–
out_vÆue
, 
d©asize
, "%s", 
∑øm
.
vÆue
 );

102 
	`SWLOG_INFO
("ªad_RFCPr›îty(Ë«me=%s,ty≥=%d,vÆue=%s,°©us=%d\n", 
∑øm
.
«me
,Ö¨am.
ty≥
,Ö¨am.
vÆue
, 
°©us
);

103 
ªt
 = 
READ_RFC_SUCCESS
;

105 
	`SWLOG_ERROR
("îr‹:ªad_RFCPr›îty(): sètus%d\n", 
°©us
);

106 *
out_vÆue
 = 0;

108  
ªt
;

109 
	}
}

118 
	$wrôe_RFCPr›îty
(* 
ty≥
, c⁄° * 
key
, c⁄° *
vÆue
, 
RFCVALDATATYPE
 
d©©y≥
) {

119 
WDMP_STATUS
 
°©us
 = 
WDMP_FAILURE
;

120 
ªt
 = 
WRITE_RFC_FAILURE
;

121 i‡(
ty≥
 =
NULL
 || 
key
 =NULL || 
vÆue
 == NULL) {

122 
	`SWLOG_ERROR
("%s: P¨amëî i†NULL\n", 
__FUNCTION__
);

123  
ªt
;

125 i‡(
d©©y≥
 =
RFC_STRING
) {

126 
°©us
 = 
	`£tRFCP¨amëî
(
ty≥
, 
key
, 
vÆue
, 
WDMP_STRING
);

127 } if(
d©©y≥
 =
RFC_UINT
) {

128 
°©us
 = 
	`£tRFCP¨amëî
(
ty≥
, 
key
, 
vÆue
, 
WDMP_UINT
);

130 
°©us
 = 
	`£tRFCP¨amëî
(
ty≥
, 
key
, 
vÆue
, 
WDMP_BOOLEAN
);

132 i‡(
°©us
 !
WDMP_SUCCESS
) {

133 
	`SWLOG_ERROR
("%s: sëRFCP¨amëî faûed. key=%†™d sètus=%s\n", 
__FUNCTION__
, 
key
, 
	`gëRFCEº‹Såög
(
°©us
));

135 
	`SWLOG_INFO
("%s: sëRFCP¨amëî Suc˚ss\n", 
__FUNCTION__
);

136 
ªt
 = 
WRITE_RFC_SUCCESS
;

138  
ªt
;

139 
	}
}

148 
	$ªad_RFCPr›îty
(* 
ty≥
, c⁄° * 
key
, *
out_vÆue
, 
size_t
 
d©asize
) {

150 
	`SWLOG_INFO
("%s: NŸ AµliˇbêF‹ RDK-M. NìdÅÿim∂emít\n", 
__FUNCTION__
);

151  
READ_RFC_NOTAPPLICABLE
;

152 
	}
}

161 
	$wrôe_RFCPr›îty
(* 
ty≥
, c⁄° * 
key
, c⁄° *
vÆue
, 
RFCVALDATATYPE
 
d©©y≥
) {

163 
	`SWLOG_INFO
("%s: NŸ AµliˇbêF‹ RDK-M. NìdÅÿim∂emít\n", 
__FUNCTION__
);

164  
WRITE_RFC_NOTAPPLICABLE
;

165 
	}
}

167 
	$isMésE«bÀd
(c⁄° *
devi˚_«me
)

169 
més_check
 = 0;

170 
ªt
 = 
UTILS_FAIL
;

171 *
dev_¥›_«me
 = "FORCE_MTLS";

172 
d©a
[
MAX_DEVICE_PROP_BUFF_SIZE
];

173 
rfc_d©a
[
RFC_VALUE_BUF_SIZE
];

175 *
d©a
 = 0;

176 *
rfc_d©a
 = 0;

182 
ªt
 = 
	`gëDevi˚Pr›îtyD©a
(
dev_¥›_«me
, 
d©a
, (data));

183 i‡(
ªt
 =
UTILS_SUCCESS
) {

184 
	`SWLOG_INFO
("%s: MTLS sètu†‰om devi˚.¥›îty fûe=%s\n", 
__FUNCTION__
, 
d©a
);

186 
	`SWLOG_INFO
("%s: NO MTLS sètu†‰om devi˚.¥›îty fûe\n", 
__FUNCTION__
);

188 
ªt
 = 
UTILS_FAIL
;

189 
ªt
 = 
	`ªad_RFCPr›îty
("MTLS", 
RFC_MTLS
, 
rfc_d©a
, (rfc_data));

190 if(
ªt
 == -1) {

191 
	`SWLOG_ERROR
("%s:Ñfc=%†Áûed Sètu†%d\n", 
__FUNCTION__
, 
RFC_MTLS
, 
ªt
);

193 
	`SWLOG_INFO
("%s:Ñf¯més%s\n", 
__FUNCTION__
, 
rfc_d©a
);

195 if((!(
	`°∫cmp
(
d©a
, "åue", 4))Ë|| (!(°∫cmp(
rfc_d©a
, "true", 4)))) {

196 
	`SWLOG_INFO
("MTLSÖrefered\n");

197 
més_check
 = 1;

199  
més_check
;

200 
	}
}

202 
	$isIn¸emëÆCDLE«bÀ
(c⁄° *
fûe_«me
)

204 
chunk_dwld
 = 0;

205 
ªt
 = -1;

206 
rfc_d©a
[
RFC_VALUE_BUF_SIZE
];

208 i‡(
fûe_«me
 =
NULL
) {

209 
	`SWLOG_ERROR
("%†: P¨amëî i†NULL\n", 
__FUNCTION__
);

210  
chunk_dwld
;

212 
	`SWLOG_INFO
("%s: Checkög In¸emëÆCDLE«bÀ... Dow∆ﬂd imagê«me=%s\n", 
__FUNCTION__
, 
fûe_«me
);

214 *
rfc_d©a
 = 0;

215 
ªt
 = 
	`ªad_RFCPr›îty
("In¸emíèlCDL", 
RFC_INCR_CDL
, 
rfc_d©a
, (rfc_data));

216 if(
ªt
 == -1) {

217 
	`SWLOG_ERROR
("%s: In¸emíèlCDLÑfc=%†Áûed Sètu†%d\n", 
__FUNCTION__
, 
RFC_MTLS
, 
ªt
);

218  
chunk_dwld
;

220 
	`SWLOG_INFO
("%s:Ñf¯In¸emíèlCDL%s\n", 
__FUNCTION__
, 
rfc_d©a
);

223 if((
	`°∫cmp
(
rfc_d©a
, "true", 4)) == 0) {

224 
	`SWLOG_INFO
("%†: in¸emíè»cd»i†TRUE\n", 
__FUNCTION__
);

225 if((
	`fûePª£¡Check
(
fûe_«me
)) == 0) {

226 
chunk_dwld
 = 1;

227 
	`SWLOG_INFO
("%s: Fûe=%†i†¥e£¡. In¸emíèlCDLÉ«bÀ=%d\n",
__FUNCTION__
, 
fûe_«me
, 
chunk_dwld
);

230  
chunk_dwld
;

231 
	}
}

237 
boﬁ
 
	$isMmgbÀNŸifyE«bÀd
()

239 
boﬁ
 
°©us
 = 
Ál£
;

240 
ªt
 = -1;

241 
rfc_d©a
[
RFC_VALUE_BUF_SIZE
];

243 *
rfc_d©a
 = 0;

244 
ªt
 = 
	`ªad_RFCPr›îty
("M™ageNŸify", 
RFC_MNG_NOTIFY
, 
rfc_d©a
, (rfc_data));

245 i‡(
ªt
 == -1) {

246 
	`SWLOG_ERROR
("%s: M™ageNŸifyÑfc=%†Áûed Sètu†%d\n", 
__FUNCTION__
, 
RFC_MNG_NOTIFY
, 
ªt
);

247  
°©us
;

249 
	`SWLOG_INFO
("%s:Ñf¯M™ageNŸify%s\n", 
__FUNCTION__
, 
rfc_d©a
);

250 i‡((
	`°∫cmp
(
rfc_d©a
, "true", 4)) == 0) {

251 
°©us
 = 
åue
;

254  
°©us
;

255 
	}
}

261 
boﬁ
 
	$isDebugSîvi˚sE«bÀd
()

263 
boﬁ
 
°©us
 =
Ál£
;

264 
ªt
 = -1;

265 
rfc_d©a
[
RFC_VALUE_BUF_SIZE
];

267 *
rfc_d©a
 = 0;

268 
ªt
 = 
	`ªad_RFCPr›îty
("DEBUGSRV", 
RFC_DEBUGSRV
, 
rfc_d©a
, (rfc_data));

269 i‡(
ªt
 == -1) {

270 
	`SWLOG_ERROR
("%s:Ñf¯Debug sîvi˚†=%†Áûed Sètu†%d\n", 
__FUNCTION__
, 
RFC_DEBUGSRV
, 
ªt
);

272 
	`SWLOG_INFO
("%s:Ñf¯Debug sîvi˚†%s\n", 
__FUNCTION__
, 
rfc_d©a
);

273 i‡((
	`°∫cmp
(
rfc_d©a
, "true", 4)) == 0) {

274 
°©us
 = 
åue
;

277  
°©us
;

278 
	}
}

	@test/functional-tests/tests/mfrutils.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

23 
	$maö
(
¨gc
, **
¨gv
)

25 
FILE
 *
Â
 = 
NULL
;

26 
tbuff
[32] = {0};

27 
Â
 = 
	`f›í
("/tmp/pdri_image_file", "r");

28 i‡(
Â
 !
NULL
) {

29 
	`fgës
(
tbuff
, —buff), 
Â
);

30 
	`¥ötf
("%s\n",
tbuff
);

31 
	`f˛o£
(
Â
);

33 
	`¥ötf
("ABCD_PDRI_firmware\n");

37 
	}
}

	@test/testiarmInterface.c

26 
	~"ã°ürmI¡îÁ˚.h
"

28 #i‡
deföed
(
IARM_ENABLED
)

29 
	$evítM™agîTe°
(c⁄° *
cur_evít_«me
, 
≠p_mode
) {

30 if(
cur_evít_«me
 =
NULL
) {

31 
	`¥ötf
("eventManager() failed dueÅo NULLÖarameter\n");

34 
Àn
 = (
≠p_mode
);

35 
IARM_Resu…_t
 
ªt_code
 = 
IARM_RESULT_SUCCESS
;

37 
	`IARM_Bus_Inô
(
cur_evít_«me
);

38 
	`IARM_Bus_C⁄√˘
();

39 
	`¥ötf
("%s: Gíî©êIARM_BUS_NAME cuºíàEvít=%s,evít°©us=%d:Àn=%d\n", 
__FUNCTION__
, 
cur_evít_«me
, 
≠p_mode
, 
Àn
);

51 
ªt_code
 = 
	`IARM_Bus_Brﬂdˇ°Evít
(
cur_evít_«me
, (
IARM_EvítId_t
Ë
IARM_BUS_RDKVFWUPGRADER_MODECHANGED
, (*Ë&
≠p_mode
,

52 
Àn
);

53 if(
ªt_code
 =
IARM_RESULT_SUCCESS
) {

55 
	`¥ötf
("%†: >> IARM SUCCESS\n", 
__FUNCTION__
);

58 
	`¥ötf
("%†: >> IARM FAILURE\n", 
__FUNCTION__
);

60 
	`IARM_Bus_Disc⁄√˘
();

61 
	`IARM_Bus_Tîm
();

62 
	`¥ötf
("%†: IARM_evít_£ndî closög\n", 
__FUNCTION__
);

63 
	}
}

65 
	$maö
(
¨gc
, *
¨gv
[])

67 
≠p_mode
 = 0;

68 i‡(
¨gc
 == 2) {

69 
≠p_mode
 = 
	`©oi
(
¨gv
[1]);

70 
	`¥ötf
("≠∞modê%d\n", 
≠p_mode
);

71 #i‡
	`deföed
(
IARM_ENABLED
)

72 
	`evítM™agîTe°
("RdkvFWupgødî", 
≠p_mode
);

75 
	`¥ötf
("InvalidÇo ofárgument\nReq only 1árgument 1 or 0\n");

78 
	}
}

	@test/testiarmInterface.h

19 #i‚de‡
VIDEO_TESTIARMINTERFACE_IARMINTERFACE_H_


20 
	#VIDEO_TESTIARMINTERFACE_IARMINTERFACE_H_


	)

22 
	~<°dio.h
>

23 
	~<°dlib.h
>

24 #i‡
deföed
(
IARM_ENABLED
)

25 
	~"sysMgr.h
"

26 
	~"libIARMC‹e.h
"

27 
	~"libIBus.h
"

28 
	~"libIBusD´m⁄.h
"

29 
	~<glib.h
>

36 
	#IARM_BUS_RDKVFWUPGRADER_MODECHANGED
 0

	)

38 
evítM™agîTe°
(c⁄° *
cur_evít_«me
, 
≠p_mode
) ;

	@unittest/basic_rdkv_main_gtest.cpp

19 
	~<gã°/gã°.h
>

20 
	~<gmock/gmock.h
>

21 
	~<gã°/gã°.h
>

22 
	~<io°ªam
>

23 
	~<uni°d.h
>

26 
	~"devi˚_°©us_hñ≥r.h
"

27 
	~"dow∆ﬂd_°©us_hñ≥r.h
"

29 
c›yFûe
(c⁄° *
§c
, c⁄° *
èrgë
);

32 
	~"mocks/devi˚_°©us_hñ≥r_mock.h
"

33 
	~"mocks/devi˚utûs_mock.h
"

35 
	~"mis˚Œ™eous.h
"

36 
	~"mis˚Œ™eous_mock.˝p
"

39 
	#JSON_STR_LEN
 1000

	)

41 
Devi˚UtûsMock
 
Devi˚globÆ
;

42 
Devi˚UtûsMock
 *
	gg_Devi˚UtûsMock
 = &
Devi˚globÆ
;

44 
	#GTEST_DEFAULT_RESULT_FILEPATH
 "/tmp/Gã°_Rï‹t/"

	)

45 
	#GTEST_DEFAULT_RESULT_FILENAME
 "RdkFwDw∆d_rdkvMaö_gã°_ªp‹t.js⁄"

	)

46 
	#GTEST_REPORT_FILEPATH_SIZE
 256

	)

48 
usög
 
«me•a˚
 
	gã°ög
;

49 
usög
 
«me•a˚
 
	g°d
;

50 
	gusög
 ::
ã°ög
::
Rëu∫
;

51 
	gusög
 ::
ã°ög
::
SåEq
;

54 
Rfc_t
 
rfc_li°
;

55 
Devi˚Pr›îty_t
 
devi˚_öfo
;

56 *
cuæ
;

58 
boﬁ
 
ßvePID
(c⁄° *
fûe
, *
d©a
);

59 
öãru±Dw∆
(
≠p_mode
);

60 
doI¡îu±Dw∆
(*
ö_cuæ
, 
max_dw∆_•ìd
);

61 
boﬁ
 
checkt2VÆNŸify
–
iCuæCode
, 
iUpgødeTy≥
, *
Uæ
 );

62 
doGëDw∆Byãs
(*
ö_cuæ
);

63 
boﬁ
 
checkF‹TlsEº‹s
(
cuæ_code
, c⁄° *
ty≥
);

64 
ªåyDow∆ﬂd
(
£rvî_ty≥
, c⁄° * 
¨tiÁ˘Loˇti⁄Uæ
, c⁄° * 
loˇlDow∆ﬂdLoˇti⁄
, *
pPo°Fõlds
, 
ªåy_˙t
, 
dñay
, *
hâpCode
 );

66 
dow∆ﬂdFûe
–
£rvî_ty≥
, c⁄° * 
¨tiÁ˘Loˇti⁄Uæ
, c⁄° * 
loˇlDow∆ﬂdLoˇti⁄
, * 
pPo°Fõlds
, *
hâpCode
 );

67 
checkTriggîUpgøde
(
XCONFRES
 *
ª•⁄£
, c⁄° *
modñ_num
);

68 
£tF‹˚St›
(
vÆue
);

69 
T2ERROR
 
t2_evít_s
(* 
m¨kî
, * 
vÆue
);

70 
T2ERROR
 
t2_evít_d
(* 
m¨kî
, 
vÆue
);

71 
t2_öô
(*
comp⁄ít
);

72 
gëDevi˚Pr›îtõs
(
Devi˚Pr›îty_t
 *
pDevi˚_öfo
);

73 
gëImageDëaûs
(
ImageDëaûs_t
 *);

74 
¸óãDú
(c⁄° *
dú«me
);

75 
¸óãFûe
(c⁄° *
fûe_«me
);

76 
t2_unöô
();

77 
log_exô
();

78 
doHâpFûeDow∆ﬂd
(*
ö_cuæ
, 
FûeDw∆_t
 *
pfûe_dw∆
, 
MésAuth_t
 *
auth
, 
max_dw∆_•ìd
, *
d∆_°¨t_pos
, *
out_hâpCode
 );

79 
logFûeD©a
(c⁄° *
fûe_∑th
);

80 
boﬁ
 
isMedüClõ¡Devi˚
();

81 
doAuthHâpFûeDow∆ﬂd
(*
ö_cuæ
, 
FûeDw∆_t
 *
pfûe_dw∆
, *
out_hâpCode
);

82 
logMûe°⁄e
(c⁄° *
msg_code
);

83 
îa£FﬁdîEx˚PømaFûe
(c⁄° *
fﬁdî
, c⁄° * 
fûe_«me
, c⁄° *
modñ_num
);

84 
doCuæPutReque°
(*
ö_cuæ
, 
FûeDw∆_t
 *
pfûe_dw∆
, *
js⁄Ωc_auth_tokí
, *
out_hâpCode
);

85 
gëOPTOUTVÆue
(c⁄° *
fûíame
);

86 
gëPidSt‹e
(c⁄° *
key
, c⁄° *
vÆue
);

87 
dw∆Eº‹
(
cuæ_code
, 
hâp_code
, 
£rvî_ty≥
);

88 
≥rùhîÆ_fúmw¨e_dndl
(*
pCloudFWLoˇti⁄
, *
pPîùhîÆFúmw¨es
);

89 
ÁŒBack
(
£rvî_ty≥
, c⁄° * 
¨tiÁ˘Loˇti⁄Uæ
, c⁄° * 
loˇlDow∆ﬂdLoˇti⁄
, *
pPo°Fõlds
, *
hâpCode
);

90 
ßveHTTPCode
(
hâp_code
);

91 
upgødeReque°
(
upgøde_ty≥
, 
£rvî_ty≥
, c⁄° * 
¨tiÁ˘Loˇti⁄Uæ
, c⁄° * 
dwŒoc
, *
pPo°Fõlds
, *
pHâp_code
);

92 
size_t
 
gëC⁄ã¡Lígth
(c⁄° *
fûe
);

93 
chunkDow∆ﬂd
(
FûeDw∆_t
 *
pfûe_dw∆
, 
MésAuth_t
 *
£c
, 
•ìd_limô
, *
hâpcode
);

96 
	$TEST
(
gëC⁄ã¡LígthTe°
,
Te°Suc˚ss
){

97 
ªt
 = 0;

98 
ªt
 = 
	`sy°em
("echo \"Content-Length: 1234\" > /tmp/contentlength.txt");

99 
	`EXPECT_NE
(
	`gëC⁄ã¡Lígth
("/tmp/contentlength.txt"), 0);

100 
ªt
 = 
	`sy°em
("rm -f /tmp/contentlength.txt");

101 
	}
}

102 
	$TEST
(
gëC⁄ã¡LígthTe°
,
Te°Faû
){

103 
	`EXPECT_EQ
(
	`gëC⁄ã¡Lígth
("./contentlength.txt"), 0);

104 
	}
}

105 
	$TEST
(
gëC⁄ã¡LígthTe°
,
Te°Faû1
){

106 
ªt
 = 0;

107 
ªt
 = 
	`sy°em
("echo \"Content: 1234\" > /tmp/contentlength.txt");

108 
	`EXPECT_EQ
(
	`gëC⁄ã¡Lígth
("/tmp/contentlength.txt"), 0);

109 
ªt
 = 
	`sy°em
("rm -f /tmp/contentlength.txt");

110 
	}
}

112 
	$TEST
(
MaöHñ≥rFun˘i⁄Te°
,
gëAµModeDeÁu…
){

113 
	`EXPECT_EQ
(
	`gëAµMode
(), 1);

114 
	}
}

116 
	$TEST
(
MaöHñ≥rFun˘i⁄Te°
,
£tAµModeDeÁu…
){

117 
	`£tAµMode
(0);

118 
	`EXPECT_EQ
(
	`gëAµMode
(), 0);

119 
	}
}

121 
	$TEST
(
MaöHñ≥rFun˘i⁄Te°
,
£èndgëAµMode
){

122 
	`£tAµMode
(1);

123 
	`EXPECT_EQ
(
	`gëAµMode
(), 1);

124 
	}
}

126 
	$TEST
(
MaöHñ≥rFun˘i⁄Te°
,
gëDw∆SèãDeÁu…
){

127 
	`EXPECT_EQ
(
	`gëDw∆Sèã
(), 0);

128 
	}
}

130 
	$TEST
(
MaöHñ≥rFun˘i⁄Te°
,
£tDw∆SèãDeÁu…
){

131 
	`£tDw∆Sèã
(0);

132 
	`EXPECT_EQ
(
	`gëDw∆Sèã
(), 0);

133 
	}
}

134 
	$TEST
(
MaöHñ≥rFun˘i⁄Te°
,
£èndgëDw∆Sèã
){

135 
	`£tDw∆Sèã
(1);

136 
	`EXPECT_EQ
(
	`gëDw∆Sèã
(), 1);

137 
	}
}

139 
	$TEST
(
MaöHñ≥rFun˘i⁄Te°
,
ßvePIDTe°nuŒ
){

140 
	`EXPECT_FALSE
(
	`ßvePID
((c⁄° *Ë
NULL
, (*) NULL));

141 
	}
}

143 
	$TEST
(
MaöHñ≥rFun˘i⁄Te°
,
ßvePIDTe°nuŒÂ
){

144 
	`EXPECT_FALSE
(
	`ßvePID
((c⁄° *Ë"ã°fûe",(*Ë
NULL
));

145 
	}
}

147 
	$TEST
(
MaöHñ≥rFun˘i⁄Te°
,
ßvePIDTe°nuŒÂ1
){

148 
d©a
[] = "1234";

149 
	`EXPECT_FALSE
(
	`ßvePID
("/com/ã°fûe",
d©a
));

150 
	}
}

152 
	$TEST
(
MaöHñ≥rFun˘i⁄Te°
,
ßvePIDTe°Suc˚ss
){

153 
d©a
[] = "1234";

154 
	`EXPECT_TRUE
(
	`ßvePID
("/tmp/ã°fûe", 
d©a
));

155 
	}
}

157 
	$TEST
(
MaöHñ≥rFun˘i⁄Te°
,
gëPidSt‹e
){

159 
buff
[16] = {0};

160 
FILE
 *
Â
 = 
NULL
;

161 
	`gëPidSt‹e
("NEW","true");

162 
	`fÊush
(
NULL
);

163 
Â
 = 
	`f›í
("/tmp/.curl.pid", "r");

164 i‡(
Â
 !
NULL
) {

165 
	`¥ötf
("File open success\n");

166 (
	`fgës
(
buff
, (buff), 
Â
)Ë!
NULL
) {

167 
	`¥ötf
("A·îÑód bu‡%s\n",
buff
);

169 
	`f˛o£
(
Â
);

171 
pid_t
 
pid
 = 
	`gëpid
();

172 
ªad_pid
 = 
	`©oi
(
buff
);

173 
	`¥ötf
("pid = %uándÑód_pid = %u\n", 
pid
, 
ªad_pid
);

174 
	`EXPECT_EQ
(
pid
, 
ªad_pid
);

175 
	}
}

177 
	$TEST
(
MaöHñ≥rFun˘i⁄Te°
, 
H™dÀsDow∆ﬂdInProgªss
) {

178 
MockExã∫Æ
 
mockexã∫Æ
;

179 
globÆ_mockexã∫Æ_±r
 = &
mockexã∫Æ
;

180 
	`°r˝y
(
rfc_li°
.
rfc_thrŸée
, "true");

181 
	`°r˝y
(
rfc_li°
.
rfc_t›•ìd
, "0");

182 
	`£tDw∆Sèã
(
RDKV_FWDNLD_DOWNLOAD_INPROGRESS
);

183 
	`°r˝y
(
devi˚_öfo
.
maöt_°©us
, "true");

184 
	`EXPECT_CALL
(
mockexã∫Æ
,
	`evítM™agî
("Maöã«n˚MGR", "9")).
	`Times
(1);

185 
	`EXPECT_CALL
(
mockexã∫Æ
,
	`evítM™agî
(
FW_STATE_EVENT
, "3")).
	`Times
(1);

186 
	`öãru±Dw∆
(0);

187 
globÆ_mockexã∫Æ_±r
 = 
NULL
;

188 
	}
}

190 
	$TEST
(
MaöHñ≥rFun˘i⁄Te°
, 
H™dÀsDow∆ﬂdInProgªssS≥ed10
) {

191 
MockExã∫Æ
 
mockexã∫Æ
;

192 
globÆ_mockexã∫Æ_±r
 = &
mockexã∫Æ
;

193 
	`°r˝y
(
rfc_li°
.
rfc_thrŸée
, "true");

194 
	`°r˝y
(
rfc_li°
.
rfc_t›•ìd
, "10");

195 
	`£tDw∆Sèã
(
RDKV_FWDNLD_DOWNLOAD_INPROGRESS
);

196 
	`°r˝y
(
devi˚_öfo
.
maöt_°©us
, "true");

197 
	`EXPECT_CALL
(
mockexã∫Æ
,
	`doGëDw∆Byãs
(
_
)).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(10));

198 
cuæ
 = (*Ë
rfc_li°
.
rfc_thrŸée
;

199 
	`EXPECT_CALL
(
mockexã∫Æ
,
	`doI¡îu±Dw∆
(
_
,10)).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(
DWNL_UNPAUSE_FAIL
));

200 
	`öãru±Dw∆
(0);

201 
cuæ
 = 
NULL
;

202 
globÆ_mockexã∫Æ_±r
 = 
NULL
;

204 
	}
}

206 
	$TEST
(
MaöHñ≥rFun˘i⁄Te°
, 
H™dÀsDow∆ﬂdInProgªssAµMode1
) {

207 
MockExã∫Æ
 
mockexã∫Æ
;

208 
globÆ_mockexã∫Æ_±r
 = &
mockexã∫Æ
;

209 
	`°r˝y
(
rfc_li°
.
rfc_thrŸée
, "true");

210 
	`°r˝y
(
rfc_li°
.
rfc_t›•ìd
, "10");

211 
	`£tDw∆Sèã
(
RDKV_FWDNLD_DOWNLOAD_INPROGRESS
);

212 
	`°r˝y
(
devi˚_öfo
.
maöt_°©us
, "true");

213 
	`EXPECT_CALL
(
mockexã∫Æ
,
	`doGëDw∆Byãs
(
_
)).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(10));

214 
cuæ
 = (*Ë
rfc_li°
.
rfc_thrŸée
;

215 
	`öãru±Dw∆
(1);

216 
cuæ
 = 
NULL
;

217 
globÆ_mockexã∫Æ_±r
 = 
NULL
;

218 
	}
}

220 
	$TEST
(
MaöHñ≥rFun˘i⁄Te°
, 
H™dÀsDow∆ﬂdInProgªssAµMode2
) {

221 
MockExã∫Æ
 
mockexã∫Æ
;

222 
globÆ_mockexã∫Æ_±r
 = &
mockexã∫Æ
;

223 
	`°r˝y
(
rfc_li°
.
rfc_thrŸée
, "true");

224 
	`°r˝y
(
rfc_li°
.
rfc_t›•ìd
, "11");

225 
	`£tDw∆Sèã
(
RDKV_FWDNLD_DOWNLOAD_INPROGRESS
);

226 
	`°r˝y
(
devi˚_öfo
.
maöt_°©us
, "true");

227 
	`EXPECT_CALL
(
mockexã∫Æ
,
	`doGëDw∆Byãs
(
_
)).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(10));

228 
cuæ
 = (*Ë
rfc_li°
.
rfc_thrŸée
;

229 
	`öãru±Dw∆
(2);

230 
cuæ
 = 
NULL
;

231 
globÆ_mockexã∫Æ_±r
 = 
NULL
;

232 
	}
}

234 
	$TEST
(
MaöHñ≥rFun˘i⁄Te°
, 
t2VÆNŸifyH™dÀsNuŒI≈uts
) {

235 
MockExã∫Æ
 
mockexã∫Æ
;

236 
globÆ_mockexã∫Æ_±r
 = &
mockexã∫Æ
;

237 
	`t2VÆNŸify
(
NULL
, NULL);

238 
globÆ_mockexã∫Æ_±r
 = 
NULL
;

239 
	}
}

241 
	$TEST
(
MaöHñ≥rFun˘i⁄Te°
, 
t2VÆNŸifyH™dÀsN⁄NuŒI≈uts
) {

242 
MockExã∫Æ
 
mockexã∫Æ
;

243 
globÆ_mockexã∫Æ_±r
 = &
mockexã∫Æ
;

244 
	`EXPECT_CALL
(
mockexã∫Æ
, 
	`t2_evít_s
("m¨kî", "vÆue")).
	`Times
(1).
	`WûlOn˚
(
ã°ög
::
	`Rëu∫
(
T2ERROR_SUCCESS
));

245 
	`t2VÆNŸify
("marker", "value");

246 
globÆ_mockexã∫Æ_±r
 = 
NULL
;

247 
	}
}

250 
	$TEST
(
MaöHñ≥rFun˘i⁄Te°
, 
checkt2VÆNŸify√g©ive
){

251 
	`EXPECT_FALSE
(
	`checkt2VÆNŸify
(100, 
PERIPHERAL_UPGRADE
,"thisistest"));

252 
	}
}

254 
	$TEST
(
MaöHñ≥rFun˘i⁄Te°
, 
checkt2VÆNŸify√g©ive1
){

255 
	`EXPECT_FALSE
(
	`checkt2VÆNŸify
(35, 
PERIPHERAL_UPGRADE
,"thisistest"));

256 
	}
}

258 
	$TEST
(
MaöHñ≥rFun˘i⁄Te°
, 
checkt2VÆNŸify√g©ive2
){

259 
	`EXPECT_FALSE
(
	`checkt2VÆNŸify
(91, 
PERIPHERAL_UPGRADE
,"thisistest"));

260 
	}
}

262 
	$TEST
(
MaöHñ≥rFun˘i⁄Te°
, 
checkt2VÆNŸifyposôive
){

263 
	`EXPECT_TRUE
(
	`checkt2VÆNŸify
(35, 
PERIPHERAL_UPGRADE
,"https://thisistest.com/test"));

264 
	}
}

266 
	$TEST
(
MaöHñ≥rFun˘i⁄Te°
, 
checkF‹TlsEº‹¢eg©ive
){

267 
	`EXPECT_TRUE
(
	`checkF‹TlsEº‹s
(100, "https://thisistest"));

268 
	}
}

270 
	$TEST
(
MaöHñ≥rFun˘i⁄Te°
, 
checkF‹TlsEº‹•osôive
){

271 
	`EXPECT_TRUE
(
	`checkF‹TlsEº‹s
(91, "https://thisistest"));

272 
	}
}

274 
	$TEST
(
MaöHñ≥rFun˘i⁄Te°
, 
ªåyDow∆ﬂdã°
){

275 
	`EXPECT_EQ
(
	`ªåyDow∆ﬂd
(1, 
NULL
, NULL, NULL, 1, 0,NULL), -1);

276 
	}
}

278 
	$TEST
(
MaöHñ≥rFun˘i⁄Te°
, 
ªåyDow∆ﬂdã°1
){

279 
MockDow∆ﬂdFûeOps
 
mockfûe›s
;

280 
globÆ_mockdow∆ﬂdfûe›s_±r
 = &
mockfûe›s
;

281 
	`EXPECT_CALL
(
mockfûe›s
, 
	`dow∆ﬂdFûe
(
_
,_,_,_,_)).
	`Times
(1).
	`WûlOn˚
(
ã°ög
::
	`Rëu∫
(
CURL_SUCCESS
));

282 
code
 = 
HTTP_SUCCESS
;

283 
	`EXPECT_EQ
(
	`ªåyDow∆ﬂd
(
HTTP_SSR_DIRECT
, "ã°", "ã°1", "ã°2", 1, 0,&
code
), 
CURL_SUCCESS
);

284 
globÆ_mockdow∆ﬂdfûe›s_±r
 = 
NULL
;

285 
	}
}

286 
	$TEST
(
MaöHñ≥rFun˘i⁄Te°
, 
ªåyDow∆ﬂdã°2
){

287 
MockDow∆ﬂdFûeOps
 
mockfûe›s
;

288 
globÆ_mockdow∆ﬂdfûe›s_±r
 = &
mockfûe›s
;

289 
	`EXPECT_CALL
(
mockfûe›s
, 
	`dow∆ﬂdFûe
(
_
,_,_,_,_)).
	`Times
(1).
	`WûlOn˚
(
ã°ög
::
	`Rëu∫
(
CURL_SUCCESS
));

290 
code
 = 
HTTP_CHUNK_SUCCESS
;

291 
	`EXPECT_EQ
(
	`ªåyDow∆ﬂd
(
HTTP_XCONF_DIRECT
, "ã°", "ã°1", "ã°2", 1, 0,&
code
), 
CURL_SUCCESS
);

292 
globÆ_mockdow∆ﬂdfûe›s_±r
 = 
NULL
;

293 
	}
}

295 
	$TEST
(
MaöHñ≥rFun˘i⁄Te°
, 
ªåyDow∆ﬂdã°3
){

296 
MockDow∆ﬂdFûeOps
 
mockfûe›s
;

297 
globÆ_mockdow∆ﬂdfûe›s_±r
 = &
mockfûe›s
;

298 
	`EXPECT_CALL
(
mockfûe›s
, 
	`dow∆ﬂdFûe
(
_
,_,_,_,_)).
	`Times
(1).
	`WûlOn˚
(
ã°ög
::
	`Rëu∫
(!
CURL_SUCCESS
));

299 
code
 = 
HTTP_PAGE_NOT_FOUND
;

300 
	`EXPECT_EQ
(
	`ªåyDow∆ﬂd
(
HTTP_XCONF_DIRECT
, "ã°", "ã°1", "ã°2", 1, 0,&
code
), !
CURL_SUCCESS
);

301 
globÆ_mockdow∆ﬂdfûe›s_±r
 = 
NULL
;

302 
	}
}

304 
	$TEST
(
MaöHñ≥rFun˘i⁄Te°
, 
ªåyDow∆ﬂdã°4
){

305 
MockDow∆ﬂdFûeOps
 
mockfûe›s
;

306 
globÆ_mockdow∆ﬂdfûe›s_±r
 = &
mockfûe›s
;

307 
	`EXPECT_CALL
(
mockfûe›s
, 
	`dow∆ﬂdFûe
(
_
,_,_,_,_)).
	`Times
(1).
	`WûlOn˚
(
ã°ög
::
	`Rëu∫
(!
CURL_SUCCESS
));

308 
code
 = 
DWNL_BLOCK
;

309 
	`EXPECT_EQ
(
	`ªåyDow∆ﬂd
(
HTTP_XCONF_DIRECT
, "ã°", "ã°1", "ã°2", 1, 0,&
code
), !
CURL_SUCCESS
);

310 
globÆ_mockdow∆ﬂdfûe›s_±r
 = 
NULL
;

311 
	}
}

313 
	$TEST
(
MaöHñ≥rFun˘i⁄Te°
, 
ªåyDow∆ﬂdã°5
){

314 
MockDow∆ﬂdFûeOps
 
mockfûe›s
;

315 
globÆ_mockdow∆ﬂdfûe›s_±r
 = &
mockfûe›s
;

316 
	`EXPECT_CALL
(
mockfûe›s
, 
	`dow∆ﬂdFûe
(
_
,_,_,_,_)).
	`Times
(1).
	`WûlOn˚
(
ã°ög
::
	`Rëu∫
(!
CURL_SUCCESS
));

317 
code
 = 
HTTP_SUCCESS
;

318 
	`EXPECT_EQ
(
	`ªåyDow∆ﬂd
(
HTTP_SSR_DIRECT
, "ã°", "ã°1", "ã°2", 1, 0,&
code
), !
CURL_SUCCESS
);

319 
globÆ_mockdow∆ﬂdfûe›s_±r
 = 
NULL
;

321 
	}
}

323 
	$TEST
(
MaöHñ≥rFun˘i⁄Te°
, 
ªåyDow∆ﬂdã°6
){

324 
MockDow∆ﬂdFûeOps
 
mockfûe›s
;

325 
globÆ_mockdow∆ﬂdfûe›s_±r
 = &
mockfûe›s
;

326 
	`EXPECT_CALL
(
mockfûe›s
, 
	`codebigdow∆ﬂdFûe
(
_
,_,_,_,_)).
	`Times
(1).
	`WûlOn˚
(
ã°ög
::
	`Rëu∫
(
CURL_SUCCESS
));

327 
code
 = 
HTTP_SUCCESS
;

328 
	`EXPECT_EQ
(
	`ªåyDow∆ﬂd
(
HTTP_SSR_CODEBIG
, "ã°", "ã°1", "ã°2", 1, 0,&
code
), 
CURL_SUCCESS
);

329 
globÆ_mockdow∆ﬂdfûe›s_±r
 = 
NULL
;

331 
	}
}

333 
	$TEST
(
MaöHñ≥rFun˘i⁄Te°
, 
ªåyDow∆ﬂdã°7
){

334 
MockDow∆ﬂdFûeOps
 
mockfûe›s
;

335 
globÆ_mockdow∆ﬂdfûe›s_±r
 = &
mockfûe›s
;

336 
	`EXPECT_CALL
(
mockfûe›s
, 
	`codebigdow∆ﬂdFûe
(
_
,_,_,_,_)).
	`Times
(1).
	`WûlOn˚
(
ã°ög
::
	`Rëu∫
(!
CURL_SUCCESS
));

337 
code
 = 
HTTP_PAGE_NOT_FOUND
;

338 
	`EXPECT_EQ
(
	`ªåyDow∆ﬂd
(
HTTP_SSR_CODEBIG
, "ã°", "ã°1", "ã°2", 1, 0,&
code
), !
CURL_SUCCESS
);

339 
globÆ_mockdow∆ﬂdfûe›s_±r
 = 
NULL
;

341 
	}
}

343 
	$TEST
(
MaöHñ≥rFun˘i⁄Te°
, 
ªåyDow∆ﬂdã°8
){

344 
MockDow∆ﬂdFûeOps
 
mockfûe›s
;

345 
globÆ_mockdow∆ﬂdfûe›s_±r
 = &
mockfûe›s
;

346 
	`EXPECT_CALL
(
mockfûe›s
, 
	`codebigdow∆ﬂdFûe
(
_
,_,_,_,_)).
	`Times
(1).
	`WûlOn˚
(
ã°ög
::
	`Rëu∫
(!
CURL_SUCCESS
));

347 
code
 = 
HTTP_SUCCESS
;

348 
	`EXPECT_EQ
(
	`ªåyDow∆ﬂd
(
HTTP_SSR_CODEBIG
, "ã°", "ã°1", "ã°2", 1, 1,&
code
), !
CURL_SUCCESS
);

349 
globÆ_mockdow∆ﬂdfûe›s_±r
 = 
NULL
;

350 
	}
}

352 
	$TEST
(
Dw∆Eº‹Te°
, 
H™dÀsCuæCode0
) {

353 
cuæ_code
 = 0;

354 
hâp_code
 = 200;

355 
£rvî_ty≥
 = 0;

356 
MockExã∫Æ
 
mockexã∫Æ
;

357 
globÆ_mockexã∫Æ_±r
 = &
mockexã∫Æ
;

358 
	`EXPECT_CALL
(
mockexã∫Æ
,
	`checkAndE¡îSèãRed
(
_
,_)).
	`Times
(1);

359 
	`dw∆Eº‹
(
cuæ_code
, 
hâp_code
, 
£rvî_ty≥
);

360 
globÆ_mockexã∫Æ_±r
 = 
NULL
;

362 
	}
}

364 
	$TEST
(
Dw∆Eº‹Te°
, 
H™dÀsCuæCode22
) {

365 
cuæ_code
 = 22;

366 
hâp_code
 = 200;

367 
£rvî_ty≥
 = 0;

368 
MockExã∫Æ
 
mockexã∫Æ
;

369 
globÆ_mockexã∫Æ_±r
 = &
mockexã∫Æ
;

370 
	`EXPECT_CALL
(
mockexã∫Æ
,
	`evítM™agî
(
_
,_)).
	`Times
(1);

371 
	`EXPECT_CALL
(
mockexã∫Æ
,
	`checkAndE¡îSèãRed
(
_
,_)).
	`Times
(1);

372 
	`EXPECT_CALL
(
mockexã∫Æ
,
	`upd©eFWDow∆ﬂdSètus
(
_
,_)).
	`Times
(1);

373 
	`dw∆Eº‹
(
cuæ_code
, 
hâp_code
, 
£rvî_ty≥
);

374 
globÆ_mockexã∫Æ_±r
 = 
NULL
;

376 
	}
}

378 
	$TEST
(
Dw∆Eº‹Te°
, 
H™dÀsCuæCode18
) {

379 
cuæ_code
 = 18;

380 
hâp_code
 = 0;

381 
£rvî_ty≥
 = 0;

382 
MockExã∫Æ
 
mockexã∫Æ
;

383 
globÆ_mockexã∫Æ_±r
 = &
mockexã∫Æ
;

384 
	`°r˝y
(
devi˚_öfo
.
dev_ty≥
,"mediaclient");

385 
	`EXPECT_CALL
(
mockexã∫Æ
,
	`evítM™agî
(
_
,_)).
	`Times
(1);

386 
	`EXPECT_CALL
(
mockexã∫Æ
,
	`checkAndE¡îSèãRed
(
_
,_)).
	`Times
(1);

387 
	`EXPECT_CALL
(
mockexã∫Æ
,
	`upd©eFWDow∆ﬂdSètus
(
_
,_)).
	`Times
(1);

388 
	`dw∆Eº‹
(
cuæ_code
, 
hâp_code
, 
£rvî_ty≥
);

389 
globÆ_mockexã∫Æ_±r
 = 
NULL
;

391 
	}
}

393 
	$TEST
(
Dw∆Eº‹Te°
, 
H™dÀsCuæCode91
) {

394 
cuæ_code
 = 91;

395 
hâp_code
 = 200;

396 
£rvî_ty≥
 = 0;

397 
MockExã∫Æ
 
mockexã∫Æ
;

398 
globÆ_mockexã∫Æ_±r
 = &
mockexã∫Æ
;

399 
	`°r˝y
(
devi˚_öfo
.
dev_ty≥
,"mediaclient1");

400 
	`EXPECT_CALL
(
mockexã∫Æ
,
	`evítM™agî
(
_
,_)).
	`Times
(1);

401 
	`EXPECT_CALL
(
mockexã∫Æ
,
	`checkAndE¡îSèãRed
(
_
,_)).
	`Times
(1);

402 
	`EXPECT_CALL
(
mockexã∫Æ
,
	`upd©eFWDow∆ﬂdSètus
(
_
,_)).
	`Times
(1);

403 
	`dw∆Eº‹
(
cuæ_code
, 
hâp_code
, 
£rvî_ty≥
);

404 
globÆ_mockexã∫Æ_±r
 = 
NULL
;

406 
	}
}

407 
	$TEST
(
MaöHñ≥rFun˘i⁄Te°
,
upgødeReque°Te°
){

408 
MockExã∫Æ
 
mockexã∫Æ
;

409 
globÆ_mockexã∫Æ_±r
 = &
mockexã∫Æ
;

411 
	`EXPECT_EQ
(
	`upgødeReque°
(1, 1, "ã°", "ã°1", "ã°2", 
NULL
), -1);

412 
globÆ_mockexã∫Æ_±r
 = 
NULL
;

413 
	}
}

415 
	$TEST
(
MaöHñ≥rFun˘i⁄Te°
,
chunkDow∆ﬂdTe°NULL
){

416 
MockExã∫Æ
 
mockexã∫Æ
;

417 
globÆ_mockexã∫Æ_±r
 = &
mockexã∫Æ
;

418 
hâpcode
 = -1;

419 
	`EXPECT_EQ
(
	`chunkDow∆ﬂd
(
NULL
, NULL, 0, &
hâpcode
), -1);

421 
globÆ_mockexã∫Æ_±r
 = 
NULL
;

422 
	}
}

423 
	$TEST
(
MaöHñ≥rFun˘i⁄Te°
,
chunkDow∆ﬂdTe°Suc˚ss
){

424 
MockExã∫Æ
 
mockexã∫Æ
;

425 
globÆ_mockexã∫Æ_±r
 = &
mockexã∫Æ
;

426 
Devi˚UtûsMock
 
Devi˚Mock
;

427 
g_Devi˚UtûsMock
 = &
Devi˚Mock
;

428 
MockExã∫Æ
 
mock
;

429 
globÆ_mockexã∫Æ_±r
 = &
mock
;

431 
hâpcode
 = -1;

432 *
ãmp
 = "temp";

433 
ªt
 = 0;

434 
FûeDw∆_t
 
fûe
;

435 
	`mem£t
(&
fûe
, '\0', (file));

436 
	`¢¥ötf
(
fûe
.
∑th«me
, (file.pathname),"%s", "/tmp/testfirmware.bin");

437 
ªt
 = 
	`sy°em
("echo \"Content-Length: 1234\" > /tmp/testfirmware.bin.header");

439 
	`EXPECT_CALL
(
Devi˚Mock
,
	`gëFûeSize
(
_
)).
	`WûlRïóãdly
(
	`Rëu∫
(12));

440 
	`EXPECT_CALL
(
Devi˚Mock
, 
	`fûePª£¡Check
(
_
)).
	`WûlRïóãdly
(
	`Rëu∫
(0));

442 
	`EXPECT_CALL
(*
g_Devi˚UtûsMock
, 
	`doCuæInô
()).
	`WûlRïóãdly
(
	`Rëu∫
((*)
ãmp
));

443 
	`EXPECT_CALL
(*
g_Devi˚UtûsMock
, 
	`doSt›Dow∆ﬂd
(
_
)).
	`Times
(2);

444 
	`EXPECT_CALL
(*
globÆ_mockexã∫Æ_±r
, 
	`doHâpFûeDow∆ﬂd
(
_
,_,_,_,_,_)).
	`WûlRïóãdly
(
	`Rëu∫
(0));

446 
	`EXPECT_EQ
(
	`chunkDow∆ﬂd
(&
fûe
, 
NULL
, 0, &
hâpcode
), 0);

447 
ªt
 = 
	`sy°em
("rm -f /tmp/testfirmware.bin.header");

449 
globÆ_mockexã∫Æ_±r
 = 
NULL
;

450 
g_Devi˚UtûsMock
 = &
Devi˚globÆ
;

451 
globÆ_mockexã∫Æ_±r
 = 
NULL
;

452 
	}
}

454 
	$TEST
(
MaöHñ≥rFun˘i⁄Te°
,
chunkDow∆ﬂdFuŒTe°Suc˚ss
){

455 
MockExã∫Æ
 
mockexã∫Æ
;

456 
globÆ_mockexã∫Æ_±r
 = &
mockexã∫Æ
;

457 
Devi˚UtûsMock
 
Devi˚Mock
;

458 
g_Devi˚UtûsMock
 = &
Devi˚Mock
;

459 
MockExã∫Æ
 
mock
;

460 
g_Devi˚UtûsMock
 = &
Devi˚Mock
;

461 
globÆ_mockexã∫Æ_±r
 = &
mock
;

463 
hâpcode
 = -1;

464 *
ãmp
 = "temp";

465 
ªt
 = 0;

466 
FûeDw∆_t
 
fûe
;

467 
	`mem£t
(&
fûe
, '\0', (file));

468 
	`¢¥ötf
(
fûe
.
∑th«me
, (file.pathname),"%s", "/tmp/testfirmware.bin");

469 
ªt
 = 
	`sy°em
("echo \"Content-Length: 1234\" > /tmp/testfirmware.bin.header");

471 
	`EXPECT_CALL
(
Devi˚Mock
,
	`gëFûeSize
(
_
)).
	`WûlRïóãdly
(
	`Rëu∫
(12));

472 
	`EXPECT_CALL
(
Devi˚Mock
, 
	`fûePª£¡Check
(
_
)).
	`WûlRïóãdly
(
	`Rëu∫
(0));

474 
	`EXPECT_CALL
(*
g_Devi˚UtûsMock
, 
	`doCuæInô
()).
	`WûlRïóãdly
(
	`Rëu∫
((*)
ãmp
));

475 
	`EXPECT_CALL
(*
g_Devi˚UtûsMock
, 
	`doSt›Dow∆ﬂd
(
_
)).
	`Times
(2);

476 
	`EXPECT_CALL
(*
globÆ_mockexã∫Æ_±r
, 
	`doHâpFûeDow∆ﬂd
(
_
,_,_,_,_,_)).
	`WûlRïóãdly
(
	`Rëu∫
(33));

478 
	`EXPECT_NE
(
	`chunkDow∆ﬂd
(&
fûe
, 
NULL
, 0, &
hâpcode
), 0);

479 
ªt
 = 
	`sy°em
("rm -f /tmp/testfirmware.bin.header");

481 
globÆ_mockexã∫Æ_±r
 = 
NULL
;

482 
g_Devi˚UtûsMock
 = &
Devi˚globÆ
;

483 
globÆ_mockexã∫Æ_±r
 = 
NULL
;

484 
	}
}

485 
	$TEST
(
MaöHñ≥rFun˘i⁄Te°
,
chunkDow∆ﬂdNŸNìdedTe°
){

486 
MockExã∫Æ
 
mockexã∫Æ
;

487 
globÆ_mockexã∫Æ_±r
 = &
mockexã∫Æ
;

488 
Devi˚UtûsMock
 
Devi˚Mock
;

489 
g_Devi˚UtûsMock
 = &
Devi˚Mock
;

490 
MockExã∫Æ
 
mock
;

491 
g_Devi˚UtûsMock
 = &
Devi˚Mock
;

492 
globÆ_mockexã∫Æ_±r
 = &
mock
;

494 
hâpcode
 = -1;

495 *
ãmp
 = "temp";

496 
ªt
 = 0;

497 
FûeDw∆_t
 
fûe
;

498 
	`mem£t
(&
fûe
, '\0', (file));

499 
	`¢¥ötf
(
fûe
.
∑th«me
, (file.pathname),"%s", "/tmp/testfirmware.bin");

500 
ªt
 = 
	`sy°em
("echo \"Content-Length: 12\" > /tmp/testfirmware.bin.header");

502 
	`EXPECT_CALL
(
Devi˚Mock
,
	`gëFûeSize
(
_
)).
	`WûlRïóãdly
(
	`Rëu∫
(12));

503 
	`EXPECT_CALL
(
Devi˚Mock
, 
	`fûePª£¡Check
(
_
)).
	`WûlRïóãdly
(
	`Rëu∫
(0));

509 
	`EXPECT_EQ
(
	`chunkDow∆ﬂd
(&
fûe
, 
NULL
, 0, &
hâpcode
), 0);

510 
ªt
 = 
	`sy°em
("rm -f /tmp/testfirmware.bin.header");

512 
globÆ_mockexã∫Æ_±r
 = 
NULL
;

513 
g_Devi˚UtûsMock
 = &
Devi˚globÆ
;

514 
globÆ_mockexã∫Æ_±r
 = 
NULL
;

515 
	}
}

516 
	$TEST
(
MaöHñ≥rFun˘i⁄Te°
,
chunkDow∆ﬂdgëfûesizeTe°Faû
){

517 
MockExã∫Æ
 
mockexã∫Æ
;

518 
globÆ_mockexã∫Æ_±r
 = &
mockexã∫Æ
;

519 
Devi˚UtûsMock
 
Devi˚Mock
;

520 
g_Devi˚UtûsMock
 = &
Devi˚Mock
;

521 
MockExã∫Æ
 
mock
;

522 
g_Devi˚UtûsMock
 = &
Devi˚Mock
;

523 
globÆ_mockexã∫Æ_±r
 = &
mock
;

525 
hâpcode
 = -1;

526 *
ãmp
 = "temp";

527 
ªt
 = 0;

528 
FûeDw∆_t
 
fûe
;

529 
	`mem£t
(&
fûe
, '\0', (file));

530 
	`¢¥ötf
(
fûe
.
∑th«me
, (file.pathname),"%s", "/tmp/testfirmware.bin");

531 
ªt
 = 
	`sy°em
("echo \"Content-Length: 1234\" > /tmp/testfirmware.bin.header");

533 
	`EXPECT_CALL
(
Devi˚Mock
,
	`gëFûeSize
(
_
)).
	`WûlRïóãdly
(
	`Rëu∫
(-1));

534 
	`EXPECT_CALL
(
Devi˚Mock
, 
	`fûePª£¡Check
(
_
)).
	`WûlRïóãdly
(
	`Rëu∫
(0));

540 
	`EXPECT_EQ
(
	`chunkDow∆ﬂd
(&
fûe
, 
NULL
, 0, &
hâpcode
), -1);

541 
ªt
 = 
	`sy°em
("rm -f /tmp/testfirmware.bin.header");

543 
globÆ_mockexã∫Æ_±r
 = 
NULL
;

544 
g_Devi˚UtûsMock
 = &
Devi˚globÆ
;

545 
globÆ_mockexã∫Æ_±r
 = 
NULL
;

546 
	}
}

547 
	$TEST
(
MaöHñ≥rFun˘i⁄Te°
,
chunkDow∆ﬂdTe°Faû2
){

548 
MockExã∫Æ
 
mockexã∫Æ
;

549 
globÆ_mockexã∫Æ_±r
 = &
mockexã∫Æ
;

550 
Devi˚UtûsMock
 
Devi˚Mock
;

551 
g_Devi˚UtûsMock
 = &
Devi˚Mock
;

552 
MockExã∫Æ
 
mock
;

553 
g_Devi˚UtûsMock
 = &
Devi˚Mock
;

554 
globÆ_mockexã∫Æ_±r
 = &
mock
;

556 
hâpcode
 = -1;

557 *
ãmp
 = "temp";

559 
FûeDw∆_t
 
fûe
;

560 
	`mem£t
(&
fûe
, '\0', (file));

561 
	`¢¥ötf
(
fûe
.
∑th«me
, (file.pathname),"%s", "/tmp/testfirmware.bin");

564 
	`EXPECT_CALL
(
Devi˚Mock
,
	`gëFûeSize
(
_
)).
	`WûlRïóãdly
(
	`Rëu∫
(12));

565 
	`EXPECT_CALL
(
Devi˚Mock
, 
	`fûePª£¡Check
(
_
)).
	`WûlRïóãdly
(
	`Rëu∫
(1));

571 
	`EXPECT_EQ
(
	`chunkDow∆ﬂd
(&
fûe
, 
NULL
, 0, &
hâpcode
), -1);

574 
globÆ_mockexã∫Æ_±r
 = 
NULL
;

575 
g_Devi˚UtûsMock
 = &
Devi˚globÆ
;

576 
globÆ_mockexã∫Æ_±r
 = 
NULL
;

577 
	}
}

579 
	$TEST
(
°¨tFa˘‹yPrŸe˘Sîvi˚Te°
, 
Rëu∫sZîoWhíSuc˚ssful
) {

581 
MockExã∫Æ
 
mock
;

582 
Devi˚UtûsMock
 
Devi˚Mock
;

583 
g_Devi˚UtûsMock
 = &
Devi˚Mock
;

584 
globÆ_mockexã∫Æ_±r
 = &
mock
;

585 *
ãmp
 = "temp";

587 
	`EXPECT_CALL
(*
g_Devi˚UtûsMock
, 
	`doCuæInô
()).
	`WûlOn˚
(
	`Rëu∫
((*)
ãmp
));

588 
	`EXPECT_CALL
(
mock
, 
	`doCuæPutReque°
(
_
, _, _, _)).
	`WûlOn˚
(
	`DoAŒ
(
SëArgPoöãe
<3>(200), 
	`Rëu∫
(0)));

589 
	`EXPECT_CALL
(*
g_Devi˚UtûsMock
, 
	`doSt›Dow∆ﬂd
(
_
));

592 
	`EXPECT_EQ
(
	`°¨tFa˘‹yPrŸe˘Sîvi˚
(),0);

593 
globÆ_mockexã∫Æ_±r
 = 
NULL
;

594 
g_Devi˚UtûsMock
 = &
Devi˚globÆ
;

595 
	}
}

597 
	$TEST
(
°¨tFa˘‹yPrŸe˘Sîvi˚Te°
, 
Rëu∫smöus⁄eWhíEº‹
) {

599 
MockExã∫Æ
 
mock
;

600 
globÆ_mockexã∫Æ_±r
 = &
mock
;

601 
Devi˚UtûsMock
 
Devi˚Mock
;

602 
g_Devi˚UtûsMock
 = &
Devi˚Mock
;

603 
	`EXPECT_CALL
(*
g_Devi˚UtûsMock
, 
	`doCuæInô
()).
	`WûlOn˚
(
	`Rëu∫
(
NULL
));

606 
	`EXPECT_EQ
(
	`°¨tFa˘‹yPrŸe˘Sîvi˚
(), -1);

607 
globÆ_mockexã∫Æ_±r
 = 
NULL
;

608 
g_Devi˚UtûsMock
 = &
Devi˚globÆ
;

609 
	}
}

639 
	$TEST
(
PîùhîÆFúmw¨eDndlTe°
, 
H™dÀsVÆidI≈ut
) {

641 
MockDow∆ﬂdFûeOps
 
mockdow∆ﬂdfûe›s
;

642 
globÆ_mockdow∆ﬂdfûe›s_±r
 = &
mockdow∆ﬂdfûe›s
;

643 
Devi˚UtûsMock
 
Devi˚Mock
;

644 
g_Devi˚UtûsMock
 = &
Devi˚Mock
;

646 *
pCloudFWLoˇti⁄
 = "http://example.com";

647 *
pPîùhîÆFúmw¨es
 = "firmware1,firmware2";

648 
	`EXPECT_CALL
(
mockdow∆ﬂdfûe›s
, 
	`dow∆ﬂdFûe
(
_
,_,_,_,_)).
	`WûlRïóãdly
(
	`Rëu∫
(0));

649 
	`EXPECT_CALL
(
mockdow∆ﬂdfûe›s
, 
	`codebigdow∆ﬂdFûe
(
_
,_,_,_,_)).
	`WûlRïóãdly
(
	`Rëu∫
(
CODEBIG_SIGNING_FAILED
));

651 
	`EXPECT_CALL
(
Devi˚Mock
,
	`gëFûeSize
(
_
)).
	`WûlRïóãdly
(
	`Rëu∫
(-1));

652 
ªsu…
 = 
	`≥rùhîÆ_fúmw¨e_dndl
(
pCloudFWLoˇti⁄
, 
pPîùhîÆFúmw¨es
);

654 
	`EXPECT_EQ
(
ªsu…
, -1);

655 
globÆ_mockdow∆ﬂdfûe›s_±r
 = 
NULL
;

656 
g_Devi˚UtûsMock
 = &
Devi˚globÆ
;

657 
	}
}

659 
	$TEST
(
PîùhîÆFúmw¨eDndlTe°
, 
H™dÀsVÆidI≈ut404
) {

661 
MockDow∆ﬂdFûeOps
 
mockdow∆ﬂdfûe›s
;

662 
globÆ_mockdow∆ﬂdfûe›s_±r
 = &
mockdow∆ﬂdfûe›s
;

664 *
pCloudFWLoˇti⁄
 = "http://example.com";

665 *
pPîùhîÆFúmw¨es
 = "firmware1,firmware2";

666 
	`EXPECT_CALL
(
mockdow∆ﬂdfûe›s
, 
	`dow∆ﬂdFûe
(
_
,_,_,_,_)).
	`WûlRïóãdly
(
	`Rëu∫
(
HTTP_PAGE_NOT_FOUND
));

667 
	`EXPECT_CALL
(
mockdow∆ﬂdfûe›s
, 
	`codebigdow∆ﬂdFûe
(
_
,_,_,_,_)).
	`WûlRïóãdly
(
	`Rëu∫
(0));

668 
ªsu…
 = 
	`≥rùhîÆ_fúmw¨e_dndl
(
pCloudFWLoˇti⁄
, 
pPîùhîÆFúmw¨es
);

671 
	`EXPECT_EQ
(
ªsu…
, -1);

672 
globÆ_mockdow∆ﬂdfûe›s_±r
 = 
NULL
;

675 
	}
}

706 
	$TEST
(
checkTriggîUpgødeTe°
, 
Rëu∫sZîoWhíSuc˚ssful
) {

708 
MockFun˘i⁄sI¡î«l
 
mock
;

709 
MockExã∫Æ
 
mockexã∫Æ
;

710 
MockDow∆ﬂdFûeOps
 
mockdow∆ﬂdfûe›s
;

712 
globÆ_mockexã∫Æ_±r
 = &
mockexã∫Æ
;

713 
globÆ_mockdow∆ﬂdfûe›s_±r
 = &
mockdow∆ﬂdfûe›s
;

716 
	`EXPECT_CALL
(
mockdow∆ﬂdfûe›s
, 
	`dow∆ﬂdFûe
(
_
,_,_,_,_)).
	`WûlRïóãdly
(
	`Rëu∫
(0));

719 
XCONFRES
 
ª•⁄£
;

722 
ªsu…
 = 
	`checkTriggîUpgøde
(&
ª•⁄£
, "testModel");

725 
	`EXPECT_EQ
(
ªsu…
, 0);

726 
globÆ_mockexã∫Æ_±r
 = 
NULL
;

727 
globÆ_mockdow∆ﬂdfûe›s_±r
 = 
NULL
;

728 
	}
}

730 
	$TEST
(
checkTriggîUpgødeTe°
, 
Te°FaûNuŒ
) {

731 
XCONFRES
 
ª•⁄£
;

732 
ªsu…
 = 
	`checkTriggîUpgøde
(&
ª•⁄£
, 
NULL
);

733 
	`EXPECT_EQ
(
ªsu…
, -1);

734 
	}
}

735 
	$TEST
(
checkTriggîUpgødeTe°
, 
Rëu∫sZîoWhíSuc˚ssful404
) {

737 
MockFun˘i⁄sI¡î«l
 
mock
;

738 
MockExã∫Æ
 
mockexã∫Æ
;

739 
MockDow∆ﬂdFûeOps
 
mockdow∆ﬂdfûe›s
;

741 
globÆ_mockexã∫Æ_±r
 = &
mockexã∫Æ
;

742 
globÆ_mockdow∆ﬂdfûe›s_±r
 = &
mockdow∆ﬂdfûe›s
;

745 
	`EXPECT_CALL
(
mockdow∆ﬂdfûe›s
, 
	`dow∆ﬂdFûe
(
_
,_,_,_,_)).
	`WûlRïóãdly
(
	`Rëu∫
(
HTTP_PAGE_NOT_FOUND
));

748 
XCONFRES
 
ª•⁄£
;

751 
ªsu…
 = 
	`checkTriggîUpgøde
(&
ª•⁄£
, "testModel");

754 
	`EXPECT_EQ
(
ªsu…
, 0);

755 
globÆ_mockexã∫Æ_±r
 = 
NULL
;

756 
globÆ_mockdow∆ﬂdfûe›s_±r
 = 
NULL
;

757 
	}
}

759 
	$TEST
(
checkTriggîUpgødeTe°
, 
Te°VÆidPciUpgødeSuc˚ss
) {

760 
MockExã∫Æ
 
mockexã∫Æ
;

761 
globÆ_mockexã∫Æ_±r
 = &
mockexã∫Æ
;

762 
Devi˚UtûsMock
 
Devi˚Mock
;

763 
g_Devi˚UtûsMock
 = &
Devi˚Mock
;

764 
MockDow∆ﬂdFûeOps
 
mockdow∆ﬂdfûe›s
;

765 
globÆ_mockdow∆ﬂdfûe›s_±r
 = &
mockdow∆ﬂdfûe›s
;

767 
XCONFRES
 
ª•⁄£
;

768 
	`mem£t
(&
ª•⁄£
, '\0', (response));

769 
	`°∫˝y
(
ª•⁄£
.
˛oudFWVîsi⁄
, "testModel.bin", 13);

770 
	`°∫˝y
(
ª•⁄£
.
˛oudFWFûe
, "testModel.bin", 13);

771 
	`°∫˝y
(
ª•⁄£
.
˛oudPDRIVîsi⁄
, "testModel_PDRI_.bin", 19);

772 
	`°∫˝y
(
ª•⁄£
.
˛oudImmedüãReboŸFœg
, "true", 4);

773 
	`EXPECT_CALL
(
mockexã∫Æ
,
	`checkF‹VÆidPCIUpgøde
(
_
,_,_,_)).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(
åue
));

774 
	`EXPECT_CALL
(
Devi˚Mock
, 
	`gëDevi˚Pr›îtyD©a
(
_
,_,_)).
	`WûlRïóãdly
(
	`Rëu∫
(0));

775 
	`EXPECT_CALL
(
mockexã∫Æ
,
	`upd©eFWDow∆ﬂdSètus
(
_
,_)).
	`Times
(1);

776 
	`EXPECT_CALL
(
mockexã∫Æ
, 
	`isPDRIE«bÀ
()).
	`WûlOn˚
(
	`Rëu∫
(
åue
));

777 
	`EXPECT_CALL
(
mockdow∆ﬂdfûe›s
, 
	`dow∆ﬂdFûe
(
_
,_,_,_,_)).
	`WûlRïóãdly
(
	`Rëu∫
(0));

778 
ªsu…
 = 
	`checkTriggîUpgøde
(&
ª•⁄£
, "testModel");

779 
	`EXPECT_EQ
(
ªsu…
, 0);

780 
globÆ_mockexã∫Æ_±r
 = 
NULL
;

781 
globÆ_mockdow∆ﬂdfûe›s_±r
 = 
NULL
;

782 
	}
}

783 
	$TEST
(
checkTriggîUpgødeTe°
, 
Te°PdriUpgødeSuc˚ss
) {

784 
MockExã∫Æ
 
mockexã∫Æ
;

785 
globÆ_mockexã∫Æ_±r
 = &
mockexã∫Æ
;

786 
Devi˚UtûsMock
 
Devi˚Mock
;

787 
g_Devi˚UtûsMock
 = &
Devi˚Mock
;

788 
MockDow∆ﬂdFûeOps
 
mockdow∆ﬂdfûe›s
;

789 
globÆ_mockdow∆ﬂdfûe›s_±r
 = &
mockdow∆ﬂdfûe›s
;

791 
XCONFRES
 
ª•⁄£
;

792 
	`mem£t
(&
ª•⁄£
, '\0', (response));

793 
	`°∫˝y
(
ª•⁄£
.
˛oudFWVîsi⁄
, "testModel.bin", 13);

794 
	`°∫˝y
(
ª•⁄£
.
˛oudFWFûe
, "testModel.bin", 13);

795 
	`°∫˝y
(
ª•⁄£
.
˛oudPDRIVîsi⁄
, "testModel_PDRI_.bin", 19);

796 
	`°∫˝y
(
ª•⁄£
.
˛oudImmedüãReboŸFœg
, "false", 4);

797 
	`EXPECT_CALL
(
mockexã∫Æ
,
	`checkF‹VÆidPCIUpgøde
(
_
,_,_,_)).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(
åue
));

798 
	`EXPECT_CALL
(
Devi˚Mock
, 
	`gëDevi˚Pr›îtyD©a
(
_
,_,_)).
	`WûlRïóãdly
(
	`Rëu∫
(0));

799 
	`EXPECT_CALL
(
mockexã∫Æ
,
	`upd©eFWDow∆ﬂdSètus
(
_
,_)).
	`Times
(1);

800 
	`EXPECT_CALL
(
mockexã∫Æ
, 
	`isPDRIE«bÀ
()).
	`WûlOn˚
(
	`Rëu∫
(
åue
));

801 
	`EXPECT_CALL
(
mockdow∆ﬂdfûe›s
, 
	`dow∆ﬂdFûe
(
_
,_,_,_,_)).
	`WûlRïóãdly
(
	`Rëu∫
(0));

802 
ªsu…
 = 
	`checkTriggîUpgøde
(&
ª•⁄£
, "testModel");

803 
	`EXPECT_EQ
(
ªsu…
, 0);

804 
globÆ_mockexã∫Æ_±r
 = 
NULL
;

805 
globÆ_mockdow∆ﬂdfûe›s_±r
 = 
NULL
;

806 
	}
}

808 
	$TEST
(
MaöHñ≥rFun˘i⁄Te°
, 
ÁŒBackTe°NULL
){

809 
	`EXPECT_EQ
(
	`ÁŒBack
(1, 
NULL
, NULL, NULL, NULL), -1);

810 
	}
}

812 
	$TEST
(
MaöHñ≥rFun˘i⁄Te°
, 
ÁŒBackTe°Suc˚ss
){

813 
MockDow∆ﬂdFûeOps
 
mockfûe›s
;

814 
globÆ_mockdow∆ﬂdfûe›s_±r
 = &
mockfûe›s
;

815 
hâp_code
 = 200;

816 
	`EXPECT_CALL
(
mockfûe›s
, 
	`dow∆ﬂdFûe
(
_
,_,_,_,_)).
	`Times
(1).
	`WûlOn˚
(
ã°ög
::
	`Rëu∫
(
CURL_SUCCESS
));

817 
	`EXPECT_EQ
(
	`ÁŒBack
(
HTTP_XCONF_DIRECT
, "ã°", "ã°1", "ã°2", &
hâp_code
), 
CURL_SUCCESS
);

818 
globÆ_mockdow∆ﬂdfûe›s_±r
 = 
NULL
;

819 
	}
}

821 
	$TEST
(
MaöHñ≥rFun˘i⁄Te°
, 
ÁŒBackTe°Faûuª
){

822 
MockDow∆ﬂdFûeOps
 
mockfûe›s
;

823 
globÆ_mockdow∆ﬂdfûe›s_±r
 = &
mockfûe›s
;

824 
hâp_code
 = 200;

825 
	`EXPECT_CALL
(
mockfûe›s
, 
	`dow∆ﬂdFûe
(
_
,_,_,_,_)).
	`Times
(1).
	`WûlOn˚
(
ã°ög
::
	`Rëu∫
(!
CURL_SUCCESS
));

826 
	`EXPECT_EQ
(
	`ÁŒBack
(
HTTP_XCONF_DIRECT
, "ã°", "ã°1", "ã°2", &
hâp_code
), !
CURL_SUCCESS
);

827 
globÆ_mockdow∆ﬂdfûe›s_±r
 = 
NULL
;

828 
	}
}

830 
	$TEST
(
MaöHñ≥rFun˘i⁄Te°
, 
ÁŒBackTe°Suc˚ssCodebig
){

831 
MockDow∆ﬂdFûeOps
 
mockfûe›s
;

832 
globÆ_mockdow∆ﬂdfûe›s_±r
 = &
mockfûe›s
;

833 
hâp_code
 = 200;

834 
	`EXPECT_CALL
(
mockfûe›s
, 
	`codebigdow∆ﬂdFûe
(
_
,_,_,_,_)).
	`Times
(1).
	`WûlOn˚
(
ã°ög
::
	`Rëu∫
(
CURL_SUCCESS
));

835 
	`EXPECT_EQ
(
	`ÁŒBack
(
HTTP_SSR_CODEBIG
, "ã°", "ã°1", "ã°2", &
hâp_code
), 
CURL_SUCCESS
);

836 
globÆ_mockdow∆ﬂdfûe›s_±r
 = 
NULL
;

837 
	}
}

839 
	$TEST
(
MaöHñ≥rFun˘i⁄Te°
, 
ÁŒBackTe°FaûuªCodebig
){

840 
MockDow∆ﬂdFûeOps
 
mockfûe›s
;

841 
globÆ_mockdow∆ﬂdfûe›s_±r
 = &
mockfûe›s
;

842 
hâp_code
 = 200;

843 
	`EXPECT_CALL
(
mockfûe›s
, 
	`codebigdow∆ﬂdFûe
(
_
,_,_,_,_)).
	`Times
(1).
	`WûlOn˚
(
ã°ög
::
	`Rëu∫
(!
CURL_SUCCESS
));

844 
	`EXPECT_EQ
(
	`ÁŒBack
(
HTTP_SSR_CODEBIG
, "ã°", "ã°1", "ã°2", &
hâp_code
), !
CURL_SUCCESS
);

845 
globÆ_mockdow∆ﬂdfûe›s_±r
 = 
NULL
;

846 
	}
}

848 
	$TEST
(
MaöHñ≥rFun˘i⁄Te°
, 
upd©eUpgødeFœg1
){

849 
	`°r˝y
(
devi˚_öfo
.
dev_ty≥
,"mediaclient\0");

850 
	`upd©eUpgødeFœg
(1);

851 
	`EXPECT_EQ
(
	`ac˚ss
("/tmp/.imageD∆dInProgªss", 
F_OK
), 0);

852 
	}
}

854 
	$TEST
(
MaöHñ≥rFun˘i⁄Te°
, 
upd©eUpgødeFœg11
){

855 
	`°r˝y
(
devi˚_öfo
.
dev_ty≥
,"mediaclien1t\0");

856 
	`upd©eUpgødeFœg
(1);

857 
	`EXPECT_EQ
(
	`ac˚ss
(
HTTP_CDL_FLAG
, 
F_OK
), 0);

858 
	}
}

860 
	$TEST
(
MaöHñ≥rFun˘i⁄Te°
, 
upd©eUpgødeFœg2
){

861 
	`°r˝y
(
devi˚_öfo
.
dev_ty≥
,"mediaclient\0");

862 
	`upd©eUpgødeFœg
(2);

863 
	`EXPECT_EQ
(
	`ac˚ss
("/tmp/.imageD∆dInProgªss", 
F_OK
), -1);

864 
	}
}

866 
	$TEST
(
MaöHñ≥rFun˘i⁄Te°
, 
upd©eUpgødeFœg22
){

867 
	`°r˝y
(
devi˚_öfo
.
dev_ty≥
,"mediaclien1t\0");

868 
	`upd©eUpgødeFœg
(2);

869 
	`EXPECT_EQ
(
	`ac˚ss
(
HTTP_CDL_FLAG
, 
F_OK
), -1);

870 
	}
}

872 
	$TEST
(
MaöHñ≥rFun˘i⁄Te°
,
unöôülizeTe°
){

873 
MockExã∫Æ
 
mockexã∫Æ
;

874 
globÆ_mockexã∫Æ_±r
 = &
mockexã∫Æ
;

875 
	`EXPECT_CALL
(
mockexã∫Æ
,
	`t2_unöô
()).
	`Times
(1);

876 
	`EXPECT_CALL
(
mockexã∫Æ
,
	`log_exô
()).
	`Times
(1);

877 
	`unöôülize
(
INITIAL_VALIDATION_DWNL_INPROGRESS
);

878 
globÆ_mockexã∫Æ_±r
 = 
NULL
;

879 
	}
}

882 
	$TEST
(
MaöHñ≥rFun˘i⁄Te°
,
öôülizeTe°
){

883 
MockExã∫Æ
 
mockexã∫Æ
;

884 
globÆ_mockexã∫Æ_±r
 = &
mockexã∫Æ
;

885 
	`EXPECT_CALL
(
mockexã∫Æ
,
	`gëDevi˚Pr›îtõs
(
_
)).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(-1));

886 
	`EXPECT_EQ
(
	`öôülize
(), -1);

887 
globÆ_mockexã∫Æ_±r
 = 
NULL
;

888 
	}
}

890 
	$TEST
(
MaöHñ≥rFun˘i⁄Te°
,
öôülizeTe°1
){

891 
MockExã∫Æ
 
mockexã∫Æ
;

892 
globÆ_mockexã∫Æ_±r
 = &
mockexã∫Æ
;

893 
	`EXPECT_CALL
(
mockexã∫Æ
,
	`gëDevi˚Pr›îtõs
(
_
)).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(0));

894 
	`EXPECT_CALL
(
mockexã∫Æ
,
	`gëImageDëaûs
(
_
)).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(0));

895 
	`EXPECT_CALL
(
mockexã∫Æ
,
	`gëRFCSëtögs
(
_
)).
	`Times
(1);

896 
	`EXPECT_CALL
(
mockexã∫Æ
,
	`öô_evít_h™dÀr
()).
	`Times
(1);

897 
	`°r˝y
(
devi˚_öfo
.
maöt_°©us
,"true");

898 
	`EXPECT_EQ
(
	`öôülize
(), 1);

899 
globÆ_mockexã∫Æ_±r
 = 
NULL
;

900 
	}
}

902 
	$TEST
(
MaöHñ≥rFun˘i⁄Te°
,
ßveHTTPCodeTe°
){

903 
	`ßveHTTPCode
(200);

904 
	`fÊush
(
NULL
);

905 
buff
[16] = {0};

906 
FILE
 *
Â
 = 
NULL
;

907 
Â
 = 
	`f›í
(
HTTP_CODE_FILE
, "r");

908 i‡(
Â
 !
NULL
) {

909 
	`¥ötf
("File open success\n");

910 (
	`fgës
(
buff
, (buff), 
Â
)Ë!
NULL
) {

911 
	`¥ötf
("A·îÑód bu‡%s\n",
buff
);

913 
	`f˛o£
(
Â
);

916 
	`EXPECT_EQ
(
	`©oi
(
buff
), 200);

917 
	`ªmove
(
HTTP_CODE_FILE
);

918 
	}
}

920 
	$TEST
(
MaöHñ≥rFun˘i⁄Te°
, 
H™dÀsN‹mÆCa£1
) {

922 c⁄° * 
fûíame
 = "/tmp/testfile.txt";

924 c⁄° * 
c⁄ã¡
 = "softwareoptout IGNORE_UPDATE \0\r\n";

925 
FILE
 *
fOut
 = 
	`f›í
 (
fûíame
, "w");

926 i‡(
fOut
 !
NULL
) {

927 i‡(
	`Âuts
 (
c⁄ã¡
, 
fOut
Ë=
EOF
) {

928 
	`¥ötf
 ("File writeÇot successful\n");

930 
	`¥ötf
 ("closingÅhe file\n");

931 
	`fÊush
(
fOut
);

932 
	`f˛o£
 (
fOut
);

934 
ªsu…
 = 
	`gëOPTOUTVÆue
(
fûíame
);

935 
	`EXPECT_EQ
(
ªsu…
, 1);

936 
	`ªmove
(
fûíame
);

937 
	}
}

939 
	$TEST
(
MaöHñ≥rFun˘i⁄Te°
, 
H™dÀsN‹mÆCa£0
) {

941 c⁄° * 
fûíame
 = "/tmp/testfile.txt";

943 c⁄° * 
c⁄ã¡
 = "softwareoptout ENFORCE_OPTOUT \0\r\n";

944 
FILE
 *
fOut
 = 
	`f›í
 (
fûíame
, "w");

945 i‡(
fOut
 !
NULL
) {

946 i‡(
	`Âuts
 (
c⁄ã¡
, 
fOut
Ë=
EOF
) {

947 
	`¥ötf
 ("File writeÇot successful\n");

949 
	`¥ötf
 ("closingÅhe file\n");

950 
	`fÊush
(
fOut
);

951 
	`f˛o£
 (
fOut
);

953 
ªsu…
 = 
	`gëOPTOUTVÆue
(
fûíame
);

954 
	`EXPECT_EQ
(
ªsu…
, 0);

955 
	`ªmove
(
fûíame
);

956 
	}
}

958 
	$TEST
(
MaöHñ≥rFun˘i⁄Te°
, 
H™dÀsNuŒFûíame
) {

959 
ªsu…
 = 
	`gëOPTOUTVÆue
(
NULL
);

960 
	`EXPECT_EQ
(
ªsu…
, -1);

961 
	}
}

963 
	$TEST
(
MaöHñ≥rFun˘i⁄Te°
,
ÊashImageTe°NuŒ
){

964 
	`EXPECT_EQ
(
	`ÊashImage
(
NULL
, NULL, "false", "2", 0, "false"), -1);

965 
	}
}

966 
	$TEST
(
MaöHñ≥rFun˘i⁄Te°
,
ÊashImageTe°
){

967 
MockExã∫Æ
 
mockexã∫Æ
;

968 
globÆ_mockexã∫Æ_±r
 = &
mockexã∫Æ
;

969 
Devi˚UtûsMock
 
Devi˚Mock
;

970 
g_Devi˚UtûsMock
 = &
Devi˚Mock
;

972 
	`EXPECT_CALL
(
mockexã∫Æ
,
	`isMedüClõ¡Devi˚
()).
	`WûlOn˚
(
	`Rëu∫
(
åue
));

973 
	`EXPECT_CALL
(
Devi˚Mock
, 
	`fûePª£¡Check
(
_
)).
	`WûlRïóãdly
(
	`Rëu∫
(0));

974 
	`EXPECT_CALL
(
mockexã∫Æ
,
	`evítM™agî
(
_
,_)).
	`WûlRïóãdly
(
	`Rëu∫
());

975 
	`EXPECT_CALL
(
mockexã∫Æ
,
	`upd©eFWDow∆ﬂdSètus
(
_
,_)).
	`Times
(1);

976 
	`EXPECT_CALL
(
Devi˚Mock
, 
	`gëDevi˚Pr›îtyD©a
(
_
,_,_)).
	`WûlRïóãdly
(
	`Rëu∫
(0));

978 
	`EXPECT_EQ
(
	`ÊashImage
("fwdl.com", "/tmp/firmware.bin", "false", "2", 0, "false"), 0);

979 
globÆ_mockexã∫Æ_±r
 = 
NULL
;

980 
	}
}

981 
	$TEST
(
MaöHñ≥rFun˘i⁄Te°
,
ÊashImageTe°RedSèã
){

982 
MockExã∫Æ
 
mockexã∫Æ
;

983 
globÆ_mockexã∫Æ_±r
 = &
mockexã∫Æ
;

984 
Devi˚UtûsMock
 
Devi˚Mock
;

985 
g_Devi˚UtûsMock
 = &
Devi˚Mock
;

987 
	`EXPECT_CALL
(
mockexã∫Æ
,
	`isMedüClõ¡Devi˚
()).
	`WûlOn˚
(
	`Rëu∫
(
åue
));

988 
	`EXPECT_CALL
(
Devi˚Mock
, 
	`fûePª£¡Check
(
_
)).
	`WûlRïóãdly
(
	`Rëu∫
(0));

989 
	`EXPECT_CALL
(
mockexã∫Æ
,
	`evítM™agî
(
_
,_)).
	`WûlRïóãdly
(
	`Rëu∫
());

990 
	`EXPECT_CALL
(
mockexã∫Æ
,
	`upd©eFWDow∆ﬂdSètus
(
_
,_)).
	`Times
(1);

991 
	`EXPECT_CALL
(
Devi˚Mock
, 
	`gëDevi˚Pr›îtyD©a
(
_
,_,_)).
	`WûlRïóãdly
(
	`Rëu∫
(0));

992 
	`EXPECT_CALL
(
Devi˚Mock
, 
	`isInSèãRed
()).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(
åue
));

994 
	`EXPECT_EQ
(
	`ÊashImage
("fwdl.com", "/tmp/firmware.bin", "false", "2", 0, "false"), 0);

995 
globÆ_mockexã∫Æ_±r
 = 
NULL
;

996 
	}
}

997 
	$TEST
(
MaöHñ≥rFun˘i⁄Te°
,
ÊashImageTe°Faû
){

998 
MockExã∫Æ
 
mockexã∫Æ
;

999 
globÆ_mockexã∫Æ_±r
 = &
mockexã∫Æ
;

1000 
Devi˚UtûsMock
 
Devi˚Mock
;

1001 
g_Devi˚UtûsMock
 = &
Devi˚Mock
;

1003 
	`EXPECT_CALL
(
mockexã∫Æ
,
	`isMedüClõ¡Devi˚
()).
	`WûlOn˚
(
	`Rëu∫
(
åue
));

1004 
	`EXPECT_CALL
(
Devi˚Mock
, 
	`fûePª£¡Check
(
_
)).
	`WûlRïóãdly
(
	`Rëu∫
(0));

1005 
	`EXPECT_CALL
(
mockexã∫Æ
,
	`evítM™agî
(
_
,_)).
	`WûlRïóãdly
(
	`Rëu∫
());

1006 
	`EXPECT_CALL
(
Devi˚Mock
,
	`v_£cuª_sy°em
(
_
,_,_)).
	`WûlRïóãdly
(
	`Rëu∫
(1));

1007 
	`EXPECT_CALL
(
mockexã∫Æ
,
	`upd©eFWDow∆ﬂdSètus
(
_
,_)).
	`Times
(1);

1008 
	`EXPECT_CALL
(
Devi˚Mock
, 
	`gëDevi˚Pr›îtyD©a
(
_
,_,_)).
	`WûlRïóãdly
(
	`Rëu∫
(0));

1010 
	`EXPECT_EQ
(
	`ÊashImage
("fwdl.com", "/tmp/firmware.bin", "false", "2", 0, "false"), 1);

1011 
globÆ_mockexã∫Æ_±r
 = 
NULL
;

1012 
	}
}

1013 
	$TEST
(
MaöHñ≥rFun˘i⁄Te°
,
ÊashImageTe°Faû1
){

1014 
MockExã∫Æ
 
mockexã∫Æ
;

1015 
globÆ_mockexã∫Æ_±r
 = &
mockexã∫Æ
;

1016 
Devi˚UtûsMock
 
Devi˚Mock
;

1017 
g_Devi˚UtûsMock
 = &
Devi˚Mock
;

1019 
	`EXPECT_CALL
(
mockexã∫Æ
,
	`isMedüClõ¡Devi˚
()).
	`WûlOn˚
(
	`Rëu∫
(
Ál£
));

1020 
	`EXPECT_CALL
(
Devi˚Mock
, 
	`fûePª£¡Check
(
_
)).
	`WûlRïóãdly
(
	`Rëu∫
(0));

1021 
	`EXPECT_CALL
(
mockexã∫Æ
,
	`evítM™agî
(
_
,_)).
	`WûlRïóãdly
(
	`Rëu∫
());

1022 
	`EXPECT_CALL
(
Devi˚Mock
,
	`v_£cuª_sy°em
(
_
,_,_)).
	`WûlRïóãdly
(
	`Rëu∫
(1));

1023 
	`EXPECT_CALL
(
mockexã∫Æ
,
	`upd©eFWDow∆ﬂdSètus
(
_
,_)).
	`Times
(1);

1024 
	`EXPECT_CALL
(
Devi˚Mock
, 
	`gëDevi˚Pr›îtyD©a
(
_
,_,_)).
	`WûlRïóãdly
(
	`Rëu∫
(0));

1026 
	`EXPECT_EQ
(
	`ÊashImage
("fwdl.com", "/tmp/firmware.bin", "false", "2", 0, "false"), 1);

1027 
globÆ_mockexã∫Æ_±r
 = 
NULL
;

1028 
	}
}

1029 
	$TEST
(
MaöHñ≥rFun˘i⁄Te°
,
ÊashImageTe°Faû2
){

1030 
MockExã∫Æ
 
mockexã∫Æ
;

1031 
globÆ_mockexã∫Æ_±r
 = &
mockexã∫Æ
;

1032 
Devi˚UtûsMock
 
Devi˚Mock
;

1033 
g_Devi˚UtûsMock
 = &
Devi˚Mock
;

1035 
	`EXPECT_CALL
(
mockexã∫Æ
,
	`isMedüClõ¡Devi˚
()).
	`WûlOn˚
(
	`Rëu∫
(
åue
));

1036 
	`EXPECT_CALL
(
Devi˚Mock
, 
	`fûePª£¡Check
(
_
)).
	`WûlRïóãdly
(
	`Rëu∫
(0));

1037 
	`EXPECT_CALL
(
mockexã∫Æ
,
	`evítM™agî
(
_
,_)).
	`WûlRïóãdly
(
	`Rëu∫
());

1038 
	`EXPECT_CALL
(
Devi˚Mock
,
	`v_£cuª_sy°em
(
_
,_,_)).
	`WûlRïóãdly
(
	`Rëu∫
(1));

1039 
	`EXPECT_CALL
(
mockexã∫Æ
,
	`upd©eFWDow∆ﬂdSètus
(
_
,_)).
	`Times
(1);

1040 
	`EXPECT_CALL
(
Devi˚Mock
, 
	`gëDevi˚Pr›îtyD©a
(
_
,_,_)).
	`WûlRïóãdly
(
	`Rëu∫
(1));

1042 
	`EXPECT_EQ
(
	`ÊashImage
("fwdl.com", "/tmp/firmware.bin", "false", "2", 0, "false"), 1);

1043 
globÆ_mockexã∫Æ_±r
 = 
NULL
;

1044 
	}
}

1045 
	$TEST
(
MaöHñ≥rFun˘i⁄Te°
,
ÊashImageTe°ReboŸTrue
){

1046 
MockExã∫Æ
 
mockexã∫Æ
;

1047 
globÆ_mockexã∫Æ_±r
 = &
mockexã∫Æ
;

1048 
Devi˚UtûsMock
 
Devi˚Mock
;

1049 
g_Devi˚UtûsMock
 = &
Devi˚Mock
;

1051 
	`EXPECT_CALL
(
mockexã∫Æ
,
	`isMedüClõ¡Devi˚
()).
	`WûlOn˚
(
	`Rëu∫
(
åue
));

1052 
	`EXPECT_CALL
(
Devi˚Mock
, 
	`fûePª£¡Check
(
_
)).
	`WûlRïóãdly
(
	`Rëu∫
(0));

1053 
	`EXPECT_CALL
(
mockexã∫Æ
,
	`evítM™agî
(
_
,_)).
	`WûlRïóãdly
(
	`Rëu∫
());

1054 
	`EXPECT_CALL
(
mockexã∫Æ
,
	`upd©eFWDow∆ﬂdSètus
(
_
,_)).
	`Times
(1);

1055 
	`EXPECT_CALL
(
Devi˚Mock
, 
	`gëDevi˚Pr›îtyD©a
(
_
,_,_)).
	`WûlRïóãdly
(
	`Rëu∫
(0));

1057 
	`EXPECT_EQ
(
	`ÊashImage
("fwdl.com", "/tmp/firmware.bin", "true", "2", 0, "false"), 0);

1058 
globÆ_mockexã∫Æ_±r
 = 
NULL
;

1059 
	}
}

1060 
	$TEST
(
MaöHñ≥rFun˘i⁄Te°
,
ÊashImageTe°Pdri
){

1061 
MockExã∫Æ
 
mockexã∫Æ
;

1062 
globÆ_mockexã∫Æ_±r
 = &
mockexã∫Æ
;

1063 
Devi˚UtûsMock
 
Devi˚Mock
;

1064 
g_Devi˚UtûsMock
 = &
Devi˚Mock
;

1066 
	`EXPECT_CALL
(
mockexã∫Æ
,
	`isMedüClõ¡Devi˚
()).
	`WûlOn˚
(
	`Rëu∫
(
åue
));

1067 
	`EXPECT_CALL
(
Devi˚Mock
, 
	`fûePª£¡Check
(
_
)).
	`WûlRïóãdly
(
	`Rëu∫
(0));

1068 
	`EXPECT_CALL
(
mockexã∫Æ
,
	`evítM™agî
(
_
,_)).
	`WûlRïóãdly
(
	`Rëu∫
());

1069 
	`EXPECT_CALL
(
mockexã∫Æ
,
	`upd©eFWDow∆ﬂdSètus
(
_
,_)).
	`Times
(1);

1070 
	`EXPECT_CALL
(
Devi˚Mock
, 
	`gëDevi˚Pr›îtyD©a
(
_
,_,_)).
	`WûlRïóãdly
(
	`Rëu∫
(0));

1072 
	`EXPECT_EQ
(
	`ÊashImage
("fwdl.com", "/tmp/firmware.bin", "false", "2", 1, "false"), 0);

1073 
globÆ_mockexã∫Æ_±r
 = 
NULL
;

1074 
	}
}

1076 
	$TEST
(
MaöHñ≥rFun˘i⁄Te°
,
ÊashImageTe°MaötTrue
){

1077 
MockExã∫Æ
 
mockexã∫Æ
;

1078 
globÆ_mockexã∫Æ_±r
 = &
mockexã∫Æ
;

1079 
Devi˚UtûsMock
 
Devi˚Mock
;

1080 
g_Devi˚UtûsMock
 = &
Devi˚Mock
;

1082 
	`EXPECT_CALL
(
mockexã∫Æ
,
	`isMedüClõ¡Devi˚
()).
	`WûlOn˚
(
	`Rëu∫
(
åue
));

1083 
	`EXPECT_CALL
(
Devi˚Mock
, 
	`fûePª£¡Check
(
_
)).
	`WûlRïóãdly
(
	`Rëu∫
(0));

1084 
	`EXPECT_CALL
(
mockexã∫Æ
,
	`evítM™agî
(
_
,_)).
	`WûlRïóãdly
(
	`Rëu∫
());

1085 
	`EXPECT_CALL
(
mockexã∫Æ
,
	`upd©eFWDow∆ﬂdSètus
(
_
,_)).
	`Times
(1);

1086 
	`EXPECT_CALL
(
Devi˚Mock
, 
	`gëDevi˚Pr›îtyD©a
(
_
,_,_)).
	`WûlRïóãdly
(
	`Rëu∫
(0));

1088 
	`EXPECT_EQ
(
	`ÊashImage
("fwdl.com", "/tmp/firmware.bin", "true", "2", 0, "true"), 0);

1089 
globÆ_mockexã∫Æ_±r
 = 
NULL
;

1090 
	}
}

1091 
	$TEST
(
MaöHñ≥rFun˘i⁄Te°
,
ÊashImageTe°MaötFÆ£
){

1092 
MockExã∫Æ
 
mockexã∫Æ
;

1093 
globÆ_mockexã∫Æ_±r
 = &
mockexã∫Æ
;

1094 
Devi˚UtûsMock
 
Devi˚Mock
;

1095 
g_Devi˚UtûsMock
 = &
Devi˚Mock
;

1097 
	`EXPECT_CALL
(
mockexã∫Æ
,
	`isMedüClõ¡Devi˚
()).
	`WûlOn˚
(
	`Rëu∫
(
åue
));

1098 
	`EXPECT_CALL
(
Devi˚Mock
, 
	`fûePª£¡Check
(
_
)).
	`WûlRïóãdly
(
	`Rëu∫
(0));

1099 
	`EXPECT_CALL
(
mockexã∫Æ
,
	`evítM™agî
(
_
,_)).
	`WûlRïóãdly
(
	`Rëu∫
());

1100 
	`EXPECT_CALL
(
mockexã∫Æ
,
	`upd©eFWDow∆ﬂdSètus
(
_
,_)).
	`Times
(1);

1101 
	`EXPECT_CALL
(
Devi˚Mock
, 
	`gëDevi˚Pr›îtyD©a
(
_
,_,_)).
	`WûlRïóãdly
(
	`Rëu∫
(0));

1103 
	`EXPECT_EQ
(
	`ÊashImage
("fwdl.com", "/tmp/firmware.bin", "true", "2", 0, "false"), 0);

1104 
globÆ_mockexã∫Æ_±r
 = 
NULL
;

1105 
	}
}

1106 
	$TEST
(
MaöHñ≥rFun˘i⁄Te°
,
gëXc⁄fResTe°
){

1107 
XCONFRES
 
ª•⁄£
;

1108 
d©a
[] = "{\"firmwareDownloadProtocol\":\"http\",\"firmwareFilename\":\"HS_VBN_24_sprint_20240725233056sdy_NG-signed.bin\",\"firmwareLocation\":\"https://cdlserver.tv/Images\",\"firmwareVersion\":\"HS_VBN_24_sprint_20240725233056sdy_NG\",\"rebootImmediately\":false}";

1109 *
ª•⁄£
.
˛oudFWFûe
 = 0;

1110 *
ª•⁄£
.
˛oudFWLoˇti⁄
 = 0;

1111 *
ª•⁄£
.
ùv6˛oudFWLoˇti⁄
 = 0;

1112 *
ª•⁄£
.
˛oudFWVîsi⁄
 = 0;

1113 *
ª•⁄£
.
˛oudDñayDow∆ﬂd
 = 0;

1114 *
ª•⁄£
.
˛oudPrŸo
 = 0;

1115 *
ª•⁄£
.
˛oudImmedüãReboŸFœg
 = 0;

1116 *
ª•⁄£
.
≥rùhîÆFúmw¨es
 = 0;

1117 *
ª•⁄£
.
dlCîtBundÀ
 = 0;

1118 *
ª•⁄£
.
˛oudPDRIVîsi⁄
 = 0;

1119 
cout
 << 
d©a
 << 
ídl
;

1120 
	`EXPECT_EQ
(
	`gëXc⁄fRe•D©a
(&
ª•⁄£
, 
d©a
), 0);

1121 
	}
}

1122 
	$TEST
(
MaöHñ≥rFun˘i⁄Te°
,
gëXc⁄fResTe°NuŒ
){

1123 
XCONFRES
 
ª•⁄£
;

1124 
d©a
[] = "{\"firmwareDownloadProtocol\":\"http\",\"firmwareFilename\":\"HS_VBN_24_sprint_20240725233056sdy_NG-signed.bin\",\"firmwareLocation\":\"https://cdlserver.tv/Images\",\"firmwareVersion\":\"HS_VBN_24_sprint_20240725233056sdy_NG\",\"rebootImmediately\":false}";

1125 *
ª•⁄£
.
˛oudFWFûe
 = 0;

1126 *
ª•⁄£
.
˛oudFWLoˇti⁄
 = 0;

1127 *
ª•⁄£
.
ùv6˛oudFWLoˇti⁄
 = 0;

1128 *
ª•⁄£
.
˛oudFWVîsi⁄
 = 0;

1129 *
ª•⁄£
.
˛oudDñayDow∆ﬂd
 = 0;

1130 *
ª•⁄£
.
˛oudPrŸo
 = 0;

1131 *
ª•⁄£
.
˛oudImmedüãReboŸFœg
 = 0;

1132 *
ª•⁄£
.
≥rùhîÆFúmw¨es
 = 0;

1133 *
ª•⁄£
.
dlCîtBundÀ
 = 0;

1134 *
ª•⁄£
.
˛oudPDRIVîsi⁄
 = 0;

1135 
cout
 << 
d©a
 << 
ídl
;

1136 
	`EXPECT_EQ
(
	`gëXc⁄fRe•D©a
(
NULL
, 
d©a
), -1);

1137 
	}
}

1138 
	$TEST
(
MaöHñ≥rFun˘i⁄Te°
,
gëXc⁄fResTe°NuŒ1
){

1139 
XCONFRES
 
ª•⁄£
;

1140 *
ª•⁄£
.
˛oudFWFûe
 = 0;

1141 *
ª•⁄£
.
˛oudFWLoˇti⁄
 = 0;

1142 *
ª•⁄£
.
ùv6˛oudFWLoˇti⁄
 = 0;

1143 *
ª•⁄£
.
˛oudFWVîsi⁄
 = 0;

1144 *
ª•⁄£
.
˛oudDñayDow∆ﬂd
 = 0;

1145 *
ª•⁄£
.
˛oudPrŸo
 = 0;

1146 *
ª•⁄£
.
˛oudImmedüãReboŸFœg
 = 0;

1147 *
ª•⁄£
.
≥rùhîÆFúmw¨es
 = 0;

1148 *
ª•⁄£
.
dlCîtBundÀ
 = 0;

1149 *
ª•⁄£
.
˛oudPDRIVîsi⁄
 = 0;

1150 
	`EXPECT_EQ
(
	`gëXc⁄fRe•D©a
(&
ª•⁄£
, 
NULL
), -1);

1151 
	}
}

1153 
	$TEST
(
MaöHñ≥rFun˘i⁄Te°
,
Pro˚ssResTe°
){

1154 
XCONFRES
 
ª•⁄£
;

1155 
d©a
[] = "{\"firmwareDownloadProtocol\":\"http\",\"firmwareFilename\":\"HS_VBN_24_sprint_20240725233056sdy_NG-signed.bin\",\"additionalFwVerInfo\":\"HS_VBN_PDRI_20240725233056sdy_NG\",\"firmwareLocation\":\"https://cdlserver.tv/Images\",\"firmwareVersion\":\"HS_VBN_24_sprint_20240725233056sdy_NG\",\"rebootImmediately\":false}";

1156 *
ª•⁄£
.
˛oudFWFûe
 = 0;

1157 *
ª•⁄£
.
˛oudFWLoˇti⁄
 = 0;

1158 *
ª•⁄£
.
ùv6˛oudFWLoˇti⁄
 = 0;

1159 *
ª•⁄£
.
˛oudFWVîsi⁄
 = 0;

1160 *
ª•⁄£
.
˛oudDñayDow∆ﬂd
 = 0;

1161 *
ª•⁄£
.
˛oudPrŸo
 = 0;

1162 *
ª•⁄£
.
˛oudImmedüãReboŸFœg
 = 0;

1163 *
ª•⁄£
.
≥rùhîÆFúmw¨es
 = 0;

1164 *
ª•⁄£
.
dlCîtBundÀ
 = 0;

1165 *
ª•⁄£
.
˛oudPDRIVîsi⁄
 = 0;

1166 
cout
 << 
d©a
 << 
ídl
;

1167 
	`gëXc⁄fRe•D©a
(&
ª•⁄£
, 
d©a
);

1168 
	`EXPECT_EQ
(
	`¥o˚ssJs⁄Re•⁄£
(&
ª•⁄£
, "1234.bin","HS", "true"), 0);

1169 
	}
}

1170 
	$TEST
(
MaöHñ≥rFun˘i⁄Te°
,
Pro˚ssResTe°MaötFÆ£
){

1171 
XCONFRES
 
ª•⁄£
;

1172 
d©a
[] = "{\"firmwareDownloadProtocol\":\"http\",\"firmwareFilename\":\"HS_VBN_24_sprint_20240725233056sdy_NG-signed.bin\",\"additionalFwVerInfo\":\"HS_VBN_PDRI_20240725233056sdy_NG\",\"firmwareLocation\":\"https://cdlserver.tv/Images\",\"firmwareVersion\":\"HS_VBN_24_sprint_20240725233056sdy_NG\",\"rebootImmediately\":false}";

1173 *
ª•⁄£
.
˛oudFWFûe
 = 0;

1174 *
ª•⁄£
.
˛oudFWLoˇti⁄
 = 0;

1175 *
ª•⁄£
.
ùv6˛oudFWLoˇti⁄
 = 0;

1176 *
ª•⁄£
.
˛oudFWVîsi⁄
 = 0;

1177 *
ª•⁄£
.
˛oudDñayDow∆ﬂd
 = 0;

1178 *
ª•⁄£
.
˛oudPrŸo
 = 0;

1179 *
ª•⁄£
.
˛oudImmedüãReboŸFœg
 = 0;

1180 *
ª•⁄£
.
≥rùhîÆFúmw¨es
 = 0;

1181 *
ª•⁄£
.
dlCîtBundÀ
 = 0;

1182 *
ª•⁄£
.
˛oudPDRIVîsi⁄
 = 0;

1183 
cout
 << 
d©a
 << 
ídl
;

1184 
	`gëXc⁄fRe•D©a
(&
ª•⁄£
, 
d©a
);

1185 
	`EXPECT_EQ
(
	`¥o˚ssJs⁄Re•⁄£
(&
ª•⁄£
, "1234.bin","HS", "false"), 0);

1186 
	}
}

1187 
	$TEST
(
MaöHñ≥rFun˘i⁄Te°
,
Pro˚ssResTe°NuŒ
){

1188 
	`EXPECT_EQ
(
	`¥o˚ssJs⁄Re•⁄£
(
NULL
, NULL,NULL, NULL), -1);

1189 
	}
}

1190 
	$TEST
(
MaöHñ≥rFun˘i⁄Te°
,
öôülVÆid©i⁄Te°Suc˚ss
){

1191 
MockExã∫Æ
 
mockexã∫Æ
;

1192 
globÆ_mockexã∫Æ_±r
 = &
mockexã∫Æ
;

1193 
Devi˚UtûsMock
 
Devi˚Mock
;

1194 
g_Devi˚UtûsMock
 = &
Devi˚Mock
;

1195 
	`EXPECT_CALL
(
Devi˚Mock
, 
	`ªad_RFCPr›îty
(
_
,_,_,_)).
	`WûlRïóãdly
(
	`Rëu∫
(1));

1196 
	`EXPECT_CALL
(
mockexã∫Æ
, 
	`CuºítRu¬ögIn°
(
_
)).
	`WûlRïóãdly
(
	`Rëu∫
(
Ál£
));

1197 
	`EXPECT_CALL
(
Devi˚Mock
, 
	`fûePª£¡Check
(
_
)).
	`WûlRïóãdly
(
	`Rëu∫
(0));

1198 
	`EXPECT_EQ
(
	`öôülVÆid©i⁄
(), 3);

1199 
	}
}

1200 
	$TEST
(
MaöHñ≥rFun˘i⁄Te°
,
öôülVÆid©i⁄Te°Faû
){

1201 
MockExã∫Æ
 
mockexã∫Æ
;

1202 
globÆ_mockexã∫Æ_±r
 = &
mockexã∫Æ
;

1203 
Devi˚UtûsMock
 
Devi˚Mock
;

1204 
g_Devi˚UtûsMock
 = &
Devi˚Mock
;

1205 
	`EXPECT_CALL
(
Devi˚Mock
, 
	`ªad_RFCPr›îty
(
_
,_,_,_)).
	`WûlRïóãdly
(
	`Rëu∫
(-1));

1206 
	`EXPECT_CALL
(
Devi˚Mock
, 
	`fûePª£¡Check
(
_
)).
	`WûlRïóãdly
(
	`Rëu∫
(1));

1207 
	`EXPECT_CALL
(
mockexã∫Æ
, 
	`CuºítRu¬ögIn°
(
_
)).
	`WûlRïóãdly
(
	`Rëu∫
(
Ál£
));

1208 
	`EXPECT_EQ
(
	`öôülVÆid©i⁄
(), 0);

1209 
	}
}

1210 
	$TEST
(
MaöHñ≥rFun˘i⁄Te°
,
öôülVÆid©i⁄Te°Faû1
){

1211 
ªt
 = 0;

1212 
MockExã∫Æ
 
mockexã∫Æ
;

1213 
globÆ_mockexã∫Æ_±r
 = &
mockexã∫Æ
;

1214 
Devi˚UtûsMock
 
Devi˚Mock
;

1215 
g_Devi˚UtûsMock
 = &
Devi˚Mock
;

1216 
	`EXPECT_CALL
(
Devi˚Mock
, 
	`ªad_RFCPr›îty
(
_
,_,_,_)).
	`WûlRïóãdly
(
	`Rëu∫
(-1));

1217 
	`EXPECT_CALL
(
Devi˚Mock
, 
	`fûePª£¡Check
(
_
)).
	`WûlOn˚
(
	`Rëu∫
(1)).
	`WûlRïóãdly
(Return(0));

1218 
	`EXPECT_CALL
(
mockexã∫Æ
, 
	`CuºítRu¬ögIn°
(
_
)).
	`WûlRïóãdly
(
	`Rëu∫
(
Ál£
));

1219 
	`EXPECT_EQ
(
	`öôülVÆid©i⁄
(), 0);

1220 
ªt
 = 
	`sy°em
("rm -rf /tmp/DIFD.pid");

1221 
	}
}

1222 
	$TEST
(
MaöHñ≥rFun˘i⁄Te°
,
öôülVÆid©i⁄Te°I≈rogªss
){

1223 
Devi˚UtûsMock
 
Devi˚Mock
;

1224 
g_Devi˚UtûsMock
 = &
Devi˚Mock
;

1225 
MockExã∫Æ
 
mockexã∫Æ
;

1226 
globÆ_mockexã∫Æ_±r
 = &
mockexã∫Æ
;

1227 
	`EXPECT_CALL
(
Devi˚Mock
, 
	`ªad_RFCPr›îty
(
_
,_,_,_)).
	`WûlRïóãdly
(
	`Rëu∫
(1));

1228 
	`EXPECT_CALL
(
mockexã∫Æ
, 
	`CuºítRu¬ögIn°
(
_
)).
	`WûlRïóãdly
(
	`Rëu∫
(
åue
));

1229 
	`EXPECT_EQ
(
	`öôülVÆid©i⁄
(), 2);

1230 
	}
}

1231 
	$TEST
(
MaöHñ≥rFun˘i⁄Te°
,
c›yFûeTe°Faû
){

1232 
	`EXPECT_EQ
(
	`c›yFûe
(
NULL
, NULL), -1);

1233 
	}
}

1234 
	$TEST
(
MaöHñ≥rFun˘i⁄Te°
,
c›yFûeTe°Suc˚ss
){

1235 *
§c
 = "/tmp/src.txt";

1236 *
d°
 = "/tmp/dst.txt";

1237 
ªt
 = 0;

1238 
ªt
 = 
	`sy°em
("echo \"tesing\" > /tmp/src.txt");

1239 
	`EXPECT_EQ
(
	`c›yFûe
(
§c
, 
d°
), 0);

1240 
ªt
 = 
	`sy°em
("rm -f /tmp/src.txt");

1241 
ªt
 = 
	`sy°em
("rm -f /tmp/dst.txt");

1242 
	}
}

1243 
GTEST_API_
 
	$maö
(
¨gc
, *
¨gv
[]){

1244 
ã°ªsu…s_fuŒfûï©h
[
GTEST_REPORT_FILEPATH_SIZE
];

1245 
buf„r
[
GTEST_REPORT_FILEPATH_SIZE
];

1247 
	`mem£t
–
ã°ªsu…s_fuŒfûï©h
, 0, 
GTEST_REPORT_FILEPATH_SIZE
 );

1248 
	`mem£t
–
buf„r
, 0, 
GTEST_REPORT_FILEPATH_SIZE
 );

1250 
	`¢¥ötf
–
ã°ªsu…s_fuŒfûï©h
, 
GTEST_REPORT_FILEPATH_SIZE
, "js⁄:%s%s" , 
GTEST_DEFAULT_RESULT_FILEPATH
 , 
GTEST_DEFAULT_RESULT_FILENAME
);

1251 ::
ã°ög
::
	`GTEST_FLAG
(
ouçut
Ë
ã°ªsu…s_fuŒfûï©h
;

1252 ::
ã°ög
::
	`InôGoogÀTe°
(&
¨gc
, 
¨gv
);

1254 
cout
 << "Sèπög GTEST MAIN ===========================>" << 
ídl
;

1255  
	`RUN_ALL_TESTS
();

1256 
	}
}

	@unittest/device_status_helper_gtest.cpp

19 
	~<gã°/gã°.h
>

20 
	~<gmock/gmock.h
>

21 
	~"js⁄_¥o˚ss.h
"

22 
	~<io°ªam
>

23 
	~<uni°d.h
>

26 
	~"devi˚_°©us_hñ≥r.h
"

27 
	~"dow∆ﬂd_°©us_hñ≥r.h
"

28 
	~"rfcöãrÁ˚.h
"

30 
	~"mocks/devi˚_°©us_hñ≥r_mock.h
"

32 
	#JSON_STR_LEN
 1000

	)

33 
Rfc_t
 
rfc_li°
;

35 
	#GTEST_DEFAULT_RESULT_FILEPATH
 "/tmp/Gã°_Rï‹t/"

	)

36 
	#GTEST_DEFAULT_RESULT_FILENAME
 "RdkFwDw∆d_Devi˚StsHÕr_gã°_ªp‹t.js⁄"

	)

37 
	#GTEST_REPORT_FILEPATH_SIZE
 256

	)

39 
usög
 
«me•a˚
 
	gã°ög
;

40 
usög
 
«me•a˚
 
	g°d
;

41 
	gusög
 ::
ã°ög
::
Rëu∫
;

42 
	gusög
 ::
ã°ög
::
SåEq
;

45 
Devi˚SètusMock
 *
	gg_Devi˚SètusMock
 = 
NULL
;

47 ˛as†
	cCª©eJs⁄Te°Fixtuª
 : 
public
 ::
ã°ög
::
Te°
 {

48 
¥Ÿe˘ed
:

49 
Devi˚SètusMock
 
mockDevi˚Sètus
;

51 
	$Cª©eJs⁄Te°Fixtuª
()

53 
g_Devi˚SètusMock
 = &
mockDevi˚Sètus
;

55 
vútuÆ
 ~
	$Cª©eJs⁄Te°Fixtuª
()

57 
g_Devi˚SètusMock
 = 
NULL
;

58 
	}
}

60 
vútuÆ
 
	$SëUp
()

62 
	`¥ötf
("%s\n", 
__func__
);

63 
	}
}

65 
vútuÆ
 
	$TórDown
()

67 
	`¥ötf
("%s\n", 
__func__
);

68 
	}
}

70 
	$SëUpTe°Ca£
()

72 
	`¥ötf
("%s\n", 
__func__
);

73 
	}
}

75 
	$TórDownTe°Ca£
()

77 
	`¥ötf
("%s\n", 
__func__
);

78 
	}
}

82 
	$TEST_F
(
Cª©eJs⁄Te°Fixtuª
, 
Te°Name_checkPDRIUpgøde_NuŒ
)

84 
	`EXPECT_EQ
(
	`checkPDRIUpgøde
(
NULL
), 
Ál£
);

85 
	}
}

86 
	$TEST_F
(
Cª©eJs⁄Te°Fixtuª
, 
Te°Name_checkPDRIUpgøde_nŸrq
)

88 
pdri_image
[] = "Test_pdri.bin";

89 
	`EXPECT_CALL
(*
g_Devi˚SètusMock
, 
	`gëDevi˚Pr›îtyD©a
(
_
, _, _)).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(0));

90 
	`EXPECT_CALL
(*
g_Devi˚SètusMock
, 
	`GëPDRIFûeName
(
_
, _))

91 .
	`Times
(1)

92 .
	`WûlOn˚
(
	`Invoke
([&
pdri_image
]–*
pPDRIFûíame
, 
size_t
 
szBufSize
 ) {

93 
	`°∫˝y
(
pPDRIFûíame
, 
pdri_image
, 
szBufSize
 - 1);

94 
pPDRIFûíame
[
szBufSize
 - 1] = '\0';

95  
	`°æí
(
pPDRIFûíame
);

97 
	`EXPECT_EQ
(
	`checkPDRIUpgøde
(
pdri_image
), 
Ál£
);

98 
	}
}

99 
	$TEST_F
(
Cª©eJs⁄Te°Fixtuª
, 
Te°Name_checkPDRIUpgøde_rq
)

101 
pdri_image
[] = "Test_pdri.bin";

102 
	`EXPECT_CALL
(*
g_Devi˚SètusMock
, 
	`gëDevi˚Pr›îtyD©a
(
_
, _, _)).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(0));

103 
	`EXPECT_CALL
(*
g_Devi˚SètusMock
, 
	`GëPDRIFûeName
(
_
, _))

104 .
	`Times
(1)

105 .
	`WûlOn˚
(
	`Invoke
([&
pdri_image
]–*
pPDRIFûíame
, 
size_t
 
szBufSize
 ) {

106 
	`°∫˝y
(
pPDRIFûíame
, 
pdri_image
, 
szBufSize
 - 1);

107 
pPDRIFûíame
[
szBufSize
 - 1] = '\0';

108  
	`°æí
(
pPDRIFûíame
);

110 
	`EXPECT_EQ
(
	`checkPDRIUpgøde
("Te°_Ál£_pdri.bö"), 
åue
);

111 
	}
}

112 
	$TEST_F
(
Cª©eJs⁄Te°Fixtuª
, 
Te°Name_GëPDRIVîsi⁄_NuŒCheck
)

114 
	`EXPECT_EQ
(
	`GëPDRIVîsi⁄
(
NULL
, 0), 
Ál£
);

115 
	}
}

116 
	$TEST_F
(
Cª©eJs⁄Te°Fixtuª
, 
Te°Name_GëPDRIVîsi⁄
)

118 
pdri_image
[] = "Test_pdri.bin";

119 
pdri_image_d©a
[64] = {0};

120 
	`EXPECT_CALL
(*
g_Devi˚SètusMock
, 
	`gëDevi˚Pr›îtyD©a
(
_
, _, _)).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(0));

121 
	`EXPECT_CALL
(*
g_Devi˚SètusMock
, 
	`GëPDRIFûeName
(
_
, _))

122 .
	`Times
(1)

123 .
	`WûlOn˚
(
	`Invoke
([&
pdri_image
]–*
pPDRIFûíame
, 
size_t
 
szBufSize
 ) {

124 
	`°∫˝y
(
pPDRIFûíame
, 
pdri_image
, 
szBufSize
 - 1);

125 
pPDRIFûíame
[
szBufSize
 - 1] = '\0';

126  
	`°æí
(
pPDRIFûíame
);

128 
	`EXPECT_EQ
(
	`GëPDRIVîsi⁄
(
pdri_image_d©a
, ’dri_image_d©a)), 
åue
);

129 
	}
}

130 
	$TEST_F
(
Cª©eJs⁄Te°Fixtuª
, 
Te°Name_isPDRIE«bÀ
)

132 
	`EXPECT_CALL
(*
g_Devi˚SètusMock
, 
	`gëDevi˚Pr›îtyD©a
(
_
, _, _)).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(0));

133 
	`EXPECT_EQ
(
	`isPDRIE«bÀ
(), 
åue
);

134 
	}
}

135 
	$TEST_F
(
Cª©eJs⁄Te°Fixtuª
, 
Te°Name
) {

137 
	`EXPECT_CALL
(*
g_Devi˚SètusMock
, 
	`gëDevi˚Pr›îtyD©a
(
_
, _, _)).
	`Times
(3).
	`WûlRïóãdly
(
	`Rëu∫
(0));

138 
ex≥˘edD©a
[] = "AA:bb:cc:dd";

139 
	`EXPECT_CALL
(*
g_Devi˚SètusMock
, 
	`GëE°bMac
(
_
, _))

140 .
	`Times
(1)

141 .
	`WûlOn˚
(
	`Invoke
([&
ex≥˘edD©a
](* 
pE°bMac
, 
size_t
 
szBufSize
) {

142 
	`°∫˝y
(
pE°bMac
, 
ex≥˘edD©a
, 
szBufSize
 - 1);

143 
pE°bMac
[
szBufSize
 - 1] = '\0';

144  
	`°æí
(
pE°bMac
);

146 
	`EXPECT_CALL
(*
g_Devi˚SètusMock
, 
	`GëFúmw¨eVîsi⁄
 (
_
, _)).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(20));

147 
pdri_img
[] = "Comcat-Gtest-pdri.bin";

148 
	`EXPECT_CALL
(*
g_Devi˚SètusMock
, 
	`GëAddôi⁄ÆFwVîInfo
(
_
, _))

149 .
	`Times
(1)

150 .
	`WûlOn˚
(
	`Invoke
([&
pdri_img
](*
pAddôi⁄ÆFwVîInfo
, 
size_t
 
szBufSize
) {

151 
	`°∫˝y
(
pAddôi⁄ÆFwVîInfo
, 
pdri_img
, 
szBufSize
 - 1);

152 
pAddôi⁄ÆFwVîInfo
[
szBufSize
 - 1] = '\0';

153  
	`°æí
(
pAddôi⁄ÆFwVîInfo
);

155 
	`EXPECT_CALL
(*
g_Devi˚SètusMock
, 
	`GëBuûdTy≥
 (
_
, _, _)).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(4));

156 
	`EXPECT_CALL
(*
g_Devi˚SètusMock
, 
	`GëModñNum
 (
_
, _)).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(5));

157 
	`EXPECT_CALL
(*
g_Devi˚SètusMock
, 
	`GëMFRName
 (
_
, _)).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(7));

158 
	`EXPECT_CALL
(*
g_Devi˚SètusMock
, 
	`GëP¨äîId
 (
_
, _)).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(6));

159 
	`EXPECT_CALL
(*
g_Devi˚SètusMock
, 
	`GëOsCœss
 (
_
, _)).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(2));

160 
	`EXPECT_CALL
(*
g_Devi˚SètusMock
, 
	`GëEx≥rõn˚
 (
_
, _)).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(2));

161 
	`EXPECT_CALL
(*
g_Devi˚SètusMock
, 
	`GëAccou¡ID
 (
_
, _)).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(18));

162 
	`EXPECT_CALL
(*
g_Devi˚SètusMock
, 
	`GëSîülNum
 (
_
, _)).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(18));

163 
	`EXPECT_CALL
(*
g_Devi˚SètusMock
, 
	`GëUTCTime
 (
_
, _)).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(6));

164 
	`EXPECT_CALL
(*
g_Devi˚SètusMock
, 
	`GëIn°ÆÀdBundÀs
 (
_
, _)).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(7));

165 
	`EXPECT_CALL
(*
g_Devi˚SètusMock
, 
	`GëRdmM™i„°Vîsi⁄
 (
_
, _)).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(19));

166 
	`EXPECT_CALL
(*
g_Devi˚SètusMock
, 
	`GëTimez⁄e
 (
_
, _, _)).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(7));

167 
	`EXPECT_CALL
(*
g_Devi˚SètusMock
, 
	`GëC≠abûôõs
 (
_
, _)).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(2));

168 
	`EXPECT_CALL
(*
g_Devi˚SètusMock
, 
	`fûePª£¡Check
 (
_
)).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(0));

170 *
pJSONSå
 = 
NULL
;

171 
pJSONSå
 = (*Ë
	`mÆloc
(
JSON_STR_LEN
);

172 
size_t
 
szPo°FõldOut
 = 
JSON_STR_LEN
;

173 
size_t
 
ªsu…
 = 0;

174 i‡(
pJSONSå
 !
NULL
) {

175 
cout
 << "CÆlög cª©eJs⁄Såög==================>" << 
ídl
;

176 
ªsu…
 = 
	`¸óãJs⁄Såög
(
pJSONSå
, 
szPo°FõldOut
);

177 
	`EXPECT_NE
(
ªsu…
, 0);

179 i‡(
pJSONSå
 !
NULL
) {

180 
	`‰ì
(
pJSONSå
);

181 
pJSONSå
 = 
NULL
;

183 
	}
}

185 
	$TEST_F
(
Cª©eJs⁄Te°Fixtuª
, 
Te°Name_CheckIProuãC⁄√˘ivôy_NuŒCheck
)

187 
	`EXPECT_EQ
(
	`CheckIProuãC⁄√˘ivôy
(
NULL
), 
Ál£
);

188 
	}
}

189 
	$TEST_F
(
Cª©eJs⁄Te°Fixtuª
, 
Te°Name_CheckIProuãC⁄√˘ivôy_suc˚ss
)

191 
	`EXPECT_CALL
(*
g_Devi˚SètusMock
, 
	`isC⁄√˘edToI¡î√t
()).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(
åue
));

192 
	`EXPECT_CALL
(*
g_Devi˚SètusMock
, 
	`fûePª£¡Check
 (
_
)).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(0));

193 
	`EXPECT_EQ
(
	`CheckIProuãC⁄√˘ivôy
("TEST.txt"), 
åue
);

194 
	}
}

195 
	$TEST_F
(
Cª©eJs⁄Te°Fixtuª
, 
Te°Name_CheckIProuãC⁄√˘ivôy_ofÊöe
)

197 
	`EXPECT_CALL
(*
g_Devi˚SètusMock
, 
	`isC⁄√˘edToI¡î√t
()).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(
Ál£
));

198 
	`EXPECT_CALL
(*
g_Devi˚SètusMock
, 
	`fûePª£¡Check
 (
_
)).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(0));

199 
	`EXPECT_EQ
(
	`CheckIProuãC⁄√˘ivôy
("TEST.txt"), 
Ál£
);

200 
	}
}

201 
	$TEST_F
(
Cª©eJs⁄Te°Fixtuª
, 
Te°Name_CheckIProuãC⁄√˘ivôy_Áû
)

203 
	`EXPECT_CALL
(*
g_Devi˚SètusMock
, 
	`isC⁄√˘edToI¡î√t
()).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(
Ál£
));

204 
	`EXPECT_CALL
(*
g_Devi˚SètusMock
, 
	`fûePª£¡Check
 (
_
)).
	`Times
(5).
	`WûlRïóãdly
(
	`Rëu∫
(1));

205 
	`EXPECT_EQ
(
	`CheckIProuãC⁄√˘ivôy
("TEST.txt"), 
Ál£
);

206 
	}
}

212 
	$TEST_F
(
Cª©eJs⁄Te°Fixtuª
, 
Te°Name_isDñayFWDow∆ﬂdA˘ive_no
)

215 
	`EXPECT_EQ
(
	`isDñayFWDow∆ﬂdA˘ive
(1, "åue", 5), 
åue
);

216 
	}
}

237 
	$TEST
(
Te°CuºítRu¬ögIn°
, 
Te°Name_NULLCheck
)

239 
	`EXPECT_EQ
(
	`CuºítRu¬ögIn°
(
NULL
), 
Ál£
);

240 
	}
}

241 
	$TEST
(
Te°CuºítRu¬ögIn°
, 
Te°Name_FûePª£¡
)

243 
ªt
;

244 
ªt
 = 
	`sy°em
("echo \"24\" > /tmp/runInst.txt");

245 
ªt
 = 
	`sy°em
("echo \"rdkvfwupgrader 0 1\" > /tmp/cmdline.txt");

246 
	`EXPECT_EQ
(
	`CuºítRu¬ögIn°
("/tmp/runIn°.txt"), 
åue
);

247 
	}
}

248 
	$TEST
(
Te°CuºítRu¬ögIn°
, 
Te°Name_FûePª£¡Wr⁄gD©a
)

250 
ªt
;

251 
ªt
 = 
	`sy°em
("echo \"xyz 0 1\" > /tmp/cmdline.txt");

252 
	`EXPECT_EQ
(
	`CuºítRu¬ögIn°
("/tmp/runIn°.txt"), 
Ál£
);

253 
	}
}

254 
	$TEST
(
Te°CuºítRu¬ögIn°
, 
Te°Name_FûeNŸPª£¡
)

256 
ªt
;

257 
ªt
 = 
	`sy°em
("rm /tmp/runInst.txt");

258 
ªt
 = 
	`sy°em
("rm /tmp/cmdline.txt");

259 
	`EXPECT_EQ
(
	`CuºítRu¬ögIn°
("/tmp/runIn°.txt"), 
Ál£
);

260 
	}
}

261 
	$TEST
(
Te°isDnsResﬁve
, 
Te°Name_NULLCheck
)

263 
	`EXPECT_EQ
(
	`isDnsResﬁve
(
NULL
), 
Ál£
);

264 
	}
}

265 
	$TEST
(
Te°isDnsResﬁve
, 
Te°Name_FûePª£¡
)

267 
ªt
;

268 
ªt
 = 
	`sy°em
("echo \"nameserver:2345:34:56\" > /tmp/dnsResolv.txt");

269 
	`EXPECT_EQ
(
	`isDnsResﬁve
("/tmp/dnsResﬁv.txt"), 
åue
);

270 
	}
}

271 
	$TEST
(
Te°isDnsResﬁve
, 
Te°Name_FûePª£¡WôhInfo
)

273 
ªt
;

274 
ªt
 = 
	`sy°em
("echo \"server:2345:34:56\" > /tmp/dnsResolv.txt");

275 
	`EXPECT_EQ
(
	`isDnsResﬁve
("/tmp/dnsResﬁv.txt"), 
Ál£
);

276 
	}
}

277 
	$TEST
(
Te°isDnsResﬁve
, 
Te°Name_FûeNŸPª£¡
)

279 
ªt
;

280 
ªt
 = 
	`sy°em
("rm /tmp/dnsResolv.txt");

281 
	`EXPECT_EQ
(
	`isDnsResﬁve
("/tmp/dnsResﬁv.txt"), 
Ál£
);

282 
	}
}

283 
	$TEST
(
Te°œ°Dw∆Img
, 
Te°Name_BigBuf„r
)

286 
	`EXPECT_EQ
(
	`œ°Dw∆Img
(
NULL
, 128), 
Ál£
);

287 
	}
}

289 
	$TEST
(
Te°œ°Dw∆Img
, 
Te°Name_Suc˚ss
)

291 
buf
[16] = {0};

292 
ªt
 = 0;

293 
ªt
 = 
	`sy°em
("echo \"TestLastImage.bin\" > /opt/cdl_flashed_file_name");

294 
	`EXPECT_EQ
(
	`œ°Dw∆Img
(
buf
, (buf)), 
åue
);

295 
ªt
 = 
	`sy°em
("rm -f /opt/cdl_flashed_file_name");

296 
	}
}

297 
	$TEST
(
Te°œ°Dw∆Img
, 
Te°Name_Suc˚ss1
)

299 
buf
[16] = {0};

300 
	`EXPECT_EQ
(
	`œ°Dw∆Img
(
buf
, (buf)), 
åue
);

301 
	}
}

302 
	$TEST
(
Te°cuºítImg
, 
Te°Name_BigBuf„r
)

304 
	`EXPECT_EQ
(
	`cuºítImg
(
NULL
, 128), 
Ál£
);

305 
	}
}

306 
	$TEST
(
Te°cuºítImg
, 
Te°Name_Suc˚ss
)

308 
buf
[16] = {0};

309 
ªt
 = 0;

310 
ªt
 = 
	`sy°em
("echo \"TestImage.bin\" > /tmp/currently_running_image_name");

311 
	`EXPECT_EQ
(
	`cuºítImg
(
buf
, (buf)), 
åue
);

312 
ªt
 = 
	`sy°em
("rm -f /tmp/currently_running_image_name");

313 
	}
}

314 
	$TEST
(
Te°cuºítImg
, 
Te°Name_Suc˚ss1
)

316 
buf
[16] = {0};

317 
	`EXPECT_EQ
(
	`cuºítImg
(
buf
, (buf)), 
åue
);

318 
	}
}

319 
	$TEST
(
Te°¥evFœshedFûe
, 
Te°Name_BigBuf„r
)

321 
	`EXPECT_EQ
(
	`¥evFœshedFûe
(
NULL
, 128), 
Ál£
);

322 
	}
}

323 
	$TEST
(
Te°¥evFœshedFûe
, 
Te°Name_Suc˚ss
)

325 
buf
[16] = {0};

326 
ªt
 = 0;

327 
ªt
 = 
	`sy°em
("echo \"TestPrevImage.bin\" > /opt/previous_flashed_file_name");

328 
	`EXPECT_EQ
(
	`¥evFœshedFûe
(
buf
, (buf)), 
åue
);

329 
ªt
 = 
	`sy°em
("rm -f /opt/previous_flashed_file_name");

330 
	}
}

331 
	$TEST
(
Te°¥evFœshedFûe
, 
Te°Name_Suc˚ss1
)

333 
buf
[16] = {0};

334 
	`EXPECT_EQ
(
	`¥evFœshedFûe
(
buf
, (buf)), 
åue
);

335 
	}
}

336 
	$TEST
(
Te°checkF‹VÆidPCIUpgøde
, 
Te°Name_checkF‹VÆidPCIUpgøde_NuŒCheck
)

338 
	`EXPECT_EQ
(
	`checkF‹VÆidPCIUpgøde
(1, 
NULL
, NULL, NULL), 
Ál£
);

339 
	}
}

340 
	$TEST
(
Te°checkF‹VÆidPCIUpgøde
, 
Te°Name_checkF‹VÆidPCIUpgøde_Áûpdri
)

343 
	`EXPECT_EQ
(
	`checkF‹VÆidPCIUpgøde
(1, "123", "123_PDRI_34", "123_PDRI_34"), 
Ál£
);

344 
	}
}

345 
	$TEST
(
Te°checkF‹VÆidPCIUpgøde
, 
Te°Name_checkF‹VÆidPCIUpgøde_Suc˚ss
)

348 
	`EXPECT_EQ
(
	`checkF‹VÆidPCIUpgøde
(1, "pciimage.bö", "pciimage.bö", "pciimage.bö"), 
åue
);

349 
	}
}

350 
	$TEST
(
Te°checkF‹VÆidPCIUpgøde
, 
Te°Name_checkF‹VÆidPCIUpgøde_Suc˚ss1
)

353 
	`EXPECT_EQ
(
	`checkF‹VÆidPCIUpgøde
(1, "Te°Image.bö", "Te°Image.bö", "Te°Image.bö"), 
Ál£
);

354 
	}
}

355 
	$TEST
(
Te°upd©eOPTOUTFûe
, 
Te°Name_NuŒCheck
)

357 
	`EXPECT_EQ
(
	`upd©eOPTOUTFûe
(
NULL
), 
Ál£
);

358 
	}
}

359 
	$TEST
(
Te°upd©eOPTOUTFûe
, 
Te°Name_Suc˚ss
)

361 
ªt
;

362 
ªt
 = 
	`sy°em
("echo \"softwareoptout : BYPASS_OPTOUT\" > /tmp/maintenance_mgr_record.conf");

363 
	`EXPECT_EQ
(
	`upd©eOPTOUTFûe
("/tmp/maöã«n˚_mgr_ªc‹d.c⁄f"), 
åue
);

364 
ªt
 = 
	`sy°em
("rm /tmp/maintenance_mgr_record.conf");

365 
	}
}

366 
	$TEST
(
Te°upd©eOPTOUTFûe
, 
Te°Name_Faû
)

368 
ªt
;

369 
ªt
 = 
	`sy°em
("echo \"softwareoptout : ENFOURCE_OPTOUT\" > /tmp/maintenance_mgr_record.conf");

370 
	`EXPECT_EQ
(
	`upd©eOPTOUTFûe
("/tmp/maöã«n˚_mgr_ªc‹d.c⁄f"), 
Ál£
);

371 
ªt
 = 
	`sy°em
("rm /tmp/maintenance_mgr_record.conf");

372 
	}
}

373 
	$TEST_F
(
Cª©eJs⁄Te°Fixtuª
, 
Te°Name_checkCodebigAc˚ss_Suc˚ss
)

375 
	`EXPECT_CALL
(*
g_Devi˚SètusMock
, 
	`v_£cuª_sy°em
(
_
)).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(0));

376 
	`EXPECT_EQ
(
	`checkCodebigAc˚ss
(), 
åue
);

377 
	}
}

378 
	$TEST_F
(
Cª©eJs⁄Te°Fixtuª
, 
Te°Name_checkCodebigAc˚ss_Faû
)

380 
	`EXPECT_CALL
(*
g_Devi˚SètusMock
, 
	`v_£cuª_sy°em
(
_
)).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(1));

381 
	`EXPECT_EQ
(
	`checkCodebigAc˚ss
(), 
Ál£
);

382 
	}
}

383 
	$TEST_F
(
Cª©eJs⁄Te°Fixtuª
, 
Te°Name_isSèãRedSuµ‹ãd_Suc˚ss
)

385 
	`EXPECT_CALL
(*
g_Devi˚SètusMock
, 
	`fûePª£¡Check
 (
_
)).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(0));

386 
	`EXPECT_EQ
(
	`isSèãRedSuµ‹ãd
(), 1);

387 
	}
}

388 
	$TEST_F
(
Cª©eJs⁄Te°Fixtuª
, 
Te°Name_isSèãRedSuµ‹ãd_Faû
)

390 
	`EXPECT_CALL
(*
g_Devi˚SètusMock
, 
	`fûePª£¡Check
 (
_
)).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(1));

391 
	`EXPECT_EQ
(
	`isSèãRedSuµ‹ãd
(), 0);

392 
	}
}

393 
	$TEST_F
(
Cª©eJs⁄Te°Fixtuª
, 
Te°Name_isInSèãRed_Su˚ss
)

395 
	`EXPECT_CALL
(*
g_Devi˚SètusMock
, 
	`fûePª£¡Check
 (
_
)).
	`Times
(2).
	`WûlRïóãdly
(
	`Rëu∫
(0));

396 
	`EXPECT_EQ
(
	`isInSèãRed
(), 1);

397 
	}
}

398 
	$TEST_F
(
Cª©eJs⁄Te°Fixtuª
, 
Te°Name_isInSèãRed_Faû
)

400 
	`EXPECT_CALL
(*
g_Devi˚SètusMock
, 
	`fûePª£¡Check
 (
_
)).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(1));

401 
	`EXPECT_EQ
(
	`isInSèãRed
(), 0);

402 
	}
}

403 
	$TEST_F
(
Cª©eJs⁄Te°Fixtuª
, 
Te°Name_isOCSPE«bÀ_Su˚ss
)

405 
	`EXPECT_CALL
(*
g_Devi˚SètusMock
, 
	`fûePª£¡Check
 (
_
)).
	`Times
(2).
	`WûlRïóãdly
(
	`Rëu∫
(0));

406 
	`EXPECT_EQ
(
	`isOCSPE«bÀ
(), 1);

407 
	}
}

408 
	$TEST_F
(
Cª©eJs⁄Te°Fixtuª
, 
Te°Name_isOCSPE«bÀ_Faû
)

410 
	`EXPECT_CALL
(*
g_Devi˚SètusMock
, 
	`fûePª£¡Check
 (
_
)).
	`Times
(2).
	`WûlRïóãdly
(
	`Rëu∫
(1));

411 
	`EXPECT_EQ
(
	`isOCSPE«bÀ
(), 0);

412 
	}
}

413 
	$TEST_F
(
Cª©eJs⁄Te°Fixtuª
, 
Te°Name_isUpgødeInProgªss_Su˚ss
)

415 
	`EXPECT_CALL
(*
g_Devi˚SètusMock
, 
	`fûePª£¡Check
 (
_
)).
	`Times
(1).
	`WûlRïóãdly
(
	`Rëu∫
(0));

416 
	`EXPECT_EQ
(
	`isUpgødeInProgªss
(), 
åue
);

417 
	}
}

418 
	$TEST_F
(
Cª©eJs⁄Te°Fixtuª
, 
Te°Name_isUpgødeInProgªss_Faû
)

420 
	`EXPECT_CALL
(*
g_Devi˚SètusMock
, 
	`fûePª£¡Check
 (
_
)).
	`Times
(3).
	`WûlRïóãdly
(
	`Rëu∫
(1));

421 
	`EXPECT_EQ
(
	`isUpgødeInProgªss
(), 
Ál£
);

422 
	}
}

423 
	$TEST_F
(
Cª©eJs⁄Te°Fixtuª
, 
Te°Name_un£tSèãRed
)

425 
	`EXPECT_CALL
(*
g_Devi˚SètusMock
, 
	`fûePª£¡Check
 (
_
)).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(1));

426 
	`un£tSèãRed
();

427 
	`EXPECT_EQ
(0, 0);

428 
	}
}

430 
	$TEST_F
(
Cª©eJs⁄Te°Fixtuª
, 
Te°Name_checkAndE¡îSèãRed_Check
)

432 
	`EXPECT_CALL
(*
g_Devi˚SètusMock
, 
	`fûePª£¡Check
 (
_
)).
	`WûlRïóãdly
(
	`Rëu∫
(0));

433 
	`checkAndE¡îSèãRed
(50, "true");

434 
	`EXPECT_EQ
(0, 0);

435 
	}
}

436 
	$TEST_F
(
Cª©eJs⁄Te°Fixtuª
, 
Te°Name_checkAndE¡îSèãRed_ö°©îed
)

438 
ªt
 = 0;

439 
ªt
 = 
	`sy°em
("touch /tmp/stateRedEnabled");

440 
ªt
 = 
	`sy°em
("touch /tmp/stateSupport");

441 
	`EXPECT_CALL
(*
g_Devi˚SètusMock
, 
	`fûePª£¡Check
 (
_
)).
	`WûlRïóãdly
(
	`Rëu∫
(0));

442 
	`checkAndE¡îSèãRed
(50, "true");

443 
ªt
 = 
	`sy°em
("rm /tmp/stateRedEnabled");

444 
ªt
 = 
	`sy°em
("rm /tmp/stateSupport");

445 
	`EXPECT_EQ
(0, 0);

446 
	}
}

447 
	$TEST_F
(
Cª©eJs⁄Te°Fixtuª
, 
Te°Name_checkAndE¡îSèãRed_nŸö°©îed
)

449 
ªt
 = 0;

450 
ªt
 = 
	`sy°em
("touch /tmp/stateSupport");

451 
ªt
 = 
	`sy°em
("touch /opt/red_state_reboot");

452 
	`EXPECT_CALL
(*
g_Devi˚SètusMock
, 
	`fûePª£¡Check
 (
_
)).
	`WûlRïóãdly
(
	`Rëu∫
(0));

453 
	`checkAndE¡îSèãRed
(50, "true");

454 
ªt
 = 
	`sy°em
("rm /tmp/stateSupport");

455 
ªt
 = 
	`sy°em
("rm /opt/red_state_reboot");

456 
	`EXPECT_EQ
(0, 0);

457 
	}
}

458 
	$TEST
(
Te°checkVideoSètus
, 
Te°Name_NuŒCheck
)

460 
	`EXPECT_EQ
(
	`checkVideoSètus
(
NULL
), -1);

461 
	}
}

462 
	$TEST
(
Te°isThrŸéeE«bÀd
, 
Te°Name_NuŒCheck
)

464 
	`EXPECT_EQ
(
	`isThrŸéeE«bÀd
(
NULL
, NULL, 1), -1);

465 
	}
}

466 
	$TEST
(
Te°isThrŸéeE«bÀd
, 
Te°Name_suc˚ss
)

468 
	`¢¥ötf
(
rfc_li°
.
rfc_thrŸée
, (rfc_list.rfc_throttle), "%s", "true");

469 
	`EXPECT_EQ
(
	`isThrŸéeE«bÀd
("PLATCO", "false", 1), -1);

470 
	}
}

471 
	$TEST
(
Te°gëFûeLa°ModifyTime
, 
Te°Name_NuŒCheck
)

473 
	`EXPECT_EQ
(
	`gëFûeLa°ModifyTime
(
NULL
), 0);

474 
	}
}

475 
	$TEST
(
Te°isDw∆Block
, 
Te°Name_dúe˘_nŸ_block
)

477 
	`EXPECT_EQ
(
	`isDw∆Block
(
HTTP_XCONF_DIRECT
), 0);

478 
	}
}

479 
	$TEST
(
Te°isDw∆Block
, 
Te°Name_dúe˘_block
)

481 
ªt
;

482 
ªt
 = 
	`sy°em
("touch /tmp/.lastdirectfail_cdl");

483 
	`EXPECT_EQ
(
	`isDw∆Block
(
HTTP_XCONF_DIRECT
), 1);

484 
ªt
 = 
	`sy°em
("rm /tmp/.lastdirectfail_cdl");

485 
	}
}

486 
	$TEST
(
Te°isDw∆Block
, 
Te°Name_codebig_nŸ_block
)

488 
	`EXPECT_EQ
(
	`isDw∆Block
(
HTTP_XCONF_CODEBIG
), 0);

489 
	}
}

490 
	$TEST
(
Te°isDw∆Block
, 
Te°Name_codebig_block
)

492 
ªt
;

493 
ªt
 = 
	`sy°em
("touch /tmp/.lastcodebigfail_cdl");

494 
	`EXPECT_EQ
(
	`isDw∆Block
(
HTTP_XCONF_CODEBIG
), 1);

495 
ªt
 = 
	`sy°em
("rm /tmp/.lastcodebigfail_cdl");

496 
	}
}

497 
	$TEST
(
Te°Dw∆Sètus
, 
Te°Name_upd©eFWDow∆ﬂdSètusNuŒ
)

499 
	`EXPECT_EQ
(
	`upd©eFWDow∆ﬂdSètus
(
NULL
, NULL), -1);

500 
	}
}

501 
	$TEST
(
Te°Dw∆Sètus
, 
Te°Name_upd©eFWDow∆ﬂdSètus
)

503 
FWDow∆ﬂdSètus
 
fwdls
;

504 
	`mem£t
(&
fwdls
, '\0', (fwdls));

505 
	`EXPECT_EQ
(
	`upd©eFWDow∆ﬂdSètus
(&
fwdls
, "false"), 1);

506 
	}
}

507 
	$TEST
(
Te°Dw∆Sètus
, 
Te°Name_upd©eFWDow∆ﬂdSètu°rue
)

509 
FWDow∆ﬂdSètus
 
fwdls
;

510 
	`mem£t
(&
fwdls
, '\0', (fwdls));

511 
	`EXPECT_EQ
(
	`upd©eFWDow∆ﬂdSètus
(&
fwdls
, "true"), 1);

512 
	}
}

513 
	$TEST
(
Te°Dw∆Sètus
, 
Te°Name_nŸifyDw∆SètusNuŒ
)

515 
	`EXPECT_EQ
(
	`nŸifyDw∆Sètus
(
NULL
, NULL, 0), -1);

516 
	}
}

517 
GTEST_API_
 
	$maö
(
¨gc
, *
¨gv
[]){

518 
ã°ªsu…s_fuŒfûï©h
[
GTEST_REPORT_FILEPATH_SIZE
];

519 
buf„r
[
GTEST_REPORT_FILEPATH_SIZE
];

521 
	`mem£t
–
ã°ªsu…s_fuŒfûï©h
, 0, 
GTEST_REPORT_FILEPATH_SIZE
 );

522 
	`mem£t
–
buf„r
, 0, 
GTEST_REPORT_FILEPATH_SIZE
 );

524 
	`¢¥ötf
–
ã°ªsu…s_fuŒfûï©h
, 
GTEST_REPORT_FILEPATH_SIZE
, "js⁄:%s%s" , 
GTEST_DEFAULT_RESULT_FILEPATH
 , 
GTEST_DEFAULT_RESULT_FILENAME
);

525 ::
ã°ög
::
	`GTEST_FLAG
(
ouçut
Ë
ã°ªsu…s_fuŒfûï©h
;

526 ::
ã°ög
::
	`InôGoogÀTe°
(&
¨gc
, 
¨gv
);

528 
cout
 << "Sèπög devi˚_°©us_hñ≥∏Aµ ===================>" << 
ídl
;

529  
	`RUN_ALL_TESTS
();

530 
	}
}

	@unittest/deviceutils/device_api_gtest.cpp

19 
	~<gã°/gã°.h
>

20 
	~<gmock/gmock.h
>

21 
	~<io°ªam
>

22 
	~<uni°d.h
>

24 
	~"../mocks/devi˚utûs_mock.h
"

26 
	~"devi˚_≠i.h
"

29 
	#JSON_STR_LEN
 1000

	)

31 
usög
 
«me•a˚
 
ã°ög
;

32 
usög
 
«me•a˚
 
	g°d
;

33 
	gusög
 ::
ã°ög
::
Rëu∫
;

34 
	gusög
 ::
ã°ög
::
SåEq
;

39 
Devi˚UtûsMock
 *
g_Devi˚UtûsMock
;

41 ˛as†
	cDevi˚ApiTe°Fixtuª
 : 
public
 ::
ã°ög
::
Te°
 {

42 
¥Ÿe˘ed
:

43 
Devi˚UtûsMock
 
mockDevi˚Utûs
;

45 
	$Devi˚ApiTe°Fixtuª
()

47 
g_Devi˚UtûsMock
 = &
mockDevi˚Utûs
;

49 
vútuÆ
 ~
	$Devi˚ApiTe°Fixtuª
()

51 
g_Devi˚UtûsMock
 = 
NULL
;

52 
	}
}

54 
vútuÆ
 
	$SëUp
()

56 
	`¥ötf
("%s\n", 
__func__
);

57 
	}
}

59 
vútuÆ
 
	$TórDown
()

61 
	`¥ötf
("%s\n", 
__func__
);

62 
	}
}

64 
	$SëUpTe°Ca£
()

66 
	`¥ötf
("%s\n", 
__func__
);

67 
	}
}

69 
	$TórDownTe°Ca£
()

71 
	`¥ötf
("%s\n", 
__func__
);

72 
	}
}

75 
	$TEST
(
Te°GëSîvîUæFûe
, 
Te°Name_NULLCheck
)

77 
	`EXPECT_EQ
(
	`GëSîvîUæFûe
(
NULL
, 0, NULL), 0);

78 
	}
}

80 
	$TEST
(
Te°GëSîvîUæFûe
, 
Te°Name_gooduæ
)

82 
ªt
;

83 
£rvîuæ
[128];

84 
ªt
 = 
	`sy°em
("echo \"https://mockserver.com\" > /tmp/swupdate.conf");

85 
	`EXPECT_NE
(
	`GëSîvîUæFûe
(
£rvîuæ
, (serverurl), "/tmp/swupdate.conf"), 0);

86 
	`¥ötf
("GTEST sîvîuæ=%s\n", 
£rvîuæ
);

87 
ªt
 = 
	`sy°em
("rm -f /tmp/swupdate.conf");

88 
	}
}

90 
	$TEST
(
Te°GëSîvîUæFûe
, 
Te°Name_gooduæ1
)

92 
ªt
;

93 
£rvîuæ
[128];

94 
ªt
 = 
	`sy°em
("echo \"https://mock-ser_ver.com\" > /tmp/swupdate.conf");

95 
	`EXPECT_NE
(
	`GëSîvîUæFûe
(
£rvîuæ
, (serverurl), "/tmp/swupdate.conf"), 0);

96 
	`¥ötf
("GTEST sîvîuæ=%s\n", 
£rvîuæ
);

97 
ªt
 = 
	`sy°em
("rm -f /tmp/swupdate.conf");

98 
	}
}

100 
	$TEST
(
Te°GëSîvîUæFûe
, 
Te°Name_fûíŸ¥e£¡
)

102 
£rvîuæ
[128];

103 
	`EXPECT_EQ
(
	`GëSîvîUæFûe
(
£rvîuæ
, (serverurl), "/tmp/swupdate1.conf"), 0);

104 
	}
}

106 
	$TEST_F
(
Devi˚ApiTe°Fixtuª
,
Te°Name_NuŒcheck
)

108 
	`EXPECT_EQ
(
	`GëTimez⁄e
(
NULL
, NULL, 0), 0);

109 
	}
}

111 
	$TEST_F
(
Devi˚ApiTe°Fixtuª
,
Te°Name_gëdevi˚¥›Áû
)

113 
ªt
;

114 
ouçut
[8];

115 
	`EXPECT_CALL
(*
g_Devi˚UtûsMock
, 
	`gëDevi˚Pr›îtyD©a
(
_
, _, _)).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(-1));

117 
	`EXPECT_EQ
(
	`GëTimez⁄e
(
ouçut
, "x86", (output)), 0);

118 
	}
}

119 
	$TEST_F
(
Devi˚ApiTe°Fixtuª
,
Te°Name_gëtime
)

121 
ªt
;

122 
ouçut
[8];

123 
	`EXPECT_CALL
(*
g_Devi˚UtûsMock
, 
	`gëDevi˚Pr›îtyD©a
(
_
, _, _)).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(0));

124 
ªt
 = 
	`sy°em
("echo \"India\" > /tmp/timeZoneDST");

125 
	`EXPECT_NE
(
	`GëTimez⁄e
(
ouçut
, "x86", (output)), 0);

126 
ªt
 = 
	`sy°em
("rm -f /tmp/timeZoneDST");

127 
	}
}

129 
	$TEST_F
(
Devi˚ApiTe°Fixtuª
,
Te°Name_gëtimesuc˚ss
)

131 
ªt
;

132 
ouçut
[8];

133 
	`EXPECT_CALL
(*
g_Devi˚UtûsMock
, 
	`gëDevi˚Pr›îtyD©a
(
_
, _, _)).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(0));

134 
ªt
 = 
	`sy°em
("echo \"IndiaDelhi\" > /tmp/timeZoneDST");

135 
ªt
 = 
	`sy°em
("echo \"Delhi\" > /tmp/timeZone_offset_map");

136 
	`EXPECT_NE
(
	`GëTimez⁄e
(
ouçut
, "x86", (output)), 0);

137 
ªt
 = 
	`sy°em
("rm -f /tmp/timeZone_offset_map");

138 
ªt
 = 
	`sy°em
("rm -f /tmp/timeZoneDST");

139 
	}
}

140 
	$TEST_F
(
Devi˚ApiTe°Fixtuª
,
Te°Name_gëtimeskydevi˚
)

142 
ex≥˘edD©a
[] = "SKY";

143 
ouçut
[8];

144 
	`EXPECT_CALL
(*
g_Devi˚UtûsMock
, 
	`gëDevi˚Pr›îtyD©a
(
_
, _, _))

145 .
	`Times
(1)

146 .
	`WûlOn˚
(
	`Invoke
([&
ex≥˘edD©a
](c⁄° *
modñ
, *
d©a
, 
size
) {

147 
	`°∫˝y
(
d©a
, 
ex≥˘edD©a
, 
size
 - 1);

148 
d©a
[
size
 - 1] = '\0';

151 
	`EXPECT_NE
(
	`GëTimez⁄e
(
ouçut
, "x86", (output)), 0);

153 
	}
}

154 
	$TEST_F
(
Devi˚ApiTe°Fixtuª
,
Te°Name_gëtimeskydevi˚¨m
)

156 
ex≥˘edD©a
[] = "SKY";

157 
ouçut
[8];

158 
	`EXPECT_CALL
(*
g_Devi˚UtûsMock
, 
	`gëDevi˚Pr›îtyD©a
(
_
, _, _))

159 .
	`Times
(1)

160 .
	`WûlOn˚
(
	`Invoke
([&
ex≥˘edD©a
](c⁄° *
modñ
, *
d©a
, 
size
) {

161 
	`°∫˝y
(
d©a
, 
ex≥˘edD©a
, 
size
 - 1);

162 
d©a
[
size
 - 1] = '\0';

165 
	`EXPECT_NE
(
	`GëTimez⁄e
(
ouçut
, "arm", (output)), 0);

166 
	}
}

167 
	$TEST_F
(
Devi˚ApiTe°Fixtuª
,
Te°Name_gëaddôi⁄fw_nuŒcheck
)

169 
	`EXPECT_EQ
(
	`GëAddôi⁄ÆFwVîInfo
(
NULL
, 0), 0);

170 
	}
}

172 
	$TEST_F
(
Devi˚ApiTe°Fixtuª
,
Te°Name_Suc˚ss
)

174 
d©a
[64];

175 
FILE
 *
Â
 = 
NULL
;

176 
buff
[] = "1234_pdri_image.bin\n";

177 
Â
 = 
	`f›í
("/tmp/pdri.txt", "w");

178 i‡(
Â
 !
NULL
) {

179 
	`fwrôe
(
buff
, (buff), 1,
Â
);

180 
	`f˛o£
(
Â
);

181 
Â
 = 
NULL
;

184 
	`EXPECT_CALL
(*
g_Devi˚UtûsMock
, 
	`v_£cuª_p›í
(
_
, _, _)).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(
Â
));

185 
	`EXPECT_EQ
(
	`GëAddôi⁄ÆFwVîInfo
(
d©a
, (data)), 0);

186 
	}
}

187 
	$TEST
(
Te°GëPDRIFûeName
, 
Te°_pdri_NuŒcheck
)

189 
	`EXPECT_EQ
(
	`GëPDRIFûeName
(
NULL
, 0), 0);

190 
	}
}

191 
	$TEST_F
(
Devi˚ApiTe°Fixtuª
,
Te°Name_bundÀ_NuŒcheck
)

193 
	`EXPECT_EQ
(
	`GëIn°ÆÀdBundÀs
(
NULL
, 0), 0);

194 
	}
}

195 
	$TEST_F
(
Devi˚ApiTe°Fixtuª
,
Te°Name_bundÀ_Suc˚ss
)

197 
ªt
;

198 
pBundÀs
[32] = {0};

199 
ªt
 = 
	`sy°em
("mkdir /tmp/certs;cp ca-store-update-bundle_package.json /tmp/certs/ ");

200 
	`EXPECT_NE
(
	`GëIn°ÆÀdBundÀs
(
pBundÀs
, (pBundles)), 0);

201 
ªt
 = 
	`sy°em
("rm -rf /tmp/certs/ ");

202 
	`¥ötf
("BUNDLE = %s\n",
pBundÀs
);

203 
	}
}

204 
	$TEST_F
(
Devi˚ApiTe°Fixtuª
,
Te°Name_bundÀ_rf˝©h
)

206 
ªt
;

207 
pBundÀs
[32] = {0};

208 
ªt
 = 
	`sy°em
("mkdir /tmp/rfc;mkdir /tmp/rfc/certs; cp ca-store-update-bundle_package.json /tmp/rfc/certs/ ");

209 
	`EXPECT_NE
(
	`GëIn°ÆÀdBundÀs
(
pBundÀs
, (pBundles)), 0);

210 
ªt
 = 
	`sy°em
("rm -rf /tmp/rfc/certs/ ");

211 
ªt
 = 
	`sy°em
("rm -rf /tmp/rfc/ ");

212 
	`¥ötf
("BUNDLE = %s\n",
pBundÀs
);

213 
	}
}

214 
	$TEST_F
(
Devi˚ApiTe°Fixtuª
,
Te°Name_bundÀ_Faû
)

216 
pBundÀs
[32] = {0};

217 
	`EXPECT_EQ
(
	`GëIn°ÆÀdBundÀs
(
pBundÀs
, (pBundles)), 0);

218 
	}
}

220 
	$TEST
(
Te°GëUTCTime
, 
Te°Name_NuŒcheck
)

222 
	`EXPECT_EQ
(
	`GëUTCTime
(
NULL
, 0), 0);

223 
	}
}

224 
	$TEST
(
Te°GëUTCTime
, 
Te°Name_Suc˚ss
)

226 
utc_time
[6];

227 
	`EXPECT_EQ
(
	`GëUTCTime
(
utc_time
, (utc_time)), 0);

228 
	`¥ötf
("UTCÅimê%s\n", 
utc_time
);

229 
	}
}

230 
	$TEST
(
Te°GëC≠abûôõs
, 
Te°Name_NuŒcheck
)

232 
	`EXPECT_EQ
(
	`GëC≠abûôõs
(
NULL
, 0), 0);

233 
	}
}

234 
	$TEST
(
Te°GëC≠abûôõs
, 
Te°Name_Suc˚ss
)

236 
ˇ∑bûôy
[6];

237 
	`EXPECT_NE
(
	`GëC≠abûôõs
(
ˇ∑bûôy
, (capability)), 0);

238 
	`¥ötf
("ˇ∑bûôõ†%s\n", 
ˇ∑bûôy
);

239 
	}
}

241 
	$TEST_F
(
Devi˚ApiTe°Fixtuª
,
Te°Name_GëP¨äîId_NuŒcheck
)

243 
	`EXPECT_EQ
(
	`GëP¨äîId
(
NULL
, 0), 0);

244 
	}
}

245 
	$TEST_F
(
Devi˚ApiTe°Fixtuª
,
Te°Name_GëP¨äîId_Suc˚ss
)

247 
ex≥˘edD©a
[] = "true";

248 
ouçut
[8];

249 
ªt
;

250 
	`EXPECT_CALL
(*
g_Devi˚UtûsMock
, 
	`gëDevi˚Pr›îtyD©a
(
_
, _, _))

251 .
	`Times
(1)

252 .
	`WûlOn˚
(
	`Invoke
([&
ex≥˘edD©a
](c⁄° *
modñ
, *
d©a
, 
size
) {

253 
	`°∫˝y
(
d©a
, 
ex≥˘edD©a
, 
size
 - 1);

254 
d©a
[
size
 - 1] = '\0';

257 
ªt
 = 
	`sy°em
("echo \"X_RDKCENTRAL-COM_RFC.Bootstrap.PartnerName=comcast\" > /tmp/bootstrap.ini");

258 
	`EXPECT_NE
(
	`GëP¨äîId
(
ouçut
, (output)), 0);

259 
	`¥ötf
("∑π√∏ID = %s\n", 
ouçut
);

260 
ªt
 = 
	`sy°em
("rm -f /tmp/bootstrap.in");

261 
	}
}

262 
	$TEST_F
(
Devi˚ApiTe°Fixtuª
,
Te°Name_GëP¨äîId_nŸfound
)

264 
ex≥˘edD©a
[] = "false";

265 
ouçut
[8];

266 
ªt
;

267 
	`EXPECT_CALL
(*
g_Devi˚UtûsMock
, 
	`gëDevi˚Pr›îtyD©a
(
_
, _, _))

268 .
	`Times
(1)

269 .
	`WûlOn˚
(
	`Invoke
([&
ex≥˘edD©a
](c⁄° *
modñ
, *
d©a
, 
size
) {

270 
	`°∫˝y
(
d©a
, 
ex≥˘edD©a
, 
size
 - 1);

271 
d©a
[
size
 - 1] = '\0';

274 
ªt
 = 
	`sy°em
("echo \"X_RDKCENTRAL-COM_RFC.Bootstrap.PartnerName=comcast-sky\" > /tmp/bootstrap.ini");

275 
	`EXPECT_EQ
(
	`GëP¨äîId
(
ouçut
, (output)), 0);

276 
	`¥ötf
("∑π√∏ID = %s\n", 
ouçut
);

277 
ªt
 = 
	`sy°em
("rm -f /tmp/bootstrap.in");

278 
	}
}

279 
	$TEST_F
(
Devi˚ApiTe°Fixtuª
,
Te°Name_GëP¨äîId_Suc˚ssThúd
)

281 
ex≥˘edD©a
[] = "false";

282 
ouçut
[8];

283 
ªt
;

284 
	`EXPECT_CALL
(*
g_Devi˚UtûsMock
, 
	`gëDevi˚Pr›îtyD©a
(
_
, _, _))

285 .
	`Times
(1)

286 .
	`WûlOn˚
(
	`Invoke
([&
ex≥˘edD©a
](c⁄° *
modñ
, *
d©a
, 
size
) {

287 
	`°∫˝y
(
d©a
, 
ex≥˘edD©a
, 
size
 - 1);

288 
d©a
[
size
 - 1] = '\0';

291 
ªt
 = 
	`sy°em
("echo \"X_RDKCENTRAL-COM_Syndication.PartnerId=xglobal\" > /tmp/bootstrap.ini");

292 
	`EXPECT_NE
(
	`GëP¨äîId
(
ouçut
, (output)), 0);

293 
	`¥ötf
("∑π√∏ID = %s\n", 
ouçut
);

294 
ªt
 = 
	`sy°em
("rm -f /tmp/bootstrap.in");

295 
	}
}

296 
	$TEST_F
(
Devi˚ApiTe°Fixtuª
,
Te°Name_GëP¨äîId_Suc˚ssFouπh
)

298 
ex≥˘edD©a
[] = "false";

299 
ouçut
[16];

300 
ªt
;

301 
	`EXPECT_CALL
(*
g_Devi˚UtûsMock
, 
	`gëDevi˚Pr›îtyD©a
(
_
, _, _))

302 .
	`Times
(1)

303 .
	`WûlOn˚
(
	`Invoke
([&
ex≥˘edD©a
](c⁄° *
modñ
, *
d©a
, 
size
) {

304 
	`°∫˝y
(
d©a
, 
ex≥˘edD©a
, 
size
 - 1);

305 
d©a
[
size
 - 1] = '\0';

308 
ªt
 = 
	`sy°em
("echo \"comcast-xglobal\" > /tmp/partnerId3.dat");

309 
	`EXPECT_NE
(
	`GëP¨äîId
(
ouçut
, (output)), 0);

310 
	`¥ötf
("∑π√∏ID = %s\n", 
ouçut
);

311 
ªt
 = 
	`sy°em
("rm -f /tmp/partnerId3.dat");

312 
	}
}

313 
	$TEST_F
(
Devi˚ApiTe°Fixtuª
,
Te°Name_GëP¨äîId_deÁu…vÆue
)

315 
ex≥˘edD©a
[] = "false";

316 
ouçut
[16];

317 
ªt
;

318 
	`EXPECT_CALL
(*
g_Devi˚UtûsMock
, 
	`gëDevi˚Pr›îtyD©a
(
_
, _, _))

319 .
	`Times
(1)

320 .
	`WûlOn˚
(
	`Invoke
([&
ex≥˘edD©a
](c⁄° *
modñ
, *
d©a
, 
size
) {

321 
	`°∫˝y
(
d©a
, 
ex≥˘edD©a
, 
size
 - 1);

322 
d©a
[
size
 - 1] = '\0';

325 
	`EXPECT_NE
(
	`GëP¨äîId
(
ouçut
, (output)), 0);

326 
	}
}

327 
	$TEST_F
(
Devi˚ApiTe°Fixtuª
,
Te°Name_GëOsCœss_NuŒcheck
)

329 
	`EXPECT_EQ
(
	`GëOsCœss
(
NULL
, 0), 0);

330 
	}
}

331 
	$TEST_F
(
Devi˚ApiTe°Fixtuª
,
Te°Name_GëOsCœss_Faû
)

333 
ex≥˘edD©a
[] = "false";

334 
ouçut
[16];

335 
ªt
;

336 
	`EXPECT_CALL
(*
g_Devi˚UtûsMock
, 
	`gëDevi˚Pr›îtyD©a
(
_
, _, _))

337 .
	`Times
(1)

338 .
	`WûlOn˚
(
	`Invoke
([&
ex≥˘edD©a
](c⁄° *
modñ
, *
d©a
, 
size
) {

339 
	`°∫˝y
(
d©a
, 
ex≥˘edD©a
, 
size
 - 1);

340 
d©a
[
size
 - 1] = '\0';

344 
	`EXPECT_NE
(
	`GëOsCœss
(
ouçut
, (output)), 0);

345 
	`¥ötf
("GëOsCœs†%s\n", 
ouçut
);

346 
	}
}

348 
	$TEST_F
(
Devi˚ApiTe°Fixtuª
,
Te°Name_GëOsCœss_Suc˚ss
)

350 
ex≥˘edD©a
[] = "true";

351 
ouçut
[16];

352 
ªt
;

353 
	`EXPECT_CALL
(*
g_Devi˚UtûsMock
, 
	`gëDevi˚Pr›îtyD©a
(
_
, _, _))

354 .
	`Times
(1)

355 .
	`WûlOn˚
(
	`Invoke
([&
ex≥˘edD©a
](c⁄° *
modñ
, *
d©a
, 
size
) {

356 
	`°∫˝y
(
d©a
, 
ex≥˘edD©a
, 
size
 - 1);

357 
d©a
[
size
 - 1] = '\0';

360 
	`EXPECT_CALL
(*
g_Devi˚UtûsMock
, 
	`ªad_RFCPr›îty
(
_
, _, _, _)).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(1));

361 
	`EXPECT_NE
(
	`GëOsCœss
(
ouçut
, (output)), 0);

362 
	`¥ötf
("GëOsCœs†%s\n", 
ouçut
);

363 
	}
}

364 
	$TEST_F
(
Devi˚ApiTe°Fixtuª
,
Te°Name_GëSîülNum_NuŒcheck
)

366 
	`EXPECT_EQ
(
	`GëSîülNum
(
NULL
, 0), 0);

367 
	}
}

368 
	$TEST_F
(
Devi˚ApiTe°Fixtuª
,
Te°Name_GëSîülNum_Suc˚ss
)

370 
ouçut
[16];

371 
	`EXPECT_CALL
(*
g_Devi˚UtûsMock
, 
	`ªad_RFCPr›îty
(
_
, _, _, _)).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(1));

372 
	`EXPECT_NE
(
	`GëSîülNum
(
ouçut
, (output)), 0);

373 
	`¥ötf
("GëSîülNumbî = %s\n", 
ouçut
);

374 
	}
}

375 
	$TEST_F
(
Devi˚ApiTe°Fixtuª
,
Te°Name_GëAccou¡ID_NuŒcheck
)

377 
	`EXPECT_EQ
(
	`GëAccou¡ID
(
NULL
, 0), 0);

378 
	}
}

379 
	$TEST_F
(
Devi˚ApiTe°Fixtuª
,
Te°Name_GëAccou¡ID_Suc˚ss
)

381 
ouçut
[16];

382 
	`EXPECT_CALL
(*
g_Devi˚UtûsMock
, 
	`ªad_RFCPr›îty
(
_
, _, _, _)).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(1));

383 
	`EXPECT_NE
(
	`GëAccou¡ID
(
ouçut
, (output)), 0);

384 
	`¥ötf
("GëAccou¡ID = %s\n", 
ouçut
);

385 
	}
}

386 
	$TEST_F
(
Devi˚ApiTe°Fixtuª
,
Te°Name_GëAccou¡ID_Faû
)

388 
ouçut
[16];

389 
	`EXPECT_CALL
(*
g_Devi˚UtûsMock
, 
	`ªad_RFCPr›îty
(
_
, _, _, _)).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(-1));

390 
	`EXPECT_NE
(
	`GëAccou¡ID
(
ouçut
, (output)), 0);

391 
	`¥ötf
("GëAccou¡ID = %s\n", 
ouçut
);

392 
	}
}

393 
	$TEST
(
Te°GëFúmw¨eVîsi⁄
, 
Te°Name_GëFúmw¨eVîsi⁄_NuŒcheck
)

395 
	`EXPECT_EQ
(
	`GëFúmw¨eVîsi⁄
(
NULL
, 0), 0);

396 
	}
}

397 
	$TEST
(
Te°GëFúmw¨eVîsi⁄
, 
Te°Name_GëFúmw¨eVîsi⁄_Suc˚ss
)

399 
ªt
;

400 
ouçut
[6];

401 
ªt
 = 
	`sy°em
("echo \"imagename:12345.bin\" > /tmp/version_test.txt");

402 
	`EXPECT_NE
(
	`GëFúmw¨eVîsi⁄
(
ouçut
, (output)), 0);

403 
ªt
 = 
	`sy°em
("rm -f /tmp/version_test.txt");

404 
	`¥ötf
("GëFúmw¨eVîsi⁄ = %s\n", 
ouçut
);

405 
	}
}

406 
	$TEST
(
Te°GëFúmw¨eVîsi⁄
, 
Te°Name_GëFúmw¨eVîsi⁄_Faû
)

408 
ªt
;

409 
ouçut
[6] = {0};

410 
ªt
 = 
	`sy°em
("echo \"imagenamenot:12345.bin\" > /tmp/version_test.txt");

411 
	`EXPECT_EQ
(
	`GëFúmw¨eVîsi⁄
(
ouçut
, (output)), 0);

412 
ªt
 = 
	`sy°em
("rm -f /tmp/version_test.txt");

413 
	`¥ötf
("GëFúmw¨eVîsi⁄ = %s\n", 
ouçut
);

414 
	}
}

415 
	$TEST_F
(
Devi˚ApiTe°Fixtuª
,
Te°Name_GëModñNum_NuŒcheck
)

417 
	`EXPECT_CALL
(*
g_Devi˚UtûsMock
, 
	`GëModñNum
(
_
, _)).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(0));

418 
	`EXPECT_EQ
(
	`GëModñNum
(
NULL
, 0), 0);

419 
	}
}

420 
	$TEST_F
(
Devi˚ApiTe°Fixtuª
,
Te°Name_GëMFRName_NuŒcheck
)

422 
	`EXPECT_EQ
(
	`GëMFRName
(
NULL
, 0), 0);

423 
	}
}

424 
	$TEST_F
(
Devi˚ApiTe°Fixtuª
, 
GëMFRName_fûe_found
)

426 
ªt
;

427 
d©a
[32];

428 
ªt
 = 
	`sy°em
("echo \"03272025\" > /tmp/.manufacturer");

429 
	`EXPECT_NE
(
	`GëMFRName
(
d©a
, 9),0);

430 
	`EXPECT_EQ
(
	`°rcmp
(
d©a
, "03272025"), 0);

431 
ªt
 = 
	`sy°em
("rm -f /tmp/.manufacturer");

432 
	}
}

433 
	$TEST_F
(
Devi˚ApiTe°Fixtuª
, 
GëMFRName_fûe_nŸ_found
)

435 
ªt
;

436 
d©a
[32];

437 
	`EXPECT_EQ
(
	`GëMFRName
(
d©a
, 7),0);

438 
	}
}

439 
	$TEST_F
(
Devi˚ApiTe°Fixtuª
, 
Te°Name_GëE°bMac_NuŒcheck
)

441 
	`EXPECT_EQ
(
	`GëE°bMac
(
NULL
, 0), 0);

442 
	}
}

443 
	$TEST_F
(
Devi˚ApiTe°Fixtuª
, 
Te°Name_GëE°bMac_Suc˚ss
)

445 
ªt
;

446 
ouçut
[32];

447 
ªt
 = 
	`sy°em
("echo \"aa:bb:cc:dd:ff:gg\" > /tmp/.estb_mac_gtest.txt");

448 
	`EXPECT_NE
(
	`GëE°bMac
(
ouçut
, (output)), 0);

449 
ªt
 = 
	`sy°em
("rm -f /tmp/.estb_mac_gtest.txt");

450 
	}
}

451 
	$TEST_F
(
Devi˚ApiTe°Fixtuª
, 
Te°Name_GëE°bMac_Faû
)

453 
ªt
;

454 
ouçut
[8];

455 
	`EXPECT_CALL
(*
g_Devi˚UtûsMock
, 
	`gëDevi˚Pr›îtyD©a
(
_
, _, _)).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(-1));

456 
	`EXPECT_EQ
(
	`GëE°bMac
(
ouçut
, (output)), 0);

457 
	}
}

459 
	$TEST
(
Te°GëRdmM™i„°Vîsi⁄
, 
Te°Name_GëRdmM™i„°Vîsi⁄_NuŒcheck
)

461 
	`EXPECT_EQ
(
	`GëRdmM™i„°Vîsi⁄
(
NULL
, 0), 0);

462 
	}
}

464 
	$TEST_F
(
Devi˚ApiTe°Fixtuª
, 
Te°Name_GëFûeC⁄ã¡s_NuŒcheck
)

466 
	`EXPECT_EQ
(
	`GëFûeC⁄ã¡s
(
NULL
, NULL), 0);

467 
	}
}

468 
	$TEST_F
(
Devi˚ApiTe°Fixtuª
, 
Te°Name_GëFûeC⁄ã¡s_Suc˚ss
)

470 *
d©a
 = 
NULL
;

471 
ªt
;

472 
	`EXPECT_CALL
(*
g_Devi˚UtûsMock
, 
	`gëFûeSize
(
_
)).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(10));

473 
ªt
 = 
	`sy°em
("echo \"Comcast India\" > /tmp/test.txt");

474 
	`EXPECT_NE
(
	`GëFûeC⁄ã¡s
(&
d©a
, "/tmp/test.txt"), 0);

475 
ªt
 = 
	`sy°em
("rm -f /tmp/test.txt");

476 i‡(
d©a
 !
NULL
) {

477 
	`¥ötf
("d©®i†%s\n", 
d©a
);

479 
	}
}

480 
	$TEST_F
(
Devi˚ApiTe°Fixtuª
, 
Te°Name_GëFûeC⁄ã¡s_Faû
)

482 
	`EXPECT_EQ
(
	`GëFûeC⁄ã¡s
(
NULL
, NULL), 0);

483 
	}
}

484 
	$TEST_F
(
Devi˚ApiTe°Fixtuª
, 
Te°Name_GëSîvURL_NuŒcheck
)

486 
	`EXPECT_EQ
(
	`GëSîvURL
(
NULL
, 0), 0);

487 
	}
}

488 
	$TEST_F
(
Devi˚ApiTe°Fixtuª
, 
Te°Name_GëSîvURL_Suc˚ssSèãªd_DebugSîvi˚s_E«bÀd
)

490 
ouçut
[32];

491 
ªt
;

492 
£rvUæ
[]="https://www.statered.com";

493 
	`EXPECT_CALL
(*
g_Devi˚UtûsMock
, 
	`isInSèãRed
()).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(
åue
));

495 
ªt
 = 
	`sy°em
("echo \"BUILD_TYPE=vbn\" > /tmp/device_gtest.prop");

497 
	`EXPECT_CALL
(*
g_Devi˚UtûsMock
, 
	`isDebugSîvi˚sE«bÀd
()).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(
åue
));

498 
ªt
 = 
	`sy°em
("echo \"https://www.statered.com\" > /tmp/stateredrecovry.conf");

499 
ªt
 = 
	`GëSîvURL
(
ouçut
, (output));

500 
	`EXPECT_EQ
(
	`°∫cmp
(
ouçut
,
£rvUæ
,
	`°æí
(servUrl)),0);

501 
	`¥ötf
("ouçuà=====================================%†\n",
ouçut
);

502 
	`¥ötf
("£rvUæ ====================================%†\n" ,
£rvUæ
);

503 
ªt
 = 
	`sy°em
("rm -f /tmp/stateredrecovry.conf");

504 
ªt
 = 
	`sy°em
("rm -f /tmp/device_gtest.prop");

505 
	`¥ötf
("Sîvî URL = %s\n", 
ouçut
);

506 
	}
}

507 
	$TEST_F
(
Devi˚ApiTe°Fixtuª
, 
Te°Name_GëSîvURL_Suc˚ssSèãªd_DebugSîvi˚s_DißbÀd
)

509 
ouçut
[32];

510 
ªt
;

511 
£rvUæ
[]="https://www.statered.com";

512 
	`EXPECT_CALL
(*
g_Devi˚UtûsMock
, 
	`isInSèãRed
()).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(
åue
));

514 
ªt
 = 
	`sy°em
("echo \"BUILD_TYPE=vbn\" > /tmp/device_gtest.prop");

516 
	`EXPECT_CALL
(*
g_Devi˚UtûsMock
, 
	`isDebugSîvi˚sE«bÀd
()).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(
Ál£
));

517 
ªt
 = 
	`sy°em
("echo \"https://www.statered.com\" > /tmp/stateredrecovry.conf");

518 
ªt
 = 
	`GëSîvURL
(
ouçut
, (output));

519 
	`EXPECT_EQ
(
	`°∫cmp
(
ouçut
,
£rvUæ
,
	`°æí
(servUrl)),0);

520 
	`¥ötf
("ouçuà=====================================%†\n",
ouçut
);

521 
	`¥ötf
("£rvUæ ====================================%†\n" ,
£rvUæ
);

522 
ªt
 = 
	`sy°em
("rm -f /tmp/stateredrecovry.conf");

523 
ªt
 = 
	`sy°em
("rm -f /tmp/device_gtest.prop");

524 
	`¥ötf
("Sîvî URL = %s\n", 
ouçut
);

525 
	}
}

526 
	$TEST_F
(
Devi˚ApiTe°Fixtuª
, 
Te°Name_GëSîvURL_Suc˚ssSèãªd_Prod_DebugSîvi˚s_E«bÀd
)

528 
ouçut
[32];

529 
ªt
;

530 
£rvUæ
[]="https://www.statered.com";

531 
	`EXPECT_CALL
(*
g_Devi˚UtûsMock
, 
	`isInSèãRed
()).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(
åue
));

533 
ªt
 = 
	`sy°em
("echo \"BUILD_TYPE=PROD\" > /tmp/device_gtest.prop");

535 
	`EXPECT_CALL
(*
g_Devi˚UtûsMock
, 
	`isDebugSîvi˚sE«bÀd
()).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(
åue
));

536 
ªt
 = 
	`sy°em
("echo \"https://www.statered.com\" > /tmp/stateredrecovry.conf");

537 
ªt
 = 
	`GëSîvURL
(
ouçut
, (output));

538 
	`EXPECT_EQ
(
	`°∫cmp
(
ouçut
,
£rvUæ
,
	`°æí
(servUrl)),0);

539 
	`¥ötf
("ouçuà=====================================%s\¿",
ouçut
);

540 
	`¥ötf
("£rvUæ ====================================%†\n" ,
£rvUæ
);

541 
ªt
 = 
	`sy°em
("rm -f /tmp/stateredrecovry.conf");

542 
ªt
 = 
	`sy°em
("rm -f /tmp/device_gtest.prop");

543 
	`¥ötf
("Sîvî URL = %s\n", 
ouçut
);

544 
	}
}

545 
	$TEST_F
(
Devi˚ApiTe°Fixtuª
, 
Te°Name_GëSîvURL_Suc˚ssSèãªd_Prod_DebugSîvi˚s_DißbÀd
)

547 
ouçut
[64];

548 
ªt
;

549 
£rvUæ
[]="https://www.tr181Rfc.com";

550 
	`EXPECT_CALL
(*
g_Devi˚UtûsMock
, 
	`isInSèãRed
()).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(
åue
));

552 
ªt
 = 
	`sy°em
("echo \"BUILD_TYPE=PROD\" > /tmp/device_gtest.prop");

554 
	`EXPECT_CALL
(*
g_Devi˚UtûsMock
, 
	`isDebugSîvi˚sE«bÀd
()).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(
Ál£
));

555 
ªt
 = 
	`sy°em
("echo \"https://www.statered.com\" > /tmp/stateredrecovry.conf");

556 
ªt
 = 
	`sy°em
("echo \"https://www.autotool.com\" > /tmp/swupdate.conf");

557 
	`EXPECT_CALL
(*
g_Devi˚UtûsMock
, 
	`ªad_RFCPr›îty
(
_
, _, _, _))

558 .
	`Times
(1)

559 .
	`WûlOn˚
(
	`Invoke
([&
£rvUæ
]–* 
ty≥
, c⁄° * 
key
, *
out_vÆue
, 
size_t
 
d©asize
 ) {

560 
	`°∫˝y
(
out_vÆue
, 
£rvUæ
 , 
d©asize
-1);

561 
out_vÆue
[
d©asize
 - 1] = '\0';

562  
	`°æí
(
out_vÆue
);

565 
ªt
=
	`GëSîvURL
(
ouçut
 , (output));

566 
	`EXPECT_EQ
(
	`°∫cmp
(
ouçut
 , 
£rvUæ
 , 
	`°æí
(servUrl)),0);

567 
	`¥ötf
("Ouçuà========================%s\¿", 
ouçut
);

568 
	`¥ötf
("£rvUæ =======================%†\¿",
£rvUæ
);

569 
ªt
 = 
	`sy°em
("rm -f /tmp/stateredrecovry.conf");

570 
ªt
 = 
	`sy°em
("rm -f /tmp/device_gtest.prop");

571 
	`¥ötf
("Sîvî URL = %s\n", 
ouçut
);

572 
	}
}

573 
	$TEST_F
(
Devi˚ApiTe°Fixtuª
, 
Te°Name_GëSîvURL_Suc˚ssSwupd©e_DebugSîvi˚s_E«bÀd
)

575 
ouçut
[32];

576 
ªt
;

577 
£rvUæ
[]="https://www.rdkautotool.com";

578 
	`EXPECT_CALL
(*
g_Devi˚UtûsMock
, 
	`isInSèãRed
()).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(
Ál£
));

579 
	`EXPECT_CALL
(*
g_Devi˚UtûsMock
, 
	`fûePª£¡Check
(
_
)).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(0));

581 
ªt
 = 
	`sy°em
("echo \"BUILD_TYPE=vbn\" > /tmp/device_gtest.prop");

582 
	`EXPECT_CALL
(*
g_Devi˚UtûsMock
, 
	`isDebugSîvi˚sE«bÀd
()).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(
åue
));

583 
ªt
 = 
	`sy°em
("echo \"https://www.rdkautotool.com\" > /tmp/swupdate.conf");

584 
ªt
=
	`GëSîvURL
(
ouçut
 , (output));

585 
	`EXPECT_EQ
(
	`°∫cmp
(
ouçut
 , 
£rvUæ
 , 
	`°æí
(servUrl)),0);

586 
	`¥ötf
("Ouçuà========================%s\¿", 
ouçut
);

587 
	`¥ötf
("£rvUæ =======================%†\¿",
£rvUæ
);

588 
ªt
 = 
	`sy°em
("rm -f /tmp/swupdate.conf");

589 
ªt
 = 
	`sy°em
("rm -f /tmp/device_gtest.prop");

590 
	`¥ötf
("Sîvî URL = %s\n", 
ouçut
);

591 
	}
}

593 
	$TEST_F
(
Devi˚ApiTe°Fixtuª
, 
Te°Name_GëSîvURL_Suc˚ssSwupd©e_DebugSîvi˚s_DißbÀd
)

595 
ouçut
[32];

596 
ªt
;

597 
£rvUæ
[]="https://www.rdkautotool.com";

598 
	`EXPECT_CALL
(*
g_Devi˚UtûsMock
, 
	`isInSèãRed
()).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(
Ál£
));

599 
	`EXPECT_CALL
(*
g_Devi˚UtûsMock
, 
	`fûePª£¡Check
(
_
)).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(0));

601 
ªt
 = 
	`sy°em
("echo \"BUILD_TYPE=vbn\" > /tmp/device_gtest.prop");

602 
	`EXPECT_CALL
(*
g_Devi˚UtûsMock
, 
	`isDebugSîvi˚sE«bÀd
()).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(
Ál£
));

603 
ªt
 = 
	`sy°em
("echo \"https://www.rdkautotool.com\" > /tmp/swupdate.conf");

604 
ªt
=
	`GëSîvURL
(
ouçut
 , (output));

605 
	`EXPECT_EQ
(
	`°∫cmp
(
ouçut
 , 
£rvUæ
 , 
	`°æí
(servUrl)),0);

606 
	`¥ötf
("Ouçuà========================%s\¿", 
ouçut
);

607 
	`¥ötf
("£rvUæ =======================%†\¿",
£rvUæ
);

608 
ªt
 = 
	`sy°em
("rm -f /tmp/swupdate.conf");

609 
ªt
 = 
	`sy°em
("rm -f /tmp/device_gtest.prop");

610 
	`¥ötf
("Sîvî URL = %s\n", 
ouçut
);

611 
	}
}

613 
	$TEST_F
(
Devi˚ApiTe°Fixtuª
, 
Te°Name_GëSîvURL_Suc˚ssSwupd©e_Prod_DebugSîvi˚s_E«bÀd
)

615 
ouçut
[32];

616 
ªt
;

617 
£rvUæ
[]="https://www.rdkautotool.com";

618 
	`EXPECT_CALL
(*
g_Devi˚UtûsMock
, 
	`isInSèãRed
()).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(
Ál£
));

619 
	`EXPECT_CALL
(*
g_Devi˚UtûsMock
, 
	`fûePª£¡Check
(
_
)).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(0));

620 
ªt
 = 
	`sy°em
("echo \"BUILD_TYPE=PROD\" > /tmp/device_gtest.prop");

621 
	`EXPECT_CALL
(*
g_Devi˚UtûsMock
, 
	`isDebugSîvi˚sE«bÀd
()).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(
åue
));

622 
ªt
 = 
	`sy°em
("echo \"https://www.rdkautotool.com\" > /tmp/swupdate.conf");

623 
ªt
=
	`GëSîvURL
(
ouçut
 , (output));

624 
	`EXPECT_EQ
(
	`°∫cmp
(
ouçut
 , 
£rvUæ
 , 
	`°æí
(servUrl)),0);

625 
	`¥ötf
("Ouçuà========================%s\¿", 
ouçut
);

626 
	`¥ötf
("£rvUæ =======================%†\¿",
£rvUæ
);

627 
ªt
 = 
	`sy°em
("rm -f /tmp/swupdate.conf");

628 
ªt
 = 
	`sy°em
("rm -f /tmp/device_gtest.prop");

629 
	`¥ötf
("Sîvî URL = %s\n", 
ouçut
);

630 
	}
}

632 
	$TEST_F
(
Devi˚ApiTe°Fixtuª
, 
Te°Name_GëSîvURL_Suc˚ssSwupd©e_Prod_DebugSîvi˚s_DißbÀd
)

634 
ouçut
[64];

635 
ªt
;

636 
£rvUæ
[]= "https://www.tr181Rfc.com";

637 
	`EXPECT_CALL
(*
g_Devi˚UtûsMock
, 
	`isInSèãRed
()).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(
Ál£
));

638 
ªt
 = 
	`sy°em
("echo \"BUILD_TYPE=PROD\" > /tmp/device_gtest.prop");

639 
	`EXPECT_CALL
(*
g_Devi˚UtûsMock
, 
	`isDebugSîvi˚sE«bÀd
()).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(
Ál£
));

640 
ªt
 = 
	`sy°em
("echo \"https://www.rdkautotool.com\" > /tmp/swupdate.conf");

641 
	`EXPECT_CALL
(*
g_Devi˚UtûsMock
, 
	`ªad_RFCPr›îty
(
_
, _, _, _))

642 .
	`Times
(1)

643 .
	`WûlOn˚
(
	`Invoke
([&
£rvUæ
]–* 
ty≥
, c⁄° * 
key
, *
out_vÆue
, 
size_t
 
d©asize
 ) {

644 
	`°∫˝y
(
out_vÆue
, 
£rvUæ
 , 
d©asize
-1);

645 
out_vÆue
[
d©asize
 - 1] = '\0';

646  
	`°æí
(
out_vÆue
);

649 
ªt
=
	`GëSîvURL
(
ouçut
 , (output));

650 
	`EXPECT_EQ
(
	`°∫cmp
(
ouçut
 , "hâps://www.å181Rfc.com/xc⁄f/swu/°b", 
	`°æí
("https://www.tr181Rfc.com/xconf/swu/stb")),0);

651 
	`¥ötf
("Ouçuà========================%s\¿", 
ouçut
);

652 
	`¥ötf
("£rvUæ =======================%†\¿",
£rvUæ
);

653 
ªt
 = 
	`sy°em
("rm -f /tmp/swupdate.conf");

654 
ªt
 = 
	`sy°em
("rm -f /tmp/device_gtest.prop");

655 
	`¥ötf
("Sîvî URL = %s\n", 
ouçut
);

656 
	}
}

657 
	$TEST_F
(
Devi˚ApiTe°Fixtuª
, 
Te°Name_GëBuûdTy≥_Suc˚ss
)

659 
ªt
;

660 
ouçut
[8];

661 
BUILDTYPE
 
eBuûdTy≥
;

662 
ªt
 = 
	`sy°em
("echo \"BUILD_TYPE=vbn\" > /tmp/device_gtest.prop");

663 
	`EXPECT_NE
(
	`GëBuûdTy≥
(
ouçut
, (ouçut), &
eBuûdTy≥
), 0);

664 
ªt
 = 
	`sy°em
("rm -f /tmp/device_gtest.prop");

665 
	`¥ötf
("Buûd Ty≥ = %s\n", 
ouçut
);

666 
	}
}

668 
	$TEST_F
(
Devi˚ApiTe°Fixtuª
, 
Te°Name_GëEx≥rõn˚_NuŒcheck
)

670 
	`EXPECT_EQ
(
	`GëEx≥rõn˚
(
NULL
, 0), 0);

671 
	}
}

673 
	$TEST_F
(
Devi˚ApiTe°Fixtuª
,
Te°Name_GëRemŸeInfo_NuŒcheck
)

675 
	`EXPECT_EQ
(
	`GëRemŸeInfo
(
NULL
, 0), 0);

676 
	}
}

678 
	$TEST_F
(
Devi˚ApiTe°Fixtuª
,
Te°Name_GëRemŸeInfo_Suc˚ss
)

680 
ªt
;

681 
pRemŸeInfo
[256] = {0};

682 
ªt
 = 
	`sy°em
("cpÑc-proxy-params.json /tmp/ ");

683 
	`EXPECT_NE
(
	`GëRemŸeInfo
(
pRemŸeInfo
, (pRemoteInfo)), 0);

684 
ªt
 = 
	`sy°em
("rm -rf /tmp/rc-proxy-params.json ");

685 
	`¥ötf
("RemŸeInfÿ%s\n",
pRemŸeInfo
);

686 
	}
}

687 
	$TEST_F
(
Devi˚ApiTe°Fixtuª
,
Te°Name_GëRemŸeInfo_Faû
)

689 
pRemŸeInfo
[256] = {0};

690 
	`EXPECT_EQ
(
	`GëRemŸeInfo
(
pRemŸeInfo
, (pRemoteInfo)), 0);

691 
	}
}

692 
	$TEST_F
(
Devi˚ApiTe°Fixtuª
,
Te°Name_GëRemŸeVîs_NuŒcheck
)

694 
	`EXPECT_EQ
(
	`GëRemŸeVîs
(
NULL
, 0), 0);

695 
	}
}

697 
	$TEST_F
(
Devi˚ApiTe°Fixtuª
,
Te°Name_GëRemŸeVîs_Suc˚ss
)

699 
ªt
;

700 
pRemŸeInfo
[256] = {0};

701 
ªt
 = 
	`sy°em
("cpÑc-proxy-params.json /tmp/ ");

702 
	`EXPECT_NE
(
	`GëRemŸeVîs
(
pRemŸeInfo
, (pRemoteInfo)), 0);

703 
ªt
 = 
	`sy°em
("rm -rf /tmp/rc-proxy-params.json ");

704 
	`¥ötf
("RemŸeVîsi⁄ = %s\n",
pRemŸeInfo
);

705 
	}
}

706 
	$TEST_F
(
Devi˚ApiTe°Fixtuª
,
Te°Name_GëRemŸeVîs_Faû
)

708 
pRemŸeInfo
[256] = {0};

709 
	`EXPECT_EQ
(
	`GëRemŸeVîs
(
pRemŸeInfo
, (pRemoteInfo)), 0);

710 
	}
}

	@unittest/deviceutils/deviceutils_gtest.cpp

19 
	~<gã°/gã°.h
>

20 
	~<gmock/gmock.h
>

21 
	~<io°ªam
>

22 
	~<uni°d.h
>

24 
	~"../mocks/devi˚utûs_mock.h
"

26 
	~"devi˚utûs.h
"

29 
	#JSON_STR_LEN
 1000

	)

31 
	#GTEST_DEFAULT_RESULT_FILEPATH
 "/tmp/Gã°_Rï‹t/"

	)

32 
	#GTEST_DEFAULT_RESULT_FILENAME
 "RdkFwDw∆d_Devi˚Utûs_gã°_ªp‹t.js⁄"

	)

33 
	#GTEST_REPORT_FILEPATH_SIZE
 256

	)

35 
usög
 
«me•a˚
 
ã°ög
;

36 
usög
 
«me•a˚
 
	g°d
;

37 
	gusög
 ::
ã°ög
::
Rëu∫
;

38 
	gusög
 ::
ã°ög
::
SåEq
;

41 
Devi˚UtûsMock
 *
	gg_Devi˚UtûsMock
 = 
NULL
;

43 ˛as†
	cDevi˚UtûsTe°Fixtuª
 : 
public
 ::
ã°ög
::
Te°
 {

44 
¥Ÿe˘ed
:

45 
Devi˚UtûsMock
 
mockDevi˚Utûs
;

47 
	$Devi˚UtûsTe°Fixtuª
()

49 
g_Devi˚UtûsMock
 = &
mockDevi˚Utûs
;

51 
vútuÆ
 ~
	$Devi˚UtûsTe°Fixtuª
()

53 
g_Devi˚UtûsMock
 = 
NULL
;

54 
	}
}

56 
vútuÆ
 
	$SëUp
()

58 
	`¥ötf
("%s\n", 
__func__
);

59 
	}
}

61 
vútuÆ
 
	$TórDown
()

63 
	`¥ötf
("%s\n", 
__func__
);

64 
	}
}

66 
	$SëUpTe°Ca£
()

68 
	`¥ötf
("%s\n", 
__func__
);

69 
	}
}

71 
	$TórDownTe°Ca£
()

73 
	`¥ötf
("%s\n", 
__func__
);

74 
	}
}

77 
	$TEST_F
(
Devi˚UtûsTe°Fixtuª
, 
Te°Name_°rùövÆidch¨_NuŒ
)

79 
	`EXPECT_EQ
(
	`°rùövÆidch¨
(
NULL
, 0), 0);

80 
	}
}

81 
	$TEST_F
(
Devi˚UtûsTe°Fixtuª
, 
Te°Name_°rùövÆidch¨_nŸNuŒ
)

83 
d©a
[32];

84 
	`¢¥ötf
(
d©a
, (data), "%s", "Satya@#123456");

85 
	`EXPECT_NE
(
	`°rùövÆidch¨
(
d©a
, (data)), 0);

86 
	}
}

87 
	$TEST_F
(
Devi˚UtûsTe°Fixtuª
, 
Te°Name_makeHâpHâps_NuŒ
)

89 
	`EXPECT_EQ
(
	`makeHâpHâps
(
NULL
, 0), 0);

90 
	}
}

91 
	$TEST_F
(
Devi˚UtûsTe°Fixtuª
, 
Te°Name_makeHâpHâps_nŸNuŒ
)

93 
d©a
[32];

94 
	`¢¥ötf
(
d©a
, (data), "%s", "https://xyz.com");

95 
	`EXPECT_NE
(
	`makeHâpHâps
(
d©a
, (data)), 0);

96 
	}
}

97 
	$TEST_F
(
Devi˚UtûsTe°Fixtuª
, 
Te°Name_makeHâpHâp_check
)

99 
d©a
[32];

100 
	`¢¥ötf
(
d©a
, (data), "%s", "http://xyz.com");

101 
	`EXPECT_NE
(
	`makeHâpHâps
(
d©a
, (data)), 0);

102 
	}
}

103 
	$TEST_F
(
Devi˚UtûsTe°Fixtuª
, 
Te°Name_makeHâpHâp_baduæ
)

105 
d©a
[32];

106 
	`¢¥ötf
(
d©a
, (data), "%s", "ht//xyz.com");

107 
	`EXPECT_NE
(
	`makeHâpHâps
(
d©a
, (data)), 0);

108 
	}
}

109 
	$TEST_F
(
Devi˚UtûsTe°Fixtuª
, 
Te°Name_MemDLAŒoc_NuŒ
)

111 
	`EXPECT_EQ
(
	`MemDLAŒoc
(
NULL
, 0), 1);

112 
	}
}

113 
	$TEST_F
(
Devi˚UtûsTe°Fixtuª
, 
Te°Name_MemDLAŒoc_N⁄NuŒ
)

115 
Dow∆ﬂdD©a
 
pDwnD©a
;

116 
	`EXPECT_EQ
(
	`MemDLAŒoc
(&
pDwnD©a
, (pDwnData)), 0);

117 
	}
}

118 
	$TEST_F
(
Devi˚UtûsTe°Fixtuª
, 
Te°Name_gë_sy°em_u±ime_NuŒ
)

120 
	`EXPECT_EQ
(
	`gë_sy°em_u±ime
(
NULL
), 
Ál£
);

121 
	}
}

122 
	$TEST_F
(
Devi˚UtûsTe°Fixtuª
, 
Te°Name_gë_sy°em_u±ime_N⁄NuŒ
)

124 
d©a
;

125 
	`EXPECT_EQ
(
	`gë_sy°em_u±ime
(&
d©a
), 
åue
);

126 
	}
}

127 
	$TEST_F
(
Devi˚UtûsTe°Fixtuª
, 
Te°Name_gëJRPCTokíD©a_BugOvîÊow
)

129 
tokí
[32];

130 
pJs⁄Så
[] = "\{\"token\":\"abcdefghijklmnopqrstuvwxyz1234567890abcdefghijklmnopqrstuvwxyz123456ujklmnbvxawer\",\"success\":true}";

131 
	`EXPECT_EQ
(
	`gëJRPCTokíD©a
(
tokí
, 
pJs⁄Så
, (token)), 0);

132 
	`¥ötf
("tokí = %s\n",
tokí
);

133 
	}
}

134 
	$TEST_F
(
Devi˚UtûsTe°Fixtuª
, 
Te°Name_gëJRPCTokíD©a_bufund
)

136 
tokí
[32];

137 
pJs⁄Så
[] = "\{\"token\":\"eybhg-Osn3s\",\"success\":true}";

138 
	`EXPECT_EQ
(
	`gëJRPCTokíD©a
(
tokí
, 
pJs⁄Så
, (token)), 0);

139 
	`¥ötf
("tokí = %s\n",
tokí
);

140 
	}
}

141 
	$TEST_F
(
Devi˚UtûsTe°Fixtuª
, 
Te°Name_gëJRPCTokíD©a_NuŒ
)

143 
	`EXPECT_EQ
(
	`gëJRPCTokíD©a
(
NULL
, NULL, 0), -1);

144 
	}
}

146 
	$TEST_F
(
Devi˚UtûsTe°Fixtuª
, 
Te°Name_gëJs⁄Rpc_Suc˚ss
)

148 
ªt
;

149 
Dow∆ﬂdD©a
 
pJs⁄Rpc
;

150 
FILE
 *
Â
 = 
NULL
;

151 
pJs⁄Rpc
.
pvOut
 = 
	`mÆloc
(50);

152 
pJs⁄Rpc
.
d©asize
 = 0;

153 
pJs⁄Rpc
.
memsize
 = 50;

154 
po°_d©a
[] = "Testing";

155 
ªt
 = 
	`sy°em
("echo \{\"token\":\"eybhg-Osn3s\",\"success\":true} > /tmp/jrpctoken.txt");

165 
	`EXPECT_CALL
(*
g_Devi˚UtûsMock
, 
	`v_£cuª_p›í
(
_
, _, _)).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(
Â
));

166 
	`EXPECT_CALL
(*
g_Devi˚UtûsMock
, 
	`doCuæInô
()).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
((
size_t
 *)1));

167 
	`EXPECT_CALL
(*
g_Devi˚UtûsMock
, 
	`gëJs⁄RpcD©a
(
_
, _, _, _)).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(0));

168 
	`EXPECT_CALL
(*
g_Devi˚UtûsMock
, 
	`doSt›Dow∆ﬂd
(
_
)).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
());

169 
	`EXPECT_EQ
(
	`gëJs⁄Rpc
(
po°_d©a
, &
pJs⁄Rpc
), 0);

170 
ªt
 = 
	`sy°em
("rm -f /tmp/jrpctoken.txt");

171 
	}
}

172 
	$TEST_F
(
Devi˚UtûsTe°Fixtuª
, 
Te°Name_gëJs⁄Rpc_Faû
)

174 
ªt
;

175 
Dow∆ﬂdD©a
 
pJs⁄Rpc
;

176 
FILE
 *
Â
 = 
NULL
;

177 
pJs⁄Rpc
.
pvOut
 = 
	`mÆloc
(50);

178 
pJs⁄Rpc
.
d©asize
 = 0;

179 
pJs⁄Rpc
.
memsize
 = 50;

180 
po°_d©a
[] = "Testing";

181 
ªt
 = 
	`sy°em
("echo \{\"token\":\"eybhg-Osn3s\",\"success\":true} > /tmp/jrpctoken.txt");

191 
	`EXPECT_CALL
(*
g_Devi˚UtûsMock
, 
	`v_£cuª_p›í
(
_
, _, _)).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(
Â
));

192 
	`EXPECT_CALL
(*
g_Devi˚UtûsMock
, 
	`doCuæInô
()).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
((
size_t
 *)1));

193 
	`EXPECT_CALL
(*
g_Devi˚UtûsMock
, 
	`gëJs⁄RpcD©a
(
_
, _, _, _)).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(-1));

194 
	`EXPECT_CALL
(*
g_Devi˚UtûsMock
, 
	`doSt›Dow∆ﬂd
(
_
)).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
());

195 
	`EXPECT_EQ
(
	`gëJs⁄Rpc
(
po°_d©a
, &
pJs⁄Rpc
), -1);

196 
ªt
 = 
	`sy°em
("rm -f /tmp/jrpctoken.txt");

197 
	}
}

198 
	$TEST_F
(
Devi˚UtûsTe°Fixtuª
, 
Te°Name_gëIn°ÆÀdBundÀFûeLi°_Faû
)

200 
mëaD©aFûeLi°_°
 *
mëa_ªt
 = 
NULL
;

201 
	`EXPECT_EQ
(
	`gëIn°ÆÀdBundÀFûeLi°
(), 
mëa_ªt
);

202 
	}
}

203 
	$TEST_F
(
Devi˚UtûsTe°Fixtuª
, 
Te°Name_gëMëaD©aFûe_NuŒ
)

205 
mëaD©aFûeLi°_°
 *
mëa_ªt
 = 
NULL
;

206 
	`EXPECT_EQ
(
	`gëMëaD©aFûe
("./ã°"), 
mëa_ªt
);

207 
	}
}

208 
	$TEST_F
(
Devi˚UtûsTe°Fixtuª
, 
Te°Name_mîgeLi°s_NuŒ
)

210 
mëaD©aFûeLi°_°
 *
mëa_ªt
 = 
NULL
;

211 
	`EXPECT_EQ
(
	`mîgeLi°s
(
NULL
, NULL), 
mëa_ªt
);

212 
	}
}

214 
GTEST_API_
 
	$maö
(
¨gc
, *
¨gv
[]){

215 
ã°ªsu…s_fuŒfûï©h
[
GTEST_REPORT_FILEPATH_SIZE
];

216 
buf„r
[
GTEST_REPORT_FILEPATH_SIZE
];

218 
	`mem£t
–
ã°ªsu…s_fuŒfûï©h
, 0, 
GTEST_REPORT_FILEPATH_SIZE
 );

219 
	`mem£t
–
buf„r
, 0, 
GTEST_REPORT_FILEPATH_SIZE
 );

221 
	`¢¥ötf
–
ã°ªsu…s_fuŒfûï©h
, 
GTEST_REPORT_FILEPATH_SIZE
, "js⁄:%s%s" , 
GTEST_DEFAULT_RESULT_FILEPATH
 , 
GTEST_DEFAULT_RESULT_FILENAME
);

222 ::
ã°ög
::
	`GTEST_FLAG
(
ouçut
Ë
ã°ªsu…s_fuŒfûï©h
;

223 ::
ã°ög
::
	`InôGoogÀTe°
(&
¨gc
, 
¨gv
);

225 
cout
 << "Sèπög devi˚utû†™d devi˚ápòAµ ===================>" << 
ídl
;

226  
	`RUN_ALL_TESTS
();

227 
	}
}

	@unittest/deviceutils/json_parse.c

19 
	~<°dio.h
>

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

22 
	~<˘y≥.h
>

23 
	~<f˙é.h
>

24 
	~<uni°d.h
>

25 
	~<°dboﬁ.h
>

26 
	~<sys/mm™.h
>

27 
	~<sys/°©.h
>

28 
	~<cjs⁄/cJSON.h
>

29 
	~"js⁄_∑r£.h
"

30 
	~"rdkv_cdl_log_wøµî.h
"

50 
	$wrôeIãmVÆ
–
FILE
* 
Âout
, *
pName
, *
pVÆ
, 
£ãnvv¨s
 )

52 
iRë
 = 0;

54 if–
pName
 !
NULL
 )

56 if–
Âout
 !
NULL
 )

58 
	`Ârötf
–
Âout
, "%s=", 
pName
 );

59 if–
pVÆ
 !
NULL
 )

61 
	`Ârötf
–
Âout
, "\"%s\"\n", 
pVÆ
 );

65 
	`SWLOG_ERROR
( "writeItemVal:ÖVal isÇotÖrintable\n" );

66 
iRë
 = 1;

69 if–
pName
 !
NULL
 && 
pVÆ
 != NULL )

71 if–
£ãnvv¨s
 )

73 
iRë
 = 
	`£ãnv
–
pName
, 
pVÆ
, 1 );

74 if–
iRë
 )

76 
	`SWLOG_ERROR
–"wrôeIãmVÆ: sëív–%s, %s, 1 )Ñëu∫ed %d\n", 
pName
, 
pVÆ
, 
iRë
 );

83 
	`SWLOG_ERROR
( "writeItemVal: one or more inputárgs invalid\n" );

84 
iRë
 = 1;

86  
iRë
;

87 
	}
}

100 
	$c⁄vîtInvÆidCh¨s
–*
pSå
 )

102 if–
pSå
 !
NULL
 )

104  *
pSå
 )

106 if–(*
pSå
 < '0') ||

107 (*
pSå
 > '9' && *pStr < 'A') ||

108 (*
pSå
 > 'Z' && *pStr < 'a' && *pStr != '_') ||

109 (*
pSå
 > 'z') )

111 *
pSå
 = '_';

113 ++
pSå
;

116 
	}
}

118 
size_t
 
	$gëôemvÆ
–
cJSON
 *
pcôem
, *
pOut
, 
size_t
 
szpOutSize
 )

120 *
pVÆ
 = 
NULL
;

121 
iRô
;

122 
size_t
 
Àn
 = 0;

123 
cOut
[50];

125 if–
	`cJSON_IsSåög
–
pcôem
 ) )

127 
pVÆ
 = 
pcôem
->
vÆue°rög
;

129 if–
	`cJSON_IsBoﬁ
–
pcôem
 ) )

131 
pVÆ
 = 
	`cJSON_IsTrue
–
pcôem
 ) ? "true" : "false";

133 if–
	`cJSON_IsNumbî
–
pcôem
 ) )

135 
iRô
 = 
	`¢¥ötf
–
cOut
, –cOuà), "%f", 
pcôem
->
vÆuedoubÀ
 );

136 if–
iRô
 > 0 )

138 --
iRô
;

140 
pVÆ
 = &
cOut
[
iRô
];

141  *
pVÆ
 ='0' && 
iRô
 )

143 *
pVÆ
 = 0;

144 --
pVÆ
;

145 --
iRô
;

147 if–*
pVÆ
 == '.' )

149 *
pVÆ
 = 0;

151 
pVÆ
 = 
cOut
;

154 if–
pVÆ
 !
NULL
 )

156 
Àn
 = 
	`¢¥ötf
–
pOut
, 
szpOutSize
, "%s", 
pVÆ
 );

158 if–
szpOutSize
 )

160 *
pOut
 = 0;

162  
Àn
;

163 
	}
}

179 
	$SëJs⁄V¨s
–*
fûeIn
, *
fûeOut
, 
£ãnvv¨s
 )

181 
FILE
 *
Âout
 = 
NULL
;

182 
cJSON
 *
js⁄
 = 
NULL
;

183 
cJSON
 *
ôem
 = 
NULL
;

184 
iRë
 = 1;

185 *
pSå
, *
pName
, *
pVÆ
;

186 
cOut
[100];

189 
pSå
 = 
	`GëJs⁄
–
fûeIn
 );

190 if–
pSå
 !
NULL
 )

192 
js⁄
 = (
cJSON
 *)
	`P¨£Js⁄Så
–
pSå
 );

193 if–
js⁄
 )

195 if–
fûeOut
 )

197 if–(
Âout
=
	`f›í
–
fûeOut
, "w" )Ë=
NULL
 )

199 
	`SWLOG_INFO
–"SëJs⁄V¨s: c™nŸ o≥¿%†f‹ wrôög\n", 
fûeOut
 );

202 
	`cJSON_AºayF‹Each
–
ôem
, 
js⁄
 )

204 if–
Âout
 || 
£ãnvv¨s
 )

206 
pName
 = 
ôem
->
°rög
;

207 if–!
	`cJSON_IsInvÆid
–
ôem
 ) && 
pName
 )

209 
	`c⁄vîtInvÆidCh¨s
–
pName
 );

210 
	`gëôemvÆ
–
ôem
, 
cOut
, (cOut) );

212 
iRë
 = 
	`wrôeIãmVÆ
–
Âout
, 
pName
, 
cOut
, 
£ãnvv¨s
 );

216 
	`SWLOG_ERROR
( "SetJsonVars: item is invalid\n" );

220 if–
Âout
 )

222 
	`f˛o£
–
Âout
 );

224 
	`cJSON_Dñëe
–
js⁄
 );

228 
	`SWLOG_ERROR
( "SetJsonVar: cJSON_ParseÉrror writing\n" );

230 
	`‰ì
–
pSå
 );

234 
	`SWLOG_ERROR
( "SetJsonVars: GetJsonÑeturn NULL\n");

236  
iRë
;

237 
	}
}

252 
JSON
 *
	$P¨£Js⁄Så
–*
pJs⁄Så
 )

254 
JSON
 *
pjs⁄
 = 
NULL
;

256 if–
pJs⁄Så
 !
NULL
 )

258 
pjs⁄
 = (
JSON
*)
	`cJSON_P¨£
–
pJs⁄Så
 );

262 
	`SWLOG_ERROR
( "ParseJsonStr Error: No JSON stringÅoÖarse\n" );

264  
pjs⁄
;

265 
	}
}

276 
	$FªeJs⁄
–
JSON
 *
pJs⁄
 )

278 
ªt
 = -1;

280 if–
pJs⁄
 !
NULL
 )

282 
	`cJSON_Dñëe
–(
cJSON
*)
pJs⁄
 );

283 
ªt
 = 0;

287 
	`SWLOG_ERROR
( "FreeJson Error: No Json objectÅo free\n" );

289  
ªt
;

290 
	}
}

308 
JSON
* 
	$GëJs⁄Iãm
–
JSON
 *
pJs⁄
, *
pVÆToGë
 )

310 
JSON
 *
ôem
 = 
NULL
;

312 if–
pJs⁄
 !
NULL
 && 
pVÆToGë
 != NULL && *pValToGet )

314 
ôem
=(
JSON
 *)
	`cJSON_GëObje˘Iãm
–(
cJSON
 *)
pJs⁄
, 
pVÆToGë
 );

317  
ôem
;

318 
	}
}

340 
size_t
 
	$GëJs⁄VÆFromSåög
–*
pJs⁄Så
, *
pVÆToGë
, *
pOuçutVÆ
, 
size_t
 
maxÀn
 )

342 
JSON
 *
pjs⁄
;

343 
size_t
 
szLí
 = 0;

345 if–
pJs⁄Så
 !
NULL
 && 
pOuçutVÆ
 != NULL )

347 
pjs⁄
 = 
	`P¨£Js⁄Så
–
pJs⁄Så
 );

348 if–
pjs⁄
 !
NULL
 )

350 
szLí
 = 
	`GëJs⁄VÆ
–
pjs⁄
, 
pVÆToGë
, 
pOuçutVÆ
, 
maxÀn
 );

351 
	`FªeJs⁄
–
pjs⁄
 );

354  
szLí
;

355 
	}
}

377 
size_t
 
	$GëJs⁄VÆ
–
JSON
 *
pJs⁄
, *
pVÆToGë
, *
pOuçutVÆ
, 
size_t
 
maxÀn
 )

379 
cJSON
 *
pcjs⁄
 = 
NULL
;

380 
cJSON
 *
ôem
 = 
NULL
;

381 
size_t
 
Àn
 = 0;

383 if–
pOuçutVÆ
 !
NULL
 && 
maxÀn
 )

385 *
pOuçutVÆ
 = 0;

386 if–
pJs⁄
 !
NULL
 )

388 
pcjs⁄
 = (
cJSON
*)
pJs⁄
;

389 if–
pVÆToGë
 !
NULL
 && *pValToGet )

391 if–(
ôem
=
	`cJSON_GëObje˘Iãm
–
pcjs⁄
, 
pVÆToGë
 )) )

393 
Àn
 = 
	`gëôemvÆ
–
ôem
, 
pOuçutVÆ
, 
maxÀn
 );

398 
	`SWLOG_ERROR
( "GetJsonVal: Error,Ço valueÅo get\n" );

403 
	`SWLOG_ERROR
( "GetJsonVal: Error,Ço json objectÅo search\n" );

408 
	`SWLOG_ERROR
( "GetJsonVal: Error,ÇoÖlaceÅo store output\n" );

410  
Àn
;

411 
	}
}

435 
size_t
 
	$GëJs⁄VÆC⁄èöögFromSåög
–*
pJs⁄Så
, *
pVÆToGë
, *
pOuçutVÆ
, 
size_t
 
maxÀn
 )

437 
JSON
 *
pjs⁄
;

438 
size_t
 
szLí
 = 0;

440 if–
pJs⁄Så
 !
NULL
 && 
pOuçutVÆ
 != NULL )

442 
pjs⁄
 = 
	`P¨£Js⁄Så
–
pJs⁄Så
 );

443 if–
pjs⁄
 !
NULL
 )

445 
szLí
 = 
	`GëJs⁄VÆC⁄èöög
–
pjs⁄
, 
pVÆToGë
, 
pOuçutVÆ
, 
maxÀn
 );

446 
	`FªeJs⁄
–
pjs⁄
 );

449  
szLí
;

450 
	}
}

477 
size_t
 
	$GëJs⁄VÆC⁄èöög
–
JSON
 *
pJs⁄
, *
pVÆToGë
, *
pOuçutVÆ
, 
size_t
 
maxÀn
 )

479 
cJSON
 *
pcjs⁄
 = 
NULL
;

480 
cJSON
 *
pcôem
 = 
NULL
;

481 *
pName
;

482 
size_t
 
Àn
 = 0;

483 
i
 = 0, 
ªm_•a˚
;

485 if–
pOuçutVÆ
 !
NULL
 && 
maxÀn
 )

487 *
pOuçutVÆ
 = 0;

488 if–
pJs⁄
 !
NULL
 )

490 
pcjs⁄
 = (
cJSON
 *)
pJs⁄
;

491 if–
pVÆToGë
 !
NULL
 && *pValToGet )

493 
	`cJSON_AºayF‹Each
–
pcôem
, 
pcjs⁄
 )

495 
pName
 = 
pcôem
->
°rög
;

496 if–!
	`cJSON_IsInvÆid
–
pcôem
 ) && 
pName
 )

498 
	`c⁄vîtInvÆidCh¨s
–
pName
 );

499 if–
	`°r°r
–
pName
, 
pVÆToGë
 ) )

501 
pName
 = 
pOuçutVÆ
 + 
Àn
;

502 
ªm_•a˚
 = 
maxÀn
 - 
Àn
;

503 if–
i
 && 
ªm_•a˚
 >= 2 )

505 *
pName
++ = ',';

506 ++
Àn
;

507 --
ªm_•a˚
;

509 if–
ªm_•a˚
 > 0 )

511 
i
 = 
	`gëôemvÆ
–
pcôem
, 
pName
, 
ªm_•a˚
 );

512 
Àn
 +
i
;

513 if–
Àn
 >
maxÀn
 )

522 
	`SWLOG_ERROR
( "GetJsonValContaining: item is invalid\n" );

528 
	`SWLOG_ERROR
( "GetJsonValContaining: Error,Ço valueÅo get\n" );

533 
	`SWLOG_ERROR
( "GetJsonValContaining: Error,Ço json objectÅo search\n" );

538 
	`SWLOG_ERROR
( "GetJsonValContaining: Error,ÇoÖlaceÅo store output\n" );

540  
Àn
;

541 
	}
}

553 * 
	$GëJs⁄
–*
fûíame_ö
 )

555 
°©
 
°©buf
;

556 *
pJs⁄
 = 
NULL
;

557 *
pTmp
;

558 *
pM≠
;

559 *
pc
;

560 
size_t
 
°Fûesize
;

561 
size_t
 
°I
;

562 
fd
;

564 if–
fûíame_ö
 !
NULL
 )

566 if–(
fd
=
	`›í
–
fûíame_ö
, 
O_RDONLY
)) != -1 )

568 if–
	`f°©
 (
fd
, &
°©buf
) == 0 )

570 
°Fûesize
 = (
size_t
)
°©buf
.
°_size
;

571 if–(
pM≠
=(*)
	`mm≠
–
NULL
, 
°Fûesize
, 
PROT_READ
, 
MAP_PRIVATE
, 
fd
, 0 )Ë!
MAP_FAILED
 )

573 
pTmp
 = 
pJs⁄
 = (*)
	`mÆloc
–(
°Fûesize
 + 1) * () );

574 if–
pJs⁄
 !
NULL
 )

576 *
pJs⁄
 = 0;

577 
pc
 = 
pM≠
;

578 
°I
 = 
°Fûesize
;

579  
°I
-- && *
pc
 )

581 *
pTmp
++ = *
pc
++;

583 *
pTmp
 = 0;

587 
	`SWLOG_ERROR
( "GetJson: UnableÅoállocate memory\n" );

589 
	`munm≠
–
pM≠
, 
°Fûesize
 );

593 
	`SWLOG_ERROR
–"GëJs⁄: U«bÀÅÿ¸óã mm≠ f‹ %s\n", 
fûíame_ö
 );

598 
	`SWLOG_ERROR
–"GëJs⁄: U«bÀÅÿ°© %s\n", 
fûíame_ö
 );

600 
	`˛o£
–
fd
 );

604 
	`SWLOG_ERROR
–"GëJs⁄: U«bÀÅÿ›í %†f‹Ñódög\n", 
fûíame_ö
 );

609 
	`SWLOG_ERROR
( "GetJson: No input filename\n" );

612  
pJs⁄
;

613 
	}
}

624 
boﬁ
 
	$IsJs⁄Aºay
–
JSON
 *
pJs⁄
 )

626 –(
boﬁ
)
	`cJSON_IsAºay
–(
cJSON
 *)
pJs⁄
 ) );

627 
	}
}

638 
	$GëJs⁄AºaySize
–
JSON
 *
pJs⁄
 )

640 
num
 = 0;

642 if–
	`cJSON_IsAºay
–(
cJSON
 *)
pJs⁄
 ) )

644 
num
 = ()
	`cJSON_GëAºaySize
–(
cJSON
 *)
pJs⁄
 );

646  
num
;

647 
	}
}

660 
JSON
* 
	$GëJs⁄AºayIãm
–
JSON
 *
pJs⁄
, 
ödex
 )

663  (
JSON
*)
	`cJSON_GëAºayIãm
–(
cJSON
 *)
pJs⁄
, 
ödex
 );

664 
	}
}

	@unittest/deviceutils/json_parse.h

19 #i‚de‡
__JSON_PARSE_H_


20 
	#__JSON_PARSE_H_


	)

22 
	~<cjs⁄/cJSON.h
>

24 
cJSON
 
	tJSON
;

39 
SëJs⁄V¨s
(*
fûeIn
, *
fûeOut
, 
£ãnvv¨s
);

53 
JSON
 *
P¨£Js⁄Så
(*
pJs⁄Så
);

62 
FªeJs⁄
(
JSON
 *
pJs⁄
);

79 
JSON
* 
GëJs⁄Iãm
(JSON *
pJs⁄
, *
pVÆToGë
);

101 
size_t
 
GëJs⁄VÆFromSåög
(*
pJs⁄Så
, *
pVÆToGë
, *
pOuçutVÆ
, size_à
maxÀn
);

123 
size_t
 
GëJs⁄VÆ
(
JSON
 *
pJs⁄
, *
pVÆToGë
, *
pOuçutVÆ
, size_à
maxÀn
);

147 
size_t
 
GëJs⁄VÆC⁄èöögFromSåög
(*
pJs⁄Så
, *
pVÆToGë
, *
pOuçutVÆ
, size_à
maxÀn
);

174 
size_t
 
GëJs⁄VÆC⁄èöög
(
JSON
 *
pJs⁄
, *
pVÆToGë
, *
pOuçutVÆ
, size_à
maxÀn
);

186 * 
GëJs⁄
(*
fûíame_ö
);

197 
boﬁ
 
IsJs⁄Aºay
(
JSON
 *
pJs⁄
);

208 
GëJs⁄AºaySize
(
JSON
 *
pJs⁄
);

221 
JSON
* 
GëJs⁄AºayIãm
(JSON *
pJs⁄
, 
ödex
);

	@unittest/fwdl_interface_gtest.cpp

19 
	~<gã°/gã°.h
>

20 
	~<gmock/gmock.h
>

21 
	~<io°ªam
>

22 
	~<uni°d.h
>

25 
	~"rfcöãrÁ˚.h
"

26 
	~"ürmI¡îÁ˚.h
"

27 
Dw∆St›EvítH™dÀr
(c⁄° *
ow√r
, 
IARM_EvítId_t
 
evítId
, *
d©a
, 
size_t
 
Àn
);

29 
	~"mocks/öãrÁ˚_mock.h
"

31 
	#IMG_DWL_EVENT
 "ImageDwldEvít"

	)

32 
	#FW_STATE_EVENT
 "Fúmw¨eSèãEvít"

	)

34 
	#GTEST_DEFAULT_RESULT_FILEPATH
 "/tmp/Gã°_Rï‹t/"

	)

35 
	#GTEST_DEFAULT_RESULT_FILENAME
 "RdkFwDw∆d_I¡îÁ˚_gã°_ªp‹t.js⁄"

	)

36 
	#GTEST_REPORT_FILEPATH_SIZE
 256

	)

38 
usög
 
«me•a˚
 
ã°ög
;

39 
usög
 
«me•a˚
 
	g°d
;

40 
	gusög
 ::
ã°ög
::
Rëu∫
;

41 
	gusög
 ::
ã°ög
::
SåEq
;

43 
FwDlI¡îÁ˚Mock
 *
	gg_I¡îÁ˚Mock
 = 
NULL
;

45 ˛as†
	cI¡îÁ˚Te°Fixtuª
 : 
public
 ::
ã°ög
::
Te°
 {

46 
¥Ÿe˘ed
:

47 
FwDlI¡îÁ˚Mock
 
mockfwdlI¡îÁ˚
;

49 
	$I¡îÁ˚Te°Fixtuª
()

51 
g_I¡îÁ˚Mock
 = &
mockfwdlI¡îÁ˚
;

53 
vútuÆ
 ~
	$I¡îÁ˚Te°Fixtuª
()

55 
g_I¡îÁ˚Mock
 = 
NULL
;

56 
	}
}

58 
vútuÆ
 
	$SëUp
()

60 
	`¥ötf
("%s\n", 
__func__
);

61 
	}
}

63 
vútuÆ
 
	$TórDown
()

65 
	`¥ötf
("%s\n", 
__func__
);

66 
	}
}

68 
	$SëUpTe°Ca£
()

70 
	`¥ötf
("%s\n", 
__func__
);

71 
	}
}

73 
	$TórDownTe°Ca£
()

75 
	`¥ötf
("%s\n", 
__func__
);

76 
	}
}

79 
	$TEST_F
(
I¡îÁ˚Te°Fixtuª
, 
Te°Name_ªad_RFCPr›îtyNuŒ
)

91 
	`EXPECT_EQ
(
	`ªad_RFCPr›îty
(
NULL
, NULL, NULL, 0), -1);

92 
	}
}

93 
	$TEST_F
(
I¡îÁ˚Te°Fixtuª
, 
Te°Name_ªad_RFCPr›îtySuc˚ss
)

95 
d©a
[16] = {0};

96 
	`EXPECT_CALL
(*
g_I¡îÁ˚Mock
, 
	`gëRFCP¨amëî
(
_
, _, _)).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(1));

97 
	`EXPECT_EQ
(
	`ªad_RFCPr›îty
("In¸emíèlCDL", "rfccdl", 
d©a
, (data)), 1);

98 
	}
}

99 
	$TEST_F
(
I¡îÁ˚Te°Fixtuª
, 
Te°Name_ªad_RFCPr›îtyFaû
)

101 
d©a
[16] = {0};

102 
	`EXPECT_CALL
(*
g_I¡îÁ˚Mock
, 
	`gëRFCP¨amëî
(
_
, _, _)).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(0));

103 
	`EXPECT_EQ
(
	`ªad_RFCPr›îty
("In¸emíèlCDL", "rfccdl", 
d©a
, (data)), -1);

104 
	}
}

105 
	$TEST_F
(
I¡îÁ˚Te°Fixtuª
, 
Te°Name_wrôe_RFCPr›îtyNuŒ
)

107 
	`EXPECT_EQ
(
	`wrôe_RFCPr›îty
(
NULL
, NULL, NULL, 0), -1);

108 
	}
}

109 
	$TEST_F
(
I¡îÁ˚Te°Fixtuª
, 
Te°Name_wrôe_RFCPr›îtySuc˚ss
)

111 
	`EXPECT_CALL
(*
g_I¡îÁ˚Mock
, 
	`£tRFCP¨amëî
(
_
, _, _,_)).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(1));

112 
	`EXPECT_EQ
(
	`wrôe_RFCPr›îty
("int","fwdlrfc","true", 1), 1);

113 
	}
}

114 
	$TEST_F
(
I¡îÁ˚Te°Fixtuª
, 
Te°Name_gëRFCSëtögsSuc˚ss
)

116 
Rfc_t
 
rfcvÆue
;

117 
	`mem£t
(&
rfcvÆue
, '\0', (rfcvalue));

118 
	`EXPECT_CALL
(*
g_I¡îÁ˚Mock
, 
	`gëRFCP¨amëî
(
_
, _, _)).
	`Times
(4).
	`WûlRïóãdly
(
	`Rëu∫
(1));

119 
	`EXPECT_EQ
(
	`gëRFCSëtögs
(&
rfcvÆue
), 0);

120 
	}
}

121 
	$TEST_F
(
I¡îÁ˚Te°Fixtuª
, 
Te°Name_gëRFCSëtögsFaû
)

123 
Rfc_t
 
rfcvÆue
;

124 
	`mem£t
(&
rfcvÆue
, '\0', (rfcvalue));

125 
	`EXPECT_CALL
(*
g_I¡îÁ˚Mock
, 
	`gëRFCP¨amëî
(
_
, _, _)).
	`Times
(4).
	`WûlRïóãdly
(
	`Rëu∫
(-1));

126 
	`EXPECT_EQ
(
	`gëRFCSëtögs
(&
rfcvÆue
), 0);

127 
	}
}

128 
	$TEST_F
(
I¡îÁ˚Te°Fixtuª
, 
Te°Name_wrôe_RFCPr›îtySuc˚ss2
)

130 
	`EXPECT_CALL
(*
g_I¡îÁ˚Mock
, 
	`£tRFCP¨amëî
(
_
, _, _,_)).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(1));

131 
	`EXPECT_EQ
(
	`wrôe_RFCPr›îty
("int","fwdlrfc","true", 2), 1);

132 
	}
}

133 
	$TEST_F
(
I¡îÁ˚Te°Fixtuª
, 
Te°Name_wrôe_RFCPr›îtySuc˚ss3
)

135 
	`EXPECT_CALL
(*
g_I¡îÁ˚Mock
, 
	`£tRFCP¨amëî
(
_
, _, _,_)).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(1));

136 
	`EXPECT_EQ
(
	`wrôe_RFCPr›îty
("int","fwdlrfc","true", 3), 1);

137 
	}
}

138 
	$TEST_F
(
I¡îÁ˚Te°Fixtuª
, 
Te°Name_wrôe_RFCPr›îtyFaû
)

140 
	`EXPECT_CALL
(*
g_I¡îÁ˚Mock
, 
	`£tRFCP¨amëî
(
_
, _, _,_)).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(-1));

141 
	`EXPECT_CALL
(*
g_I¡îÁ˚Mock
, 
	`gëRFCEº‹Såög
(
_
)).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(0));

142 
	`EXPECT_EQ
(
	`wrôe_RFCPr›îty
("int","fwdlrfc","true", 1), -1);

143 
	}
}

144 
	$TEST_F
(
I¡îÁ˚Te°Fixtuª
, 
Te°Name_isMésE«bÀdSuc˚ss
)

146 
	`EXPECT_CALL
(*
g_I¡îÁ˚Mock
, 
	`gëRFCP¨amëî
(
_
, _, _)).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(1));

147 
	`EXPECT_CALL
(*
g_I¡îÁ˚Mock
, 
	`gëDevi˚Pr›îtyD©a
(
_
, _, _)).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(0));

148 
	`EXPECT_EQ
(
	`isMésE«bÀd
("PLATCO"), 1);

149 
	}
}

150 
	$TEST_F
(
I¡îÁ˚Te°Fixtuª
, 
Te°Name_isMésE«bÀdFaû
)

152 
	`EXPECT_CALL
(*
g_I¡îÁ˚Mock
, 
	`gëRFCP¨amëî
(
_
, _, _)).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(-1));

153 
	`EXPECT_CALL
(*
g_I¡îÁ˚Mock
, 
	`gëDevi˚Pr›îtyD©a
(
_
, _, _)).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(1));

154 
	`EXPECT_EQ
(
	`isMésE«bÀd
("PLATCO"), 0);

155 
	}
}

157 
	$TEST_F
(
I¡îÁ˚Te°Fixtuª
, 
Te°Name_isMmgbÀNŸifyE«bÀdFaû
)

159 
	`EXPECT_CALL
(*
g_I¡îÁ˚Mock
, 
	`gëRFCP¨amëî
(
_
, _, _)).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(-1));

160 
	`EXPECT_EQ
(
	`isMmgbÀNŸifyE«bÀd
(), 
Ál£
);

161 
	}
}

162 
	$TEST_F
(
I¡îÁ˚Te°Fixtuª
, 
Te°Name_isMmgbÀNŸifyE«bÀdSuc˚ss
)

164 
	`EXPECT_CALL
(*
g_I¡îÁ˚Mock
, 
	`gëRFCP¨amëî
(
_
, _, _)).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(1));

165 
	`EXPECT_EQ
(
	`isMmgbÀNŸifyE«bÀd
(), 
åue
);

166 
	}
}

167 
	$TEST_F
(
I¡îÁ˚Te°Fixtuª
, 
Te°Name_isDebugSîvi˚sE«bÀdFaû
)

169 
	`EXPECT_CALL
(*
g_I¡îÁ˚Mock
, 
	`gëRFCP¨amëî
(
_
, _, _)).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(-1));

170 
	`EXPECT_EQ
(
	`isDebugSîvi˚sE«bÀd
(), 
Ál£
);

171 
	}
}

172 
	$TEST_F
(
I¡îÁ˚Te°Fixtuª
, 
Te°Name_isDebugSîvi˚sE«bÀSuc˚ss
)

174 
	`EXPECT_CALL
(*
g_I¡îÁ˚Mock
, 
	`gëRFCP¨amëî
(
_
, _, _)).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(1));

175 
	`EXPECT_EQ
(
	`isDebugSîvi˚sE«bÀd
(), 
åue
);

176 
	}
}

177 
	$TEST_F
(
I¡îÁ˚Te°Fixtuª
, 
Te°Name_isIn¸emëÆCDLE«bÀSuc˚ss
)

179 
	`EXPECT_CALL
(*
g_I¡îÁ˚Mock
, 
	`gëRFCP¨amëî
(
_
, _, _)).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(1));

181 
	`EXPECT_CALL
(*
g_I¡îÁ˚Mock
, 
	`fûePª£¡Check
(
_
)).
	`WûlOn˚
(
	`Rëu∫
(0));

182 
	`EXPECT_EQ
(
	`isIn¸emëÆCDLE«bÀ
("/tmp/123.bin"), 1);

183 
	}
}

184 
	$TEST_F
(
I¡îÁ˚Te°Fixtuª
, 
Te°Name_isIn¸emëÆCDLE«bÀFaûrfc
)

186 
	`EXPECT_CALL
(*
g_I¡îÁ˚Mock
, 
	`gëRFCP¨amëî
(
_
, _, _)).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(-1));

189 
	`EXPECT_EQ
(
	`isIn¸emëÆCDLE«bÀ
("/tmp/123.bin"), 0);

190 
	}
}

191 
	$TEST_F
(
I¡îÁ˚Te°Fixtuª
, 
Te°Name_öô_evít_h™dÀrSuc˚ss
)

193 
c⁄√˘d©a
[] = "0";

194 
	`EXPECT_CALL
(*
g_I¡îÁ˚Mock
, 
	`IARM_Bus_Inô
(
_
)).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(0));

195 
	`EXPECT_CALL
(*
g_I¡îÁ˚Mock
, 
	`IARM_Bus_C⁄√˘
()).
	`WûlOn˚
(
	`Rëu∫
(0));

196 
	`EXPECT_CALL
(*
g_I¡îÁ˚Mock
, 
	`IARM_Bus_Regi°îEvítH™dÀr
(
_
,_,_)).
	`WûlOn˚
(
	`Rëu∫
(0));

197 
	`EXPECT_CALL
(*
g_I¡îÁ˚Mock
, 
	`IARM_Bus_IsC⁄√˘ed
(
_
, _))

198 .
	`Times
(2)

199 .
	`WûlRïóãdly
(
	`Invoke
([&
c⁄√˘d©a
]–c⁄° *
«me
, *
d©a
 ) {

200 i‡(
d©a
 !
NULL
) {

201 *
d©a
 = 
	`©oi
(
c⁄√˘d©a
);

203 *
d©a
 = 0;

207 
	`EXPECT_EQ
(
	`öô_evít_h™dÀr
(), 0);

208 
	}
}

209 
	$TEST_F
(
I¡îÁ˚Te°Fixtuª
, 
Te°Name_öô_evít_h™dÀrC⁄√˘ed
)

211 
c⁄√˘d©a
[] = "1";

212 
	`EXPECT_CALL
(*
g_I¡îÁ˚Mock
, 
	`IARM_Bus_IsC⁄√˘ed
(
_
, _))

213 .
	`Times
(1)

214 .
	`WûlRïóãdly
(
	`Invoke
([&
c⁄√˘d©a
]–c⁄° *
«me
, *
d©a
 ) {

215 i‡(
d©a
 !
NULL
) {

216 *
d©a
 = 
	`©oi
(
c⁄√˘d©a
);

218 *
d©a
 = 0;

222 
	`EXPECT_EQ
(
	`öô_evít_h™dÀr
(), 0);

223 
	}
}

224 
	$TEST_F
(
I¡îÁ˚Te°Fixtuª
, 
Te°Name_ãrm_evít_h™dÀrSuc˚ss
)

226 
	`EXPECT_CALL
(*
g_I¡îÁ˚Mock
, 
	`IARM_Bus_Tîm
()).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(0));

227 
	`EXPECT_CALL
(*
g_I¡îÁ˚Mock
, 
	`IARM_Bus_Disc⁄√˘
()).
	`WûlOn˚
(
	`Rëu∫
(0));

228 
	`EXPECT_CALL
(*
g_I¡îÁ˚Mock
, 
	`IARM_Bus_UnRegi°îEvítH™dÀr
(
_
,_)).
	`WûlOn˚
(
	`Rëu∫
(0));

229 
	`EXPECT_EQ
(
	`ãrm_evít_h™dÀr
(), 0);

230 
	}
}

231 
	$TEST_F
(
I¡îÁ˚Te°Fixtuª
, 
Te°Name_Dw∆St›EvítH™dÀrSuc˚ss
)

233 
d©a
 = 1;

234 
	`EXPECT_CALL
(*
g_I¡îÁ˚Mock
, 
	`gëAµMode
()).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(0));

235 
	`EXPECT_CALL
(*
g_I¡îÁ˚Mock
, 
	`öãru±Dw∆
(
_
)).
	`WûlOn˚
(
	`Rëu∫
(0));

236 
	`Dw∆St›EvítH™dÀr
("ã°", 
IARM_BUS_RDKVFWUPGRADER_MODECHANGED
, &
d©a
, 0);

237 
	`EXPECT_EQ
(0, 0);

238 
	}
}

239 
	$TEST_F
(
I¡îÁ˚Te°Fixtuª
, 
Te°Name_Dw∆St›EvítH™dÀrSuc˚ss1
)

241 
d©a
 = 1;

242 
	`EXPECT_CALL
(*
g_I¡îÁ˚Mock
, 
	`gëAµMode
()).
	`Times
(1).
	`WûlOn˚
(
	`Rëu∫
(1));

243 
	`Dw∆St›EvítH™dÀr
("ã°", 
IARM_BUS_RDKVFWUPGRADER_MODECHANGED
, &
d©a
, 0);

244 
	`EXPECT_EQ
(0, 0);

245 
	}
}

246 
	$TEST_F
(
I¡îÁ˚Te°Fixtuª
, 
Te°Name_Dw∆St›EvítH™dÀrNuŒ
)

248 
	`Dw∆St›EvítH™dÀr
(
NULL
, 
IARM_BUS_RDKVFWUPGRADER_MODECHANGED
, NULL, 0);

249 
	`EXPECT_EQ
(0, 0);

250 
	}
}

251 
	$TEST_F
(
I¡îÁ˚Te°Fixtuª
, 
Te°Name_evítM™agîNuŒ
)

253 
	`evítM™agî
(
NULL
, NULL);

254 
	`EXPECT_EQ
(0, 0);

255 
	}
}

256 
	$TEST_F
(
I¡îÁ˚Te°Fixtuª
, 
Te°Name_evítM™agîSuc˚ss
)

258 
	`EXPECT_CALL
(*
g_I¡îÁ˚Mock
, 
	`IARM_Bus_Brﬂdˇ°Evít
(
_
,_,_,_)).
	`WûlOn˚
(
	`Rëu∫
(0));

259 
	`evítM™agî
(
IMG_DWL_EVENT
, "2");

260 
	`EXPECT_EQ
(0, 0);

261 
	}
}

262 
	$TEST_F
(
I¡îÁ˚Te°Fixtuª
, 
Te°Name_evítM™agîFaû
)

264 
	`EXPECT_CALL
(*
g_I¡îÁ˚Mock
, 
	`IARM_Bus_Brﬂdˇ°Evít
(
_
,_,_,_)).
	`WûlOn˚
(
	`Rëu∫
(1));

265 
	`evítM™agî
(
IMG_DWL_EVENT
, "2");

266 
	`EXPECT_EQ
(0, 0);

267 
	}
}

269 
GTEST_API_
 
	$maö
(
¨gc
, *
¨gv
[]){

270 
ã°ªsu…s_fuŒfûï©h
[
GTEST_REPORT_FILEPATH_SIZE
];

271 
buf„r
[
GTEST_REPORT_FILEPATH_SIZE
];

273 
	`mem£t
–
ã°ªsu…s_fuŒfûï©h
, 0, 
GTEST_REPORT_FILEPATH_SIZE
 );

274 
	`mem£t
–
buf„r
, 0, 
GTEST_REPORT_FILEPATH_SIZE
 );

276 
	`¢¥ötf
–
ã°ªsu…s_fuŒfûï©h
, 
GTEST_REPORT_FILEPATH_SIZE
, "js⁄:%s%s" , 
GTEST_DEFAULT_RESULT_FILEPATH
 , 
GTEST_DEFAULT_RESULT_FILENAME
);

277 ::
ã°ög
::
	`GTEST_FLAG
(
ouçut
Ë
ã°ªsu…s_fuŒfûï©h
;

278 ::
ã°ög
::
	`InôGoogÀTe°
(&
¨gc
, 
¨gv
);

280 
cout
 << "SèπögÑdkfw_öãrÁ˚_gã° MAIN ===========================>" << 
ídl
;

281  
	`RUN_ALL_TESTS
();

282 
	}
}

	@unittest/miscellaneous.h

19 #i‚de‡
_MISCELLANEOUS_H_


20 
	#_MISCELLANEOUS_H_


	)

21 
	~"rdkv_cdl_log_wøµî.h
"

23 
	#TLS_LOG_FILE
 "/›t/logs/ésEº‹.log"

	)

24 
	#DEBUG_INI_NAME
 "/ëc/debug.öi"

	)

26 
	#TLS_LOG_ERR
 (1)

	)

27 
	#TLS_LOG_WARN
 (2)

	)

28 
	#TLS_LOG_INFO
 (3)

	)

29 
	#és_debug_Àvñ
 (3)

	)

32 
	#TLSLOG
(
Àvñ
, ...) do { \

33 i‡(
Àvñ
 =
TLS_LOG_ERR
) { \

34 
	`¥ötf
("ERROR: %s:%d:", 
__FILE__
, 
__LINE__
); \

35 } i‡(
Àvñ
 =
TLS_LOG_INFO
) { \

36 
	`¥ötf
("INFO: %s:%d:", 
__FILE__
, 
__LINE__
); \

38 
	`¥ötf
("DBG: %s:%d:", 
__FILE__
, 
__LINE__
); \

40 
	`¥ötf
(
__VA_ARGS__
); \

41 
	`¥ötf
( "\n"); \

42 } 0)

	)

44 
	#DWNL_FAIL
 -1

	)

45 
	#DWNL_SUCCESS
 1

	)

46 
	#DWNL_UNPAUSE_FAIL
 -2

	)

49 
	sdevi˚¥›îty
 {

50 
BUILDTYPE
 
	meBuûdTy≥
;

51 
	mdev_«me
[
MIN_BUFF_SIZE1
];

52 
	mdev_ty≥
[
MIN_BUFF_SIZE1
];

53 
	mdifw_∑th
[
MIN_BUFF_SIZE1
];

54 
	mlog_∑th
[
MIN_BUFF_SIZE1
];

55 
	m≥rsi°ít_∑th
[
MIN_BUFF_SIZE1
];

56 
	mmaöt_°©us
[
MIN_BUFF_SIZE1
];

57 
	mmés
[
MIN_BUFF_SIZE1
];

58 
	mmodñ
[
MIN_BUFF_SIZE1
];

59 
	msw_›tout
[
MIN_BUFF_SIZE1
];

60 }
	tDevi˚Pr›îty_t
;

63 
	mT2ERROR_SUCCESS
,

64 
	mT2ERROR_FAILURE


65 } 
	tT2ERROR
;

67 
	simagedëaûs
 {

68 
	mcur_img_«me
[
MIN_BUFF_SIZE
];

69 }
	tImageDëaûs_t
;

	@unittest/miscellaneous_mock.cpp

19 
	~<gmock/gmock.h
>

20 
	~"mis˚Œ™eous.h
"

23 ˛as†
	cMockDow∆ﬂdFûe
 {

24 
	mpublic
:

25 
vútuÆ
 ~
	$MockDow∆ﬂdFûe
() {}

26 
vútuÆ
 
	`dow∆ﬂdFûe
–
£rvî_ty≥
, c⁄° * 
¨tiÁ˘Loˇti⁄Uæ
, c⁄° * 
loˇlDow∆ﬂdLoˇti⁄
, * 
pPo°Fõlds
, *
hâpCode
 ) =0;

27 
vútuÆ
 
	`codebigdow∆ﬂdFûe
–
£rvî_ty≥
, c⁄° * 
¨tiÁ˘Loˇti⁄Uæ
, c⁄° * 
loˇlDow∆ﬂdLoˇti⁄
, * 
pPo°Fõlds
, *
hâpCode
 )=0;

28 
	}
};

31 ˛as†
	cMockDow∆ﬂdFûeOps
 {

32 
	mpublic
:

33 
MOCK_METHOD
(, 
dow∆ﬂdFûe
, (
£rvî_ty≥
, c⁄° * 
¨tiÁ˘Loˇti⁄Uæ
, c⁄° * 
loˇlDow∆ﬂdLoˇti⁄
, * 
pPo°Fõlds
, *
hâpCode
), ());

34 
MOCK_METHOD
(, 
codebigdow∆ﬂdFûe
, (
£rvî_ty≥
, c⁄° * 
¨tiÁ˘Loˇti⁄Uæ
, c⁄° * 
loˇlDow∆ﬂdLoˇti⁄
, * 
pPo°Fõlds
, *
hâpCode
), ());

37 
MockDow∆ﬂdFûeOps
* 
	gglobÆ_mockdow∆ﬂdfûe›s_±r
;

40 
dow∆ﬂdFûe
(
£rvî_ty≥
, c⁄° * 
¨tiÁ˘Loˇti⁄Uæ
, c⁄° * 
loˇlDow∆ﬂdLoˇti⁄
, * 
pPo°Fõlds
, *
hâpCode
) {

41  
globÆ_mockdow∆ﬂdfûe›s_±r
->
dow∆ﬂdFûe
(
£rvî_ty≥
, 
¨tiÁ˘Loˇti⁄Uæ
, 
loˇlDow∆ﬂdLoˇti⁄
, 
pPo°Fõlds
, 
hâpCode
);

44 
codebigdow∆ﬂdFûe
(
£rvî_ty≥
, c⁄° * 
¨tiÁ˘Loˇti⁄Uæ
, c⁄° * 
loˇlDow∆ﬂdLoˇti⁄
, * 
pPo°Fõlds
, *
hâpCode
) {

45  
globÆ_mockdow∆ﬂdfûe›s_±r
->
codebigdow∆ﬂdFûe
(
£rvî_ty≥
, 
¨tiÁ˘Loˇti⁄Uæ
, 
loˇlDow∆ﬂdLoˇti⁄
, 
pPo°Fõlds
, 
hâpCode
);

49 ˛as†
	cMockExã∫Æ
 {

50 
public
:

51 
MOCK_METHOD
(, 
doGëDw∆Byãs
, (*), ());

52 
MOCK_METHOD
(, 
doI¡îu±Dw∆
, (*, ), ());

53 
MOCK_METHOD
(, 
£tF‹˚St›
, (), ());

54 
MOCK_METHOD
(
T2ERROR
, 
t2_evít_s
, (*, *), ());

55 
MOCK_METHOD
(
T2ERROR
, 
t2_evít_d
, (*, ), ());

56 
MOCK_METHOD
(, 
t2_öô
, (*), ());

57 
MOCK_METHOD
(, 
gëDevi˚Pr›îtõs
, (
Devi˚Pr›îty_t
*), ());

58 
MOCK_METHOD
(, 
gëImageDëaûs
, (
ImageDëaûs_t
*), ());

59 
MOCK_METHOD
(, 
¸óãDú
, (const *), ());

60 
MOCK_METHOD
(, 
¸óãFûe
, (const *), ());

61 
MOCK_METHOD
(, 
t2_unöô
, (), ());

62 
MOCK_METHOD
(, 
log_exô
, (), ());

63 
MOCK_METHOD
(, 
doHâpFûeDow∆ﬂd
, (*, 
FûeDw∆_t
*, 
MésAuth_t
*, , *, *), ());

64 
MOCK_METHOD
(, 
logFûeD©a
, (const *), ());

65 
MOCK_METHOD
(
boﬁ
, 
isMedüClõ¡Devi˚
, (), ());

66 
MOCK_METHOD
(, 
doAuthHâpFûeDow∆ﬂd
, (*, 
FûeDw∆_t
*, *), ());

67 
MOCK_METHOD
(, 
logMûe°⁄e
, (const *), ());

68 
MOCK_METHOD
(, 
îa£FﬁdîEx˚PømaFûe
, (const *, const *, const *), ());

69 
MOCK_METHOD
(, 
doCuæPutReque°
, (*, 
FûeDw∆_t
*, *, *), ());

70 
MOCK_METHOD
(, 
checkAndE¡îSèãRed
, (, const *), ());

71 
MOCK_METHOD
(, 
gëRFCSëtögs
, (
Rfc_t
*), ());

72 
MOCK_METHOD
(, 
evítM™agî
, (const *, const *), ());

73 
MOCK_METHOD
(, 
upd©eFWDow∆ﬂdSètus
, (
FWDow∆ﬂdSètus
*, const *), ());

74 
MOCK_METHOD
(, 
öô_evít_h™dÀr
, (), ());

75 
MOCK_METHOD
(, 
isDw∆Block
, (), ());

76 
MOCK_METHOD
(
boﬁ
, 
checkCodebigAc˚ss
, (), ());

77 
MOCK_METHOD
(, 
ãrm_evít_h™dÀr
, (), ());

78 
MOCK_METHOD
(, 
isThrŸéeE«bÀd
, (const *, const *, ), ());

79 
MOCK_METHOD
(, 
isOCSPE«bÀ
, (), ());

80 
MOCK_METHOD
(, 
gëMés˚π
, (
MésAuth_t
*), ());

81 
MOCK_METHOD
(, 
isIn¸emëÆCDLE«bÀ
, (const *), ());

82 
MOCK_METHOD
(
boﬁ
, 
isDñayFWDow∆ﬂdA˘ive
, (, const *, ), ());

83 
MOCK_METHOD
(
boﬁ
, 
checkPDRIUpgøde
, (const *), ());

84 
MOCK_METHOD
(
boﬁ
, 
isUpgødeInProgªss
, (), ());

85 
MOCK_METHOD
(
boﬁ
, 
isMmgbÀNŸifyE«bÀd
, (), ());

86 
MOCK_METHOD
(
time_t
, 
gëCuºítSysTimeSec
, (), ());

87 
MOCK_METHOD
(, 
nŸifyDw∆Sètus
, (c⁄° *, c⁄° *, 
RFCVALDATATYPE
), ());

88 
MOCK_METHOD
(
boﬁ
, 
upd©eOPTOUTFûe
, (const *), ());

89 
MOCK_METHOD
(
boﬁ
, 
CheckIProuãC⁄√˘ivôy
, (const *), ());

90 
MOCK_METHOD
(
boﬁ
, 
isDnsResﬁve
, (const *), ());

91 
MOCK_METHOD
(, 
un£tSèãRed
, (), ());

92 
MOCK_METHOD
(
boﬁ
, 
checkF‹VÆidPCIUpgøde
, (, const *, const *, const *), ());

93 
MOCK_METHOD
(
boﬁ
, 
isPDRIE«bÀ
, (), ());

94 
MOCK_METHOD
(
boﬁ
, 
œ°Dw∆Img
, (*, 
size_t
), ());

95 
MOCK_METHOD
(
boﬁ
, 
cuºítImg
, (*, 
size_t
), ());

96 
MOCK_METHOD
(
boﬁ
, 
CuºítRu¬ögIn°
, (const *), ());

97 
MOCK_METHOD
(, 
îa£TGZIãmsM©chög
, (const *, const *), ());

98 
MOCK_METHOD
(
boﬁ
, 
¥evFœshedFûe
, (*, 
size_t
), ());

99 
MOCK_METHOD
(, 
doCodeBigSignög
, (, c⁄° *, *, 
size_t
, *, size_t), ());

102 
MockExã∫Æ
* 
	gglobÆ_mockexã∫Æ_±r
;

105 
doGëDw∆Byãs
(*
ö_cuæ
) {

106 i‡(
globÆ_mockexã∫Æ_±r
 =
nuŒ±r
) {

109  
globÆ_mockexã∫Æ_±r
->
doGëDw∆Byãs
(
ö_cuæ
);

112 
doI¡îu±Dw∆
(*
ö_cuæ
, 
max_dw∆_•ìd
) {

113 i‡(
globÆ_mockexã∫Æ_±r
 =
nuŒ±r
) {

116  
globÆ_mockexã∫Æ_±r
->
doI¡îu±Dw∆
(
ö_cuæ
, 
max_dw∆_•ìd
);

119 
£tF‹˚St›
(
vÆue
) {

120 i‡(
globÆ_mockexã∫Æ_±r
 =
nuŒ±r
) {

123 
globÆ_mockexã∫Æ_±r
->
£tF‹˚St›
(
vÆue
);

126 
T2ERROR
 
t2_evít_s
(* 
m¨kî
, * 
vÆue
) {

127 i‡(
globÆ_mockexã∫Æ_±r
 =
nuŒ±r
) {

128  
T2ERROR_SUCCESS
;

130  
globÆ_mockexã∫Æ_±r
->
t2_evít_s
(
m¨kî
, 
vÆue
);

133 
T2ERROR
 
t2_evít_d
(* 
m¨kî
, 
vÆue
) {

134 i‡(
globÆ_mockexã∫Æ_±r
 =
nuŒ±r
) {

135  
T2ERROR_SUCCESS
;

137  
globÆ_mockexã∫Æ_±r
->
t2_evít_d
(
m¨kî
, 
vÆue
);

140 
t2_öô
(*
comp⁄ít
) {

141 i‡(
globÆ_mockexã∫Æ_±r
 =
nuŒ±r
) {

144 
globÆ_mockexã∫Æ_±r
->
t2_öô
(
comp⁄ít
);

147 
gëImageDëaûs
(
ImageDëaûs_t
 *
pImage_dëaûs
) {

148 i‡(
globÆ_mockexã∫Æ_±r
 =
nuŒ±r
) {

151  
globÆ_mockexã∫Æ_±r
->
gëImageDëaûs
(
pImage_dëaûs
);

154 
¸óãDú
(c⁄° *
dú«me
) {

155 i‡(
globÆ_mockexã∫Æ_±r
 =
nuŒ±r
) {

158  
globÆ_mockexã∫Æ_±r
->
¸óãDú
(
dú«me
);

161 
¸óãFûe
(c⁄° *
fûe_«me
) {

162 i‡(
globÆ_mockexã∫Æ_±r
 =
nuŒ±r
) {

163 
FILE
 *
fûe
 = 
f›í
(
fûe_«me
, "w");

164 i‡(
fûe
 =
NULL
) {

165 
¥ötf
("FailedÅo create file\n");

168 
f˛o£
(
fûe
);

171 
globÆ_mockexã∫Æ_±r
->
¸óãFûe
(
fûe_«me
);

174 
t2_unöô
() {

175 i‡(
globÆ_mockexã∫Æ_±r
 =
nuŒ±r
) {

178 
globÆ_mockexã∫Æ_±r
->
t2_unöô
();

181 
log_exô
() {

182 i‡(
globÆ_mockexã∫Æ_±r
 =
nuŒ±r
) {

185 
globÆ_mockexã∫Æ_±r
->
log_exô
();

188 
doHâpFûeDow∆ﬂd
(*
ö_cuæ
, 
FûeDw∆_t
 *
pfûe_dw∆
, 
MésAuth_t
 *
auth
, 
max_dw∆_•ìd
, *
d∆_°¨t_pos
, *
out_hâpCode
) {

189 i‡(
globÆ_mockexã∫Æ_±r
 =
nuŒ±r
) {

192  
globÆ_mockexã∫Æ_±r
->
doHâpFûeDow∆ﬂd
(
ö_cuæ
, 
pfûe_dw∆
, 
auth
, 
max_dw∆_•ìd
, 
d∆_°¨t_pos
, 
out_hâpCode
);

195 
logFûeD©a
(c⁄° *
fûe_∑th
) {

196 i‡(
globÆ_mockexã∫Æ_±r
 =
nuŒ±r
) {

199  
globÆ_mockexã∫Æ_±r
->
logFûeD©a
(
fûe_∑th
);

202 
boﬁ
 
isMedüClõ¡Devi˚
() {

203 i‡(
globÆ_mockexã∫Æ_±r
 =
nuŒ±r
) {

204  
Ál£
;

206  
globÆ_mockexã∫Æ_±r
->
isMedüClõ¡Devi˚
();

209 
doAuthHâpFûeDow∆ﬂd
(*
ö_cuæ
, 
FûeDw∆_t
 *
pfûe_dw∆
, *
out_hâpCode
) {

210 i‡(
globÆ_mockexã∫Æ_±r
 =
nuŒ±r
) {

213  
globÆ_mockexã∫Æ_±r
->
doAuthHâpFûeDow∆ﬂd
(
ö_cuæ
, 
pfûe_dw∆
, 
out_hâpCode
);

216 
logMûe°⁄e
(c⁄° *
msg_code
) {

217 i‡(
globÆ_mockexã∫Æ_±r
 =
nuŒ±r
) {

220 
globÆ_mockexã∫Æ_±r
->
logMûe°⁄e
(
msg_code
);

223 
îa£FﬁdîEx˚PømaFûe
(c⁄° *
fﬁdî
, c⁄° * 
fûe_«me
, c⁄° *
modñ_num
) {

224 i‡(
globÆ_mockexã∫Æ_±r
 =
nuŒ±r
) {

227  
globÆ_mockexã∫Æ_±r
->
îa£FﬁdîEx˚PømaFûe
(
fﬁdî
, 
fûe_«me
, 
modñ_num
);

230 
doCuæPutReque°
(*
ö_cuæ
, 
FûeDw∆_t
 *
pfûe_dw∆
, *
js⁄Ωc_auth_tokí
, *
out_hâpCode
) {

231 i‡(
globÆ_mockexã∫Æ_±r
 =
nuŒ±r
) {

234  
globÆ_mockexã∫Æ_±r
->
doCuæPutReque°
(
ö_cuæ
, 
pfûe_dw∆
, 
js⁄Ωc_auth_tokí
, 
out_hâpCode
);

237 
checkAndE¡îSèãRed
(
cuæªt
, const *) {

238 i‡(
globÆ_mockexã∫Æ_±r
 =
nuŒ±r
) {

241 
globÆ_mockexã∫Æ_±r
->
checkAndE¡îSèãRed
(
cuæªt
, "");

244 
gëRFCSëtögs
(
Rfc_t
 *
rfc_li°
) {

245 i‡(
globÆ_mockexã∫Æ_±r
 =
nuŒ±r
) {

248  
globÆ_mockexã∫Æ_±r
->
gëRFCSëtögs
(
rfc_li°
);

251 
gëDevi˚Pr›îtõs
(
Devi˚Pr›îty_t
 *
pDevi˚_öfo
) {

252 i‡(
globÆ_mockexã∫Æ_±r
 =
nuŒ±r
) {

255  
globÆ_mockexã∫Æ_±r
->
gëDevi˚Pr›îtõs
(
pDevi˚_öfo
);

259 
evítM™agî
(c⁄° *
cur_evít_«me
, c⁄° *
evít_°©us
) {

260 i‡(
globÆ_mockexã∫Æ_±r
 =
nuŒ±r
) {

263 
globÆ_mockexã∫Æ_±r
->
evítM™agî
(
cur_evít_«me
, 
evít_°©us
);

266 
upd©eFWDow∆ﬂdSètus
(
FWDow∆ﬂdSètus
 *
fwdls
, c⁄° *
dißbÀSètsUpd©e
) {

267 i‡(
globÆ_mockexã∫Æ_±r
 =
nuŒ±r
) {

270  
globÆ_mockexã∫Æ_±r
->
upd©eFWDow∆ﬂdSètus
(
fwdls
, 
dißbÀSètsUpd©e
);

273 
öô_evít_h™dÀr
() {

274 i‡(
globÆ_mockexã∫Æ_±r
 =
nuŒ±r
) {

277  
globÆ_mockexã∫Æ_±r
->
öô_evít_h™dÀr
();

280 
isDw∆Block
(
ty≥
) {

281 i‡(
globÆ_mockexã∫Æ_±r
 =
nuŒ±r
) {

284  
globÆ_mockexã∫Æ_±r
->
isDw∆Block
(
ty≥
);

287 
boﬁ
 
checkCodebigAc˚ss
() {

288 i‡(
globÆ_mockexã∫Æ_±r
 =
nuŒ±r
) {

289  
Ál£
;

291  
globÆ_mockexã∫Æ_±r
->
checkCodebigAc˚ss
();

294 
ãrm_evít_h™dÀr
() {

295 i‡(
globÆ_mockexã∫Æ_±r
 =
nuŒ±r
) {

298  
globÆ_mockexã∫Æ_±r
->
ãrm_evít_h™dÀr
();

301 
isThrŸéeE«bÀd
(c⁄° *
devi˚_«me
, c⁄° *
ªboŸ_immedüã_Êag
, 
≠p_mode
) {

302 i‡(
globÆ_mockexã∫Æ_±r
 =
nuŒ±r
) {

305  
globÆ_mockexã∫Æ_±r
->
isThrŸéeE«bÀd
(
devi˚_«me
, 
ªboŸ_immedüã_Êag
, 
≠p_mode
);

308 
isOCSPE«bÀ
() {

309 i‡(
globÆ_mockexã∫Æ_±r
 =
nuŒ±r
) {

312  
globÆ_mockexã∫Æ_±r
->
isOCSPE«bÀ
();

315 
gëMés˚π
(
MésAuth_t
 *
£c
) {

316 i‡(
globÆ_mockexã∫Æ_±r
 =
nuŒ±r
) {

319  
globÆ_mockexã∫Æ_±r
->
gëMés˚π
(
£c
);

322 
isIn¸emëÆCDLE«bÀ
(c⁄° *
fûe_«me
) {

323 i‡(
globÆ_mockexã∫Æ_±r
 =
nuŒ±r
) {

326  
globÆ_mockexã∫Æ_±r
->
isIn¸emëÆCDLE«bÀ
(
fûe_«me
);

329 
boﬁ
 
isDñayFWDow∆ﬂdA˘ive
(
DñayDow∆ﬂdXc⁄f
, c⁄° *
maöt
, 
åiggî_ty≥
) {

330 i‡(
globÆ_mockexã∫Æ_±r
 =
nuŒ±r
) {

331  
Ál£
;

333  
globÆ_mockexã∫Æ_±r
->
isDñayFWDow∆ﬂdA˘ive
(
DñayDow∆ﬂdXc⁄f
, 
maöt
, 
åiggî_ty≥
);

336 
boﬁ
 
checkPDRIUpgøde
(c⁄° *
dw∆_pdri_img
) {

337 i‡(
globÆ_mockexã∫Æ_±r
 =
nuŒ±r
) {

338  
Ál£
;

340  
globÆ_mockexã∫Æ_±r
->
checkPDRIUpgøde
(
dw∆_pdri_img
);

343 
boﬁ
 
isUpgødeInProgªss
() {

344 i‡(
globÆ_mockexã∫Æ_±r
 =
nuŒ±r
) {

345  
Ál£
;

347  
globÆ_mockexã∫Æ_±r
->
isUpgødeInProgªss
();

350 
boﬁ
 
isMmgbÀNŸifyE«bÀd
() {

351 i‡(
globÆ_mockexã∫Æ_±r
 =
nuŒ±r
) {

352  
Ál£
;

354  
globÆ_mockexã∫Æ_±r
->
isMmgbÀNŸifyE«bÀd
();

357 
time_t
 
gëCuºítSysTimeSec
() {

358 i‡(
globÆ_mockexã∫Æ_±r
 =
nuŒ±r
) {

361  
globÆ_mockexã∫Æ_±r
->
gëCuºítSysTimeSec
();

364 
nŸifyDw∆Sètus
(c⁄° *
key
, c⁄° *
vÆue
, 
RFCVALDATATYPE
 
d©©y≥
) {

365 i‡(
globÆ_mockexã∫Æ_±r
 =
nuŒ±r
) {

368  
globÆ_mockexã∫Æ_±r
->
nŸifyDw∆Sètus
(
key
, 
vÆue
, 
d©©y≥
);

370 
boﬁ
 
upd©eOPTOUTFûe
(c⁄° *
vÆue
) {

371 i‡(
globÆ_mockexã∫Æ_±r
 =
nuŒ±r
) {

374  
globÆ_mockexã∫Æ_±r
->
upd©eOPTOUTFûe
(
vÆue
);

378 
boﬁ
 
CheckIProuãC⁄√˘ivôy
(c⁄° *
fûe_«me
) {

379 i‡(
globÆ_mockexã∫Æ_±r
 =
nuŒ±r
) {

380  
Ál£
;

382  
globÆ_mockexã∫Æ_±r
->
CheckIProuãC⁄√˘ivôy
(
fûe_«me
);

385 
boﬁ
 
isDnsResﬁve
(c⁄° *
dns_fûe_«me
) {

386 i‡(
globÆ_mockexã∫Æ_±r
 =
nuŒ±r
) {

387  
Ál£
;

389  
globÆ_mockexã∫Æ_±r
->
isDnsResﬁve
(
dns_fûe_«me
);

392 
un£tSèãRed
() {

393 i‡(
globÆ_mockexã∫Æ_±r
 =
nuŒ±r
) {

396 
globÆ_mockexã∫Æ_±r
->
un£tSèãRed
();

399 
boﬁ
 
checkF‹VÆidPCIUpgøde
(
åiggî_ty≥
, c⁄° *
myfwvîsi⁄
, c⁄° *
˛oudFWVîsi⁄
, c⁄° *
˛oudFWFûe
) {

400 i‡(
globÆ_mockexã∫Æ_±r
 =
nuŒ±r
) {

401  
Ál£
;

403  
globÆ_mockexã∫Æ_±r
->
checkF‹VÆidPCIUpgøde
(
åiggî_ty≥
, 
myfwvîsi⁄
, 
˛oudFWVîsi⁄
, 
˛oudFWFûe
);

406 
boﬁ
 
isPDRIE«bÀ
() {

407 i‡(
globÆ_mockexã∫Æ_±r
 =
nuŒ±r
) {

408  
Ál£
;

410  
globÆ_mockexã∫Æ_±r
->
isPDRIE«bÀ
();

413 
boﬁ
 
œ°Dw∆Img
(*
img_«me
, 
size_t
 
img_«me_size
) {

414 i‡(
globÆ_mockexã∫Æ_±r
 =
nuŒ±r
) {

415  
Ál£
;

417  
globÆ_mockexã∫Æ_±r
->
œ°Dw∆Img
(
img_«me
, 
img_«me_size
);

419 
boﬁ
 
cuºítImg
(*
img_«me
, 
size_t
 
img_«me_size
) {

420 i‡(
globÆ_mockexã∫Æ_±r
 =
nuŒ±r
) {

421  
Ál£
;

423  
globÆ_mockexã∫Æ_±r
->
cuºítImg
(
img_«me
, 
img_«me_size
);

426 
boﬁ
 
CuºítRu¬ögIn°
(c⁄° *
fûe
) {

427 i‡(
globÆ_mockexã∫Æ_±r
 =
nuŒ±r
) {

428  
Ál£
;

430  
globÆ_mockexã∫Æ_±r
->
CuºítRu¬ögIn°
(
fûe
);

433 
îa£TGZIãmsM©chög
(c⁄° *
∑th
, c⁄° *
∑âîn
) {

434 i‡(
globÆ_mockexã∫Æ_±r
 =
nuŒ±r
) {

437 
globÆ_mockexã∫Æ_±r
->
îa£TGZIãmsM©chög
(
∑th
, 
∑âîn
);

440 
boﬁ
 
¥evFœshedFûe
(*
img_«me
, 
size_t
 
img_«me_size
) {

441 i‡(
globÆ_mockexã∫Æ_±r
 =
nuŒ±r
) {

442  
Ál£
;

444  
globÆ_mockexã∫Æ_±r
->
¥evFœshedFûe
(
img_«me
, 
img_«me_size
);

447 
doCodeBigSignög
(
£rvî_ty≥
, c⁄° * 
SignI≈ut
, *
signuæ
, 
size_t
 
signuæsize
, *
outhhódî
, size_à
outHódîSize
) {

448 i‡(
globÆ_mockexã∫Æ_±r
 =
nuŒ±r
) {

451  
globÆ_mockexã∫Æ_±r
->
doCodeBigSignög
(
£rvî_ty≥
, 
SignI≈ut
, 
signuæ
, 
signuæsize
, 
outhhódî
, 
outHódîSize
);

455 ˛as†
	cMockFun˘i⁄sI¡î«l
 {

456 
public
:

457 
MOCK_METHOD
(, 
RunComm™d
, (
comm™d
, * 
¨g1
, * 
js⁄d©a
, 
size
));

458 
MOCK_METHOD
(, 
gëJRPCTokíD©a
, (* 
tokí
, * 
js⁄d©a
, 
size
));

459 
MOCK_METHOD
(*, 
doCuæInô
, ());

460 
MOCK_METHOD
(, 
doCuæPutReque°
, (* 
Cuæ_ªq
, 
FûeDw∆_t
* 
ªq_d©a
, * 
tokí_hódî
, * 
hâpCode
));

461 
MOCK_METHOD
(, 
doSt›Dow∆ﬂd
, (* 
Cuæ_ªq
));

462 
MOCK_METHOD
(
boﬁ
, 
checkF‹VÆidPCIUpgøde
, (
åiggî_ty≥
, c⁄° * 
cur_img_«me
, c⁄° * 
˛oudFWVîsi⁄
, c⁄° * 
˛oudFWFûe
));

463 
MOCK_METHOD
(, 
gëOPTOUTVÆue
, (c⁄° * 
∑th
));

464 
MOCK_METHOD
(, 
unöôülize
, (
°©us
));

465 
MOCK_METHOD
(, 
upgødeReque°
, (
upgøde_ty≥
, 
hâp_s§_dúe˘
, c⁄° * 
imageHTTPURL
, c⁄° * 
dwÕ©h_fûíame
, * 
¨g
, * 
hâp_code
));

466 
MOCK_METHOD
(
boﬁ
, 
isPDRIE«bÀ
, ());

467 
MOCK_METHOD
(, 
fûePª£¡Check
, (c⁄° * 
∑th
));

468 
MOCK_METHOD
(, 
≥rùhîÆ_fúmw¨e_dndl
, (c⁄° * 
˛oudFWLoˇti⁄
, c⁄° * 
≥rùhîÆFúmw¨es
));

	@unittest/mocks/device_status_helper_mock.cpp

19 
	~"devi˚_°©us_hñ≥r_mock.h
"

20 
	~<io°ªam
>

22 
usög
 
«me•a˚
 
	g°d
;

24 
Devi˚SètusMock
 *
g_Devi˚SètusMock
;

26 "C" 
	$gëDevi˚Pr›îtyD©a
(c⁄° *
modñ
, *
d©a
, 
size
)

28 i‡(!
g_Devi˚SètusMock
)

30 
cout
 << "g_Devi˚SètusMock obje˘ i†NULL" << 
ídl
;

33 
	`¥ötf
("Inside Mock Function getDevicePropertyData\n");

34 i‡(0 =(
	`°∫cmp
(
modñ
, "CPU_ARCH", 8))) {

35 
	`¢¥ötf
(
d©a
, 
size
, "%s", "X86");

36 } i‡(0 =(
	`°∫cmp
(
modñ
, "DEVICE_NAME", 11))) {

37 
	`¢¥ötf
(
d©a
, 
size
, "%s", "PLATCO");

38 } i‡(0 =(
	`°∫cmp
(
modñ
, "PDRI_ENABLED", 12))){

39 
	`¢¥ötf
(
d©a
, 
size
, "%s", "true");

41  
g_Devi˚SètusMock
->
	`gëDevi˚Pr›îtyD©a
(
modñ
, 
d©a
, 
size
);

42 
	}
}

44 "C" 
size_t
 
	$GëE°bMac
(*
pE°bMac
, 
size_t
 
szBufSize
)

46 i‡(!
g_Devi˚SètusMock
)

48 
cout
 << "GëE°bMa¯g_Devi˚SètusMock obje˘ i†NULL" << 
ídl
;

51 
	`¥ötf
("Inside Mock Function GetEstbMac\n");

53  
g_Devi˚SètusMock
->
	`GëE°bMac
(
pE°bMac
, 
szBufSize
);

54 
	}
}

55 "C" 
	$wrôe_RFCPr›îty
(c⁄° *
key
, c⁄° *
vÆue
, 
RFCVALDATATYPE
 
d©©y≥
)

57 i‡(!
g_Devi˚SètusMock
)

59 
cout
 << "GëE°bMa¯g_Devi˚SètusMock obje˘ i†NULL" << 
ídl
;

62 
	`¥ötf
("Inside Mock Function write_RFCProperty\n");

63  
g_Devi˚SètusMock
->
	`wrôe_RFCPr›îty
(
key
, 
vÆue
, 
d©©y≥
);

64 
	}
}

66 "C" 
size_t
 
	$GëFúmw¨eVîsi⁄
–*
pFWVîsi⁄
, 
size_t
 
szBufSize
 )

68 i‡(!
g_Devi˚SètusMock
)

70 
cout
 << "GëFúmw¨eVîsi⁄ g_Devi˚SètusMock obje˘ i†NULL" << 
ídl
;

73 
	`¥ötf
("Inside Mock Function GetFirmwareVersion\n");

74 
	`¢¥ötf
(
pFWVîsi⁄
, 
szBufSize
, "%s", "123456_comcast.bin");

75  
g_Devi˚SètusMock
->
	`GëFúmw¨eVîsi⁄
(
pFWVîsi⁄
, 
szBufSize
);

76 
	}
}

78 "C" 
size_t
 
	$GëAddôi⁄ÆFwVîInfo
–*
pAddôi⁄ÆFwVîInfo
, 
size_t
 
szBufSize
 )

80 i‡(!
g_Devi˚SètusMock
)

82 
cout
 << "GëAddôi⁄ÆFwVîInfÿ g_Devi˚SètusMock obje˘ i†NULL" << 
ídl
;

85  
g_Devi˚SètusMock
->
	`GëAddôi⁄ÆFwVîInfo
(
pAddôi⁄ÆFwVîInfo
, 
szBufSize
);

86 
	}
}

88 "C" 
size_t
 
	$GëBuûdTy≥
–*
pBuûdTy≥
, 
size_t
 
szBufSize
, 
BUILDTYPE
 *
≥BuûdTy≥Out
 )

90 i‡(!
g_Devi˚SètusMock
)

92 
cout
 << "GëBuûdTy≥ g_Devi˚SètusMock obje˘ i†NULL" << 
ídl
;

95 
	`¥ötf
("Inside Mock Function GetBuildType\n");

96 
	`¢¥ötf
(
pBuûdTy≥
, 
szBufSize
, "%s", "prod");

97  
g_Devi˚SètusMock
->
	`GëBuûdTy≥
(
pBuûdTy≥
, 
szBufSize
, 
≥BuûdTy≥Out
);

98 
	}
}

100 "C" 
size_t
 
	$GëModñNum
–*
pModñNum
, 
size_t
 
szBufSize
 )

102 i‡(!
g_Devi˚SètusMock
)

104 
cout
 << "GëModñNum g_Devi˚SètusMock obje˘ i†NULL" << 
ídl
;

107 
	`¥ötf
("Inside Mock Function GetModelNum\n");

108 
	`¢¥ötf
(
pModñNum
, 
szBufSize
, "%s", "12345");

109  
g_Devi˚SètusMock
->
	`GëModñNum
(
pModñNum
, 
szBufSize
);

110 
	}
}

112 "C" 
size_t
 
	$GëMFRName
–*
pMFRName
, 
size_t
 
szBufSize
 )

114 i‡(!
g_Devi˚SètusMock
)

116 
cout
 << "GëMFRNamê g_Devi˚SètusMock obje˘ i†NULL" << 
ídl
;

119 
	`¥ötf
("Inside Mock Function GetMFRName\n");

120 
	`¢¥ötf
(
pMFRName
, 
szBufSize
, "%s", "unknown");

121  
g_Devi˚SètusMock
->
	`GëMFRName
(
pMFRName
, 
szBufSize
);

122 
	}
}

124 "C" 
size_t
 
	$GëP¨äîId
–*
pP¨äîId
, 
size_t
 
szBufSize
 )

126 i‡(!
g_Devi˚SètusMock
)

128 
cout
 << "GëP¨äîId g_Devi˚SètusMock obje˘ i†NULL" << 
ídl
;

131 
	`¥ötf
("Inside Mock Function GetPartnerId\n");

132 
	`¢¥ötf
(
pP¨äîId
, 
szBufSize
, "%s", "global");

133  
g_Devi˚SètusMock
->
	`GëP¨äîId
(
pP¨äîId
, 
szBufSize
);

134 
	}
}

136 "C" 
size_t
 
	$GëOsCœss
–*
pOsCœss
, 
size_t
 
szBufSize
 )

138 i‡(!
g_Devi˚SètusMock
)

140 
cout
 << "GëOsCœs† g_Devi˚SètusMock obje˘ i†NULL" << 
ídl
;

143 
	`¥ötf
("Inside Mock Function GetOsClass\n");

144 
	`¢¥ötf
(
pOsCœss
, 
szBufSize
, "%s", "NO");

145  
g_Devi˚SètusMock
->
	`GëOsCœss
(
pOsCœss
, 
szBufSize
);

146 
	}
}

148 "C" 
size_t
 
	$GëEx≥rõn˚
–*
pEx≥rõn˚
, 
size_t
 
szBufSize
 )

150 i‡(!
g_Devi˚SètusMock
)

152 
cout
 << "GëEx≥rõn˚ g_Devi˚SètusMock obje˘ i†NULL" << 
ídl
;

155 
	`¥ötf
("Inside Mock Function GetExperience\n");

156 
	`¢¥ötf
(
pEx≥rõn˚
, 
szBufSize
, "%s", "NO");

157  
g_Devi˚SètusMock
->
	`GëEx≥rõn˚
(
pEx≥rõn˚
, 
szBufSize
);

158 
	}
}

160 "C" 
size_t
 
	$GëMigøti⁄Ródy
–*
pMigøti⁄Ródy
, 
size_t
 
szBufSize
 )

162 i‡(!
g_Devi˚SètusMock
)

164 
cout
 << "GëMigøti⁄Ródy g_Devi˚SètusMock obje˘ i†NULL" << 
ídl
;

167 
	`¥ötf
("Inside Mock Function GetMigrationReady\n");

168 
	`¢¥ötf
(
pMigøti⁄Ródy
, 
szBufSize
, "%s", "NO");

169  
g_Devi˚SètusMock
->
	`GëMigøti⁄Ródy
(
pMigøti⁄Ródy
, 
szBufSize
);

170 
	}
}

172 "C" 
size_t
 
	$GëAccou¡ID
–*
pAccou¡ID
, 
size_t
 
szBufSize
 )

174 i‡(!
g_Devi˚SètusMock
)

176 
cout
 << "GëAccou¡ID g_Devi˚SètusMock obje˘ i†NULL" << 
ídl
;

179 
	`¥ötf
("Inside Mock Function GetAccountID\n");

180 
	`¢¥ötf
(
pAccou¡ID
, 
szBufSize
, "%s", "123456789123456789");

181  
g_Devi˚SètusMock
->
	`GëAccou¡ID
(
pAccou¡ID
, 
szBufSize
);

182 
	}
}

184 "C" 
size_t
 
	$GëSîülNum
–*
pSîülNum
, 
size_t
 
szBufSize
 )

186 i‡(!
g_Devi˚SètusMock
)

188 
cout
 << "GëSîülNum g_Devi˚SètusMock obje˘ i†NULL" << 
ídl
;

191 
	`¥ötf
("Inside Mock Function GetSerialNum\n");

192 
	`¢¥ötf
(
pSîülNum
, 
szBufSize
, "%s", "123456789123456789");

193  
g_Devi˚SètusMock
->
	`GëSîülNum
(
pSîülNum
, 
szBufSize
);

194 
	}
}

196 "C" 
size_t
 
	$GëUTCTime
–*
pUTCTime
, 
size_t
 
szBufSize
 )

198 i‡(!
g_Devi˚SètusMock
)

200 
cout
 << "GëUTCTimê g_Devi˚SètusMock obje˘ i†NULL" << 
ídl
;

203 
	`¥ötf
("Inside Mock Function GetUTCTime\n");

204 
	`¢¥ötf
(
pUTCTime
, 
szBufSize
, "%s", "GLOBAL");

205  
g_Devi˚SètusMock
->
	`GëUTCTime
(
pUTCTime
, 
szBufSize
);

206 
	}
}

208 "C" 
size_t
 
	$GëIn°ÆÀdBundÀs
(*
pBundÀs
, 
size_t
 
szBufSize
)

210 i‡(!
g_Devi˚SètusMock
)

212 
cout
 << "GëIn°ÆÀdBundÀ† g_Devi˚SètusMock obje˘ i†NULL" << 
ídl
;

215 
	`¥ötf
("Inside Mock Function GetInstalledBundles\n");

216 
	`¢¥ötf
(
pBundÀs
, 
szBufSize
, "%s", "castore");

217  
g_Devi˚SètusMock
->
	`GëIn°ÆÀdBundÀs
(
pBundÀs
, 
szBufSize
);

218 
	}
}

219 "C" 
size_t
 
	$GëRdmM™i„°Vîsi⁄
–*
pRdmM™i„°Vîsi⁄
, 
size_t
 
szBufSize
 )

221 i‡(!
g_Devi˚SètusMock
)

223 
cout
 << "GëRdmM™i„°Vîsi⁄ g_Devi˚SètusMock obje˘ i†NULL" << 
ídl
;

226 
	`¥ötf
("Inside Mock Function GetRdmManifestVersion\n");

227 
	`¢¥ötf
(
pRdmM™i„°Vîsi⁄
, 
szBufSize
, "%s", "rdm_1.2.3.4.5.6.7.8");

228  
g_Devi˚SètusMock
->
	`GëRdmM™i„°Vîsi⁄
(
pRdmM™i„°Vîsi⁄
, 
szBufSize
);

229 
	}
}

230 "C" 
size_t
 
	$GëTimez⁄e
–*
pTimez⁄e
, c⁄° *
˝uArch
, 
size_t
 
szBufSize
 )

232 i‡(!
g_Devi˚SètusMock
)

234 
cout
 << "GëTimez⁄ê g_Devi˚SètusMock obje˘ i†NULL" << 
ídl
;

237 
	`¥ötf
("Inside Mock Function GetTimezone\n");

238 
	`¢¥ötf
(
pTimez⁄e
, 
szBufSize
, "%s", "xglobal");

239  
g_Devi˚SètusMock
->
	`GëTimez⁄e
(
pTimez⁄e
, "ARM", 
szBufSize
);

240 
	}
}

241 "C" 
size_t
 
	$GëC≠abûôõs
–*
pC≠abûôõs
, 
size_t
 
szBufSize
 )

243 i‡(!
g_Devi˚SètusMock
)

245 
cout
 << "GëC≠abûôõ† g_Devi˚SètusMock obje˘ i†NULL" << 
ídl
;

248 
	`¥ötf
("Inside Mock Function GetCapabilities\n");

249 
	`¢¥ötf
(
pC≠abûôõs
, 
szBufSize
, "%s", "NA");

250  
g_Devi˚SètusMock
->
	`GëC≠abûôõs
(
pC≠abûôõs
, 
szBufSize
);

251 
	}
}

253 "C" 
	$fûePª£¡Check
(c⁄° *
fûíame
)

255 i‡(!
g_Devi˚SètusMock
)

257 
cout
 << "fûePª£¡Check g_Devi˚SètusMock obje˘ i†NULL" << 
ídl
;

260 
	`¥ötf
("Inside Mock Function filePresentCheck\n");

261  
g_Devi˚SètusMock
->
	`fûePª£¡Check
(
fûíame
);

262 
	}
}

264 "C" 
boﬁ
 
	$isC⁄√˘edToI¡î√t
 ()

266 i‡(!
g_Devi˚SètusMock
)

268 
cout
 << "isC⁄√˘edToI¡î√à g_Devi˚SètusMock obje˘ i†NULL" << 
ídl
;

271 
	`¥ötf
("Inside Mock Function isConnectedToInternet\n");

272  
g_Devi˚SètusMock
->
	`isC⁄√˘edToI¡î√t
();

273 
	}
}

275 "C" 
	$v_£cuª_sy°em
(c⁄° *
°r
)

277 i‡(!
g_Devi˚SètusMock
)

279 
cout
 << "v_£cuª_sy°em g_Devi˚SètusMock obje˘ i†NULL" << 
ídl
;

282 
	`¥ötf
("Inside Mock Function v_secure_system\n");

283  
g_Devi˚SètusMock
->
	`v_£cuª_sy°em
(
°r
);

284 
	}
}

297 "C" 
	$unöôülize
(
vÆue
)

299 i‡(!
g_Devi˚SètusMock
)

301 
cout
 << "unöôülizê g_Devi˚SètusMock obje˘ i†NULL" << 
ídl
;

304 
	`¥ötf
("Inside Mock Function uninitialize\n");

305  
g_Devi˚SètusMock
->
	`unöôülize
(
vÆue
);

306 
	}
}

308 "C" 
	$evítM™agî
(c⁄° *
cur_evít_«me
, c⁄° *
evít_°©us
)

310 i‡(!
g_Devi˚SètusMock
)

312 
cout
 << "evítM™agî g_Devi˚SètusMock obje˘ i†NULL" << 
ídl
;

315 
	`¥ötf
("Inside Mock FunctionÉventManager\n");

316  
g_Devi˚SètusMock
->
	`evítM™agî
(
cur_evít_«me
, 
evít_°©us
);

317 
	}
}

319 "C" 
size_t
 
	$GëPDRIFûeName
–*
pPDRIFûíame
, 
size_t
 
szBufSize
 )

321 i‡(!
g_Devi˚SètusMock
)

323 
cout
 << "GëPDRIFûeNamê g_Devi˚SètusMock obje˘ i†NULL" << 
ídl
;

326 
	`¥ötf
("Inside Mock Function GetPDRIFileName\n");

327  
g_Devi˚SètusMock
->
	`GëPDRIFûeName
(
pPDRIFûíame
, 
szBufSize
);

328 
	}
}

330 "C" 
	$upd©eUpgødeFœg
(
a˘i⁄
)

332 i‡(!
g_Devi˚SètusMock
)

334 
cout
 << "upd©eUpgødeFœg g_Devi˚SètusMock obje˘ i†NULL" << 
ídl
;

337 
	`¥ötf
("Inside Mock Function updateUpgradeFlag\n");

338  
g_Devi˚SètusMock
->
	`upd©eUpgødeFœg
(
a˘i⁄
);

339 
	}
}

341 "C" 
	$t2Cou¡NŸify
(*
m¨kî
)

343 i‡(!
g_Devi˚SètusMock
)

345 
cout
 << "t2Cou¡NŸify g_Devi˚SètusMock obje˘ i†NULL" << 
ídl
;

348 
	`¥ötf
("Inside Mock FunctionÅ2CountNotify\n");

349  
g_Devi˚SètusMock
->
	`t2Cou¡NŸify
(
m¨kî
);

350 
	}
}

352 "C" 
	$t2VÆNŸify
(*
m¨kî
, *
vÆ
)

354 i‡(!
g_Devi˚SètusMock
)

356 
cout
 << "t2VÆNŸify g_Devi˚SètusMock obje˘ i†NULL" << 
ídl
;

359 
	`¥ötf
("Inside Mock FunctionÅ2ValNotify\n");

360  
g_Devi˚SètusMock
->
	`t2VÆNŸify
(
m¨kî
, 
vÆ
);

361 
	}
}

	@unittest/mocks/device_status_helper_mock.h

19 #i‚de‡
DEVICE_STATUS_MOCK


20 
	#DEVICE_STATUS_MOCK


	)

21 
	~<gã°/gã°.h
>

22 
	~<gmock/gmock.h
>

24 
	~"rdkv_cdl_log_wøµî.h
"

25 
	~"rfcöãrÁ˚.h
"

26 
	#RDK_API_SUCCESS
 0

	)

28 ˛as†
	cDevi˚SètusI¡îÁ˚


30 
	mpublic
:

31 
vútuÆ
 ~
	$Devi˚SètusI¡îÁ˚
() {}

33 
vútuÆ
 
	`gëDevi˚Pr›îtyD©a
(c⁄° *
modñ
, *
d©a
, 
size
) = 0;

34 
vútuÆ
 
size_t
 
	`GëE°bMac
(*
pE°bMac
, size_à
szBufSize
) = 0;

35 
vútuÆ
 
size_t
 
	`GëFúmw¨eVîsi⁄
–*
pFWVîsi⁄
, size_à
szBufSize
 ) = 0;

36 
vútuÆ
 
size_t
 
	`GëAddôi⁄ÆFwVîInfo
–*
pAddôi⁄ÆFwVîInfo
, size_à
szBufSize
 ) = 0;

37 
vútuÆ
 
size_t
 
	`GëBuûdTy≥
–*
pBuûdTy≥
, size_à
szBufSize
, 
BUILDTYPE
 *
≥BuûdTy≥Out
 ) = 0;

38 
vútuÆ
 
size_t
 
	`GëModñNum
–*
pModñNum
, size_à
szBufSize
 ) = 0;

39 
vútuÆ
 
size_t
 
	`GëMFRName
–*
pMFRName
, size_à
szBufSize
 ) = 0;

40 
vútuÆ
 
size_t
 
	`GëP¨äîId
–*
pP¨äîId
, size_à
szBufSize
 ) = 0;

41 
vútuÆ
 
size_t
 
	`GëOsCœss
–*
pOsCœss
, size_à
szBufSize
 ) = 0;

42 
vútuÆ
 
size_t
 
	`GëEx≥rõn˚
–*
pEx≥rõn˚
, size_à
szBufSize
 ) = 0;

43 
vútuÆ
 
size_t
 
	`GëMigøti⁄Ródy
–*
pMigøti⁄Ródy
, size_à
szBufSize
 ) = 0;

44 
vútuÆ
 
size_t
 
	`GëAccou¡ID
–*
pAccou¡ID
, size_à
szBufSize
 ) = 0;

45 
vútuÆ
 
size_t
 
	`GëSîülNum
–*
pSîülNum
, size_à
szBufSize
 ) = 0;

46 
vútuÆ
 
size_t
 
	`GëUTCTime
–*
pUTCTime
, size_à
szBufSize
 ) = 0;

47 
vútuÆ
 
size_t
 
	`GëIn°ÆÀdBundÀs
(*
pBundÀs
, size_à
szBufSize
) = 0;

48 
vútuÆ
 
size_t
 
	`GëRdmM™i„°Vîsi⁄
–*
pRdmM™i„°Vîsi⁄
, size_à
szBufSize
 ) = 0;

49 
vútuÆ
 
size_t
 
	`GëTimez⁄e
–*
pTimez⁄e
, c⁄° *
˝uArch
, size_à
szBufSize
 ) = 0;

50 
vútuÆ
 
size_t
 
	`GëC≠abûôõs
–*
pC≠abûôõs
, size_à
szBufSize
 ) = 0;

51 
vútuÆ
 
	`fûePª£¡Check
(c⁄° *
fûíame
) = 0;

52 
vútuÆ
 
boﬁ
 
	`isC⁄√˘edToI¡î√t
 () = 0;

54 
vútuÆ
 
	`wrôe_RFCPr›îty
(c⁄° *
key
, c⁄° *
vÆue
, 
RFCVALDATATYPE
 
d©©y≥
) = 0;

55 
vútuÆ
 
	`unöôülize
(
d©a
) = 0;

56 
vútuÆ
 
	`evítM™agî
(c⁄° *
cur_evít_«me
, c⁄° *
evít_°©us
) = 0;

57 
vútuÆ
 
size_t
 
	`GëPDRIFûeName
–*
pPDRIFûíame
, size_à
szBufSize
 ) = 0;

58 
vútuÆ
 
	`upd©eUpgødeFœg
(
a˘i⁄
) = 0;

59 
vútuÆ
 
	`t2Cou¡NŸify
(*
m¨kî
) = 0;

60 
vútuÆ
 
	`t2VÆNŸify
(*
m¨kî
, *
vÆ
) = 0;

61 
vútuÆ
 
	`v_£cuª_sy°em
(c⁄° *
°r
 ) = 0;

62 
	}
};

64 ˛as†
	cDevi˚SètusMock
: 
public
 
Devi˚SètusI¡îÁ˚


66 
public
:

67 
vútuÆ
 ~
	$Devi˚SètusMock
() {}

69 
	`MOCK_METHOD
(, 
gëDevi˚Pr›îtyD©a
, (c⁄° *
modñ
, *
d©a
, 
size
), ());

70 
	`MOCK_METHOD
(
size_t
, 
GëE°bMac
, (*
pE°bMac
, size_à
szBufSize
), ());

71 
	`MOCK_METHOD
(
size_t
, 
GëFúmw¨eVîsi⁄
, ( *
pFWVîsi⁄
, size_à
szBufSize
 ), ());

72 
	`MOCK_METHOD
(
size_t
, 
GëAddôi⁄ÆFwVîInfo
, ( *
pAddôi⁄ÆFwVîInfo
, size_à
szBufSize
 ), ());

73 
	`MOCK_METHOD
(
size_t
, 
GëBuûdTy≥
, ( *
pBuûdTy≥
, size_à
szBufSize
, 
BUILDTYPE
 *
≥BuûdTy≥Out
 ), ());

74 
	`MOCK_METHOD
(
size_t
, 
GëModñNum
, ( *
pModñNum
, size_à
szBufSize
 ), ());

75 
	`MOCK_METHOD
(
size_t
, 
GëMFRName
, ( *
pMFRName
, size_à
szBufSize
 ), ());

76 
	`MOCK_METHOD
(
size_t
, 
GëP¨äîId
, ( *
pP¨äîId
, size_à
szBufSize
 ), ());

77 
	`MOCK_METHOD
(
size_t
, 
GëOsCœss
, ( *
pOsCœss
, size_à
szBufSize
 ), ());

78 
	`MOCK_METHOD
(
size_t
, 
GëEx≥rõn˚
, ( *
pEx≥rõn˚
, size_à
szBufSize
 ), ());

79 
	`MOCK_METHOD
(
size_t
, 
GëMigøti⁄Ródy
, ( *
pMigøti⁄Ródy
, size_à
szBufSize
 ), ());

80 
	`MOCK_METHOD
(
size_t
, 
GëAccou¡ID
, ( *
pAccou¡ID
, size_à
szBufSize
 ), ());

81 
	`MOCK_METHOD
(
size_t
, 
GëSîülNum
, ( *
pSîülNum
, size_à
szBufSize
 ), ());

82 
	`MOCK_METHOD
(
size_t
, 
GëUTCTime
, ( *
pUTCTime
, size_à
szBufSize
 ), ());

83 
	`MOCK_METHOD
(
size_t
, 
GëIn°ÆÀdBundÀs
, (*
pBundÀs
, size_à
szBufSize
), ());

84 
	`MOCK_METHOD
(
size_t
, 
GëRdmM™i„°Vîsi⁄
, ( *
pRdmM™i„°Vîsi⁄
, size_à
szBufSize
 ), ());

85 
	`MOCK_METHOD
(
size_t
, 
GëTimez⁄e
, ( *
pTimez⁄e
, c⁄° *
˝uArch
, size_à
szBufSize
 ), ());

86 
	`MOCK_METHOD
(
size_t
, 
GëC≠abûôõs
, ( *
pC≠abûôõs
, size_à
szBufSize
 ), ());

87 
	`MOCK_METHOD
(, 
fûePª£¡Check
, (c⁄° *
fûíame
 ), ());

88 
	`MOCK_METHOD
(
boﬁ
, 
isC⁄√˘edToI¡î√t
, (), ());

89 
	`MOCK_METHOD
(, 
v_£cuª_sy°em
, (c⁄° *
°r
 ), ());

91 
	`MOCK_METHOD
(, 
wrôe_RFCPr›îty
, (c⁄° *
key
, c⁄° *
vÆue
, 
RFCVALDATATYPE
 
d©©y≥
), ());

92 
	`MOCK_METHOD
(, 
unöôülize
, (
d©a
), ());

93 
	`MOCK_METHOD
(, 
evítM™agî
, (c⁄° *
cur_evít_«me
, c⁄° *
evít_°©us
), ());

94 
	`MOCK_METHOD
(
size_t
, 
GëPDRIFûeName
, ( *
pPDRIFûíame
, size_à
szBufSize
 ), ());

95 
	`MOCK_METHOD
(, 
upd©eUpgødeFœg
, (
a˘i⁄
), ());

96 
	`MOCK_METHOD
(, 
t2Cou¡NŸify
, (*
m¨kî
), ());

97 
	`MOCK_METHOD
(, 
t2VÆNŸify
, (*
m¨kî
, *
vÆ
), ());

98 
	}
};

	@unittest/mocks/deviceutils_mock.cpp

19 
	~"devi˚utûs_mock.h
"

20 
	~<io°ªam
>

22 
usög
 
«me•a˚
 
	g°d
;

24 
Devi˚UtûsMock
 *
g_Devi˚UtûsMock
;

26 "C" 
	$v_£cuª_sy°em
(c⁄° *
mode
, ...)

28 i‡(!
g_Devi˚UtûsMock
)

30 
cout
 << "v_£cuª_sy°em g_Devi˚UtûsMock obje˘ i†NULL" << 
ídl
;

31  
NULL
;

33 
	`¥ötf
("Inside Mock Function v_secure_system\n");

34  
g_Devi˚UtûsMock
->
	`v_£cuª_sy°em
(
mode
, 
NULL
, NULL);

35 
	}
}

37 "C" 
FILE
* 
	$v_£cuª_p›í
(c⁄° *
mode
, ...)

39 i‡(!
g_Devi˚UtûsMock
)

41 
cout
 << "v_£cuª_p›í g_Devi˚UtûsMock obje˘ i†NULL" << 
ídl
;

42  
NULL
;

44 
	`¥ötf
("Inside Mock Function v_secure_popen\n");

45  
g_Devi˚UtûsMock
->
	`v_£cuª_p›í
(
mode
, 
NULL
, NULL);

46 
	}
}

58 "C" 
	$v_£cuª_p˛o£
(
FILE
 *
Â
)

60 i‡(!
g_Devi˚UtûsMock
)

62 
cout
 << "v_£cuª_p˛o£ g_Devi˚UtûsMock obje˘ i†NULL" << 
ídl
;

65 
	`¥ötf
("Inside Mock Function v_secure_pclose\n");

66  
g_Devi˚UtûsMock
->
	`v_£cuª_p˛o£
(
Â
);

67 
	}
}

69 "C" * 
	$doCuæInô
()

71 i‡(!
g_Devi˚UtûsMock
)

73 
cout
 << "doCuæInô g_Devi˚UtûsMock obje˘ i†NULL" << 
ídl
;

76 
	`¥ötf
("Inside Mock Function doCurlInit\n");

77  
g_Devi˚UtûsMock
->
	`doCuæInô
();

78 
	}
}

80 "C" 
	$gëJs⁄RpcD©a
(*
Cuæ_ªq
, 
FûeDw∆_t
 *
ªq_d©a
, 
tokí_hódî
, 
hâpCode
 )

82 i‡(!
g_Devi˚UtûsMock
)

84 
cout
 << "gëJs⁄RpcD©®g_Devi˚UtûsMock obje˘ i†NULL" << 
ídl
;

87 
	`¥ötf
("Inside Mock Function getJsonRpcData\n");

88  
g_Devi˚UtûsMock
->
	`gëJs⁄RpcD©a
(
Cuæ_ªq
, 
ªq_d©a
,
tokí_hódî
, 
hâpCode
 );

89 
	}
}

91 "C" 
	$doSt›Dow∆ﬂd
(*
cuæ
)

93 i‡(!
g_Devi˚UtûsMock
)

95 
cout
 << "doSt›Dow∆ﬂd g_Devi˚UtûsMock obje˘ i†NULL" << 
ídl
;

98 
	`¥ötf
("Inside Mock Function doStopDownload\n");

99  
g_Devi˚UtûsMock
->
	`doSt›Dow∆ﬂd
(
cuæ
);

100 
	}
}

102 "C" 
	$gëDevi˚Pr›îtyD©a
(c⁄° *
modñ
, *
d©a
, 
size
)

104 i‡(!
g_Devi˚UtûsMock
)

106 
cout
 << "g_Devi˚UtûsMock obje˘ i†NULL" << 
ídl
;

109 
	`¥ötf
("Inside Mock Function getDevicePropertyData\n");

110 i‡(0 =(
	`°∫cmp
(
modñ
, "CPU_ARCH", 8))) {

111 
	`¢¥ötf
(
d©a
, 
size
, "%s", "X86");

112 } i‡(0 =(
	`°∫cmp
(
modñ
, "DEVICE_NAME", 11))) {

113 
	`¢¥ötf
(
d©a
, 
size
, "%s", "PLATCO");

114 } i‡(0 =(
	`°∫cmp
(
modñ
, "PDRI_ENABLED", 12))){

115 
	`¢¥ötf
(
d©a
, 
size
, "%s", "true");

116 } i‡(0 =(
	`°∫cmp
(
modñ
, "STAGE2LOCKFILE", 13))) {

117 
	`¢¥ötf
(
d©a
, 
size
, "%s", "/tmp/stage2");

118 } i‡(0 =(
	`°∫cmp
(
modñ
, "ESTB_INTERFACE", 14))) {

119 
	`¢¥ötf
(
d©a
, 
size
, "%s", "eth1");

121  
g_Devi˚UtûsMock
->
	`gëDevi˚Pr›îtyD©a
(
modñ
, 
d©a
, 
size
);

122 
	}
}

124 "C" 
	$ªad_RFCPr›îty
(* 
ty≥
, c⁄° * 
key
, *
out_vÆue
, 
size_t
 
d©asize
)

126 i‡(!
g_Devi˚UtûsMock
)

128 
cout
 << "g_Devi˚UtûsMock obje˘ i†NULL" << 
ídl
;

131 
	`¥ötf
("Inside Mock FunctionÑead_RFCProperty\n");

132 i‡(0 =(
	`°∫cmp
(
ty≥
, "OsClass", 7))) {

133 
	`¢¥ötf
(
out_vÆue
, 
d©asize
, "%s", "true");

134 } i‡(0 =(
	`°∫cmp
(
ty≥
, "SerialNumber", 12))) {

135 
	`¢¥ötf
(
out_vÆue
, 
d©asize
, "%s", "123456789012345");

136 } i‡(0 =(
	`°∫cmp
(
ty≥
, "PDRI_ENABLED", 12))){

137 
	`¢¥ötf
(
out_vÆue
, 
d©asize
, "%s", "true");

138 } i‡(0 =(
	`°∫cmp
(
ty≥
, "AccountID", 9))) {

139 
	`¢¥ötf
(
out_vÆue
, 
d©asize
, "%s", "123456789");

141 
	`¢¥ötf
(
out_vÆue
, 
d©asize
, "%s", "default.com");

143  
g_Devi˚UtûsMock
->
	`ªad_RFCPr›îty
(
ty≥
, 
key
, 
out_vÆue
, 
d©asize
);

144 
	}
}

146 "C" 
	$fûePª£¡Check
(c⁄° *
fûíame
)

148 i‡(!
g_Devi˚UtûsMock
)

150 
cout
 << "fûePª£¡Check g_Devi˚UtûsMock obje˘ i†NULL" << 
ídl
;

153 
	`¥ötf
("Inside Mock Function filePresentCheck\n");

154  
g_Devi˚UtûsMock
->
	`fûePª£¡Check
(
fûíame
);

155 
	}
}

157 "C" 
	$gëFûeSize
(c⁄° *
fûe
)

159 i‡(!
g_Devi˚UtûsMock
)

161 
cout
 << "gëFûeSizêg_Devi˚UtûsMock obje˘ i†NULL" << 
ídl
;

164 
	`¥ötf
("Inside Mock Function getFileSize\n");

165  
g_Devi˚UtûsMock
->
	`gëFûeSize
(
fûe
);

166 
	}
}

168 "C" 
boﬁ
 
	$isInSèãRed
()

170 i‡(!
g_Devi˚UtûsMock
)

172 
cout
 << "isInSèãRed g_Devi˚UtûsMock obje˘ i†NULL" << 
ídl
;

173  
Ál£
;

175 
	`¥ötf
("Inside Mock Function isInStateRed\n");

176  
g_Devi˚UtûsMock
->
	`isInSèãRed
();

177 
	}
}

179 "C" 
boﬁ
 
	$isDebugSîvi˚sE«bÀd
() {

180 i‡(!
g_Devi˚UtûsMock
) {

181 
cout
 << "isDebugSîvi˚sE«bÀd g_Devi˚UtûsMock obje˘ i†NULL" << 
ídl
;

182  
Ál£
;

184  
g_Devi˚UtûsMock
->
	`isDebugSîvi˚sE«bÀd
();

185 
	}
}

187 "C" 
size_t
 
	$GëHwMacAddªss
–*
iÁ˚
, *
pMac
, 
size_t
 
szBufSize
 )

189 i‡(!
g_Devi˚UtûsMock
)

191 
cout
 << "GëHwMacAddªs†g_Devi˚UtûsMock obje˘ i†NULL" << 
ídl
;

194 
	`¥ötf
("Inside Mock Function GetHwMacAddress\n");

195  
g_Devi˚UtûsMock
->
	`GëHwMacAddªss
(
iÁ˚
, 
pMac
, 
szBufSize
);

196 
	}
}

198 "C" 
size_t
 
	$GëModñNum
–*
pModñNum
, 
size_t
 
szBufSize
 )

200 i‡(!
g_Devi˚UtûsMock
)

202 
cout
 << "GëBuûdTy≥ g_Devi˚SètusMock obje˘ i†NULL" << 
ídl
;

205 
	`¥ötf
("Inside Mock Function GetModelNum\n");

206 
	`¢¥ötf
(
pModñNum
, 
szBufSize
, "%s", "12345");

207  
g_Devi˚UtûsMock
->
	`GëModñNum
(
pModñNum
, 
szBufSize
);

208 
	}
}

210 #ifde‡
DEVICE_API


211 "C" 
	$t2Cou¡NŸify
(*
m¨kî
)

213 i‡(!
g_Devi˚UtûsMock
)

215 
cout
 << "t2Cou¡NŸify g_Devi˚UtûsMock obje˘ i†NULL" << 
ídl
;

218 
	`¥ötf
("Inside Mock FunctionÅ2CountNotify\n");

219  
g_Devi˚UtûsMock
->
	`t2Cou¡NŸify
(
m¨kî
);

220 
	}
}

222 "C" 
	$t2VÆNŸify
(*
m¨kî
, *
vÆ
)

224 i‡(!
g_Devi˚UtûsMock
)

226 
cout
 << "t2VÆNŸify g_Devi˚UtûsMock obje˘ i†NULL" << 
ídl
;

229 
	`¥ötf
("Inside Mock FunctionÅ2ValNotify\n");

230  
g_Devi˚UtûsMock
->
	`t2VÆNŸify
(
m¨kî
, 
vÆ
);

231 
	}
}

	@unittest/mocks/deviceutils_mock.h

19 #i‚de‡
DEVICE_UTILS_MOCK


20 
	#DEVICE_UTILS_MOCK


	)

21 
	~<gã°/gã°.h
>

22 
	~<gmock/gmock.h
>

24 
	~"rdkv_cdl_log_wøµî.h
"

25 
	#RDK_API_SUCCESS
 0

	)

27 ˛as†
	cDevi˚UtûsI¡îÁ˚


29 
	mpublic
:

30 
vútuÆ
 ~
	$Devi˚UtûsI¡îÁ˚
() {}

31 
vútuÆ
 
FILE
* 
	`v_£cuª_sy°em
(c⁄° *
mode
,c⁄° *
cmd
, c⁄° *
›t
) = 0;

32 
vútuÆ
 
FILE
* 
	`v_£cuª_p›í
(c⁄° *
mode
,c⁄° *
cmd
, c⁄° *
›t
) = 0;

33 
vútuÆ
 
	`v_£cuª_p˛o£
(
FILE
 *
Â
) = 0;

34 
vútuÆ
 * 
	`doCuæInô
() = 0;

35 
vútuÆ
 
	`doSt›Dow∆ﬂd
(*
cuæ
) = 0;

36 
vútuÆ
 
	`gëJs⁄RpcD©a
(*
Cuæ_ªq
, 
FûeDw∆_t
 *
ªq_d©a
, 
tokí_hódî
, 
hâpCode
 ) = 0;

37 
vútuÆ
 
	`gëDevi˚Pr›îtyD©a
(c⁄° *
modñ
, *
d©a
, 
size
) = 0;

38 
vútuÆ
 
	`ªad_RFCPr›îty
(* 
ty≥
, c⁄° * 
key
, *
out_vÆue
, 
size_t
 
d©asize
) = 0;

39 
vútuÆ
 
	`fûePª£¡Check
(c⁄° *
fûíame
) = 0;

40 
vútuÆ
 
	`gëFûeSize
(c⁄° *
fûíame
) = 0;

41 
vútuÆ
 
boﬁ
 
	`isInSèãRed
() = 0;

42 
vútuÆ
 
boﬁ
 
	`isDebugSîvi˚sE«bÀd
() = 0;

43 
vútuÆ
 
size_t
 
	`GëHwMacAddªss
–*
iÁ˚
, *
pMac
, size_à
szBufSize
 ) = 0;

44 
vútuÆ
 
size_t
 
	`GëModñNum
–*
pModñNum
, size_à
szBufSize
 ) = 0;

45 
vútuÆ
 
	`t2Cou¡NŸify
(*
m¨kî
) = 0;

46 
vútuÆ
 
	`t2VÆNŸify
(*
m¨kî
, *
vÆ
) = 0;

47 
	}
};

49 ˛as†
	cDevi˚UtûsMock
: 
public
 
Devi˚UtûsI¡îÁ˚


51 
public
:

52 
vútuÆ
 ~
	$Devi˚UtûsMock
() {}

53 
	`MOCK_METHOD
(
FILE
*, 
v_£cuª_sy°em
, (c⁄° *
mode
, c⁄° *
cmd
, c⁄° *
›t
 ), ());

54 
	`MOCK_METHOD
(
FILE
*, 
v_£cuª_p›í
, (c⁄° *
mode
, c⁄° *
cmd
, c⁄° *
›t
 ), ());

55 
	`MOCK_METHOD
(, 
v_£cuª_p˛o£
, (
FILE
 *
Â
), ());

56 
	`MOCK_METHOD
(*, 
doCuæInô
, (), ());

57 
	`MOCK_METHOD
(, 
doSt›Dow∆ﬂd
, (*
cuæ
), ());

58 
	`MOCK_METHOD
(, 
gëJs⁄RpcD©a
, (*
Cuæ_ªq
, 
FûeDw∆_t
 *
ªq_d©a
, 
tokí_hódî
, 
hâpCode
 ), ());

59 
	`MOCK_METHOD
(, 
gëDevi˚Pr›îtyD©a
, (c⁄° *
modñ
, *
d©a
, 
size
), ());

60 
	`MOCK_METHOD
(, 
ªad_RFCPr›îty
, (* 
ty≥
, c⁄° * 
key
, *
out_vÆue
, 
size_t
 
d©asize
), ());

61 
	`MOCK_METHOD
(, 
fûePª£¡Check
, (c⁄° *
fûíame
 ), ());

62 
	`MOCK_METHOD
(, 
gëFûeSize
, (c⁄° *
fûíame
 ), ());

63 
	`MOCK_METHOD
(
boﬁ
, 
isInSèãRed
, (), ());

64 
	`MOCK_METHOD
(
boﬁ
, 
isDebugSîvi˚sE«bÀd
, (), ());

65 
	`MOCK_METHOD
(
size_t
, 
GëHwMacAddªss
, (*
iÁ˚
, *
pMac
, size_à
szBufSize
), ());

66 
	`MOCK_METHOD
(
size_t
, 
GëModñNum
, ( *
pModñNum
, size_à
szBufSize
 ), ());

67 
	`MOCK_METHOD
(, 
t2Cou¡NŸify
, (*
m¨kî
), ());

68 
	`MOCK_METHOD
(, 
t2VÆNŸify
, (*
m¨kî
, *
vÆ
), ());

69 
	}
};

	@unittest/mocks/interface_mock.cpp

19 
	~"öãrÁ˚_mock.h
"

20 
	~<io°ªam
>

22 
usög
 
«me•a˚
 
	g°d
;

24 
FwDlI¡îÁ˚Mock
 *
g_I¡îÁ˚Mock
;

26 "C" 
	$gëRFCP¨amëî
(* 
ty≥
, c⁄° * 
key
, 
RFC_P¨amD©a_t
 *
∑øm
)

28 i‡(!
g_I¡îÁ˚Mock
)

30 
cout
 << "gëRFCP¨amëî g_I¡îÁ˚Mock obje˘ i†NULL" << 
ídl
;

33 
	`¥ötf
("Inside Mock Function getRFCParameter\n");

34 
	`¢¥ötf
(
∑øm
->
vÆue
,(param->value), "%s", "true");

35 
	`¢¥ötf
(
∑øm
->
«me
,(param->name), "%s", "rfc");

36 
∑øm
->
ty≥
 = 1;

37 
∑øm
->
°©us
 = 1;

38  
g_I¡îÁ˚Mock
->
	`gëRFCP¨amëî
(
ty≥
,
key
,
∑øm
);

39 
	}
}

41 "C" 
	$£tRFCP¨amëî
(* 
ty≥
, c⁄° * 
key
, c⁄° *
vÆue
, 
d©©y≥
)

43 i‡(!
g_I¡îÁ˚Mock
)

45 
cout
 << "£tRFCP¨amëîêg_I¡îÁ˚Mock obje˘ i†NULL" << 
ídl
;

48 
	`¥ötf
("Inside Mock Function setRFCParameter\n");

49  
g_I¡îÁ˚Mock
->
	`£tRFCP¨amëî
(
ty≥
,
key
,
vÆue
,
d©©y≥
);

50 
	}
}

52 "C" 
	$fûePª£¡Check
(c⁄° *
fûíame
)

54 i‡(!
g_I¡îÁ˚Mock
)

56 
cout
 << "fûePª£¡Check g_I¡îÁ˚Mock obje˘ i†NULL" << 
ídl
;

59 
	`¥ötf
("Inside Mock Function filePresentCheck\n");

60  
g_I¡îÁ˚Mock
->
	`fûePª£¡Check
(
fûíame
);

61 
	}
}

62 "C" 
	$gëDevi˚Pr›îtyD©a
(c⁄° *
modñ
, *
d©a
, 
size
)

64 i‡(!
g_I¡îÁ˚Mock
)

66 
cout
 << "g_I¡îÁ˚Mock obje˘ i†NULL" << 
ídl
;

69 
	`¥ötf
("Inside Mock Function getDevicePropertyData\n");

70 i‡(0 =(
	`°∫cmp
(
modñ
, "CPU_ARCH", 8))) {

71 
	`¢¥ötf
(
d©a
, 
size
, "%s", "X86");

72 } i‡(0 =(
	`°∫cmp
(
modñ
, "DEVICE_NAME", 11))) {

73 
	`¢¥ötf
(
d©a
, 
size
, "%s", "PLATCO");

74 } i‡(0 =(
	`°∫cmp
(
modñ
, "PDRI_ENABLED", 12))){

75 
	`¢¥ötf
(
d©a
, 
size
, "%s", "true");

77  
g_I¡îÁ˚Mock
->
	`gëDevi˚Pr›îtyD©a
(
modñ
, 
d©a
, 
size
);

78 
	}
}

79 "C" * 
	$gëRFCEº‹Såög
(
°©us
)

81 i‡(!
g_I¡îÁ˚Mock
)

83 
cout
 << "g_I¡îÁ˚Mock obje˘ i†NULL" << 
ídl
;

86 
	`¥ötf
("Inside Mock Function getRFCErrorString\n");

87  
g_I¡îÁ˚Mock
->
	`gëRFCEº‹Såög
(
°©us
);

88 
	}
}

89 "C" 
	$gëAµMode
()

91 i‡(!
g_I¡îÁ˚Mock
)

93 
cout
 << "g_I¡îÁ˚Mock obje˘ i†NULL" << 
ídl
;

96 
	`¥ötf
("Inside Mock Function getAppMode\n");

97  
g_I¡îÁ˚Mock
->
	`gëAµMode
();

98 
	}
}

99 "C" 
	$öãru±Dw∆
(
vÆ
)

101 i‡(!
g_I¡îÁ˚Mock
)

103 
cout
 << "g_I¡îÁ˚Mock obje˘ i†NULL" << 
ídl
;

106 
	`¥ötf
("Inside Mock Function interuptDwnl\n");

107  
g_I¡îÁ˚Mock
->
	`öãru±Dw∆
(
vÆ
);

108 
	}
}

109 "C" 
	$IARM_Bus_IsC⁄√˘ed
(c⁄° *
°r
, *
vÆ
)

111 i‡(!
g_I¡îÁ˚Mock
)

113 
cout
 << "g_I¡îÁ˚Mock obje˘ i†NULL" << 
ídl
;

116 
	`¥ötf
("Inside Mock Function IARM_Bus_IsConnected\n");

117  
g_I¡îÁ˚Mock
->
	`IARM_Bus_IsC⁄√˘ed
(
°r
, 
vÆ
);

118 
	}
}

119 "C" 
	$IARM_Bus_Brﬂdˇ°Evít
(c⁄° *
«me
, 
vÆ
, *
p
, 
size
)

121 i‡(!
g_I¡îÁ˚Mock
)

123 
cout
 << "g_I¡îÁ˚Mock obje˘ i†NULL" << 
ídl
;

126 
	`¥ötf
("Inside Mock Function IARM_Bus_BroadcastEvent\n");

127  
g_I¡îÁ˚Mock
->
	`IARM_Bus_Brﬂdˇ°Evít
(
«me
, 
vÆ
, 
p
, 
size
);

128 
	}
}

129 "C" 
	$IARM_Bus_Inô
(c⁄° *
«me
)

131 i‡(!
g_I¡îÁ˚Mock
)

133 
cout
 << "g_I¡îÁ˚Mock obje˘ i†NULL" << 
ídl
;

136 
	`¥ötf
("Inside Mock Function IARM_Bus_Init\n");

137  
g_I¡îÁ˚Mock
->
	`IARM_Bus_Inô
(
«me
);

138 
	}
}

139 "C" 
	$IARM_Bus_Regi°îEvítH™dÀr
(c⁄° *
«me
, 
mode
, *
fun
)

141 i‡(!
g_I¡îÁ˚Mock
)

143 
cout
 << "g_I¡îÁ˚Mock obje˘ i†NULL" << 
ídl
;

146 
	`¥ötf
("Inside Mock Function IARM_Bus_RegisterEventHandler\n");

147  
g_I¡îÁ˚Mock
->
	`IARM_Bus_Regi°îEvítH™dÀr
(
«me
, 
mode
, 
fun
);

148 
	}
}

149 "C" 
	$IARM_Bus_C⁄√˘
()

151 i‡(!
g_I¡îÁ˚Mock
)

153 
cout
 << "g_I¡îÁ˚Mock obje˘ i†NULL" << 
ídl
;

156 
	`¥ötf
("Inside Mock Function IARM_Bus_Connect\n");

157  
g_I¡îÁ˚Mock
->
	`IARM_Bus_C⁄√˘
();

158 
	}
}

159 "C" 
	$IARM_Bus_UnRegi°îEvítH™dÀr
(c⁄° *
«me
, 
mode
)

161 i‡(!
g_I¡îÁ˚Mock
)

163 
cout
 << "g_I¡îÁ˚Mock obje˘ i†NULL" << 
ídl
;

166 
	`¥ötf
("Inside Mock Function IARM_Bus_UnRegisterEventHandler\n");

167  
g_I¡îÁ˚Mock
->
	`IARM_Bus_UnRegi°îEvítH™dÀr
(
«me
, 
mode
);

168 
	}
}

169 "C" 
	$IARM_Bus_Disc⁄√˘
()

171 i‡(!
g_I¡îÁ˚Mock
)

173 
cout
 << "g_I¡îÁ˚Mock obje˘ i†NULL" << 
ídl
;

176 
	`¥ötf
("Inside Mock Function IARM_Bus_Disconnect\n");

177  
g_I¡îÁ˚Mock
->
	`IARM_Bus_Disc⁄√˘
();

178 
	}
}

179 "C" 
	$IARM_Bus_Tîm
()

181 i‡(!
g_I¡îÁ˚Mock
)

183 
cout
 << "g_I¡îÁ˚Mock obje˘ i†NULL" << 
ídl
;

186 
	`¥ötf
("Inside Mock Function IARM_Bus_Term\n");

187  
g_I¡îÁ˚Mock
->
	`IARM_Bus_Tîm
();

188 
	}
}

189 "C" 
	$MemDLAŒoc
(*
±r
, 
size
)

191 i‡(!
g_I¡îÁ˚Mock
)

193 
cout
 << "g_I¡îÁ˚Mock obje˘ i†NULL" << 
ídl
;

196 
	`¥ötf
("Inside Mock Function MemDLAlloc\n");

197  
g_I¡îÁ˚Mock
->
	`MemDLAŒoc
(
±r
, 
size
);

198 
	}
}

199 "C" 
	$gëJs⁄Rpc
(*
d©a
, *
±r
)

201 i‡(!
g_I¡îÁ˚Mock
)

203 
cout
 << "g_I¡îÁ˚Mock obje˘ i†NULL" << 
ídl
;

206 
	`¥ötf
("Inside Mock Function getJsonRpc\n");

207  
g_I¡îÁ˚Mock
->
	`gëJs⁄Rpc
(
d©a
, 
±r
);

208 
	}
}

	@unittest/mocks/interface_mock.h

19 #i‚de‡
INTERFACE_MOCK


20 
	#INTERFACE_MOCK


	)

21 
	~<gã°/gã°.h
>

22 
	~<gmock/gmock.h
>

24 
	~"rdkv_cdl_log_wøµî.h
"

27 
	~"rfcöãrÁ˚.h
"

30 ˛as†
	cFwDlI¡îÁ˚


32 
public
:

33 
vútuÆ
 ~
	$FwDlI¡îÁ˚
() {}

34 
vútuÆ
 
	`fûePª£¡Check
(c⁄° *
fûíame
) = 0;

35 
vútuÆ
 
	`gëRFCP¨amëî
(* 
ty≥
, c⁄° * 
key
, 
RFC_P¨amD©a_t
 *
∑øm
) = 0;

36 
vútuÆ
 
	`£tRFCP¨amëî
(* 
ty≥
, c⁄° * 
key
, c⁄° *
vÆue
, 
d©©y≥
) = 0;

37 
vútuÆ
 
	`gëDevi˚Pr›îtyD©a
(c⁄° *
modñ
, *
d©a
, 
size
) = 0;

38 
vútuÆ
 * 
	`gëRFCEº‹Såög
(
°©us
) = 0;

39 
vútuÆ
 
	`gëAµMode
() = 0;

40 
vútuÆ
 
	`öãru±Dw∆
(
vÆ
) = 0;

41 
vútuÆ
 
	`IARM_Bus_IsC⁄√˘ed
(c⁄° *
°r
, *
vÆ
) = 0;

42 
vútuÆ
 
	`IARM_Bus_Brﬂdˇ°Evít
(c⁄° *
«me
, 
vÆ
, *
p
, 
size
) = 0;

43 
vútuÆ
 
	`IARM_Bus_Inô
(c⁄° *
«me
) = 0;

44 
vútuÆ
 
	`IARM_Bus_Regi°îEvítH™dÀr
(c⁄° *
«me
, 
mode
, *
fun
) = 0;

45 
vútuÆ
 
	`IARM_Bus_C⁄√˘
() = 0;

46 
vútuÆ
 
	`IARM_Bus_UnRegi°îEvítH™dÀr
(c⁄° *
«me
, 
mode
) = 0;

47 
vútuÆ
 
	`IARM_Bus_Disc⁄√˘
() = 0;

48 
vútuÆ
 
	`IARM_Bus_Tîm
() = 0;

49 
vútuÆ
 
	`MemDLAŒoc
(*
±r
, 
size
) = 0;

50 
vútuÆ
 
	`gëJs⁄Rpc
(*
d©a
, *
±r
) = 0;

51 
	}
};

53 ˛as†
	cFwDlI¡îÁ˚Mock
: 
public
 
FwDlI¡îÁ˚


55 
public
:

56 
vútuÆ
 ~
	$FwDlI¡îÁ˚Mock
() {}

57 
	`MOCK_METHOD
(, 
fûePª£¡Check
, (c⁄° *
fûíame
 ), ());

58 
	`MOCK_METHOD
(, 
gëRFCP¨amëî
, (* 
ty≥
, c⁄° * 
key
, 
RFC_P¨amD©a_t
 *
∑øm
), ());

59 
	`MOCK_METHOD
(, 
£tRFCP¨amëî
, (* 
ty≥
, c⁄° * 
key
, c⁄° *
vÆue
, 
d©©y≥
), ());

60 
	`MOCK_METHOD
(, 
gëDevi˚Pr›îtyD©a
, (c⁄° *
modñ
, *
d©a
, 
size
), ());

61 
	`MOCK_METHOD
(*, 
gëRFCEº‹Såög
, (
°©us
), ());

62 
	`MOCK_METHOD
(, 
gëAµMode
, (), ());

63 
	`MOCK_METHOD
(, 
öãru±Dw∆
, (
vÆ
), ());

64 
	`MOCK_METHOD
(, 
IARM_Bus_IsC⁄√˘ed
, (c⁄° *
°r
, *
vÆ
), ());

65 
	`MOCK_METHOD
(, 
IARM_Bus_Brﬂdˇ°Evít
, (c⁄° *
«me
, 
vÆ
, *
p
, 
size
), ());

66 
	`MOCK_METHOD
(, 
IARM_Bus_Inô
, (c⁄° *
«me
), ());

67 
	`MOCK_METHOD
(, 
IARM_Bus_Regi°îEvítH™dÀr
, (c⁄° *
«me
, 
mode
, *
fun
), ());

68 
	`MOCK_METHOD
(, 
IARM_Bus_C⁄√˘
, (), ());

69 
	`MOCK_METHOD
(, 
IARM_Bus_UnRegi°îEvítH™dÀr
, (c⁄° *
«me
, 
mode
), ());

70 
	`MOCK_METHOD
(, 
IARM_Bus_Disc⁄√˘
, (), ());

71 
	`MOCK_METHOD
(, 
IARM_Bus_Tîm
, (), ());

72 
	`MOCK_METHOD
(, 
MemDLAŒoc
, (*
±r
, 
size
), ());

73 
	`MOCK_METHOD
(, 
gëJs⁄Rpc
, (*
d©a
, *
±r
), ());

74 
	}
};

	@unittest/rdkv_cdl_log_wrapper.h

19 #i‚de‡ 
_RDKV_CDL_LOG_WRPPER_H_


20 
	#_RDKV_CDL_LOG_WRPPER_H_


	)

22 
	~<°dboﬁ.h
>

23 
	~<°dlib.h
>

24 
	~<°rög.h
>

26 
	#SWLOG_INFO
(
f‹m©
, ...Ë
	`¥ötf
(f‹m©, ##
__VA_ARGS__
)

	)

27 
	#SWLOG_ERROR
(
f‹m©
, ...Ë
	`¥ötf
(f‹m©, ##
__VA_ARGS__
)

	)

29 
	#CURL_TLS_TIMEOUT
 7200L

	)

30 
	#CURL_PROGRESS_FILE
 "/›t/cuæ_¥ogªss"

	)

32 
	#MAX_BUFF_SIZE
 512

	)

33 
	#MAX_BUFF_SIZE1
 256

	)

34 
	#MIN_BUFF_SIZE
 64

	)

35 
	#MIN_BUFF_SIZE1
 32

	)

36 
	#SMALL_SIZE_BUFF
 8

	)

37 
	#URL_MAX_LEN
 512

	)

38 
	#DWNL_PATH_FILE_LEN
 128

	)

39 
	#BIG_BUF_LEN
 1024

	)

40 
	#MAX_DEVICE_PROP_BUFF_SIZE
 32

	)

42 
	#DEVICE_PROPERTIES_FILE
 "/tmp/devi˚_gã°.¥›"

	)

43 
	#UTILS_SUCCESS
 0

	)

44 
	#UTILS_FAIL
 -1

	)

46 
	s¸edítül
 {

47 
	m˚π_«me
[64];

48 
	m˚π_ty≥
[16];

49 
	mkey_∑s
[32];

50 }
	tMésAuth_t
;

53 
	sComm⁄Dow∆ﬂdD©a
 {

54 * 
	mpvOut
;

55 
size_t
 
	md©asize
;

56 
size_t
 
	mmemsize
;

57 } 
	tDow∆ﬂdD©a
;

60 
	shashP¨am
 {

61 *
	mhashvÆue
;

62 *
	mhashtime
;

63 }
	thashP¨am_t
;

65 
	sfûedw∆
 {

66 *
	mpPo°Fõlds
;

67 *
	mpHódîD©a
;

68 
Dow∆ﬂdD©a
 *
	mpDlD©a
;

69 
Dow∆ﬂdD©a
 *
	mpDlHódîD©a
;

70 
	mchunk_dw∆_ªåy_time
;

71 
	muæ
[
BIG_BUF_LEN
];

72 
	m∑th«me
[
DWNL_PATH_FILE_LEN
];

73 
boﬁ
 
	ms¶vîify
;

74 
hashP¨am_t
 *
	mhashD©a
;

75 }
	tFûeDw∆_t
;

78 
	meUNKNOWN
,

79 
	meDEV
,

80 
	meVBN
,

81 
	mePROD
,

82 
	meQA


83 } 
	tBUILDTYPE
;

	@/usr/include/cjson/cJSON.h

23 #i‚de‡
cJSON__h


24 
	#cJSON__h


	)

26 #ifde‡
__˝lu•lus


31 #i‡!
deföed
(
__WINDOWS__
Ë&& (deföed(
WIN32
Ë|| deföed(
WIN64
Ë|| deföed(
_MSC_VER
Ë|| deföed(
_WIN32
))

32 
	#__WINDOWS__


	)

35 #ifde‡
__WINDOWS__


55 
	#CJSON_CDECL
 
__cde˛


	)

56 
	#CJSON_STDCALL
 
__°dˇŒ


	)

59 #i‡!
deföed
(
CJSON_HIDE_SYMBOLS
Ë&& !deföed(
CJSON_IMPORT_SYMBOLS
Ë&& !deföed(
CJSON_EXPORT_SYMBOLS
)

60 
	#CJSON_EXPORT_SYMBOLS


	)

63 #i‡
deföed
(
CJSON_HIDE_SYMBOLS
)

64 
	#CJSON_PUBLIC
(
ty≥
Ëty≥ 
CJSON_STDCALL


	)

65 #ñi‡
deföed
(
CJSON_EXPORT_SYMBOLS
)

66 
	#CJSON_PUBLIC
(
ty≥
Ë
	`__de˛•ec
(
dŒexp‹t
Ëty≥ 
CJSON_STDCALL


	)

67 #ñi‡
deföed
(
CJSON_IMPORT_SYMBOLS
)

68 
	#CJSON_PUBLIC
(
ty≥
Ë
	`__de˛•ec
(
dŒimp‹t
Ëty≥ 
CJSON_STDCALL


	)

71 
	#CJSON_CDECL


	)

72 
	#CJSON_STDCALL


	)

74 #i‡(
deföed
(
__GNUC__
Ë|| deföed(
__SUNPRO_CC
Ë|| deföed (
__SUNPRO_C
)Ë&& deföed(
CJSON_API_VISIBILITY
)

75 
	#CJSON_PUBLIC
(
ty≥
Ë
	`__©åibuã__
((
	`visibûôy
("deÁu…"))Ë
	)
type

77 
	#CJSON_PUBLIC
(
ty≥
Ë
	)
type

82 
	#CJSON_VERSION_MAJOR
 1

	)

83 
	#CJSON_VERSION_MINOR
 7

	)

84 
	#CJSON_VERSION_PATCH
 15

	)

86 
	~<°ddef.h
>

89 
	#cJSON_InvÆid
 (0)

	)

90 
	#cJSON_FÆ£
 (1 << 0)

	)

91 
	#cJSON_True
 (1 << 1)

	)

92 
	#cJSON_NULL
 (1 << 2)

	)

93 
	#cJSON_Numbî
 (1 << 3)

	)

94 
	#cJSON_Såög
 (1 << 4)

	)

95 
	#cJSON_Aºay
 (1 << 5)

	)

96 
	#cJSON_Obje˘
 (1 << 6)

	)

97 
	#cJSON_Raw
 (1 << 7Ë

	)

99 
	#cJSON_IsRe„ªn˚
 256

	)

100 
	#cJSON_SåögIsC⁄°
 512

	)

103 
	scJSON


106 
cJSON
 *
√xt
;

107 
cJSON
 *
¥ev
;

109 
cJSON
 *
chûd
;

112 
ty≥
;

115 *
vÆue°rög
;

117 
vÆueöt
;

119 
vÆuedoubÀ
;

122 *
°rög
;

123 } 
	tcJSON
;

125 
	scJSON_Hooks


128 *(
CJSON_CDECL
 *
mÆloc_‚
)(
size_t
 
sz
);

129 (
CJSON_CDECL
 *
‰ì_‚
)(*
±r
);

130 } 
	tcJSON_Hooks
;

132 
	tcJSON_boﬁ
;

136 #i‚de‡
CJSON_NESTING_LIMIT


137 
	#CJSON_NESTING_LIMIT
 1000

	)

141 
CJSON_PUBLIC
(c⁄° *Ë
cJSON_Vîsi⁄
();

144 
CJSON_PUBLIC
(Ë
cJSON_InôHooks
(
cJSON_Hooks
* 
hooks
);

148 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_P¨£
(c⁄° *
vÆue
);

149 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_P¨£WôhLígth
(c⁄° *
vÆue
, 
size_t
 
buf„r_Àngth
);

152 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_P¨£WôhO±s
(c⁄° *
vÆue
, c⁄° **
ªtu∫_∑r£_íd
, 
cJSON_boﬁ
 
ªquúe_nuŒ_ãrmö©ed
);

153 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_P¨£WôhLígthO±s
(c⁄° *
vÆue
, 
size_t
 
buf„r_Àngth
, c⁄° **
ªtu∫_∑r£_íd
, 
cJSON_boﬁ
 
ªquúe_nuŒ_ãrmö©ed
);

156 
CJSON_PUBLIC
(*Ë
cJSON_Pröt
(c⁄° 
cJSON
 *
ôem
);

158 
CJSON_PUBLIC
(*Ë
cJSON_PrötUnf‹m©ãd
(c⁄° 
cJSON
 *
ôem
);

160 
CJSON_PUBLIC
(*Ë
cJSON_PrötBuf„ªd
(c⁄° 
cJSON
 *
ôem
, 
¥ebuf„r
, 
cJSON_boﬁ
 
fmt
);

163 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_PrötPªÆloˇãd
(
cJSON
 *
ôem
, *
buf„r
, c⁄° 
Àngth
, c⁄° cJSON_boﬁ 
f‹m©
);

165 
CJSON_PUBLIC
(Ë
cJSON_Dñëe
(
cJSON
 *
ôem
);

168 
CJSON_PUBLIC
(Ë
cJSON_GëAºaySize
(c⁄° 
cJSON
 *
¨øy
);

170 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_GëAºayIãm
(c⁄° cJSON *
¨øy
, 
ödex
);

172 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_GëObje˘Iãm
(c⁄° cJSON * c⁄° 
obje˘
, c⁄° * c⁄° 
°rög
);

173 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_GëObje˘IãmCa£Sísôive
(c⁄° cJSON * c⁄° 
obje˘
, c⁄° * c⁄° 
°rög
);

174 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_HasObje˘Iãm
(c⁄° 
cJSON
 *
obje˘
, c⁄° *
°rög
);

176 
CJSON_PUBLIC
(c⁄° *Ë
cJSON_GëEº‹På
();

179 
CJSON_PUBLIC
(*Ë
cJSON_GëSåögVÆue
(c⁄° 
cJSON
 * c⁄° 
ôem
);

180 
CJSON_PUBLIC
(Ë
cJSON_GëNumbîVÆue
(c⁄° 
cJSON
 * c⁄° 
ôem
);

183 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_IsInvÆid
(c⁄° 
cJSON
 * c⁄° 
ôem
);

184 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_IsFÆ£
(c⁄° 
cJSON
 * c⁄° 
ôem
);

185 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_IsTrue
(c⁄° 
cJSON
 * c⁄° 
ôem
);

186 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_IsBoﬁ
(c⁄° 
cJSON
 * c⁄° 
ôem
);

187 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_IsNuŒ
(c⁄° 
cJSON
 * c⁄° 
ôem
);

188 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_IsNumbî
(c⁄° 
cJSON
 * c⁄° 
ôem
);

189 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_IsSåög
(c⁄° 
cJSON
 * c⁄° 
ôem
);

190 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_IsAºay
(c⁄° 
cJSON
 * c⁄° 
ôem
);

191 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_IsObje˘
(c⁄° 
cJSON
 * c⁄° 
ôem
);

192 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_IsRaw
(c⁄° 
cJSON
 * c⁄° 
ôem
);

195 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_Cª©eNuŒ
();

196 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_Cª©eTrue
();

197 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_Cª©eFÆ£
();

198 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_Cª©eBoﬁ
(
cJSON_boﬁ
 
boﬁón
);

199 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_Cª©eNumbî
(
num
);

200 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_Cª©eSåög
(c⁄° *
°rög
);

202 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_Cª©eRaw
(c⁄° *
øw
);

203 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_Cª©eAºay
();

204 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_Cª©eObje˘
();

208 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_Cª©eSåögRe„ªn˚
(c⁄° *
°rög
);

211 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_Cª©eObje˘Re„ªn˚
(c⁄° cJSON *
chûd
);

212 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_Cª©eAºayRe„ªn˚
(c⁄° cJSON *
chûd
);

216 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_Cª©eI¡Aºay
(c⁄° *
numbîs
, 
cou¡
);

217 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_Cª©eFlﬂtAºay
(c⁄° *
numbîs
, 
cou¡
);

218 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_Cª©eDoubÀAºay
(c⁄° *
numbîs
, 
cou¡
);

219 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_Cª©eSåögAºay
(c⁄° *c⁄° *
°rögs
, 
cou¡
);

222 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_AddIãmToAºay
(
cJSON
 *
¨øy
, cJSON *
ôem
);

223 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_AddIãmToObje˘
(
cJSON
 *
obje˘
, c⁄° *
°rög
, cJSON *
ôem
);

227 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_AddIãmToObje˘CS
(
cJSON
 *
obje˘
, c⁄° *
°rög
, cJSON *
ôem
);

229 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_AddIãmRe„ªn˚ToAºay
(
cJSON
 *
¨øy
, cJSON *
ôem
);

230 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_AddIãmRe„ªn˚ToObje˘
(
cJSON
 *
obje˘
, c⁄° *
°rög
, cJSON *
ôem
);

233 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_DëachIãmVüPoöãr
(cJSON *
∑ª¡
, cJSON * c⁄° 
ôem
);

234 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_DëachIãmFromAºay
(cJSON *
¨øy
, 
which
);

235 
CJSON_PUBLIC
(Ë
cJSON_DñëeIãmFromAºay
(
cJSON
 *
¨øy
, 
which
);

236 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_DëachIãmFromObje˘
(cJSON *
obje˘
, c⁄° *
°rög
);

237 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_DëachIãmFromObje˘Ca£Sísôive
(cJSON *
obje˘
, c⁄° *
°rög
);

238 
CJSON_PUBLIC
(Ë
cJSON_DñëeIãmFromObje˘
(
cJSON
 *
obje˘
, c⁄° *
°rög
);

239 
CJSON_PUBLIC
(Ë
cJSON_DñëeIãmFromObje˘Ca£Sísôive
(
cJSON
 *
obje˘
, c⁄° *
°rög
);

242 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_In£πIãmInAºay
(
cJSON
 *
¨øy
, 
which
, cJSON *
√wôem
);

243 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_Rïœ˚IãmVüPoöãr
(
cJSON
 * c⁄° 
∑ª¡
, cJSON * c⁄° 
ôem
, cJSON * 
ª∂a˚mít
);

244 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_Rïœ˚IãmInAºay
(
cJSON
 *
¨øy
, 
which
, cJSON *
√wôem
);

245 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_Rïœ˚IãmInObje˘
(
cJSON
 *
obje˘
,c⁄° *
°rög
,cJSON *
√wôem
);

246 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_Rïœ˚IãmInObje˘Ca£Sísôive
(
cJSON
 *
obje˘
,c⁄° *
°rög
,cJSON *
√wôem
);

249 
CJSON_PUBLIC
(
cJSON
 *Ë
cJSON_Du∂iˇã
(c⁄° cJSON *
ôem
, 
cJSON_boﬁ
 
ªcur£
);

255 
CJSON_PUBLIC
(
cJSON_boﬁ
Ë
cJSON_Com∑ª
(c⁄° 
cJSON
 * c⁄° 
a
, c⁄° cJSON * c⁄° 
b
, c⁄° cJSON_boﬁ 
ˇ£_£nsôive
);

260 
CJSON_PUBLIC
(Ë
cJSON_Möify
(*
js⁄
);

264 
CJSON_PUBLIC
(
cJSON
*Ë
cJSON_AddNuŒToObje˘
(cJSON * c⁄° 
obje˘
, c⁄° * c⁄° 
«me
);

265 
CJSON_PUBLIC
(
cJSON
*Ë
cJSON_AddTrueToObje˘
(cJSON * c⁄° 
obje˘
, c⁄° * c⁄° 
«me
);

266 
CJSON_PUBLIC
(
cJSON
*Ë
cJSON_AddFÆ£ToObje˘
(cJSON * c⁄° 
obje˘
, c⁄° * c⁄° 
«me
);

267 
CJSON_PUBLIC
(
cJSON
*Ë
cJSON_AddBoﬁToObje˘
(cJSON * c⁄° 
obje˘
, c⁄° * c⁄° 
«me
, c⁄° 
cJSON_boﬁ
 
boﬁón
);

268 
CJSON_PUBLIC
(
cJSON
*Ë
cJSON_AddNumbîToObje˘
(cJSON * c⁄° 
obje˘
, c⁄° * c⁄° 
«me
, c⁄° 
numbî
);

269 
CJSON_PUBLIC
(
cJSON
*Ë
cJSON_AddSåögToObje˘
(cJSON * c⁄° 
obje˘
, c⁄° * c⁄° 
«me
, c⁄° * c⁄° 
°rög
);

270 
CJSON_PUBLIC
(
cJSON
*Ë
cJSON_AddRawToObje˘
(cJSON * c⁄° 
obje˘
, c⁄° * c⁄° 
«me
, c⁄° * c⁄° 
øw
);

271 
CJSON_PUBLIC
(
cJSON
*Ë
cJSON_AddObje˘ToObje˘
(cJSON * c⁄° 
obje˘
, c⁄° * c⁄° 
«me
);

272 
CJSON_PUBLIC
(
cJSON
*Ë
cJSON_AddAºayToObje˘
(cJSON * c⁄° 
obje˘
, c⁄° * c⁄° 
«me
);

275 
	#cJSON_SëI¡VÆue
(
obje˘
, 
numbî
Ë((obje˘Ë? (obje˘)->
vÆueöt
 = (obje˘)->
vÆuedoubÀ
 = (numbîË: (numbî))

	)

277 
CJSON_PUBLIC
(Ë
cJSON_SëNumbîHñ≥r
(
cJSON
 *
obje˘
, 
numbî
);

278 
	#cJSON_SëNumbîVÆue
(
obje˘
, 
numbî
Ë((obje˘ !
NULL
Ë? 
	`cJSON_SëNumbîHñ≥r
(obje˘, (ÍumbîË: (numbî))

	)

280 
CJSON_PUBLIC
(*Ë
cJSON_SëVÆue°rög
(
cJSON
 *
obje˘
, c⁄° *
vÆue°rög
);

283 
	#cJSON_AºayF‹Each
(
ñemít
, 
¨øy
Ëñemíà◊ºay !
NULL
Ë? (¨øy)->
chûd
 : NULL;ÉÀmíà!NULL;ÉÀmíàñemít->
√xt
)

	)

286 
CJSON_PUBLIC
(*Ë
cJSON_mÆloc
(
size_t
 
size
);

287 
CJSON_PUBLIC
(Ë
cJSON_‰ì
(*
obje˘
);

289 #ifde‡
__˝lu•lus


	@/usr/include/ctype.h

22 #i‚def 
_CTYPE_H


23 
	#_CTYPE_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	g__BEGIN_DECLS


30 #i‚de‡
_ISbô


39 
	~<bôs/ídün.h
>

40 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


41 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

43 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

48 
	m_ISuµî
 = 
_ISbô
 (0),

49 
	m_ISlowî
 = 
_ISbô
 (1),

50 
	m_ISÆpha
 = 
_ISbô
 (2),

51 
	m_ISdigô
 = 
_ISbô
 (3),

52 
	m_ISxdigô
 = 
_ISbô
 (4),

53 
	m_IS•a˚
 = 
_ISbô
 (5),

54 
	m_IS¥öt
 = 
_ISbô
 (6),

55 
	m_ISgøph
 = 
_ISbô
 (7),

56 
	m_ISbœnk
 = 
_ISbô
 (8),

57 
	m_IS˙ål
 = 
_ISbô
 (9),

58 
	m_ISpun˘
 = 
_ISbô
 (10),

59 
	m_ISÆnum
 = 
_ISbô
 (11)

79 c⁄° **
	$__˘y≥_b_loc
 ()

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

81 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

87 #i‚de‡
__˝lu•lus


88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

90 #ñi‡
deföed
 
__USE_EXTERN_INLINES


91 
	#__is˘y≥_f
(
ty≥
) \

92 
__exã∫_ölöe
 \

93 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

95  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

96 
	}

	)
}

99 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

100 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

102 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

108 
__ex˘y≥
 (
iß um
);

109 
__ex˘y≥
 (
ißÕha
);

110 
__ex˘y≥
 (
is˙ål
);

111 
__ex˘y≥
 (
isdigô
);

112 
__ex˘y≥
 (
i¶owî
);

113 
__ex˘y≥
 (
isgøph
);

114 
__ex˘y≥
 (
i•röt
);

115 
__ex˘y≥
 (
i•un˘
);

116 
__ex˘y≥
 (
is•a˚
);

117 
__ex˘y≥
 (
isuµî
);

118 
__ex˘y≥
 (
isxdigô
);

122 
	$tﬁowî
 (
__c
Ë
__THROW
;

125 
	$touµî
 (
__c
Ë
__THROW
;

129 #ifdef 
__USE_ISOC99


130 
	`__ex˘y≥
 (
isbœnk
);

133 #ifde‡
__USE_GNU


135 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

138 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


142 
	$ißscii
 (
__c
Ë
__THROW
;

146 
	$tﬂscii
 (
__c
Ë
__THROW
;

150 
	`__ex˘y≥
 (
_touµî
);

151 
	`__ex˘y≥
 (
_tﬁowî
);

155 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

156 (
__exãnsi⁄__
 \

157 ({ 
__ªs
; \

158 i‡( (
c
) > 1) \

160 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

162 
__c
 = (
c
); \

163 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

166 
__ªs
 = 
f
 
¨gs
; \

169 
__ªs
 = (
a
)[(Ë(
c
)]; \

170 
__ªs
; 
	}
}))

	)

172 #i‡!
deföed
 
__NO_CTYPE


173 #ifde‡
__is˘y≥_f


174 
	$__is˘y≥_f
 (
Ænum
)

175 
	$__is˘y≥_f
 (
Æpha
)

176 
	$__is˘y≥_f
 (
˙ål
)

177 
	$__is˘y≥_f
 (
digô
)

178 
	$__is˘y≥_f
 (
lowî
)

179 
	$__is˘y≥_f
 (
gøph
)

180 
	$__is˘y≥_f
 (
¥öt
)

181 
	$__is˘y≥_f
 (
pun˘
)

182 
	$__is˘y≥_f
 (
•a˚
)

183 
	$__is˘y≥_f
 (
uµî
)

184 
	$__is˘y≥_f
 (
xdigô
)

185 #ifde‡
__USE_ISOC99


186 
	$__is˘y≥_f
 (
bœnk
)

188 #ñi‡
deföed
 
__is˘y≥


189 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

190 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

191 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

192 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

193 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

194 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

195 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

196 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

197 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

198 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

199 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

200 #ifde‡
__USE_ISOC99


201 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

205 #ifde‡
__USE_EXTERN_INLINES


206 
__exã∫_ölöe
 

207 
	`__NTH
 (
	$tﬁowî
 (
__c
))

209  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

210 
	}
}

212 
__exã∫_ölöe
 

213 
__NTH
 (
	$touµî
 (
__c
))

215  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

216 
	}
}

219 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


220 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

221 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

224 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


225 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

226 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

228 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

229 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

235 #ifde‡
__USE_XOPEN2K8


237 
	~<bôs/ty≥s/loˇÀ_t.h
>

241 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

242 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

244 
	#__ex˘y≥_l
(
«me
) \

245 
	`«me
 (, 
loˇÀ_t
Ë
__THROW


	)

251 
__ex˘y≥_l
 (
iß um_l
);

252 
__ex˘y≥_l
 (
ißÕha_l
);

253 
__ex˘y≥_l
 (
is˙ål_l
);

254 
__ex˘y≥_l
 (
isdigô_l
);

255 
__ex˘y≥_l
 (
i¶owî_l
);

256 
__ex˘y≥_l
 (
isgøph_l
);

257 
__ex˘y≥_l
 (
i•röt_l
);

258 
__ex˘y≥_l
 (
i•un˘_l
);

259 
__ex˘y≥_l
 (
is•a˚_l
);

260 
__ex˘y≥_l
 (
isuµî_l
);

261 
__ex˘y≥_l
 (
isxdigô_l
);

263 
__ex˘y≥_l
 (
isbœnk_l
);

267 
	$__tﬁowî_l
 (
__c
, 
loˇÀ_t
 
__l
Ë
__THROW
;

268 
	$tﬁowî_l
 (
__c
, 
loˇÀ_t
 
__l
Ë
__THROW
;

271 
	$__touµî_l
 (
__c
, 
loˇÀ_t
 
__l
Ë
__THROW
;

272 
	$touµî_l
 (
__c
, 
loˇÀ_t
 
__l
Ë
__THROW
;

274 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


275 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

276 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

277 
	#__touµî_l
(
c
, 
loˇÀ
) \

278 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

279 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

280 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

284 #i‚de‡
__NO_CTYPE


285 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

286 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

287 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

288 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

289 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

290 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

291 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

292 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

293 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

294 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

295 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

297 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

299 #ifde‡
__USE_MISC


300 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

301 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

304 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

305 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

306 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

307 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

308 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

309 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

310 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

311 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

312 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

313 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

314 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

316 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

318 #ifde‡
__USE_MISC


319 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

320 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

327 
__END_DECLS


	@/usr/include/dirent.h

22 #i‚def 
_DIRENT_H


23 
	#_DIRENT_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 #ifde‡
__USE_XOPEN


32 #i‚de‡
__öo_t_deföed


33 #i‚de‡
__USE_FILE_OFFSET64


34 
__öo_t
 
	töo_t
;

36 
__öo64_t
 
	töo_t
;

38 
	#__öo_t_deföed


	)

40 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


41 
__öo64_t
 
	töo64_t
;

42 
	#__öo64_t_deföed


	)

61 
	~<bôs/dúít.h
>

63 #i‡
deföed
 
__USE_MISC
 && !deföed 
d_fûío


64 
	#d_öo
 
d_fûío


	)

81 #ifde‡
_DIRENT_HAVE_D_NAMLEN


82 
	#_D_EXACT_NAMLEN
(
d
Ë((d)->
d_«mÀn
)

	)

83 
	#_D_ALLOC_NAMLEN
(
d
Ë(
	`_D_EXACT_NAMLEN
 (dË+ 1)

	)

85 
	#_D_EXACT_NAMLEN
(
d
Ë(
	`°æí
 ((d)->
d_«me
))

	)

86 #ifde‡
_DIRENT_HAVE_D_RECLEN


87 
	#_D_ALLOC_NAMLEN
(
d
Ë(((*Ë(dË+ (d)->
d_ª˛í
Ë- &(d)->
d_«me
[0])

	)

89 
	#_D_ALLOC_NAMLEN
(
d
Ë( (d)->
d_«me
 > 1 ?  (d)->d_name \

90 : 
	`_D_EXACT_NAMLEN
 (
d
Ë+ 1)

	)

95 #ifde‡
__USE_MISC


99 
	mDT_UNKNOWN
 = 0,

100 
	#DT_UNKNOWN
 
DT_UNKNOWN


	)

101 
	mDT_FIFO
 = 1,

102 
	#DT_FIFO
 
DT_FIFO


	)

103 
	mDT_CHR
 = 2,

104 
	#DT_CHR
 
DT_CHR


	)

105 
	mDT_DIR
 = 4,

106 
	#DT_DIR
 
DT_DIR


	)

107 
	mDT_BLK
 = 6,

108 
	#DT_BLK
 
DT_BLK


	)

109 
	mDT_REG
 = 8,

110 
	#DT_REG
 
DT_REG


	)

111 
	mDT_LNK
 = 10,

112 
	#DT_LNK
 
DT_LNK


	)

113 
	mDT_SOCK
 = 12,

114 
	#DT_SOCK
 
DT_SOCK


	)

115 
	mDT_WHT
 = 14

116 
	#DT_WHT
 
DT_WHT


	)

120 
	#IFTODT
(
mode
Ë(((modeË& 0170000Ë>> 12)

	)

121 
	#DTTOIF
(
dúty≥
Ë((dúty≥Ë<< 12)

	)

127 
__dú°ªam
 
	tDIR
;

134 
DIR
 *
	$›ídú
 (c⁄° *
__«me
Ë
	`__n⁄nuŒ
 ((1));

136 #ifde‡
__USE_XOPEN2K8


141 
DIR
 *
	`fd›ídú
 (
__fd
);

149 
	$˛o£dú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

161 #i‚de‡
__USE_FILE_OFFSET64


162 
dúít
 *
	$ªaddú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

164 #ifde‡
__REDIRECT


165 
dúít
 *
	`__REDIRECT
 (
ªaddú
, (
DIR
 *
__dúp
), 
ªaddú64
)

166 
	`__n⁄nuŒ
 ((1));

168 
	#ªaddú
 
ªaddú64


	)

172 #ifde‡
__USE_LARGEFILE64


173 
dúít64
 *
	$ªaddú64
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

176 #ifde‡
__USE_POSIX


182 #i‚de‡
__USE_FILE_OFFSET64


183 
	$ªaddú_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

184 
dúít
 *
__ª°ri˘
 
__íåy
,

185 
dúít
 **
__ª°ri˘
 
__ªsu…
)

186 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__©åibuã_dïªˇãd__
;

188 #ifde‡
__REDIRECT


189 
	`__REDIRECT
 (
ªaddú_r
,

190 (
DIR
 *
__ª°ri˘
 
__dúp
,

191 
dúít
 *
__ª°ri˘
 
__íåy
,

192 
dúít
 **
__ª°ri˘
 
__ªsu…
),

193 
ªaddú64_r
)

194 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__©åibuã_dïªˇãd__
;

196 
	#ªaddú_r
 
ªaddú64_r


	)

200 #ifde‡
__USE_LARGEFILE64


201 
	$ªaddú64_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

202 
dúít64
 *
__ª°ri˘
 
__íåy
,

203 
dúít64
 **
__ª°ri˘
 
__ªsu…
)

204 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__©åibuã_dïªˇãd__
;

209 
	$ªwöddú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

211 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


212 
	~<bôs/ty≥s.h
>

215 
	$£ekdú
 (
DIR
 *
__dúp
, 
__pos
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

218 
	$ãŒdú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

221 #ifde‡
__USE_XOPEN2K8


224 
	$dúfd
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

226 #i‡
deföed
 
__OPTIMIZE__
 && deföed 
_DIR_dúfd


227 
	#dúfd
(
dúp
Ë
	`_DIR_dúfd
 (dúp)

	)

230 #ifde‡
__USE_MISC


231 #i‚de‡
MAXNAMLEN


233 
	~<bôs/posix1_lim.h
>

236 #ifde‡
NAME_MAX


237 
	#MAXNAMLEN
 
NAME_MAX


	)

239 
	#MAXNAMLEN
 255

	)

244 
	#__√ed_size_t


	)

245 
	~<°ddef.h
>

254 #i‚de‡
__USE_FILE_OFFSET64


255 
	$sˇndú
 (c⁄° *
__ª°ri˘
 
__dú
,

256 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

257 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

258 (*
__cmp
Ë(c⁄° 
dúít
 **,

259 c⁄° 
dúít
 **))

260 
	`__n⁄nuŒ
 ((1, 2));

262 #ifde‡
__REDIRECT


263 
	`__REDIRECT
 (
sˇndú
,

264 (c⁄° *
__ª°ri˘
 
__dú
,

265 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

266 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

267 (*
__cmp
Ë(c⁄° 
dúít
 **,

268 c⁄° 
dúít
 **)),

269 
sˇndú64
Ë
	`__n⁄nuŒ
 ((1, 2));

271 
	#sˇndú
 
sˇndú64


	)

275 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


278 
	$sˇndú64
 (c⁄° *
__ª°ri˘
 
__dú
,

279 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

280 (*
__£À˘‹
Ë(c⁄° 
dúít64
 *),

281 (*
__cmp
Ë(c⁄° 
dúít64
 **,

282 c⁄° 
dúít64
 **))

283 
	`__n⁄nuŒ
 ((1, 2));

286 #ifde‡
__USE_GNU


292 #i‚de‡
__USE_FILE_OFFSET64


293 
	$sˇndú©
 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

294 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

295 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

296 (*
__cmp
Ë(c⁄° 
dúít
 **,

297 c⁄° 
dúít
 **))

298 
	`__n⁄nuŒ
 ((2, 3));

300 #ifde‡
__REDIRECT


301 
	`__REDIRECT
 (
sˇndú©
,

302 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

303 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

304 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

305 (*
__cmp
Ë(c⁄° 
dúít
 **,

306 c⁄° 
dúít
 **)),

307 
sˇndú©64
Ë
	`__n⁄nuŒ
 ((2, 3));

309 
	#sˇndú©
 
sˇndú©64


	)

315 
	$sˇndú©64
 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

316 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

317 (*
__£À˘‹
Ë(c⁄° 
dúít64
 *),

318 (*
__cmp
Ë(c⁄° 
dúít64
 **,

319 c⁄° 
dúít64
 **))

320 
	`__n⁄nuŒ
 ((2, 3));

324 #i‚de‡
__USE_FILE_OFFSET64


325 
	$Æphas‹t
 (c⁄° 
dúít
 **
__e1
,

326 c⁄° 
dúít
 **
__e2
)

327 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

329 #ifde‡
__REDIRECT


330 
	`__REDIRECT_NTH
 (
Æphas‹t
,

331 (c⁄° 
dúít
 **
__e1
,

332 c⁄° 
dúít
 **
__e2
),

333 
Æphas‹t64
Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

335 
	#Æphas‹t
 
Æphas‹t64


	)

339 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


340 
	$Æphas‹t64
 (c⁄° 
dúít64
 **
__e1
,

341 c⁄° 
dúít64
 **
__e2
)

342 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

347 #ifde‡
__USE_MISC


352 #i‚de‡
__USE_FILE_OFFSET64


353 
__ssize_t
 
	$gëdúíåõs
 (
__fd
, *
__ª°ri˘
 
__buf
,

354 
size_t
 
__nbyãs
,

355 
__off_t
 *
__ª°ri˘
 
__ba£p
)

356 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

358 #ifde‡
__REDIRECT


359 
__ssize_t
 
	`__REDIRECT_NTH
 (
gëdúíåõs
,

360 (
__fd
, *
__ª°ri˘
 
__buf
,

361 
size_t
 
__nbyãs
,

362 
__off64_t
 *
__ª°ri˘
 
__ba£p
),

363 
gëdúíåõs64
Ë
	`__n⁄nuŒ
 ((2, 4));

365 
	#gëdúíåõs
 
gëdúíåõs64


	)

369 #ifde‡
__USE_LARGEFILE64


370 
__ssize_t
 
	$gëdúíåõs64
 (
__fd
, *
__ª°ri˘
 
__buf
,

371 
size_t
 
__nbyãs
,

372 
__off64_t
 *
__ª°ri˘
 
__ba£p
)

373 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

377 #ifde‡
__USE_GNU


379 #i‚de‡
__USE_FILE_OFFSET64


380 
	$vîsi⁄s‹t
 (c⁄° 
dúít
 **
__e1
,

381 c⁄° 
dúít
 **
__e2
)

382 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

384 #ifde‡
__REDIRECT


385 
	`__REDIRECT_NTH
 (
vîsi⁄s‹t
,

386 (c⁄° 
dúít
 **
__e1
,

387 c⁄° 
dúít
 **
__e2
),

388 
vîsi⁄s‹t64
)

389 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

391 
	#vîsi⁄s‹t
 
vîsi⁄s‹t64


	)

395 #ifde‡
__USE_LARGEFILE64


396 
	$vîsi⁄s‹t64
 (c⁄° 
dúít64
 **
__e1
,

397 c⁄° 
dúít64
 **
__e2
)

398 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

402 
__END_DECLS


404 
	~<bôs/dúít_ext.h
>

	@/usr/include/fcntl.h

22 #i‚def 
_FCNTL_H


23 
	#_FCNTL_H
 1

	)

25 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

35 
	~<bôs/f˙é.h
>

39 #ifde‡
__O_TMPFILE


40 
	#__OPEN_NEEDS_MODE
(
oÊag
) \

41 (((
oÊag
Ë& 
O_CREAT
Ë!0 || ((oÊagË& 
__O_TMPFILE
Ë=__O_TMPFILE)

	)

43 
	#__OPEN_NEEDS_MODE
(
oÊag
Ë(((oÊagË& 
O_CREAT
Ë!0)

	)

49 #i‚de‡
__mode_t_deföed


50 
__mode_t
 
	tmode_t
;

51 
	#__mode_t_deföed


	)

54 #i‚de‡
__off_t_deföed


55 #i‚de‡
__USE_FILE_OFFSET64


56 
__off_t
 
	toff_t
;

58 
__off64_t
 
	toff_t
;

60 
	#__off_t_deföed


	)

63 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


64 
__off64_t
 
	toff64_t
;

65 
	#__off64_t_deföed


	)

68 #i‚de‡
__pid_t_deföed


69 
__pid_t
 
	tpid_t
;

70 
	#__pid_t_deföed


	)

74 #ifde‡
__USE_XOPEN2K8


75 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

77 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


78 
	~<bôs/°©.h
>

80 
	#S_IFMT
 
__S_IFMT


	)

81 
	#S_IFDIR
 
__S_IFDIR


	)

82 
	#S_IFCHR
 
__S_IFCHR


	)

83 
	#S_IFBLK
 
__S_IFBLK


	)

84 
	#S_IFREG
 
__S_IFREG


	)

85 #ifde‡
__S_IFIFO


86 
	#S_IFIFO
 
__S_IFIFO


	)

88 #ifde‡
__S_IFLNK


89 
	#S_IFLNK
 
__S_IFLNK


	)

91 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


92 
	#S_IFSOCK
 
__S_IFSOCK


	)

97 
	#S_ISUID
 
__S_ISUID


	)

98 
	#S_ISGID
 
__S_ISGID


	)

100 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


102 
	#S_ISVTX
 
__S_ISVTX


	)

105 
	#S_IRUSR
 
__S_IREAD


	)

106 
	#S_IWUSR
 
__S_IWRITE


	)

107 
	#S_IXUSR
 
__S_IEXEC


	)

109 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

111 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

112 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

113 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

115 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

117 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

118 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

119 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

121 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

124 #ifdef 
__USE_MISC


125 #i‚de‡
R_OK


128 
	#R_OK
 4

	)

129 
	#W_OK
 2

	)

130 
	#X_OK
 1

	)

131 
	#F_OK
 0

	)

136 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


137 
	#SEEK_SET
 0

	)

138 
	#SEEK_CUR
 1

	)

139 
	#SEEK_END
 2

	)

147 #i‚de‡
__USE_TIME_BITS64


148 #i‚de‡
__USE_FILE_OFFSET64


149 
f˙é
 (
__fd
, 
__cmd
, ...);

151 #ifde‡
__REDIRECT


152 
__REDIRECT
 (
f˙é
, (
__fd
, 
__cmd
, ...), 
f˙é64
);

154 
	#f˙é
 
f˙é64


	)

157 #ifde‡
__USE_LARGEFILE64


158 
f˙é64
 (
__fd
, 
__cmd
, ...);

161 #ifde‡
__REDIRECT


162 
__REDIRECT_NTH
 (
f˙é
, (
__fd
, 
__ªque°
, ...),

163 
__f˙é_time64
);

164 
__REDIRECT_NTH
 (
f˙é64
, (
__fd
, 
__ªque°
, ...),

165 
__f˙é_time64
);

167 
	$__f˙é_time64
 (
__fd
, 
__ªque°
, ...Ë
__THROW
;

168 
	#f˙é64
 
__f˙é_time64


	)

169 
	#f˙é
 
__f˙é_time64


	)

180 #i‚de‡
__USE_FILE_OFFSET64


181 
	$›í
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

183 #ifde‡
__REDIRECT


184 
	`__REDIRECT
 (
›í
, (c⁄° *
__fûe
, 
__oÊag
, ...), 
›í64
)

185 
	`__n⁄nuŒ
 ((1));

187 
	#›í
 
›í64


	)

190 #ifde‡
__USE_LARGEFILE64


191 
	$›í64
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

194 #ifde‡
__USE_ATFILE


204 #i‚de‡
__USE_FILE_OFFSET64


205 
	$›í©
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

206 
	`__n⁄nuŒ
 ((2));

208 #ifde‡
__REDIRECT


209 
	`__REDIRECT
 (
›í©
, (
__fd
, c⁄° *
__fûe
, 
__oÊag
,

210 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

212 
	#›í©
 
›í©64


	)

215 #ifde‡
__USE_LARGEFILE64


216 
	$›í©64
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

217 
	`__n⁄nuŒ
 ((2));

226 #i‚de‡
__USE_FILE_OFFSET64


227 
	$¸ót
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

229 #ifde‡
__REDIRECT


230 
	`__REDIRECT
 (
¸ót
, (c⁄° *
__fûe
, 
mode_t
 
__mode
),

231 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

233 
	#¸ót
 
¸ót64


	)

236 #ifde‡
__USE_LARGEFILE64


237 
	$¸ót64
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

240 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

241 && !
deföed
 
__USE_POSIX
))

250 
	#F_ULOCK
 0

	)

251 
	#F_LOCK
 1

	)

252 
	#F_TLOCK
 2

	)

253 
	#F_TEST
 3

	)

255 #i‚de‡
__USE_FILE_OFFSET64


256 
	`lockf
 (
__fd
, 
__cmd
, 
off_t
 
__Àn
);

258 #ifde‡
__REDIRECT


259 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

261 
	#lockf
 
lockf64


	)

264 #ifde‡
__USE_LARGEFILE64


265 
	`lockf64
 (
__fd
, 
__cmd
, 
off64_t
 
__Àn
);

269 #ifde‡
__USE_XOPEN2K


272 #i‚de‡
__USE_FILE_OFFSET64


273 
	$posix_Ádvi£
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
,

274 
__advi£
Ë
__THROW
;

276 #ifde‡
__REDIRECT_NTH


277 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

278 
__off64_t
 
__Àn
, 
__advi£
),

279 
posix_Ádvi£64
);

281 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

284 #ifde‡
__USE_LARGEFILE64


285 
	$posix_Ádvi£64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
,

286 
__advi£
Ë
__THROW
;

294 #i‚de‡
__USE_FILE_OFFSET64


295 
	`posix_ÁŒoˇã
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
);

297 #ifde‡
__REDIRECT


298 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

299 
__off64_t
 
__Àn
),

300 
posix_ÁŒoˇã64
);

302 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

305 #ifde‡
__USE_LARGEFILE64


306 
	`posix_ÁŒoˇã64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
);

312 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
 \

313 && 
deföed
 
__va_¨g_∑ck_Àn


314 
	~<bôs/f˙é2.h
>

317 
__END_DECLS


	@/usr/include/gmock/gmock.h

37 #i‚de‡
GOOGLEMOCK_INCLUDE_GMOCK_GMOCK_H_


38 
	#GOOGLEMOCK_INCLUDE_GMOCK_GMOCK_H_


	)

59 
	~"gmock/gmock-a˘i⁄s.h
"

60 
	~"gmock/gmock-ˇrdöÆôõs.h
"

61 
	~"gmock/gmock-fun˘i⁄-mockî.h
"

62 
	~"gmock/gmock-m©chîs.h
"

63 
	~"gmock/gmock-m‹e-a˘i⁄s.h
"

64 
	~"gmock/gmock-m‹e-m©chîs.h
"

65 
	~"gmock/gmock-ni˚-°ri˘.h
"

66 
	~"gmock/öã∫Æ/gmock-öã∫Æ-utûs.h
"

68 
«me•a˚
 
	gã°ög
 {

71 
GMOCK_DECLARE_boﬁ_
(
ˇtch_Àaked_mocks
);

72 
GMOCK_DECLARE_°rög_
(
vîbo£
);

73 
GMOCK_DECLARE_öt32_
(
deÁu…_mock_behavi‹
);

86 
GTEST_API_
 
InôGoogÀMock
(* 
¨gc
, ** 
¨gv
);

90 
GTEST_API_
 
InôGoogÀMock
(* 
¨gc
, 
wch¨_t
** 
¨gv
);

94 
GTEST_API_
 
InôGoogÀMock
();

	@/usr/include/gtest/gtest.h

52 #i‚de‡
GOOGLETEST_INCLUDE_GTEST_GTEST_H_


53 
	#GOOGLETEST_INCLUDE_GTEST_GTEST_H_


	)

55 
	~<c°ddef
>

56 
	~<limôs
>

57 
	~<mem‹y
>

58 
	~<o°ªam
>

59 
	~<ty≥_åaôs
>

60 
	~<ve˘‹
>

62 
	~"gã°/öã∫Æ/gã°-öã∫Æ.h
"

63 
	~"gã°/öã∫Æ/gã°-°rög.h
"

64 
	~"gã°/gã°-dóth-ã°.h
"

65 
	~"gã°/gã°-m©chîs.h
"

66 
	~"gã°/gã°-mesßge.h
"

67 
	~"gã°/gã°-∑øm-ã°.h
"

68 
	~"gã°/gã°-¥öãrs.h
"

69 
	~"gã°/gã°_¥od.h
"

70 
	~"gã°/gã°-ã°-∑π.h
"

71 
	~"gã°/gã°-ty≥d-ã°.h
"

73 
GTEST_DISABLE_MSC_WARNINGS_PUSH_
(4251 \

76 
«me•a˚
 
	gã°ög
 {

80 #ifde‡
_MSC_VER


81 #¥agm®
w¨nög
(
push
)

82 #¥agm®
w¨nög
(
dißbÀ
:4805)

83 #¥agm®
w¨nög
(
dißbÀ
:4100)

90 
GTEST_DECLARE_boﬁ_
(
Æso_run_dißbÀd_ã°s
);

93 
GTEST_DECLARE_boﬁ_
(
bªak_⁄_Áûuª
);

97 
GTEST_DECLARE_boﬁ_
(
ˇtch_ex˚±i⁄s
);

102 
GTEST_DECLARE_°rög_
(
cﬁ‹
);

106 
GTEST_DECLARE_boﬁ_
(
Áû_Á°
);

110 
GTEST_DECLARE_°rög_
(
fûãr
);

114 
GTEST_DECLARE_boﬁ_
(
ö°Æl_Áûuª_sig«l_h™dÀr
);

118 
GTEST_DECLARE_boﬁ_
(
li°_ã°s
);

122 
GTEST_DECLARE_°rög_
(
ouçut
);

125 
GTEST_DECLARE_boﬁ_
(
brõf
);

129 
GTEST_DECLARE_boﬁ_
(
¥öt_time
);

132 
GTEST_DECLARE_boﬁ_
(
¥öt_utf8
);

135 
GTEST_DECLARE_öt32_
(
øndom_£ed
);

139 
GTEST_DECLARE_öt32_
(
ª≥©
);

143 
GTEST_DECLARE_boﬁ_
(
show_öã∫Æ_°ack_‰ames
);

146 
GTEST_DECLARE_boﬁ_
(
shufÊe
);

150 
GTEST_DECLARE_öt32_
(
°ack_åa˚_dïth
);

155 
GTEST_DECLARE_boﬁ_
(
throw_⁄_Áûuª
);

160 
GTEST_DECLARE_°rög_
(
°ªam_ªsu…_to
);

162 #i‡
GTEST_USE_OWN_FLAGFILE_FLAG_


163 
GTEST_DECLARE_°rög_
(
Êagfûe
);

167 c⁄° 
	gkMaxSèckTø˚Dïth
 = 100;

169 
«me•a˚
 
	göã∫Æ
 {

171 
˛ass
 
	gAs£πHñ≥r
;

172 
˛ass
 
	gDeÁu…GlobÆTe°P¨tResu…Rï‹ãr
;

173 
˛ass
 
	gExecDóthTe°
;

174 
˛ass
 
	gNoExecDóthTe°
;

175 
˛ass
 
	gFöÆSuc˚ssCheckî
;

176 
˛ass
 
	gGTe°FœgSavî
;

177 
˛ass
 
	gSåómögLi°íîTe°
;

178 
˛ass
 
	gTe°Resu…Ac˚ss‹
;

179 
˛ass
 
	gTe°EvítLi°íîsAc˚ss‹
;

180 
˛ass
 
	gTe°EvítRïóãr
;

181 
˛ass
 
	gUnôTe°Rec‹dPr›îtyTe°Hñ≥r
;

182 
˛ass
 
	gWödowsDóthTe°
;

183 
˛ass
 
	gFuchsüDóthTe°
;

184 
˛ass
 
UnôTe°Im∂
* 
GëUnôTe°Im∂
();

185 
Rï‹tFaûuªInUnknownLoˇti⁄
(
Te°P¨tResu…
::
Ty≥
 
ªsu…_ty≥
,

186 c⁄° 
°d
::
°rög
& 
mesßge
);

187 
	g°d
::
£t
<
°d
::
°rög
>* 
GëIgn‹edP¨amëîizedTe°Suôes
();

194 
˛ass
 
	gTe°
;

195 
˛ass
 
	gTe°Suôe
;

198 #i‚de‡
GTEST_REMOVE_LEGACY_TEST_CASEAPI_


199 
usög
 
	gTe°Ca£
 = 
Te°Suôe
;

201 
˛ass
 
	gTe°Info
;

202 
˛ass
 
	gUnôTe°
;

283 ˛as†
	cGTEST_API_
 
	gAs£πi⁄Resu…
 {

284 
	gpublic
:

287 
As£πi⁄Resu…
(c⁄° As£πi⁄Resu…& 
Ÿhî
);

293 #i‡
deföed
(
_MSC_VER
) && (_MSC_VER < 1910 || _MSC_VER >= 1920)

294 
GTEST_DISABLE_MSC_WARNINGS_PUSH_
(4800 )

304 
	gãm∂©e
 <
ty≥«me
 
	gT
>

305 
ex∂icô
 
As£πi⁄Resu…
(

306 c⁄° 
T
& 
suc˚ss
,

307 
ty≥«me
 
°d
::
íabÀ_if
<

308 !
°d
::
is_c⁄vîtibÀ
<
T
, 
As£πi⁄Resu…
>::
vÆue
>::
ty≥
*

310 
nuŒ±r
)

311 : 
suc˚ss_
(
suc˚ss
) {}

313 #i‡
deföed
(
_MSC_VER
) && (_MSC_VER < 1910 || _MSC_VER >= 1920)

314 
GTEST_DISABLE_MSC_WARNINGS_POP_
()

318 
As£πi⁄Resu…
& 
›î©‹
=(As£πi⁄Resu… 
Ÿhî
) {

319 
sw≠
(
Ÿhî
);

320  *
	gthis
;

324 
›î©‹
 
boﬁ
(Ëc⁄° {  
	gsuc˚ss_
; }

327 
As£πi⁄Resu…
 
	g›î©‹
!() const;

333 c⁄° * 
mesßge
() const {

334  
	gmesßge_
.
gë
(Ë!
nuŒ±r
 ? 
mesßge_
->
c_°r
() : "";

337 c⁄° * 
Áûuª_mesßge
(Ëc⁄° {  
mesßge
(); }

340 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
	gAs£πi⁄Resu…
& 
	g›î©‹
<<(c⁄° T& 
	gvÆue
) {

341 
AµídMesßge
(
Mesßge
(Ë<< 
vÆue
);

342  *
	gthis
;

347 
	gAs£πi⁄Resu…
& 
	g›î©‹
<<(

348 ::
°d
::
o°ªam
& (*
basic_m™ùuœt‹
)(::°d::o°ªam& 
°ªam
)) {

349 
AµídMesßge
(
Mesßge
(Ë<< 
basic_m™ùuœt‹
);

350  *
	gthis
;

353 
	g¥iv©e
:

355 
AµídMesßge
(c⁄° 
Mesßge
& 
a_mesßge
) {

356 i‡(
mesßge_
.
gë
(Ë=
nuŒ±r
Ëmesßge_.
ª£t
(
√w
 ::
°d
::
°rög
);

357 
	gmesßge_
->
≠≥nd
(
a_mesßge
.
GëSåög
().
c_°r
());

361 
sw≠
(
As£πi⁄Resu…
& 
Ÿhî
);

364 
boﬁ
 
	gsuc˚ss_
;

369 
	g°d
::
unique_±r
< ::
°d
::
°rög
> 
mesßge_
;

373 
GTEST_API_
 
As£πi⁄Resu…
 
As£πi⁄Suc˚ss
();

376 
GTEST_API_
 
As£πi⁄Resu…
 
As£πi⁄Faûuª
();

380 
GTEST_API_
 
As£πi⁄Resu…
 
As£πi⁄Faûuª
(c⁄° 
Mesßge
& 
msg
);

387 
	~"gã°/gã°_¥ed_im∂.h
"

389 
«me•a˚
 
	gã°ög
 {

414 ˛as†
	cGTEST_API_
 
	gTe°
 {

415 
	gpublic
:

416 
‰õnd
 
˛ass
 
Te°Info
;

419 
	gvútuÆ
 ~
Te°
();

427 
SëUpTe°Suôe
() {}

435 
TórDownTe°Suôe
() {}

439 #i‚de‡
GTEST_REMOVE_LEGACY_TEST_CASEAPI_


440 
TórDownTe°Ca£
() {}

441 
SëUpTe°Ca£
() {}

445 
boﬁ
 
HasF©ÆFaûuª
();

448 
boﬁ
 
HasN⁄ÁèlFaûuª
();

451 
boﬁ
 
IsSkù≥d
();

455 
boﬁ
 
HasFaûuª
(Ë{  
HasF©ÆFaûuª
(Ë|| 
HasN⁄ÁèlFaûuª
(); }

470 
Rec‹dPr›îty
(c⁄° 
°d
::
°rög
& 
key
, c⁄° std::°rög& 
vÆue
);

471 
Rec‹dPr›îty
(c⁄° 
°d
::
°rög
& 
key
, 
vÆue
);

473 
	g¥Ÿe˘ed
:

475 
Te°
();

478 
vútuÆ
 
SëUp
();

481 
vútuÆ
 
TórDown
();

483 
	g¥iv©e
:

486 
boﬁ
 
HasSameFixtuªCœss
();

494 
vútuÆ
 
Te°Body
() = 0;

497 
Run
();

501 
DñëeSñf_
(Ë{ 
dñëe
 
	gthis
; }

503 c⁄° 
	g°d
::
unique_±r
<
GTEST_FLAG_SAVER_
> 
gã°_Êag_ßvî_
;

521 
	sSëup_should_be_•ñÀd_SëUp
 {};

522 
vútuÆ
 
Sëup_should_be_•ñÀd_SëUp
* 
Sëup
(Ë{  
	gnuŒ±r
; }

525 
GTEST_DISALLOW_COPY_AND_ASSIGN_
(
Te°
);

528 
	göã∫Æ
::
	tTimeInMûlis
 TimeInMillis;

534 ˛as†
	cTe°Pr›îty
 {

535 
	gpublic
:

539 
Te°Pr›îty
(c⁄° 
°d
::
°rög
& 
a_key
, c⁄° std::°rög& 
a_vÆue
) :

540 
key_
(
a_key
), 
vÆue_
(
a_vÆue
) {

544 c⁄° * 
key
() const {

545  
	gkey_
.
c_°r
();

549 c⁄° * 
vÆue
() const {

550  
	gvÆue_
.
c_°r
();

554 
SëVÆue
(c⁄° 
°d
::
°rög
& 
√w_vÆue
) {

555 
vÆue_
 = 
√w_vÆue
;

558 
	g¥iv©e
:

560 
°d
::
°rög
 
key_
;

562 
	g°d
::
°rög
 
vÆue_
;

571 ˛as†
	cGTEST_API_
 
	gTe°Resu…
 {

572 
	gpublic
:

574 
Te°Resu…
();

577 ~
Te°Resu…
();

581 
tŸÆ_∑π_cou¡
() const;

584 
ã°_¥›îty_cou¡
() const;

587 
boﬁ
 
Pas£d
(Ëc⁄° {  !
Skù≥d
(Ë&& !
Faûed
(); }

590 
boﬁ
 
Skù≥d
() const;

593 
boﬁ
 
Faûed
() const;

596 
boﬁ
 
HasF©ÆFaûuª
() const;

599 
boﬁ
 
HasN⁄ÁèlFaûuª
() const;

602 
TimeInMûlis
 
ñ≠£d_time
(Ëc⁄° {  
	gñ≠£d_time_
; }

606 
TimeInMûlis
 
°¨t_time°amp
(Ëc⁄° {  
	g°¨t_time°amp_
; }

610 c⁄° 
	gTe°P¨tResu…
& 
GëTe°P¨tResu…
(
i
) const;

615 c⁄° 
	gTe°Pr›îty
& 
GëTe°Pr›îty
(
i
) const;

617 
	g¥iv©e
:

618 
‰õnd
 
˛ass
 
Te°Info
;

619 
‰õnd
 
˛ass
 
	gTe°Suôe
;

620 
‰õnd
 
˛ass
 
	gUnôTe°
;

621 
‰õnd
 
˛ass
 
	göã∫Æ
::
DeÁu…GlobÆTe°P¨tResu…Rï‹ãr
;

622 
‰õnd
 
˛ass
 
	göã∫Æ
::
ExecDóthTe°
;

623 
‰õnd
 
˛ass
 
	göã∫Æ
::
Te°Resu…Ac˚ss‹
;

624 
‰õnd
 
˛ass
 
	göã∫Æ
::
UnôTe°Im∂
;

625 
‰õnd
 
˛ass
 
	göã∫Æ
::
WödowsDóthTe°
;

626 
‰õnd
 
˛ass
 
	göã∫Æ
::
FuchsüDóthTe°
;

629 c⁄° 
	g°d
::
ve˘‹
<
Te°P¨tResu…
>& 
ã°_∑π_ªsu…s
() const {

630  
ã°_∑π_ªsu…s_
;

634 c⁄° 
	g°d
::
ve˘‹
<
Te°Pr›îty
>& 
ã°_¥›îtõs
() const {

635  
ã°_¥›îtõs_
;

639 
£t_°¨t_time°amp
(
TimeInMûlis
 
°¨t
Ë{ 
	g°¨t_time°amp_
 = start; }

642 
£t_ñ≠£d_time
(
TimeInMûlis
 
ñ≠£d
Ë{ 
	gñ≠£d_time_
 =Élapsed; }

650 
Rec‹dPr›îty
(c⁄° 
°d
::
°rög
& 
xml_ñemít
,

651 c⁄° 
Te°Pr›îty
& 
ã°_¥›îty
);

656 
boﬁ
 
VÆid©eTe°Pr›îty
(c⁄° 
°d
::
°rög
& 
xml_ñemít
,

657 c⁄° 
Te°Pr›îty
& 
ã°_¥›îty
);

660 
AddTe°P¨tResu…
(c⁄° 
Te°P¨tResu…
& 
ã°_∑π_ªsu…
);

663 
dóth_ã°_cou¡
(Ëc⁄° {  
	gdóth_ã°_cou¡_
; }

666 
ö¸emít_dóth_ã°_cou¡
(Ë{  ++
	gdóth_ã°_cou¡_
; }

669 
CÀ¨Te°P¨tResu…s
();

672 
CÀ¨
();

676 
	göã∫Æ
::
Muãx
 
ã°_¥›îtõs_muãx_
;

679 
	g°d
::
ve˘‹
<
Te°P¨tResu…
> 
ã°_∑π_ªsu…s_
;

681 
	g°d
::
ve˘‹
<
Te°Pr›îty
> 
ã°_¥›îtõs_
;

683 
	gdóth_ã°_cou¡_
;

685 
TimeInMûlis
 
	g°¨t_time°amp_
;

687 
TimeInMûlis
 
	gñ≠£d_time_
;

690 
GTEST_DISALLOW_COPY_AND_ASSIGN_
(
Te°Resu…
);

704 ˛as†
	cGTEST_API_
 
	gTe°Info
 {

705 
	gpublic
:

708 ~
Te°Info
();

711 c⁄° * 
ã°_suôe_«me
(Ëc⁄° {  
	gã°_suôe_«me_
.
c_°r
(); }

714 #i‚de‡
GTEST_REMOVE_LEGACY_TEST_CASEAPI_


715 c⁄° * 
ã°_ˇ£_«me
(Ëc⁄° {  
ã°_suôe_«me
(); }

719 c⁄° * 
«me
(Ëc⁄° {  
	g«me_
.
c_°r
(); }

723 c⁄° * 
ty≥_∑øm
() const {

724 i‡(
	gty≥_∑øm_
.
gë
(Ë!
nuŒ±r
Ë 
ty≥_∑øm_
->
c_°r
();

725  
	gnuŒ±r
;

730 c⁄° * 
vÆue_∑øm
() const {

731 i‡(
	gvÆue_∑øm_
.
gë
(Ë!
nuŒ±r
Ë 
vÆue_∑øm_
->
c_°r
();

732  
	gnuŒ±r
;

736 c⁄° * 
fûe
(Ëc⁄° {  
	gloˇti⁄_
.
	gfûe
.
c_°r
(); }

739 
löe
(Ëc⁄° {  
	gloˇti⁄_
.
	glöe
; }

742 
boﬁ
 
is_ö_™Ÿhî_sh¨d
(Ëc⁄° {  
	gis_ö_™Ÿhî_sh¨d_
; }

760 
boﬁ
 
should_run
(Ëc⁄° {  
	gshould_run_
; }

763 
boﬁ
 
is_ªp‹èbÀ
() const {

766  
	gm©ches_fûãr_
 && !
	gis_ö_™Ÿhî_sh¨d_
;

770 c⁄° 
Te°Resu…
* 
ªsu…
(Ëc⁄° {  &
	gªsu…_
; }

772 
	g¥iv©e
:

773 #i‡
GTEST_HAS_DEATH_TEST


774 
‰õnd
 
˛ass
 
öã∫Æ
::
DeÁu…DóthTe°Fa˘‹y
;

776 
‰õnd
 
˛ass
 
	gTe°
;

777 
‰õnd
 
˛ass
 
	gTe°Suôe
;

778 
‰õnd
 
˛ass
 
	göã∫Æ
::
UnôTe°Im∂
;

779 
‰õnd
 
˛ass
 
	göã∫Æ
::
SåómögLi°íîTe°
;

780 
‰õnd
 
Te°Info
* 
	göã∫Æ
::
MakeAndRegi°îTe°Info
(

781 c⁄° * 
ã°_suôe_«me
, c⁄° * 
«me
, c⁄° * 
ty≥_∑øm
,

782 c⁄° * 
vÆue_∑øm
, 
öã∫Æ
::
CodeLoˇti⁄
 
code_loˇti⁄
,

783 
öã∫Æ
::
Ty≥Id
 
fixtuª_˛ass_id
, i¡î«l::
SëUpTe°SuôeFunc
 
£t_up_tc
,

784 
öã∫Æ
::
TórDownTe°SuôeFunc
 
ã¨_down_tc
,

785 
öã∫Æ
::
Te°Fa˘‹yBa£
* 
Á˘‹y
);

789 
Te°Info
(c⁄° 
°d
::
°rög
& 
ã°_suôe_«me
, c⁄° std::°rög& 
«me
,

790 c⁄° * 
a_ty≥_∑øm
,

791 c⁄° * 
a_vÆue_∑øm
,

792 
öã∫Æ
::
CodeLoˇti⁄
 
a_code_loˇti⁄
,

793 
öã∫Æ
::
Ty≥Id
 
fixtuª_˛ass_id
,

794 
öã∫Æ
::
Te°Fa˘‹yBa£
* 
Á˘‹y
);

798 
ö¸emít_dóth_ã°_cou¡
() {

799  
	gªsu…_
.
ö¸emít_dóth_ã°_cou¡
();

804 
Run
();

807 
Skù
();

809 
CÀ¨Te°Resu…
(
Te°Info
* 
ã°_öfo
) {

810 
	gã°_öfo
->
	gªsu…_
.
CÀ¨
();

814 c⁄° 
	g°d
::
°rög
 
ã°_suôe_«me_
;

815 c⁄° 
	g°d
::
°rög
 
«me_
;

818 c⁄° 
	g°d
::
unique_±r
<c⁄° ::
°d
::
°rög
> 
ty≥_∑øm_
;

821 c⁄° 
	g°d
::
unique_±r
<c⁄° ::
°d
::
°rög
> 
vÆue_∑øm_
;

822 
	göã∫Æ
::
CodeLoˇti⁄
 
loˇti⁄_
;

823 c⁄° 
	göã∫Æ
::
Ty≥Id
 
fixtuª_˛ass_id_
;

824 
boﬁ
 
	gshould_run_
;

825 
boﬁ
 
	gis_dißbÀd_
;

826 
boﬁ
 
	gm©ches_fûãr_
;

828 
boﬁ
 
	gis_ö_™Ÿhî_sh¨d_
;

829 
	göã∫Æ
::
Te°Fa˘‹yBa£
* c⁄° 
Á˘‹y_
;

834 
Te°Resu…
 
	gªsu…_
;

836 
GTEST_DISALLOW_COPY_AND_ASSIGN_
(
Te°Info
);

842 ˛as†
	cGTEST_API_
 
	gTe°Suôe
 {

843 
	gpublic
:

856 
Te°Suôe
(c⁄° * 
«me
, c⁄° * 
a_ty≥_∑øm
,

857 
öã∫Æ
::
SëUpTe°SuôeFunc
 
£t_up_tc
,

858 
öã∫Æ
::
TórDownTe°SuôeFunc
 
ã¨_down_tc
);

861 
	gvútuÆ
 ~
Te°Suôe
();

864 c⁄° * 
«me
(Ëc⁄° {  
	g«me_
.
c_°r
(); }

868 c⁄° * 
ty≥_∑øm
() const {

869 i‡(
	gty≥_∑øm_
.
gë
(Ë!
nuŒ±r
Ë 
ty≥_∑øm_
->
c_°r
();

870  
	gnuŒ±r
;

874 
boﬁ
 
should_run
(Ëc⁄° {  
	gshould_run_
; }

877 
suc˚ssful_ã°_cou¡
() const;

880 
skù≥d_ã°_cou¡
() const;

883 
Áûed_ã°_cou¡
() const;

886 
ªp‹èbÀ_dißbÀd_ã°_cou¡
() const;

889 
dißbÀd_ã°_cou¡
() const;

892 
ªp‹èbÀ_ã°_cou¡
() const;

895 
ã°_to_run_cou¡
() const;

898 
tŸÆ_ã°_cou¡
() const;

901 
boﬁ
 
Pas£d
(Ëc⁄° {  !
Faûed
(); }

904 
boﬁ
 
Faûed
() const {

905  
Áûed_ã°_cou¡
(Ë> 0 || 
ad_hoc_ã°_ªsu…
().
Faûed
();

909 
TimeInMûlis
 
ñ≠£d_time
(Ëc⁄° {  
	gñ≠£d_time_
; }

913 
TimeInMûlis
 
°¨t_time°amp
(Ëc⁄° {  
	g°¨t_time°amp_
; }

917 c⁄° 
Te°Info
* 
GëTe°Info
(
i
) const;

921 c⁄° 
	gTe°Resu…
& 
ad_hoc_ã°_ªsu…
(Ëc⁄° {  
	gad_hoc_ã°_ªsu…_
; }

923 
	g¥iv©e
:

924 
‰õnd
 
˛ass
 
Te°
;

925 
‰õnd
 
˛ass
 
	göã∫Æ
::
UnôTe°Im∂
;

928 
	g°d
::
ve˘‹
<
Te°Info
*>& 
ã°_öfo_li°
(Ë{  
ã°_öfo_li°_
; }

931 c⁄° 
	g°d
::
ve˘‹
<
Te°Info
*>& 
ã°_öfo_li°
() const {

932  
ã°_öfo_li°_
;

937 
Te°Info
* 
GëMuèbÀTe°Info
(
i
);

940 
£t_should_run
(
boﬁ
 
should
Ë{ 
	gshould_run_
 = should; }

944 
AddTe°Info
(
Te°Info
 * 
ã°_öfo
);

947 
CÀ¨Resu…
();

950 
CÀ¨Te°SuôeResu…
(
Te°Suôe
* 
ã°_suôe
) {

951 
	gã°_suôe
->
CÀ¨Resu…
();

955 
Run
();

958 
Skù
();

962 
RunSëUpTe°Suôe
() {

963 i‡(
	g£t_up_tc_
 !
nuŒ±r
) {

964 (*
£t_up_tc_
)();

970 
RunTórDownTe°Suôe
() {

971 i‡(
	gã¨_down_tc_
 !
nuŒ±r
) {

972 (*
ã¨_down_tc_
)();

977 
boﬁ
 
Te°Pas£d
(c⁄° 
Te°Info
* 
ã°_öfo
) {

978  
	gã°_öfo
->
should_run
(Ë&&Åe°_öfo->
ªsu…
()->
Pas£d
();

982 
boﬁ
 
Te°Skù≥d
(c⁄° 
Te°Info
* 
ã°_öfo
) {

983  
	gã°_öfo
->
should_run
(Ë&&Åe°_öfo->
ªsu…
()->
Skù≥d
();

987 
boﬁ
 
Te°Faûed
(c⁄° 
Te°Info
* 
ã°_öfo
) {

988  
	gã°_öfo
->
should_run
(Ë&&Åe°_öfo->
ªsu…
()->
Faûed
();

993 
boﬁ
 
Te°Rï‹èbÀDißbÀd
(c⁄° 
Te°Info
* 
ã°_öfo
) {

994  
	gã°_öfo
->
is_ªp‹èbÀ
(Ë&&Åe°_öfo->
	gis_dißbÀd_
;

998 
boﬁ
 
Te°DißbÀd
(c⁄° 
Te°Info
* 
ã°_öfo
) {

999  
	gã°_öfo
->
	gis_dißbÀd_
;

1003 
boﬁ
 
Te°Rï‹èbÀ
(c⁄° 
Te°Info
* 
ã°_öfo
) {

1004  
	gã°_öfo
->
is_ªp‹èbÀ
();

1008 
boﬁ
 
ShouldRunTe°
(c⁄° 
Te°Info
* 
ã°_öfo
) {

1009  
	gã°_öfo
->
should_run
();

1013 
ShufÊeTe°s
(
öã∫Æ
::
R™dom
* 
øndom
);

1016 
UnshufÊeTe°s
();

1019 
	g°d
::
°rög
 
«me_
;

1022 c⁄° 
	g°d
::
unique_±r
<c⁄° ::
°d
::
°rög
> 
ty≥_∑øm_
;

1025 
	g°d
::
ve˘‹
<
Te°Info
*> 
ã°_öfo_li°_
;

1029 
	g°d
::
ve˘‹
<> 
ã°_ödi˚s_
;

1031 
	göã∫Æ
::
SëUpTe°SuôeFunc
 
£t_up_tc_
;

1033 
	göã∫Æ
::
TórDownTe°SuôeFunc
 
ã¨_down_tc_
;

1035 
boﬁ
 
	gshould_run_
;

1037 
TimeInMûlis
 
	g°¨t_time°amp_
;

1039 
TimeInMûlis
 
	gñ≠£d_time_
;

1042 
Te°Resu…
 
	gad_hoc_ã°_ªsu…_
;

1045 
GTEST_DISALLOW_COPY_AND_ASSIGN_
(
Te°Suôe
);

1062 ˛as†
	cEnvú⁄mít
 {

1063 
	gpublic
:

1065 
vútuÆ
 ~
Envú⁄mít
() {}

1068 
vútuÆ
 
SëUp
() {}

1071 
vútuÆ
 
TórDown
() {}

1072 
¥iv©e
:

1075 
	sSëup_should_be_•ñÀd_SëUp
 {};

1076 
vútuÆ
 
Sëup_should_be_•ñÀd_SëUp
* 
Sëup
(Ë{  
	gnuŒ±r
; }

1079 #i‡
GTEST_HAS_EXCEPTIONS


1082 ˛as†
	cGTEST_API_
 
	gAs£πi⁄Ex˚±i⁄


1083 : 
public
 
öã∫Æ
::
GoogÀTe°FaûuªEx˚±i⁄
 {

1084 
public
:

1085 
ex∂icô
 
As£πi⁄Ex˚±i⁄
(c⁄° 
Te°P¨tResu…
& 
ªsu…
)

1086 : 
GoogÀTe°FaûuªEx˚±i⁄
(
ªsu…
) {}

1093 ˛as†
	cTe°EvítLi°íî
 {

1094 
	gpublic
:

1095 
vútuÆ
 ~
Te°EvítLi°íî
() {}

1098 
vútuÆ
 
OnTe°ProgømSèπ
(c⁄° 
UnôTe°
& 
unô_ã°
) = 0;

1103 
vútuÆ
 
OnTe°Iãøti⁄Sèπ
(c⁄° 
UnôTe°
& 
unô_ã°
,

1104 
ôî©i⁄
) = 0;

1107 
vútuÆ
 
OnEnvú⁄mítsSëUpSèπ
(c⁄° 
UnôTe°
& 
unô_ã°
) = 0;

1110 
vútuÆ
 
OnEnvú⁄mítsSëUpEnd
(c⁄° 
UnôTe°
& 
unô_ã°
) = 0;

1113 
vútuÆ
 
OnTe°SuôeSèπ
(c⁄° 
Te°Suôe
& ) {}

1116 #i‚de‡
GTEST_REMOVE_LEGACY_TEST_CASEAPI_


1117 
vútuÆ
 
OnTe°Ca£Sèπ
(c⁄° 
Te°Ca£
& ) {}

1121 
vútuÆ
 
OnTe°Sèπ
(c⁄° 
Te°Info
& 
ã°_öfo
) = 0;

1126 
vútuÆ
 
OnTe°P¨tResu…
(c⁄° 
Te°P¨tResu…
& 
ã°_∑π_ªsu…
) = 0;

1129 
vútuÆ
 
OnTe°End
(c⁄° 
Te°Info
& 
ã°_öfo
) = 0;

1132 
vútuÆ
 
OnTe°SuôeEnd
(c⁄° 
Te°Suôe
& ) {}

1135 #i‚de‡
GTEST_REMOVE_LEGACY_TEST_CASEAPI_


1136 
vútuÆ
 
OnTe°Ca£End
(c⁄° 
Te°Ca£
& ) {}

1140 
vútuÆ
 
OnEnvú⁄mítsTórDownSèπ
(c⁄° 
UnôTe°
& 
unô_ã°
) = 0;

1143 
vútuÆ
 
OnEnvú⁄mítsTórDownEnd
(c⁄° 
UnôTe°
& 
unô_ã°
) = 0;

1146 
vútuÆ
 
OnTe°Iãøti⁄End
(c⁄° 
UnôTe°
& 
unô_ã°
,

1147 
ôî©i⁄
) = 0;

1150 
vútuÆ
 
OnTe°ProgømEnd
(c⁄° 
UnôTe°
& 
unô_ã°
) = 0;

1158 ˛as†
	cEm±yTe°EvítLi°íî
 : 
public
 
Te°EvítLi°íî
 {

1159 
public
:

1160 
OnTe°ProgømSèπ
(c⁄° 
UnôTe°
& ) 
ovîride
 {}

1161 
OnTe°Iãøti⁄Sèπ
(c⁄° 
UnôTe°
& ,

1162 Ë
	govîride
 {}

1163 
OnEnvú⁄mítsSëUpSèπ
(c⁄° 
UnôTe°
& ) 
	govîride
 {}

1164 
OnEnvú⁄mítsSëUpEnd
(c⁄° 
UnôTe°
& ) 
	govîride
 {}

1165 
OnTe°SuôeSèπ
(c⁄° 
Te°Suôe
& ) 
	govîride
 {}

1167 #i‚de‡
GTEST_REMOVE_LEGACY_TEST_CASEAPI_


1168 
OnTe°Ca£Sèπ
(c⁄° 
Te°Ca£
& ) 
	govîride
 {}

1171 
OnTe°Sèπ
(c⁄° 
Te°Info
& ) 
	govîride
 {}

1172 
OnTe°P¨tResu…
(c⁄° 
Te°P¨tResu…
& ) 
	govîride
 {}

1173 
OnTe°End
(c⁄° 
Te°Info
& ) 
	govîride
 {}

1174 
OnTe°SuôeEnd
(c⁄° 
Te°Suôe
& ) 
	govîride
 {}

1175 #i‚de‡
GTEST_REMOVE_LEGACY_TEST_CASEAPI_


1176 
OnTe°Ca£End
(c⁄° 
Te°Ca£
& ) 
	govîride
 {}

1179 
OnEnvú⁄mítsTórDownSèπ
(c⁄° 
UnôTe°
& ) 
	govîride
 {}

1180 
OnEnvú⁄mítsTórDownEnd
(c⁄° 
UnôTe°
& ) 
	govîride
 {}

1181 
OnTe°Iãøti⁄End
(c⁄° 
UnôTe°
& ,

1182 Ë
	govîride
 {}

1183 
OnTe°ProgømEnd
(c⁄° 
UnôTe°
& ) 
	govîride
 {}

1187 ˛as†
	cGTEST_API_
 
	gTe°EvítLi°íîs
 {

1188 
	gpublic
:

1189 
Te°EvítLi°íîs
();

1190 ~
Te°EvítLi°íîs
();

1195 
Aµíd
(
Te°EvítLi°íî
* 
li°íî
);

1200 
Te°EvítLi°íî
* 
Rñó£
(Te°EvítLi°íî* 
li°íî
);

1207 
Te°EvítLi°íî
* 
deÁu…_ªsu…_¥öãr
() const {

1208  
	gdeÁu…_ªsu…_¥öãr_
;

1218 
Te°EvítLi°íî
* 
deÁu…_xml_gíî©‹
() const {

1219  
	gdeÁu…_xml_gíî©‹_
;

1222 
	g¥iv©e
:

1223 
‰õnd
 
˛ass
 
Te°Suôe
;

1224 
‰õnd
 
˛ass
 
	gTe°Info
;

1225 
‰õnd
 
˛ass
 
	göã∫Æ
::
DeÁu…GlobÆTe°P¨tResu…Rï‹ãr
;

1226 
‰õnd
 
˛ass
 
	göã∫Æ
::
NoExecDóthTe°
;

1227 
‰õnd
 
˛ass
 
	göã∫Æ
::
Te°EvítLi°íîsAc˚ss‹
;

1228 
‰õnd
 
˛ass
 
	göã∫Æ
::
UnôTe°Im∂
;

1232 
Te°EvítLi°íî
* 
ª≥©î
();

1239 
SëDeÁu…Resu…Pröãr
(
Te°EvítLi°íî
* 
li°íî
);

1246 
SëDeÁu…XmlGíî©‹
(
Te°EvítLi°íî
* 
li°íî
);

1250 
boﬁ
 
EvítF‹w¨dögE«bÀd
() const;

1251 
SuµªssEvítF‹w¨dög
();

1254 
	göã∫Æ
::
Te°EvítRïóãr
* 
ª≥©î_
;

1256 
Te°EvítLi°íî
* 
	gdeÁu…_ªsu…_¥öãr_
;

1258 
Te°EvítLi°íî
* 
	gdeÁu…_xml_gíî©‹_
;

1261 
GTEST_DISALLOW_COPY_AND_ASSIGN_
(
Te°EvítLi°íîs
);

1274 ˛as†
	cGTEST_API_
 
	gUnôTe°
 {

1275 
	gpublic
:

1279 
UnôTe°
* 
GëIn°™˚
();

1287 
Run
(Ë
	gGTEST_MUST_USE_RESULT_
;

1291 c⁄° * 
‹igöÆ_w‹kög_dú
() const;

1295 c⁄° 
Te°Suôe
* 
cuºít_ã°_suôe
(Ëc⁄° 
GTEST_LOCK_EXCLUDED_
(
muãx_
);

1298 #i‚de‡
GTEST_REMOVE_LEGACY_TEST_CASEAPI_


1299 c⁄° 
Te°Ca£
* 
cuºít_ã°_ˇ£
(Ëc⁄° 
GTEST_LOCK_EXCLUDED_
(
muãx_
);

1304 c⁄° 
Te°Info
* 
cuºít_ã°_öfo
() const

1305 
GTEST_LOCK_EXCLUDED_
(
muãx_
);

1308 
øndom_£ed
() const;

1314 
	göã∫Æ
::
P¨amëîizedTe°SuôeRegi°ry
& 
∑ømëîized_ã°_ªgi°ry
()

1315 
GTEST_LOCK_EXCLUDED_
(
muãx_
);

1318 
suc˚ssful_ã°_suôe_cou¡
() const;

1321 
Áûed_ã°_suôe_cou¡
() const;

1324 
tŸÆ_ã°_suôe_cou¡
() const;

1328 
ã°_suôe_to_run_cou¡
() const;

1331 #i‚de‡
GTEST_REMOVE_LEGACY_TEST_CASEAPI_


1332 
suc˚ssful_ã°_ˇ£_cou¡
() const;

1333 
Áûed_ã°_ˇ£_cou¡
() const;

1334 
tŸÆ_ã°_ˇ£_cou¡
() const;

1335 
ã°_ˇ£_to_run_cou¡
() const;

1339 
suc˚ssful_ã°_cou¡
() const;

1342 
skù≥d_ã°_cou¡
() const;

1345 
Áûed_ã°_cou¡
() const;

1348 
ªp‹èbÀ_dißbÀd_ã°_cou¡
() const;

1351 
dißbÀd_ã°_cou¡
() const;

1354 
ªp‹èbÀ_ã°_cou¡
() const;

1357 
tŸÆ_ã°_cou¡
() const;

1360 
ã°_to_run_cou¡
() const;

1364 
TimeInMûlis
 
°¨t_time°amp
() const;

1367 
TimeInMûlis
 
ñ≠£d_time
() const;

1371 
boﬁ
 
Pas£d
() const;

1375 
boﬁ
 
Faûed
() const;

1379 c⁄° 
Te°Suôe
* 
GëTe°Suôe
(
i
) const;

1382 #i‚de‡
GTEST_REMOVE_LEGACY_TEST_CASEAPI_


1383 c⁄° 
Te°Ca£
* 
GëTe°Ca£
(
i
) const;

1388 c⁄° 
	gTe°Resu…
& 
ad_hoc_ã°_ªsu…
() const;

1392 
	gTe°EvítLi°íîs
& 
li°íîs
();

1394 
	g¥iv©e
:

1404 
Envú⁄mít
* 
AddEnvú⁄mít
(Envú⁄mít* 
ív
);

1410 
AddTe°P¨tResu…
(
Te°P¨tResu…
::
Ty≥
 
ªsu…_ty≥
,

1411 c⁄° * 
fûe_«me
,

1412 
löe_numbî
,

1413 c⁄° 
°d
::
°rög
& 
mesßge
,

1414 c⁄° 
°d
::
°rög
& 
os_°ack_åa˚
)

1415 
GTEST_LOCK_EXCLUDED_
(
muãx_
);

1422 
Rec‹dPr›îty
(c⁄° 
°d
::
°rög
& 
key
, c⁄° std::°rög& 
vÆue
);

1426 
Te°Suôe
* 
GëMuèbÀTe°Suôe
(
i
);

1429 
	göã∫Æ
::
UnôTe°Im∂
* 
im∂
(Ë{  
im∂_
; }

1430 c⁄° 
	göã∫Æ
::
UnôTe°Im∂
* 
im∂
(Ëc⁄° {  
im∂_
; }

1434 
‰õnd
 
˛ass
 
	gSc›edTø˚
;

1435 
‰õnd
 
˛ass
 
	gTe°
;

1436 
‰õnd
 
˛ass
 
	göã∫Æ
::
As£πHñ≥r
;

1437 
‰õnd
 
˛ass
 
	göã∫Æ
::
SåómögLi°íîTe°
;

1438 
‰õnd
 
˛ass
 
	göã∫Æ
::
UnôTe°Rec‹dPr›îtyTe°Hñ≥r
;

1439 
‰õnd
 
Envú⁄mít
* 
AddGlobÆTe°Envú⁄mít
(Envú⁄mít* 
ív
);

1440 
‰õnd
 
	g°d
::
£t
<
°d
::
°rög
>* 
öã∫Æ
::
GëIgn‹edP¨amëîizedTe°Suôes
();

1441 
‰õnd
 
	göã∫Æ
::
UnôTe°Im∂
* 
öã∫Æ
::
GëUnôTe°Im∂
();

1442 
‰õnd
 
	göã∫Æ
::
Rï‹tFaûuªInUnknownLoˇti⁄
(

1443 
Te°P¨tResu…
::
Ty≥
 
ªsu…_ty≥
,

1444 c⁄° 
°d
::
°rög
& 
mesßge
);

1447 
UnôTe°
();

1450 
	gvútuÆ
 ~
UnôTe°
();

1454 
PushGTe°Tø˚
(c⁄° 
öã∫Æ
::
Tø˚Info
& 
åa˚
)

1455 
GTEST_LOCK_EXCLUDED_
(
muãx_
);

1458 
P›GTe°Tø˚
()

1459 
GTEST_LOCK_EXCLUDED_
(
muãx_
);

1463 
muèbÀ
 
	göã∫Æ
::
Muãx
 
muãx_
;

1469 
	göã∫Æ
::
UnôTe°Im∂
* 
im∂_
;

1472 
GTEST_DISALLOW_COPY_AND_ASSIGN_
(
UnôTe°
);

1493 
ölöe
 
Envú⁄mít
* 
	$AddGlobÆTe°Envú⁄mít
(
Envú⁄mít
* 
ív
) {

1494  
UnôTe°
::
	`GëIn°™˚
()->
	`AddEnvú⁄mít
(
ív
);

1495 
	}
}

1506 
GTEST_API_
 
InôGoogÀTe°
(* 
¨gc
, ** 
¨gv
);

1510 
GTEST_API_
 
InôGoogÀTe°
(* 
¨gc
, 
wch¨_t
** 
¨gv
);

1514 
GTEST_API_
 
InôGoogÀTe°
();

1516 
«me•a˚
 
	göã∫Æ
 {

1521 
	gãm∂©e
 <
ty≥«me
 
	gT1
,Åy≥«mê
	gT2
>

1522 
As£πi⁄Resu…
 
CmpHñ≥rEQFaûuª
(c⁄° * 
lhs_ex¥essi⁄
,

1523 c⁄° * 
rhs_ex¥essi⁄
,

1524 c⁄° 
T1
& 
lhs
, c⁄° 
T2
& 
rhs
) {

1525  
EqFaûuª
(
lhs_ex¥essi⁄
,

1526 
rhs_ex¥essi⁄
,

1527 
F‹m©F‹Com∑ris⁄FaûuªMesßge
(
lhs
, 
rhs
),

1528 
F‹m©F‹Com∑ris⁄FaûuªMesßge
(
rhs
, 
lhs
),

1529 
Ál£
);

1535 
	sÁkëy≥
 {};

1536 
ölöe
 
boﬁ
 
	g›î©‹
==(
Ákëy≥
, 
	gÁkëy≥
Ë{  
	gåue
; }

1537 
ölöe
 
boﬁ
 
	g›î©‹
!=(
Ákëy≥
, 
	gÁkëy≥
Ë{  
	gÁl£
; }

1540 
	gãm∂©e
 <
ty≥«me
 
	gT1
,Åy≥«mê
	gT2
>

1541 
As£πi⁄Resu…
 
CmpHñ≥rEQ
(c⁄° * 
lhs_ex¥essi⁄
,

1542 c⁄° * 
rhs_ex¥essi⁄
,

1543 c⁄° 
T1
& 
lhs
,

1544 c⁄° 
T2
& 
rhs
) {

1545 i‡(
	glhs
 =
rhs
) {

1546  
As£πi⁄Suc˚ss
();

1549  
CmpHñ≥rEQFaûuª
(
lhs_ex¥essi⁄
, 
rhs_ex¥essi⁄
, 
lhs
, 
rhs
);

1552 ˛as†
	cEqHñ≥r
 {

1553 
	gpublic
:

1555 
ãm∂©e
 <

1556 
ty≥«me
 
T1
,Åy≥«mê
	gT2
,

1559 
ty≥«me
 
	g°d
::
íabÀ_if
<!
°d
::
is_öãgøl
<
T1
>::
vÆue
 ||

1560 !
°d
::
is_poöãr
<
T2
>::
vÆue
>::
ty≥
* = 
nuŒ±r
>

1561 
As£πi⁄Resu…
 
Com∑ª
(c⁄° * 
lhs_ex¥essi⁄
,

1562 c⁄° * 
rhs_ex¥essi⁄
, c⁄° 
T1
& 
lhs
,

1563 c⁄° 
T2
& 
rhs
) {

1564  
CmpHñ≥rEQ
(
lhs_ex¥essi⁄
, 
rhs_ex¥essi⁄
, 
lhs
, 
rhs
);

1573 
As£πi⁄Resu…
 
Com∑ª
(c⁄° * 
lhs_ex¥essi⁄
,

1574 c⁄° * 
rhs_ex¥essi⁄
,

1575 
Bigge°I¡
 
lhs
,

1576 
Bigge°I¡
 
rhs
) {

1577  
CmpHñ≥rEQ
(
lhs_ex¥essi⁄
, 
rhs_ex¥essi⁄
, 
lhs
, 
rhs
);

1580 
	gãm∂©e
 <
ty≥«me
 
	gT
>

1581 
As£πi⁄Resu…
 
Com∑ª
(

1582 c⁄° * 
lhs_ex¥essi⁄
, c⁄° * 
rhs_ex¥essi⁄
,

1584 
°d
::
nuŒ±r_t
 , 
T
* 
rhs
) {

1586  
CmpHñ≥rEQ
(
lhs_ex¥essi⁄
, 
rhs_ex¥essi⁄
, 
°©ic_ˇ°
<
T
*>(
nuŒ±r
),

1587 
rhs
);

1594 
	gãm∂©e
 <
ty≥«me
 
	gT1
,Åy≥«mê
	gT2
>

1595 
As£πi⁄Resu…
 
CmpHñ≥rOpFaûuª
(c⁄° * 
ex¥1
, c⁄° * 
ex¥2
,

1596 c⁄° 
T1
& 
vÆ1
, c⁄° 
T2
& 
vÆ2
,

1597 c⁄° * 
›
) {

1598  
As£πi⁄Faûuª
()

1599 << "Ex≥˘ed: (" << 
	gex¥1
 << "Ë" << 
	g›
 << " (" << 
	gex¥2


1600 << "),á˘uÆ: " << 
F‹m©F‹Com∑ris⁄FaûuªMesßge
(
vÆ1
, 
vÆ2
)

1601 << " v†" << 
F‹m©F‹Com∑ris⁄FaûuªMesßge
(
vÆ2
, 
vÆ1
);

1610 
	#GTEST_IMPL_CMP_HELPER_
(
›_«me
, 
›
)\

1611 
ãm∂©e
 <
ty≥«me
 
T1
,Åy≥«mê
T2
>\

1612 
As£πi⁄Resu…
 
CmpHñ≥r
##
	`›_«me
(c⁄° * 
ex¥1
, c⁄° * 
ex¥2
, \

1613 c⁄° 
T1
& 
vÆ1
, c⁄° 
T2
& 
vÆ2
) {\

1614 i‡(
vÆ1
 
›
 
vÆ2
) {\

1615  
	`As£πi⁄Suc˚ss
();\

1617  
	`CmpHñ≥rOpFaûuª
(
ex¥1
, 
ex¥2
, 
vÆ1
, 
vÆ2
, #op);\

1619 }

	)

1624 
GTEST_IMPL_CMP_HELPER_
(
NE
, !=)

1626 
GTEST_IMPL_CMP_HELPER_
(
LE
, <=)

1628 
GTEST_IMPL_CMP_HELPER_
(
LT
, <)

1630 
GTEST_IMPL_CMP_HELPER_
(
GE
, >=)

1632 
GTEST_IMPL_CMP_HELPER_
(
GT
, >)

1634 #unde‡
GTEST_IMPL_CMP_HELPER_


1639 
GTEST_API_
 
As£πi⁄Resu…
 
CmpHñ≥rSTREQ
(c⁄° * 
s1_ex¥essi⁄
,

1640 c⁄° * 
s2_ex¥essi⁄
,

1641 c⁄° * 
s1
,

1642 c⁄° * 
s2
);

1647 
GTEST_API_
 
As£πi⁄Resu…
 
CmpHñ≥rSTRCASEEQ
(c⁄° * 
s1_ex¥essi⁄
,

1648 c⁄° * 
s2_ex¥essi⁄
,

1649 c⁄° * 
s1
,

1650 c⁄° * 
s2
);

1655 
GTEST_API_
 
As£πi⁄Resu…
 
CmpHñ≥rSTRNE
(c⁄° * 
s1_ex¥essi⁄
,

1656 c⁄° * 
s2_ex¥essi⁄
,

1657 c⁄° * 
s1
,

1658 c⁄° * 
s2
);

1663 
GTEST_API_
 
As£πi⁄Resu…
 
CmpHñ≥rSTRCASENE
(c⁄° * 
s1_ex¥essi⁄
,

1664 c⁄° * 
s2_ex¥essi⁄
,

1665 c⁄° * 
s1
,

1666 c⁄° * 
s2
);

1672 
GTEST_API_
 
As£πi⁄Resu…
 
CmpHñ≥rSTREQ
(c⁄° * 
s1_ex¥essi⁄
,

1673 c⁄° * 
s2_ex¥essi⁄
,

1674 c⁄° 
wch¨_t
* 
s1
,

1675 c⁄° 
wch¨_t
* 
s2
);

1680 
GTEST_API_
 
As£πi⁄Resu…
 
CmpHñ≥rSTRNE
(c⁄° * 
s1_ex¥essi⁄
,

1681 c⁄° * 
s2_ex¥essi⁄
,

1682 c⁄° 
wch¨_t
* 
s1
,

1683 c⁄° 
wch¨_t
* 
s2
);

1695 
GTEST_API_
 
As£πi⁄Resu…
 
IsSub°rög
(

1696 c⁄° * 
√edÀ_ex¥
, c⁄° * 
hay°ack_ex¥
,

1697 c⁄° * 
√edÀ
, c⁄° * 
hay°ack
);

1698 
GTEST_API_
 
As£πi⁄Resu…
 
IsSub°rög
(

1699 c⁄° * 
√edÀ_ex¥
, c⁄° * 
hay°ack_ex¥
,

1700 c⁄° 
wch¨_t
* 
√edÀ
, c⁄° wch¨_t* 
hay°ack
);

1701 
GTEST_API_
 
As£πi⁄Resu…
 
IsNŸSub°rög
(

1702 c⁄° * 
√edÀ_ex¥
, c⁄° * 
hay°ack_ex¥
,

1703 c⁄° * 
√edÀ
, c⁄° * 
hay°ack
);

1704 
GTEST_API_
 
As£πi⁄Resu…
 
IsNŸSub°rög
(

1705 c⁄° * 
√edÀ_ex¥
, c⁄° * 
hay°ack_ex¥
,

1706 c⁄° 
wch¨_t
* 
√edÀ
, c⁄° wch¨_t* 
hay°ack
);

1707 
GTEST_API_
 
As£πi⁄Resu…
 
IsSub°rög
(

1708 c⁄° * 
√edÀ_ex¥
, c⁄° * 
hay°ack_ex¥
,

1709 c⁄° ::
°d
::
°rög
& 
√edÀ
, c⁄° ::°d::°rög& 
hay°ack
);

1710 
GTEST_API_
 
As£πi⁄Resu…
 
IsNŸSub°rög
(

1711 c⁄° * 
√edÀ_ex¥
, c⁄° * 
hay°ack_ex¥
,

1712 c⁄° ::
°d
::
°rög
& 
√edÀ
, c⁄° ::°d::°rög& 
hay°ack
);

1714 #i‡
GTEST_HAS_STD_WSTRING


1715 
GTEST_API_
 
As£πi⁄Resu…
 
IsSub°rög
(

1716 c⁄° * 
√edÀ_ex¥
, c⁄° * 
hay°ack_ex¥
,

1717 c⁄° ::
°d
::
w°rög
& 
√edÀ
, c⁄° ::°d::w°rög& 
hay°ack
);

1718 
GTEST_API_
 
As£πi⁄Resu…
 
IsNŸSub°rög
(

1719 c⁄° * 
√edÀ_ex¥
, c⁄° * 
hay°ack_ex¥
,

1720 c⁄° ::
°d
::
w°rög
& 
√edÀ
, c⁄° ::°d::w°rög& 
hay°ack
);

1723 
«me•a˚
 
	göã∫Æ
 {

1732 
	gãm∂©e
 <
ty≥«me
 
	gRawTy≥
>

1733 
As£πi⁄Resu…
 
CmpHñ≥rFlﬂtögPoötEQ
(c⁄° * 
lhs_ex¥essi⁄
,

1734 c⁄° * 
rhs_ex¥essi⁄
,

1735 
RawTy≥
 
lhs_vÆue
,

1736 
RawTy≥
 
rhs_vÆue
) {

1737 c⁄° 
	gFlﬂtögPoöt
<
	gRawTy≥
> 
lhs
(
lhs_vÆue
), 
rhs
(
rhs_vÆue
);

1739 i‡(
	glhs
.
Almo°EquÆs
(
rhs
)) {

1740  
As£πi⁄Suc˚ss
();

1743 ::
°d
::
°rög°ªam
 
lhs_ss
;

1744 
	glhs_ss
 << 
	g°d
::
£çªcisi⁄
(
°d
::
numîic_limôs
<
RawTy≥
>::
digôs10
 + 2)

1745 << 
lhs_vÆue
;

1747 ::
°d
::
°rög°ªam
 
rhs_ss
;

1748 
	grhs_ss
 << 
	g°d
::
£çªcisi⁄
(
°d
::
numîic_limôs
<
RawTy≥
>::
digôs10
 + 2)

1749 << 
rhs_vÆue
;

1751  
EqFaûuª
(
lhs_ex¥essi⁄
,

1752 
rhs_ex¥essi⁄
,

1753 
SåögSåómToSåög
(&
lhs_ss
),

1754 
SåögSåómToSåög
(&
rhs_ss
),

1755 
Ál£
);

1761 
GTEST_API_
 
As£πi⁄Resu…
 
DoubÀNórPªdF‹m©
(c⁄° * 
ex¥1
,

1762 c⁄° * 
ex¥2
,

1763 c⁄° * 
abs_îr‹_ex¥
,

1764 
vÆ1
,

1765 
vÆ2
,

1766 
abs_îr‹
);

1770 ˛as†
	cGTEST_API_
 
	gAs£πHñ≥r
 {

1771 
	gpublic
:

1773 
As£πHñ≥r
(
Te°P¨tResu…
::
Ty≥
 
ty≥
,

1774 c⁄° * 
fûe
,

1775 
löe
,

1776 c⁄° * 
mesßge
);

1777 ~
As£πHñ≥r
();

1781 
	g›î©‹
=(c⁄° 
Mesßge
& 
mesßge
) const;

1783 
	g¥iv©e
:

1788 
	sAs£πHñ≥rD©a
 {

1789 
As£πHñ≥rD©a
(
Te°P¨tResu…
::
Ty≥
 
t
,

1790 c⁄° * 
§cfûe
,

1791 
löe_num
,

1792 c⁄° * 
msg
)

1793 : 
ty≥
(
t
), 
fûe
(
§cfûe
), 
löe
(
löe_num
), 
mesßge
(
msg
) { }

1795 
	gTe°P¨tResu…
::
Ty≥
 c⁄° 
ty≥
;

1796 c⁄° * c⁄° 
	gfûe
;

1797 c⁄° 
	glöe
;

1798 
	g°d
::
°rög
 c⁄° 
mesßge
;

1800 
	g¥iv©e
:

1801 
GTEST_DISALLOW_COPY_AND_ASSIGN_
(
As£πHñ≥rD©a
);

1804 
As£πHñ≥rD©a
* c⁄° 
	gd©a_
;

1806 
GTEST_DISALLOW_COPY_AND_ASSIGN_
(
As£πHñ≥r
);

1845 
	gãm∂©e
 <
ty≥«me
 
	gT
>

1846 ˛as†
	cWôhP¨amI¡îÁ˚
 {

1847 
	gpublic
:

1848 
T
 
	tP¨amTy≥
;

1849 
	gvútuÆ
 ~
WôhP¨amI¡îÁ˚
() {}

1853 c⁄° 
	gP¨amTy≥
& 
GëP¨am
() {

1854 
GTEST_CHECK_
(
∑ømëî_
 !
nuŒ±r
)

1857  *
	g∑ømëî_
;

1860 
	g¥iv©e
:

1863 
SëP¨am
(c⁄° 
P¨amTy≥
* 
∑ømëî
) {

1864 
∑ømëî_
 = 
∑ømëî
;

1868 c⁄° 
P¨amTy≥
* 
	g∑ømëî_
;

1871 
	gãm∂©e
 <
˛ass
 
	gTe°Cœss
> 
‰õnd
 cœs†
	göã∫Æ
::
P¨amëîizedTe°Fa˘‹y
;

1874 
	gãm∂©e
 <
ty≥«me
 
	gT
>

1875 c⁄° 
T
* 
	gWôhP¨amI¡îÁ˚
<
	gT
>::
∑ømëî_
 = 
nuŒ±r
;

1880 
	gãm∂©e
 <
ty≥«me
 
	gT
>

1881 
˛ass
 
	gTe°WôhP¨am
 : 
public
 
Te°
,Öubli¯
	gWôhP¨amI¡îÁ˚
<
	gT
> {

1889 
	#GTEST_SKIP
(Ë
	`GTEST_SKIP_
("")

	)

1909 
	#ADD_FAILURE
(Ë
	`GTEST_NONFATAL_FAILURE_
("Faûed")

	)

1913 
	#ADD_FAILURE_AT
(
fûe
, 
löe
) \

1914 
	`GTEST_MESSAGE_AT_
(
fûe
, 
löe
, "Failed", \

1915 ::
ã°ög
::
Te°P¨tResu…
::
kN⁄F©ÆFaûuª
)

	)

1918 
	#GTEST_FAIL
(Ë
	`GTEST_FATAL_FAILURE_
("Faûed")

	)

1921 
	#GTEST_FAIL_AT
(
fûe
, 
löe
) \

1922 
	`GTEST_MESSAGE_AT_
(
fûe
, 
löe
, "Failed", \

1923 ::
ã°ög
::
Te°P¨tResu…
::
kF©ÆFaûuª
)

	)

1927 #i‡!
GTEST_DONT_DEFINE_FAIL


1928 
	#FAIL
(Ë
	$GTEST_FAIL
()

	)

1932 
	#GTEST_SUCCEED
(Ë
	`GTEST_SUCCESS_
("Suc˚eded")

	)

1936 #i‡!
GTEST_DONT_DEFINE_SUCCEED


1937 
	#SUCCEED
(Ë
	$GTEST_SUCCEED
()

	)

1949 
	#EXPECT_THROW
(
°©emít
, 
ex≥˘ed_ex˚±i⁄
) \

1950 
	$GTEST_TEST_THROW_
(
°©emít
, 
ex≥˘ed_ex˚±i⁄
, 
GTEST_NONFATAL_FAILURE_
)

	)

1951 
	#EXPECT_NO_THROW
(
°©emít
) \

1952 
	$GTEST_TEST_NO_THROW_
(
°©emít
, 
GTEST_NONFATAL_FAILURE_
)

	)

1953 
	#EXPECT_ANY_THROW
(
°©emít
) \

1954 
	$GTEST_TEST_ANY_THROW_
(
°©emít
, 
GTEST_NONFATAL_FAILURE_
)

	)

1955 
	#ASSERT_THROW
(
°©emít
, 
ex≥˘ed_ex˚±i⁄
) \

1956 
	$GTEST_TEST_THROW_
(
°©emít
, 
ex≥˘ed_ex˚±i⁄
, 
GTEST_FATAL_FAILURE_
)

	)

1957 
	#ASSERT_NO_THROW
(
°©emít
) \

1958 
	$GTEST_TEST_NO_THROW_
(
°©emít
, 
GTEST_FATAL_FAILURE_
)

	)

1959 
	#ASSERT_ANY_THROW
(
°©emít
) \

1960 
	$GTEST_TEST_ANY_THROW_
(
°©emít
, 
GTEST_FATAL_FAILURE_
)

	)

1965 
	#GTEST_EXPECT_TRUE
(
c⁄dôi⁄
) \

1966 
	`GTEST_TEST_BOOLEAN_
(
c⁄dôi⁄
, #c⁄dôi⁄, 
Ál£
, 
åue
, \

1967 
GTEST_NONFATAL_FAILURE_
)

	)

1968 
	#GTEST_EXPECT_FALSE
(
c⁄dôi⁄
) \

1969 
	`GTEST_TEST_BOOLEAN_
(!(
c⁄dôi⁄
), #c⁄dôi⁄, 
åue
, 
Ál£
, \

1970 
GTEST_NONFATAL_FAILURE_
)

	)

1971 
	#GTEST_ASSERT_TRUE
(
c⁄dôi⁄
) \

1972 
	`GTEST_TEST_BOOLEAN_
(
c⁄dôi⁄
, #c⁄dôi⁄, 
Ál£
, 
åue
, \

1973 
GTEST_FATAL_FAILURE_
)

	)

1974 
	#GTEST_ASSERT_FALSE
(
c⁄dôi⁄
) \

1975 
	`GTEST_TEST_BOOLEAN_
(!(
c⁄dôi⁄
), #c⁄dôi⁄, 
åue
, 
Ál£
, \

1976 
GTEST_FATAL_FAILURE_
)

	)

1981 #i‡!
GTEST_DONT_DEFINE_EXPECT_TRUE


1982 
	#EXPECT_TRUE
(
c⁄dôi⁄
Ë
	$GTEST_EXPECT_TRUE
(
c⁄dôi⁄
)

	)

1985 #i‡!
GTEST_DONT_DEFINE_EXPECT_FALSE


1986 
	#EXPECT_FALSE
(
c⁄dôi⁄
Ë
	$GTEST_EXPECT_FALSE
(
c⁄dôi⁄
)

	)

1989 #i‡!
GTEST_DONT_DEFINE_ASSERT_TRUE


1990 
	#ASSERT_TRUE
(
c⁄dôi⁄
Ë
	$GTEST_ASSERT_TRUE
(
c⁄dôi⁄
)

	)

1993 #i‡!
GTEST_DONT_DEFINE_ASSERT_FALSE


1994 
	#ASSERT_FALSE
(
c⁄dôi⁄
Ë
	$GTEST_ASSERT_FALSE
(
c⁄dôi⁄
)

	)

2043 
	#EXPECT_EQ
(
vÆ1
, 
vÆ2
) \

2044 
	$EXPECT_PRED_FORMAT2
(::
ã°ög
::
öã∫Æ
::
EqHñ≥r
::
Com∑ª
, 
vÆ1
, 
vÆ2
)

	)

2045 
	#EXPECT_NE
(
vÆ1
, 
vÆ2
) \

2046 
	$EXPECT_PRED_FORMAT2
(::
ã°ög
::
öã∫Æ
::
CmpHñ≥rNE
, 
vÆ1
, 
vÆ2
)

	)

2047 
	#EXPECT_LE
(
vÆ1
, 
vÆ2
) \

2048 
	$EXPECT_PRED_FORMAT2
(::
ã°ög
::
öã∫Æ
::
CmpHñ≥rLE
, 
vÆ1
, 
vÆ2
)

	)

2049 
	#EXPECT_LT
(
vÆ1
, 
vÆ2
) \

2050 
	$EXPECT_PRED_FORMAT2
(::
ã°ög
::
öã∫Æ
::
CmpHñ≥rLT
, 
vÆ1
, 
vÆ2
)

	)

2051 
	#EXPECT_GE
(
vÆ1
, 
vÆ2
) \

2052 
	$EXPECT_PRED_FORMAT2
(::
ã°ög
::
öã∫Æ
::
CmpHñ≥rGE
, 
vÆ1
, 
vÆ2
)

	)

2053 
	#EXPECT_GT
(
vÆ1
, 
vÆ2
) \

2054 
	$EXPECT_PRED_FORMAT2
(::
ã°ög
::
öã∫Æ
::
CmpHñ≥rGT
, 
vÆ1
, 
vÆ2
)

	)

2056 
	#GTEST_ASSERT_EQ
(
vÆ1
, 
vÆ2
) \

2057 
	$ASSERT_PRED_FORMAT2
(::
ã°ög
::
öã∫Æ
::
EqHñ≥r
::
Com∑ª
, 
vÆ1
, 
vÆ2
)

	)

2058 
	#GTEST_ASSERT_NE
(
vÆ1
, 
vÆ2
) \

2059 
	$ASSERT_PRED_FORMAT2
(::
ã°ög
::
öã∫Æ
::
CmpHñ≥rNE
, 
vÆ1
, 
vÆ2
)

	)

2060 
	#GTEST_ASSERT_LE
(
vÆ1
, 
vÆ2
) \

2061 
	$ASSERT_PRED_FORMAT2
(::
ã°ög
::
öã∫Æ
::
CmpHñ≥rLE
, 
vÆ1
, 
vÆ2
)

	)

2062 
	#GTEST_ASSERT_LT
(
vÆ1
, 
vÆ2
) \

2063 
	$ASSERT_PRED_FORMAT2
(::
ã°ög
::
öã∫Æ
::
CmpHñ≥rLT
, 
vÆ1
, 
vÆ2
)

	)

2064 
	#GTEST_ASSERT_GE
(
vÆ1
, 
vÆ2
) \

2065 
	$ASSERT_PRED_FORMAT2
(::
ã°ög
::
öã∫Æ
::
CmpHñ≥rGE
, 
vÆ1
, 
vÆ2
)

	)

2066 
	#GTEST_ASSERT_GT
(
vÆ1
, 
vÆ2
) \

2067 
	$ASSERT_PRED_FORMAT2
(::
ã°ög
::
öã∫Æ
::
CmpHñ≥rGT
, 
vÆ1
, 
vÆ2
)

	)

2072 #i‡!
GTEST_DONT_DEFINE_ASSERT_EQ


2073 
	#ASSERT_EQ
(
vÆ1
, 
vÆ2
Ë
	$GTEST_ASSERT_EQ
(
vÆ1
, 
vÆ2
)

	)

2076 #i‡!
GTEST_DONT_DEFINE_ASSERT_NE


2077 
	#ASSERT_NE
(
vÆ1
, 
vÆ2
Ë
	$GTEST_ASSERT_NE
(
vÆ1
, 
vÆ2
)

	)

2080 #i‡!
GTEST_DONT_DEFINE_ASSERT_LE


2081 
	#ASSERT_LE
(
vÆ1
, 
vÆ2
Ë
	$GTEST_ASSERT_LE
(
vÆ1
, 
vÆ2
)

	)

2084 #i‡!
GTEST_DONT_DEFINE_ASSERT_LT


2085 
	#ASSERT_LT
(
vÆ1
, 
vÆ2
Ë
	$GTEST_ASSERT_LT
(
vÆ1
, 
vÆ2
)

	)

2088 #i‡!
GTEST_DONT_DEFINE_ASSERT_GE


2089 
	#ASSERT_GE
(
vÆ1
, 
vÆ2
Ë
	$GTEST_ASSERT_GE
(
vÆ1
, 
vÆ2
)

	)

2092 #i‡!
GTEST_DONT_DEFINE_ASSERT_GT


2093 
	#ASSERT_GT
(
vÆ1
, 
vÆ2
Ë
	$GTEST_ASSERT_GT
(
vÆ1
, 
vÆ2
)

	)

2112 
	#EXPECT_STREQ
(
s1
, 
s2
) \

2113 
	$EXPECT_PRED_FORMAT2
(::
ã°ög
::
öã∫Æ
::
CmpHñ≥rSTREQ
, 
s1
, 
s2
)

	)

2114 
	#EXPECT_STRNE
(
s1
, 
s2
) \

2115 
	$EXPECT_PRED_FORMAT2
(::
ã°ög
::
öã∫Æ
::
CmpHñ≥rSTRNE
, 
s1
, 
s2
)

	)

2116 
	#EXPECT_STRCASEEQ
(
s1
, 
s2
) \

2117 
	$EXPECT_PRED_FORMAT2
(::
ã°ög
::
öã∫Æ
::
CmpHñ≥rSTRCASEEQ
, 
s1
, 
s2
)

	)

2118 
	#EXPECT_STRCASENE
(
s1
, 
s2
)\

2119 
	$EXPECT_PRED_FORMAT2
(::
ã°ög
::
öã∫Æ
::
CmpHñ≥rSTRCASENE
, 
s1
, 
s2
)

	)

2121 
	#ASSERT_STREQ
(
s1
, 
s2
) \

2122 
	$ASSERT_PRED_FORMAT2
(::
ã°ög
::
öã∫Æ
::
CmpHñ≥rSTREQ
, 
s1
, 
s2
)

	)

2123 
	#ASSERT_STRNE
(
s1
, 
s2
) \

2124 
	$ASSERT_PRED_FORMAT2
(::
ã°ög
::
öã∫Æ
::
CmpHñ≥rSTRNE
, 
s1
, 
s2
)

	)

2125 
	#ASSERT_STRCASEEQ
(
s1
, 
s2
) \

2126 
	$ASSERT_PRED_FORMAT2
(::
ã°ög
::
öã∫Æ
::
CmpHñ≥rSTRCASEEQ
, 
s1
, 
s2
)

	)

2127 
	#ASSERT_STRCASENE
(
s1
, 
s2
)\

2128 
	$ASSERT_PRED_FORMAT2
(::
ã°ög
::
öã∫Æ
::
CmpHñ≥rSTRCASENE
, 
s1
, 
s2
)

	)

2144 
	#EXPECT_FLOAT_EQ
(
vÆ1
, 
vÆ2
)\

2145 
	`EXPECT_PRED_FORMAT2
(::
ã°ög
::
öã∫Æ
::
CmpHñ≥rFlﬂtögPoötEQ
<>, \

2146 
vÆ1
, 
vÆ2
)

	)

2148 
	#EXPECT_DOUBLE_EQ
(
vÆ1
, 
vÆ2
)\

2149 
	`EXPECT_PRED_FORMAT2
(::
ã°ög
::
öã∫Æ
::
CmpHñ≥rFlﬂtögPoötEQ
<>, \

2150 
vÆ1
, 
vÆ2
)

	)

2152 
	#ASSERT_FLOAT_EQ
(
vÆ1
, 
vÆ2
)\

2153 
	`ASSERT_PRED_FORMAT2
(::
ã°ög
::
öã∫Æ
::
CmpHñ≥rFlﬂtögPoötEQ
<>, \

2154 
vÆ1
, 
vÆ2
)

	)

2156 
	#ASSERT_DOUBLE_EQ
(
vÆ1
, 
vÆ2
)\

2157 
	`ASSERT_PRED_FORMAT2
(::
ã°ög
::
öã∫Æ
::
CmpHñ≥rFlﬂtögPoötEQ
<>, \

2158 
vÆ1
, 
vÆ2
)

	)

2160 
	#EXPECT_NEAR
(
vÆ1
, 
vÆ2
, 
abs_îr‹
)\

2161 
	`EXPECT_PRED_FORMAT3
(::
ã°ög
::
öã∫Æ
::
DoubÀNórPªdF‹m©
, \

2162 
vÆ1
, 
vÆ2
, 
abs_îr‹
)

	)

2164 
	#ASSERT_NEAR
(
vÆ1
, 
vÆ2
, 
abs_îr‹
)\

2165 
	`ASSERT_PRED_FORMAT3
(::
ã°ög
::
öã∫Æ
::
DoubÀNórPªdF‹m©
, \

2166 
vÆ1
, 
vÆ2
, 
abs_îr‹
)

	)

2175 
GTEST_API_
 
As£πi⁄Resu…
 
	`FlﬂtLE
(c⁄° * 
ex¥1
, c⁄° * 
ex¥2
,

2176 
vÆ1
, 
vÆ2
);

2177 
GTEST_API_
 
As£πi⁄Resu…
 
	`DoubÀLE
(c⁄° * 
ex¥1
, c⁄° * 
ex¥2
,

2178 
vÆ1
, 
vÆ2
);

2181 #i‡
GTEST_OS_WINDOWS


2192 
	#EXPECT_HRESULT_SUCCEEDED
(
ex¥
) \

2193 
	`EXPECT_PRED_FORMAT1
(::
ã°ög
::
öã∫Æ
::
IsHRESULTSuc˚ss
, (
ex¥
))

	)

2195 
	#ASSERT_HRESULT_SUCCEEDED
(
ex¥
) \

2196 
	`ASSERT_PRED_FORMAT1
(::
ã°ög
::
öã∫Æ
::
IsHRESULTSuc˚ss
, (
ex¥
))

	)

2198 
	#EXPECT_HRESULT_FAILED
(
ex¥
) \

2199 
	`EXPECT_PRED_FORMAT1
(::
ã°ög
::
öã∫Æ
::
IsHRESULTFaûuª
, (
ex¥
))

	)

2201 
	#ASSERT_HRESULT_FAILED
(
ex¥
) \

2202 
	`ASSERT_PRED_FORMAT1
(::
ã°ög
::
öã∫Æ
::
IsHRESULTFaûuª
, (
ex¥
))

	)

2216 
	#ASSERT_NO_FATAL_FAILURE
(
°©emít
) \

2217 
	$GTEST_TEST_NO_FATAL_FAILURE_
(
°©emít
, 
GTEST_FATAL_FAILURE_
)

	)

2218 
	#EXPECT_NO_FATAL_FAILURE
(
°©emít
) \

2219 
	$GTEST_TEST_NO_FATAL_FAILURE_
(
°©emít
, 
GTEST_NONFATAL_FAILURE_
)

	)

2231 ˛as†
	cGTEST_API_
 
Sc›edTø˚
 {

2232 
public
:

2238 
ãm∂©e
 <
ty≥«me
 
T
>

2239 
	`Sc›edTø˚
(c⁄° * 
fûe
, 
löe
, c⁄° 
T
& 
mesßge
) {

2240 
	`PushTø˚
(
fûe
, 
löe
, (
	`Mesßge
(Ë<< 
mesßge
).
	`GëSåög
());

2244 
	`Sc›edTø˚
(c⁄° * 
fûe
, 
löe
, c⁄° * 
mesßge
) {

2245 
	`PushTø˚
(
fûe
, 
löe
, 
mesßge
 ? message : "(null)");

2248 
	`Sc›edTø˚
(c⁄° * 
fûe
, 
löe
, c⁄° 
°d
::
°rög
& 
mesßge
) {

2249 
	`PushTø˚
(
fûe
, 
löe
, 
mesßge
);

2256 ~
	`Sc›edTø˚
();

2258 
¥iv©e
:

2259 
	`PushTø˚
(c⁄° * 
fûe
, 
löe
, 
°d
::
°rög
 
mesßge
);

2261 
	`GTEST_DISALLOW_COPY_AND_ASSIGN_
(
Sc›edTø˚
);

2262 
	}
} 
	gGTEST_ATTRIBUTE_UNUSED_
;

2281 
	#SCOPED_TRACE
(
mesßge
) \

2282 ::
ã°ög
::
Sc›edTø˚
 
	`GTEST_CONCAT_TOKEN_
(
gã°_åa˚_
, 
__LINE__
)(\

2283 
__FILE__
, 
__LINE__
, (
mesßge
))

	)

2315 
	gãm∂©e
 <
ty≥«me
 
	gT1
,Åy≥«mê
	gT2
>

2316 
c⁄°ex¥
 
boﬁ
 
	$SèticAs£πTy≥Eq
(Ë
n€x˚±
 {

2317 
	`°©ic_as£π
(
°d
::
is_ßme
<
T1
, 
T2
>::
vÆue
, "T1ánd T2áreÇotÅhe sameÅype");

2318  
åue
;

2319 
	}
}

2346 
	#GTEST_TEST
(
ã°_suôe_«me
, 
ã°_«me
) \

2347 
	`GTEST_TEST_
(
ã°_suôe_«me
, 
ã°_«me
, ::
ã°ög
::
Te°
, \

2348 ::
ã°ög
::
öã∫Æ
::
	$GëTe°Ty≥Id
())

	)

2352 #i‡!
GTEST_DONT_DEFINE_TEST


2353 
	#TEST
(
ã°_suôe_«me
, 
ã°_«me
Ë
	$GTEST_TEST
(
ã°_suôe_«me
, 
ã°_«me
)

	)

2383 #i‡!
GTEST_DONT_DEFINE_TEST


2384 
	#TEST_F
(
ã°_fixtuª
, 
ã°_«me
)\

2385 
	`GTEST_TEST_
(
ã°_fixtuª
, 
ã°_«me
,Åest_fixture, \

2386 ::
ã°ög
::
öã∫Æ
::
GëTy≥Id
<
ã°_fixtuª
>())

	)

2391 
GTEST_API_
 
°d
::
°rög
 
	`TempDú
();

2393 #ifde‡
_MSC_VER


2394 #¥agm®
	$w¨nög
(
p›
)

2454 
ãm∂©e
 <&... 
Ex∂icôP¨amëîB¨rõr
, 
ty≥«me
 
Fa˘‹y
>

2455 
Te°Info
* 
	$Regi°îTe°
(c⁄° * 
ã°_suôe_«me
, c⁄° * 
ã°_«me
,

2456 c⁄° * 
ty≥_∑øm
, c⁄° * 
vÆue_∑øm
,

2457 c⁄° * 
fûe
, 
löe
, 
Fa˘‹y
 
Á˘‹y
) {

2458 
usög
 
Te°T
 = 
ty≥«me
 
°d
::
ªmove_poöãr
<
	`de˛ty≥
(
	`Á˘‹y
())>::
ty≥
;

2460 ˛as†
	cFa˘‹yIm∂
 : 
public
 
öã∫Æ
::
Te°Fa˘‹yBa£
 {

2461 
public
:

2462 
ex∂icô
 
	`Fa˘‹yIm∂
(
Fa˘‹y
 
f
Ë: 
	`Á˘‹y_
(
°d
::
	`move
(f)) {}

2463 
Te°
* 
	`Cª©eTe°
(Ë
ovîride
 {  
	`Á˘‹y_
(); }

2465 
¥iv©e
:

2466 
Fa˘‹y
 
Á˘‹y_
;

2469  
öã∫Æ
::
	`MakeAndRegi°îTe°Info
(

2470 
ã°_suôe_«me
, 
ã°_«me
, 
ty≥_∑øm
, 
vÆue_∑øm
,

2471 
öã∫Æ
::
	`CodeLoˇti⁄
(
fûe
, 
löe
), i¡î«l::
GëTy≥Id
<
Te°T
>(),

2472 
öã∫Æ
::
SuôeApiResﬁvî
<
Te°T
>::
	`GëSëUpCa£OrSuôe
(
fûe
, 
löe
),

2473 
öã∫Æ
::
SuôeApiResﬁvî
<
Te°T
>::
	`GëTórDownCa£OrSuôe
(
fûe
, 
löe
),

2474 
√w
 
Fa˘‹yIm∂
{
°d
::
	`move
(
Á˘‹y
)});

2475 
	}
}

2487 
	$RUN_ALL_TESTS
(Ë
GTEST_MUST_USE_RESULT_
;

2489 
ölöe
 
	$RUN_ALL_TESTS
() {

2490  ::
ã°ög
::
UnôTe°
::
	`GëIn°™˚
()->
	`Run
();

2491 
	}
}

2493 
	$GTEST_DISABLE_MSC_WARNINGS_POP_
()

	@/usr/include/inttypes.h

22 #i‚de‡
_INTTYPES_H


23 
	#_INTTYPES_H
 1

	)

25 
	~<„©uªs.h
>

27 
	~<°döt.h
>

30 #i‚de‡
____gwch¨_t_deföed


31 #ifde‡
__˝lu•lus


32 
	#__gwch¨_t
 
wch¨_t


	)

33 #ñi‡
deföed
 
__WCHAR_TYPE__


34 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

36 
	#__√ed_wch¨_t


	)

37 
	~<°ddef.h
>

38 
wch¨_t
 
	t__gwch¨_t
;

40 
	#____gwch¨_t_deföed
 1

	)

43 #i‡
__WORDSIZE
 == 64

44 
	#__PRI64_PREFIX
 "l"

	)

45 
	#__PRIPTR_PREFIX
 "l"

	)

47 
	#__PRI64_PREFIX
 "Œ"

	)

48 
	#__PRIPTR_PREFIX


	)

54 
	#PRId8
 "d"

	)

55 
	#PRId16
 "d"

	)

56 
	#PRId32
 "d"

	)

57 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

59 
	#PRIdLEAST8
 "d"

	)

60 
	#PRIdLEAST16
 "d"

	)

61 
	#PRIdLEAST32
 "d"

	)

62 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

64 
	#PRIdFAST8
 "d"

	)

65 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

66 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

67 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIi8
 "i"

	)

71 
	#PRIi16
 "i"

	)

72 
	#PRIi32
 "i"

	)

73 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

75 
	#PRIiLEAST8
 "i"

	)

76 
	#PRIiLEAST16
 "i"

	)

77 
	#PRIiLEAST32
 "i"

	)

78 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

80 
	#PRIiFAST8
 "i"

	)

81 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

82 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

83 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIo8
 "o"

	)

87 
	#PRIo16
 "o"

	)

88 
	#PRIo32
 "o"

	)

89 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

91 
	#PRIoLEAST8
 "o"

	)

92 
	#PRIoLEAST16
 "o"

	)

93 
	#PRIoLEAST32
 "o"

	)

94 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

96 
	#PRIoFAST8
 "o"

	)

97 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

98 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

99 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIu8
 "u"

	)

103 
	#PRIu16
 "u"

	)

104 
	#PRIu32
 "u"

	)

105 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

107 
	#PRIuLEAST8
 "u"

	)

108 
	#PRIuLEAST16
 "u"

	)

109 
	#PRIuLEAST32
 "u"

	)

110 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

112 
	#PRIuFAST8
 "u"

	)

113 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

114 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

115 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIx8
 "x"

	)

119 
	#PRIx16
 "x"

	)

120 
	#PRIx32
 "x"

	)

121 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

123 
	#PRIxLEAST8
 "x"

	)

124 
	#PRIxLEAST16
 "x"

	)

125 
	#PRIxLEAST32
 "x"

	)

126 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

128 
	#PRIxFAST8
 "x"

	)

129 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

130 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

131 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIX8
 "X"

	)

135 
	#PRIX16
 "X"

	)

136 
	#PRIX32
 "X"

	)

137 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

139 
	#PRIXLEAST8
 "X"

	)

140 
	#PRIXLEAST16
 "X"

	)

141 
	#PRIXLEAST32
 "X"

	)

142 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

144 
	#PRIXFAST8
 "X"

	)

145 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

146 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

147 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

151 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

152 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

153 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

154 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

155 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

156 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

160 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

161 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

162 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

163 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

164 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

165 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

171 
	#SCNd8
 "hhd"

	)

172 
	#SCNd16
 "hd"

	)

173 
	#SCNd32
 "d"

	)

174 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

176 
	#SCNdLEAST8
 "hhd"

	)

177 
	#SCNdLEAST16
 "hd"

	)

178 
	#SCNdLEAST32
 "d"

	)

179 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

181 
	#SCNdFAST8
 "hhd"

	)

182 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

183 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

184 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNi8
 "hhi"

	)

188 
	#SCNi16
 "hi"

	)

189 
	#SCNi32
 "i"

	)

190 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

192 
	#SCNiLEAST8
 "hhi"

	)

193 
	#SCNiLEAST16
 "hi"

	)

194 
	#SCNiLEAST32
 "i"

	)

195 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

197 
	#SCNiFAST8
 "hhi"

	)

198 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

199 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

200 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNu8
 "hhu"

	)

204 
	#SCNu16
 "hu"

	)

205 
	#SCNu32
 "u"

	)

206 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

208 
	#SCNuLEAST8
 "hhu"

	)

209 
	#SCNuLEAST16
 "hu"

	)

210 
	#SCNuLEAST32
 "u"

	)

211 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

213 
	#SCNuFAST8
 "hhu"

	)

214 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

215 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

216 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNo8
 "hho"

	)

220 
	#SCNo16
 "ho"

	)

221 
	#SCNo32
 "o"

	)

222 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

224 
	#SCNoLEAST8
 "hho"

	)

225 
	#SCNoLEAST16
 "ho"

	)

226 
	#SCNoLEAST32
 "o"

	)

227 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

229 
	#SCNoFAST8
 "hho"

	)

230 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

231 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

232 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNx8
 "hhx"

	)

236 
	#SCNx16
 "hx"

	)

237 
	#SCNx32
 "x"

	)

238 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

240 
	#SCNxLEAST8
 "hhx"

	)

241 
	#SCNxLEAST16
 "hx"

	)

242 
	#SCNxLEAST32
 "x"

	)

243 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

245 
	#SCNxFAST8
 "hhx"

	)

246 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

247 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

248 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

252 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

253 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

254 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

255 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

256 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

259 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

260 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

261 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

262 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

263 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

266 
	g__BEGIN_DECLS


268 #i‡
__WORDSIZE
 == 64

273 
	mquŸ
;

274 
	mªm
;

275 } 
	timaxdiv_t
;

282 
__exãnsi⁄__
 
	mquŸ
;

283 
__exãnsi⁄__
 
	mªm
;

284 } 
	timaxdiv_t
;

290 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

293 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

294 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

297 
ötmax_t
 
	$°πoimax
 (c⁄° *
__ª°ri˘
 
__≈å
,

298 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

301 
uötmax_t
 
	$°πoumax
 (c⁄° *
__ª°ri˘
 
__≈å
,

302 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

305 
ötmax_t
 
	$wc°oimax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

306 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

307 
__THROW
;

310 
uötmax_t
 
	$wc°oumax
 (c⁄° 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

311 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

312 
__THROW
;

314 
__END_DECLS


	@/usr/include/pthread.h

18 #i‚de‡
_PTHREAD_H


19 
	#_PTHREAD_H
 1

	)

21 
	~<„©uªs.h
>

22 
	~<sched.h
>

23 
	~<time.h
>

25 
	~<bôs/ídün.h
>

26 
	~<bôs/±hªadty≥s.h
>

27 
	~<bôs/£tjmp.h
>

28 
	~<bôs/w‹dsize.h
>

29 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

30 
	~<bôs/ty≥s/__sig£t_t.h
>

31 
	~<bôs/ty≥s/°ru˘___jmp_buf_èg.h
>

32 #ifde‡
__USE_MISC


33 
	~<bôs/±hªad_°ack_mö-dy«mic.h
>

39 
	mPTHREAD_CREATE_JOINABLE
,

40 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

41 
	mPTHREAD_CREATE_DETACHED


42 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

49 
	mPTHREAD_MUTEX_TIMED_NP
,

50 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

51 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

52 
	mPTHREAD_MUTEX_ADAPTIVE_NP


53 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


55 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

56 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

57 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

58 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


60 #ifde‡
__USE_GNU


62 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


67 #ifde‡
__USE_XOPEN2K


71 
	mPTHREAD_MUTEX_STALLED
,

72 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

73 
	mPTHREAD_MUTEX_ROBUST
,

74 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


79 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


83 
	mPTHREAD_PRIO_NONE
,

84 
	mPTHREAD_PRIO_INHERIT
,

85 
	mPTHREAD_PRIO_PROTECT


90 
	#PTHREAD_MUTEX_INITIALIZER
 \

91 { { 
	`__PTHREAD_MUTEX_INITIALIZER
 (
PTHREAD_MUTEX_TIMED_NP
Ë} }

	)

92 #ifde‡
__USE_GNU


93 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

94 { { 
	`__PTHREAD_MUTEX_INITIALIZER
 (
PTHREAD_MUTEX_RECURSIVE_NP
Ë} }

	)

95 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

96 { { 
	`__PTHREAD_MUTEX_INITIALIZER
 (
PTHREAD_MUTEX_ERRORCHECK_NP
Ë} }

	)

97 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

98 { { 
	`__PTHREAD_MUTEX_INITIALIZER
 (
PTHREAD_MUTEX_ADAPTIVE_NP
Ë} }

	)

103 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


106 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

107 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

108 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

109 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


114 
	#PTHREAD_RWLOCK_INITIALIZER
 \

115 { { 
	`__PTHREAD_RWLOCK_INITIALIZER
 (
PTHREAD_RWLOCK_DEFAULT_NP
Ë} }

	)

116 #ifde‡
__USE_GNU


117 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

118 { { 
	`__PTHREAD_RWLOCK_INITIALIZER
 (
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
Ë} }

	)

126 
	mPTHREAD_INHERIT_SCHED
,

127 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

128 
	mPTHREAD_EXPLICIT_SCHED


129 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

136 
	mPTHREAD_SCOPE_SYSTEM
,

137 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

138 
	mPTHREAD_SCOPE_PROCESS


139 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

146 
	mPTHREAD_PROCESS_PRIVATE
,

147 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

148 
	mPTHREAD_PROCESS_SHARED


149 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

155 
	#PTHREAD_COND_INITIALIZER
 { { {0}, {0}, {0, 0}, {0, 0}, 0, 0, {0, 0} } }

	)

159 
	s_±hªad_˛ónup_buf„r


161 (*
	m__routöe
) (*);

162 *
	m__¨g
;

163 
	m__ˇn˚…y≥
;

164 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

170 
	mPTHREAD_CANCEL_ENABLE
,

171 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

172 
	mPTHREAD_CANCEL_DISABLE


173 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

177 
	mPTHREAD_CANCEL_DEFERRED
,

178 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

179 
	mPTHREAD_CANCEL_ASYNCHRONOUS


180 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

182 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

186 
	#PTHREAD_ONCE_INIT
 0

	)

189 #ifde‡
__USE_XOPEN2K


193 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

197 
__BEGIN_DECLS


202 
	$±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

203 c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

204 *(*
__°¨t_routöe
) (*),

205 *
__ª°ri˘
 
__¨g
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 3));

211 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

219 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

221 #ifde‡
__USE_GNU


224 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

226 #i‚de‡
__USE_TIME_BITS64


233 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

234 c⁄° 
time•ec
 *
__ab°ime
);

243 
	`±hªad_˛ockjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

244 
˛ockid_t
 
__˛ockid
,

245 c⁄° 
time•ec
 *
__ab°ime
);

247 #ifde‡
__REDIRECT


248 
	`__REDIRECT
 (
±hªad_timedjoö_≈
,

249 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

250 c⁄° 
time•ec
 *
__ab°ime
),

251 
__±hªad_timedjoö_≈64
);

253 
	`__REDIRECT
 (
±hªad_˛ockjoö_≈
,

254 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

255 
˛ockid_t
 
__˛ockid
,

256 c⁄° 
time•ec
 *
__ab°ime
),

257 
__±hªad_˛ockjoö_≈64
);

259 
	#±hªad_timedjoö_≈
 
__±hªad_timedjoö_≈64


	)

260 
	#±hªad_˛ockjoö_≈
 
__±hªad_˛ockjoö_≈64


	)

269 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

273 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

276 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
)

277 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

285 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

288 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

289 
__THROW
 
	`__n⁄nuŒ
 ((1));

292 
	$±hªad_©å_gëdëach°©e
 (c⁄° 
±hªad_©å_t
 *
__©å
,

293 *
__dëach°©e
)

294 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

297 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

298 
__dëach°©e
)

299 
__THROW
 
	`__n⁄nuŒ
 ((1));

303 
	$±hªad_©å_gëgu¨dsize
 (c⁄° 
±hªad_©å_t
 *
__©å
,

304 
size_t
 *
__gu¨dsize
)

305 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

308 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

309 
size_t
 
__gu¨dsize
)

310 
__THROW
 
	`__n⁄nuŒ
 ((1));

314 
	$±hªad_©å_gësched∑øm
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

315 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

316 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

319 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

320 c⁄° 
sched_∑øm
 *
__ª°ri˘


321 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

324 
	$±hªad_©å_gëschedpﬁicy
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


325 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

326 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

329 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

330 
__THROW
 
	`__n⁄nuŒ
 ((1));

333 
	$±hªad_©å_gëöhîôsched
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


334 
__©å
, *
__ª°ri˘
 
__öhîô
)

335 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

338 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

339 
__öhîô
)

340 
__THROW
 
	`__n⁄nuŒ
 ((1));

344 
	$±hªad_©å_gësc›e
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

345 *
__ª°ri˘
 
__sc›e
)

346 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

349 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

350 
__THROW
 
	`__n⁄nuŒ
 ((1));

353 
	$±hªad_©å_gë°ackaddr
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


354 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

355 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

361 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

362 *
__°ackaddr
)

363 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

366 
	$±hªad_©å_gë°acksize
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘


367 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

368 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

373 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

374 
size_t
 
__°acksize
)

375 
__THROW
 
	`__n⁄nuŒ
 ((1));

377 #ifde‡
__USE_XOPEN2K


379 
	$±hªad_©å_gë°ack
 (c⁄° 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

380 **
__ª°ri˘
 
__°ackaddr
,

381 
size_t
 *
__ª°ri˘
 
__°acksize
)

382 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

387 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

388 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

391 #ifde‡
__USE_GNU


394 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

395 
size_t
 
__˝u£tsize
,

396 c⁄° 
˝u_£t_t
 *
__˝u£t
)

397 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

401 
	$±hªad_©å_gëafföôy_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
,

402 
size_t
 
__˝u£tsize
,

403 
˝u_£t_t
 *
__˝u£t
)

404 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

407 
	$±hªad_gë©å_deÁu…_≈
 (
±hªad_©å_t
 *
__©å
)

408 
__THROW
 
	`__n⁄nuŒ
 ((1));

411 
	`±hªad_©å_£tsigmask_≈
 (
±hªad_©å_t
 *
__©å
,

412 c⁄° 
__sig£t_t
 *
sigmask
);

417 
	`±hªad_©å_gësigmask_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
,

418 
__sig£t_t
 *
sigmask
);

422 
	#PTHREAD_ATTR_NO_SIGMASK_NP
 (-1)

	)

426 
	$±hªad_£èâr_deÁu…_≈
 (c⁄° 
±hªad_©å_t
 *
__©å
)

427 
__THROW
 
	`__n⁄nuŒ
 ((1));

432 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

433 
__THROW
 
	`__n⁄nuŒ
 ((2));

441 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

442 c⁄° 
sched_∑øm
 *
__∑øm
)

443 
__THROW
 
	`__n⁄nuŒ
 ((3));

446 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

447 *
__ª°ri˘
 
__pﬁicy
,

448 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

449 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

452 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

453 
__THROW
;

456 #ifde‡
__USE_GNU


458 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

459 
size_t
 
__buÊí
)

460 
__THROW
 
	`__n⁄nuŒ
 ((2));

463 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, c⁄° *
__«me
)

464 
__THROW
 
	`__n⁄nuŒ
 ((2));

468 #ifde‡
__USE_UNIX98


470 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

473 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

476 #ifde‡
__USE_GNU


477 
	$±hªad_yõld
 (Ë
__THROW
;

478 #ifde‡
__REDIRECT_NTH


479 
	`__REDIRECT_NTH
 (
±hªad_yõld
, (), 
sched_yõld
)

480 
	`__©åibuã_dïªˇãd_msg__
 ("\
_yield is deprecated, use sched_yield instead");

483 
	#±hªad_yõld
 
sched_yõld


	)

489 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

490 c⁄° 
˝u_£t_t
 *
__˝u£t
)

491 
__THROW
 
	`__n⁄nuŒ
 ((3));

494 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

495 
˝u_£t_t
 *
__˝u£t
)

496 
__THROW
 
	`__n⁄nuŒ
 ((3));

509 
	$±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

510 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

521 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

525 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

528 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

533 
	`±hªad_ã°ˇn˚l
 ();

538 
	s__ˇn˚l_jmp_buf_èg


540 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

541 
__mask_was_ßved
;

546 
__ˇn˚l_jmp_buf_èg
 
__ˇn˚l_jmp_buf
[1];

547 *
__∑d
[4];

548 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

551 #i‚de‡
__˛ónup_f˘_©åibuã


552 
	#__˛ónup_f˘_©åibuã


	)

557 
	s__±hªad_˛ónup_‰ame


559 (*
__ˇn˚l_routöe
) (*);

560 *
__ˇn˚l_¨g
;

561 
__do_ô
;

562 
__ˇn˚l_ty≥
;

565 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


566 #ifde‡
__˝lu•lus


568 ˛as†
	c__±hªad_˛ónup_˛ass


570 (*
__ˇn˚l_routöe
) (*);

571 *
__ˇn˚l_¨g
;

572 
__do_ô
;

573 
__ˇn˚l_ty≥
;

575 
public
:

576 
	$__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

577 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

578 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

579 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

580 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

581 &
__ˇn˚l_ty≥
); 
	}
}

582 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

592 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

594 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

598 
	#±hªad_˛ónup_p›
(
execuã
) \

599 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

600 } 0)

	)

602 #ifde‡
__USE_GNU


606 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

608 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

609 
__˛‰ame
.
	`__de„r
 ()

	)

614 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

615 
__˛‰ame
.
	`__ª°‹e
 (); \

616 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

617 } 0)

	)

624 
__exã∫_ölöe
 

625 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

627 i‡(
__‰ame
->
__do_ô
)

628 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

629 
	}
}

638 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

640 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

641 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

642 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

643 .
__do_ô
 = 1 };

	)

647 
	#±hªad_˛ónup_p›
(
execuã
) \

648 
__˛‰ame
.
__do_ô
 = (
execuã
); \

649 } 0)

	)

651 #ifde‡
__USE_GNU


655 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

657 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

658 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

659 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

660 .
__do_ô
 = 1 }; \

661 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

662 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

667 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

668 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

669 
__˛‰ame
.
__do_ô
 = (
execuã
); \

670 } 0)

	)

681 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

683 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

684 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

685 *
__ˇn˚l_¨g
 = (
¨g
); \

686 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp_ˇn˚l
 (
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, \

688 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

690 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

691 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

695 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

696 dÿ{

	)

697 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

698 
__˛ónup_f˘_©åibuã
;

702 
	#±hªad_˛ónup_p›
(
execuã
) \

705 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

706 i‡(
execuã
) \

707 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

708 } 0)

	)

709 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

710 
__˛ónup_f˘_©åibuã
;

712 #ifde‡
__USE_GNU


716 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

718 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

719 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

720 *
__ˇn˚l_¨g
 = (
¨g
); \

721 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp_ˇn˚l
 (
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, \

723 i‡(
	`__glibc_u∆ikñy
 (
__nŸ_fú°_ˇŒ
)) \

725 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

726 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

730 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

731 dÿ{

	)

732 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

733 
__˛ónup_f˘_©åibuã
;

738 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

741 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

742 i‡(
execuã
) \

743 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

744 
	}
} 0)

	)

745 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

746 
__˛ónup_f˘_©åibuã
;

750 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

751 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

752 #i‚de‡
SHARED


753 
	`__©åibuã__
 ((
__wók__
))

765 #i‡
	`__GNUC_PREREQ
 (11, 0)

766 
	`__REDIRECT_NTHNL
 (
__sig£tjmp_ˇn˚l
,

767 (
__ˇn˚l_jmp_buf_èg
 
__ív
[1],

768 
__ßvemask
),

769 
__sig£tjmp
Ë
__©åibuã_ªtu∫s_twi˚__
;

771 
	#__sig£tjmp_ˇn˚l
(
ív
, 
ßvemask
) \

772 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *Ë(*Ë(
ív
), (
ßvemask
))

	)

773 
	$__sig£tjmp
 (
__jmp_buf_èg
 
__ív
[1],

774 
__ßvemask
Ë
__THROWNL
;

781 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

782 c⁄° 
±hªad_muãx©å_t
 *
__muãx©å
)

783 
__THROW
 
	`__n⁄nuŒ
 ((1));

786 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

787 
__THROW
 
	`__n⁄nuŒ
 ((1));

790 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

791 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

794 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

795 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

797 #ifde‡
__USE_XOPEN2K


799 #i‚de‡
__USE_TIME_BITS64


800 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

801 c⁄° 
time•ec
 *
__ª°ri˘


802 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

804 #ifde‡
__REDIRECT_NTHNL


805 
	`__REDIRECT_NTHNL
 (
±hªad_muãx_timedlock
,

806 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

807 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
),

808 
__±hªad_muãx_timedlock64
Ë
	`__n⁄nuŒ
 ((1, 2));

810 
	#±hªad_muãx_timedlock
 
__±hªad_muãx_timedlock64


	)

815 #ifde‡
__USE_GNU


816 #i‚de‡
__USE_TIME_BITS64


817 
	$±hªad_muãx_˛ocklock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

818 
˛ockid_t
 
__˛ockid
,

819 c⁄° 
time•ec
 *
__ª°ri˘


820 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 3));

822 #ifde‡
__REDIRECT_NTHNL


823 
	`__REDIRECT_NTHNL
 (
±hªad_muãx_˛ocklock
,

824 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

825 
˛ockid_t
 
__˛ockid
,

826 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
),

827 
__±hªad_muãx_˛ocklock64
Ë
	`__n⁄nuŒ
 ((1, 3));

829 
	#±hªad_muãx_˛ocklock
 
__±hªad_muãx_˛ocklock64


	)

835 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

836 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

840 
	$±hªad_muãx_gë¥io˚ûög
 (c⁄° 
±hªad_muãx_t
 *

841 
__ª°ri˘
 
__muãx
,

842 *
__ª°ri˘
 
__¥io˚ûög
)

843 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

847 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

848 
__¥io˚ûög
,

849 *
__ª°ri˘
 
__ﬁd_˚ûög
)

850 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

853 #ifde‡
__USE_XOPEN2K8


855 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

856 
__THROW
 
	`__n⁄nuŒ
 ((1));

857 #ifde‡
__USE_GNU


858 #ifde‡
__REDIRECT_NTH


859 
	`__REDIRECT_NTH
 (
±hªad_muãx_c⁄si°ít_≈
, (
±hªad_muãx_t
 *),

860 
±hªad_muãx_c⁄si°ít
Ë
	`__n⁄nuŒ
 ((1))

861 
	`__©åibuã_dïªˇãd_msg__
 ("\
_mutex_consistent_np is deprecated, useÖthread_mutex_consistent");

864 
	#±hªad_muãx_c⁄si°ít_≈
 
±hªad_muãx_c⁄si°ít


	)

874 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

875 
__THROW
 
	`__n⁄nuŒ
 ((1));

878 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

879 
__THROW
 
	`__n⁄nuŒ
 ((1));

882 
	$±hªad_muãx©å_gëpsh¨ed
 (c⁄° 
±hªad_muãx©å_t
 *

883 
__ª°ri˘
 
__©å
,

884 *
__ª°ri˘
 
__psh¨ed
)

885 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

888 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

889 
__psh¨ed
)

890 
__THROW
 
	`__n⁄nuŒ
 ((1));

892 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


894 
	$±hªad_muãx©å_gëty≥
 (c⁄° 
±hªad_muãx©å_t
 *
__ª°ri˘


895 
__©å
, *
__ª°ri˘
 
__köd
)

896 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

901 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

902 
__THROW
 
	`__n⁄nuŒ
 ((1));

906 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (c⁄° 
±hªad_muãx©å_t
 *

907 
__ª°ri˘
 
__©å
,

908 *
__ª°ri˘
 
__¥Ÿocﬁ
)

909 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

913 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

914 
__¥Ÿocﬁ
)

915 
__THROW
 
	`__n⁄nuŒ
 ((1));

918 
	$±hªad_muãx©å_gë¥io˚ûög
 (c⁄° 
±hªad_muãx©å_t
 *

919 
__ª°ri˘
 
__©å
,

920 *
__ª°ri˘
 
__¥io˚ûög
)

921 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

924 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

925 
__¥io˚ûög
)

926 
__THROW
 
	`__n⁄nuŒ
 ((1));

928 #ifde‡
__USE_XOPEN2K


930 
	$±hªad_muãx©å_gërobu°
 (c⁄° 
±hªad_muãx©å_t
 *
__©å
,

931 *
__robu°√ss
)

932 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

933 #ifde‡
__USE_GNU


934 #ifde‡
__REDIRECT_NTH


935 
	`__REDIRECT_NTH
 (
±hªad_muãx©å_gërobu°_≈
,

936 (
±hªad_muãx©å_t
 *, *),

937 
±hªad_muãx©å_gërobu°
Ë
	`__n⁄nuŒ
 ((1))

938 
	`__©åibuã_dïªˇãd_msg__
 ("\
_mutexattr_getrobust_np is deprecated, useÖthread_mutexattr_getrobust");

941 
	#±hªad_muãx©å_gërobu°_≈
 
±hªad_muãx©å_gërobu°


	)

946 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

947 
__robu°√ss
)

948 
__THROW
 
	`__n⁄nuŒ
 ((1));

949 #ifde‡
__USE_GNU


950 #ifde‡
__REDIRECT_NTH


951 
	`__REDIRECT_NTH
 (
±hªad_muãx©å_£åobu°_≈
,

952 (
±hªad_muãx©å_t
 *, ),

953 
±hªad_muãx©å_£åobu°
Ë
	`__n⁄nuŒ
 ((1))

954 
	`__©åibuã_dïªˇãd_msg__
 ("\
_mutexattr_setrobust_np is deprecated, useÖthread_mutexattr_setrobust");

957 
	#±hªad_muãx©å_£åobu°_≈
 
±hªad_muãx©å_£åobu°


	)

962 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


967 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

968 c⁄° 
±hªad_rwlock©å_t
 *
__ª°ri˘


969 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

972 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

973 
__THROW
 
	`__n⁄nuŒ
 ((1));

976 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

977 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

980 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

981 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

983 #ifde‡
__USE_XOPEN2K


985 #i‚de‡
__USE_TIME_BITS64


986 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

987 c⁄° 
time•ec
 *
__ª°ri˘


988 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

990 #ifde‡
__REDIRECT_NTHNL


991 
	`__REDIRECT_NTHNL
 (
±hªad_rwlock_timedrdlock
,

992 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

993 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
),

994 
__±hªad_rwlock_timedrdlock64
)

995 
	`__n⁄nuŒ
 ((1, 2));

997 
	#±hªad_rwlock_timedrdlock
 
__±hªad_rwlock_timedrdlock64


	)

1002 #ifde‡
__USE_GNU


1003 #i‚de‡
__USE_TIME_BITS64


1004 
	$±hªad_rwlock_˛ockrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

1005 
˛ockid_t
 
__˛ockid
,

1006 c⁄° 
time•ec
 *
__ª°ri˘


1007 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 3));

1009 #ifde‡
__REDIRECT_NTHNL


1010 
	`__REDIRECT_NTHNL
 (
±hªad_rwlock_˛ockrdlock
,

1011 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

1012 
˛ockid_t
 
__˛ockid
,

1013 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
),

1014 
__±hªad_rwlock_˛ockrdlock64
)

1015 
	`__n⁄nuŒ
 ((1, 3));

1017 
	#±hªad_rwlock_˛ockrdlock
 
__±hªad_rwlock_˛ockrdlock64


	)

1023 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

1024 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1027 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

1028 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1030 #ifde‡
__USE_XOPEN2K


1032 #i‚de‡
__USE_TIME_BITS64


1033 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

1034 c⁄° 
time•ec
 *
__ª°ri˘


1035 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

1037 #ifde‡
__REDIRECT_NTHNL


1038 
	`__REDIRECT_NTHNL
 (
±hªad_rwlock_timedwæock
,

1039 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

1040 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
),

1041 
__±hªad_rwlock_timedwæock64
)

1042 
	`__n⁄nuŒ
 ((1, 2));

1044 
	#±hªad_rwlock_timedwæock
 
__±hªad_rwlock_timedwæock64


	)

1049 #ifde‡
__USE_GNU


1050 #i‚de‡
__USE_TIME_BITS64


1051 
	$±hªad_rwlock_˛ockwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

1052 
˛ockid_t
 
__˛ockid
,

1053 c⁄° 
time•ec
 *
__ª°ri˘


1054 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 3));

1057 #ifde‡
__REDIRECT_NTHNL


1058 
	`__REDIRECT_NTHNL
 (
±hªad_rwlock_˛ockwæock
,

1059 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

1060 
˛ockid_t
 
__˛ockid
,

1061 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
),

1062 
__±hªad_rwlock_˛ockwæock64
)

1063 
	`__n⁄nuŒ
 ((1, 3));

1065 
	#±hªad_rwlock_˛ockwæock
 
__±hªad_rwlock_˛ockwæock64


	)

1071 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

1072 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1078 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

1079 
__THROW
 
	`__n⁄nuŒ
 ((1));

1082 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

1083 
__THROW
 
	`__n⁄nuŒ
 ((1));

1086 
	$±hªad_rwlock©å_gëpsh¨ed
 (c⁄° 
±hªad_rwlock©å_t
 *

1087 
__ª°ri˘
 
__©å
,

1088 *
__ª°ri˘
 
__psh¨ed
)

1089 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1092 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

1093 
__psh¨ed
)

1094 
__THROW
 
	`__n⁄nuŒ
 ((1));

1097 
	$±hªad_rwlock©å_gëköd_≈
 (c⁄° 
±hªad_rwlock©å_t
 *

1098 
__ª°ri˘
 
__©å
,

1099 *
__ª°ri˘
 
__¥ef
)

1100 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1103 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

1104 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1112 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1113 c⁄° 
±hªad_c⁄d©å_t
 *
__ª°ri˘
 
__c⁄d_©å
)

1114 
__THROW
 
	`__n⁄nuŒ
 ((1));

1117 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

1118 
__THROW
 
	`__n⁄nuŒ
 ((1));

1121 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

1122 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1125 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

1126 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1133 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1134 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

1135 
	`__n⁄nuŒ
 ((1, 2));

1144 #i‚de‡
__USE_TIME_BITS64


1145 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1146 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

1147 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
)

1148 
	`__n⁄nuŒ
 ((1, 2, 3));

1150 #ifde‡
__REDIRECT


1151 
	`__REDIRECT
 (
±hªad_c⁄d_timedwaô
,

1152 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1153 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

1154 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
),

1155 
__±hªad_c⁄d_timedwaô64
)

1156 
	`__n⁄nuŒ
 ((1, 2, 3));

1158 
	#±hªad_c⁄d_timedwaô
 
__±hªad_c⁄d_timedwaô64


	)

1162 #ifde‡
__USE_GNU


1170 #i‚de‡
__USE_TIME_BITS64


1171 
	$±hªad_c⁄d_˛ockwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1172 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

1173 
__˛ockid_t
 
__˛ock_id
,

1174 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
)

1175 
	`__n⁄nuŒ
 ((1, 2, 4));

1177 #ifde‡
__REDIRECT


1178 
	`__REDIRECT
 (
±hªad_c⁄d_˛ockwaô
,

1179 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

1180 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

1181 
__˛ockid_t
 
__˛ock_id
,

1182 c⁄° 
time•ec
 *
__ª°ri˘
 
__ab°ime
),

1183 
__±hªad_c⁄d_˛ockwaô64
)

1184 
	`__n⁄nuŒ
 ((1, 2, 4));

1186 
	#±hªad_c⁄d_˛ockwaô
 
__±hªad_c⁄d_˛ockwaô64


	)

1194 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

1195 
__THROW
 
	`__n⁄nuŒ
 ((1));

1198 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

1199 
__THROW
 
	`__n⁄nuŒ
 ((1));

1202 
	$±hªad_c⁄d©å_gëpsh¨ed
 (c⁄° 
±hªad_c⁄d©å_t
 *

1203 
__ª°ri˘
 
__©å
,

1204 *
__ª°ri˘
 
__psh¨ed
)

1205 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1208 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1209 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1211 #ifde‡
__USE_XOPEN2K


1213 
	$±hªad_c⁄d©å_gë˛ock
 (c⁄° 
±hªad_c⁄d©å_t
 *

1214 
__ª°ri˘
 
__©å
,

1215 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1216 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1219 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1220 
__˛ockid_t
 
__˛ock_id
)

1221 
__THROW
 
	`__n⁄nuŒ
 ((1));

1225 #ifde‡
__USE_XOPEN2K


1230 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1231 
__THROW
 
	`__n⁄nuŒ
 ((1));

1234 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1235 
__THROW
 
	`__n⁄nuŒ
 ((1));

1238 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1239 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1242 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1243 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1246 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1247 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1254 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1255 c⁄° 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1256 
__©å
, 
__cou¡
)

1257 
__THROW
 
	`__n⁄nuŒ
 ((1));

1260 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1261 
__THROW
 
	`__n⁄nuŒ
 ((1));

1264 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1265 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1269 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1270 
__THROW
 
	`__n⁄nuŒ
 ((1));

1273 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1274 
__THROW
 
	`__n⁄nuŒ
 ((1));

1277 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (c⁄° 
±hªad_b¨rõøâr_t
 *

1278 
__ª°ri˘
 
__©å
,

1279 *
__ª°ri˘
 
__psh¨ed
)

1280 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1283 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1284 
__psh¨ed
)

1285 
__THROW
 
	`__n⁄nuŒ
 ((1));

1297 
	$±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1298 (*
__de°r_fun˘i⁄
) (*))

1299 
__THROW
 
	`__n⁄nuŒ
 ((1));

1302 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1305 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1308 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1309 c⁄° *
__poöãr
)

1310 
__THROW
 
	`__©å_ac˚ss_n⁄e
 (2);

1313 #ifde‡
__USE_XOPEN2K


1315 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1316 
__˛ockid_t
 *
__˛ock_id
)

1317 
__THROW
 
	`__n⁄nuŒ
 ((2));

1332 
	$±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1333 (*
__∑ª¡
) (),

1334 (*
__chûd
Ë()Ë
__THROW
;

1337 #ifde‡
__USE_EXTERN_INLINES


1339 
__exã∫_ölöe
 

1340 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1342  
__thªad1
 =
__thªad2
;

1343 
	}
}

1346 
	g__END_DECLS


	@/usr/include/signal.h

22 #i‚def 
_SIGNAL_H


23 
	#_SIGNAL_H


	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

30 
	~<bôs/signum-gíîic.h
>

32 
	~<bôs/ty≥s/sig_©omic_t.h
>

34 #i‡
deföed
 
__USE_POSIX


35 
	~<bôs/ty≥s/sig£t_t.h
>

38 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


39 #i‚de‡
__pid_t_deföed


40 
__pid_t
 
	tpid_t
;

41 
	#__pid_t_deföed


	)

43 #ifde‡
__USE_XOPEN


45 #i‚de‡
__uid_t_deföed


46 
__uid_t
 
	tuid_t
;

47 
	#__uid_t_deföed


	)

51 #ifde‡
__USE_POSIX199309


53 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

56 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_XOPEN_EXTENDED


57 
	~<bôs/ty≥s/sigöfo_t.h
>

58 
	~<bôs/sigöfo-c⁄°s.h
>

61 #ifde‡
__USE_MISC


62 
	~<bôs/ty≥s/sigvÆ_t.h
>

65 #ifde‡
__USE_POSIX199309


66 
	~<bôs/ty≥s/sigevít_t.h
>

67 
	~<bôs/sigevít-c⁄°s.h
>

72 (*
	t__sigh™dÀr_t
) ();

77 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

78 
__THROW
;

79 #ifde‡
__USE_GNU


80 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

81 
__THROW
;

87 #ifde‡
__USE_MISC


88 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

89 
__THROW
;

92 #ifde‡
__REDIRECT_NTH


93 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

94 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

95 
__sysv_sig«l
);

97 
	#sig«l
 
__sysv_sig«l


	)

101 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8


104 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

105 
__THROW
;

111 #ifde‡
__USE_POSIX


112 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

115 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


119 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

123 
	$øi£
 (
__sig
Ë
__THROW
;

125 #ifde‡
__USE_MISC


127 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

128 
__THROW
;

129 
	$gsig«l
 (
__sig
Ë
__THROW
;

132 #ifde‡
__USE_XOPEN2K8


134 
	`psig«l
 (
__sig
, c⁄° *
__s
);

137 
	`psigöfo
 (c⁄° 
sigöfo_t
 *
__pöfo
, c⁄° *
__s
);

149 #ifde‡
__USE_XOPEN_EXTENDED


150 #ifde‡
__GNUC__


151 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause")

152 
	`__©åibuã_dïªˇãd_msg__
 ("UseÅhe sigsuspend function instead");

154 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

156 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

161 #ifde‡
__USE_MISC


168 
	#sigmask
(
sig
) \

169 
	`__glibc_ma¸o_w¨nög
 ("sigmask is deprecated") \

170 (()(1u << ((
sig
Ë- 1)))

	)

173 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

176 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

179 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

183 #ifde‡
__USE_MISC


184 
	#NSIG
 
_NSIG


	)

187 #ifde‡
__USE_GNU


188 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

192 #ifde‡
__USE_MISC


193 
__sigh™dÀr_t
 
	tsig_t
;

196 #ifde‡
__USE_POSIX


199 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

202 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

205 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

208 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

211 
	$sigismembî
 (c⁄° 
sig£t_t
 *
__£t
, 
__signo
)

212 
__THROW
 
	`__n⁄nuŒ
 ((1));

214 #ifde‡
__USE_GNU


216 
	$sigi£m±y£t
 (c⁄° 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

219 
	$sig™d£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

220 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

223 
	$sig‹£t
 (
sig£t_t
 *
__£t
, c⁄° sig£t_à*
__À·
,

224 c⁄° 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

229 
	~<bôs/siga˘i⁄.h
>

232 
	$sig¥ocmask
 (
__how
, c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

233 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

240 
	$sigsu•íd
 (c⁄° 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

243 
	$siga˘i⁄
 (
__sig
, c⁄° 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

244 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

247 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

250 #ifde‡
__USE_POSIX199506


255 
	$sigwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

256 
	`__n⁄nuŒ
 ((1, 2));

259 #ifde‡
__USE_POSIX199309


264 
	$sigwaôöfo
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

265 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

272 #i‚de‡
__USE_TIME_BITS64


273 
	$sigtimedwaô
 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

274 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

275 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
)

276 
	`__n⁄nuŒ
 ((1));

278 #ifde‡
__REDIRECT


279 
	`__REDIRECT
 (
sigtimedwaô
,

280 (c⁄° 
sig£t_t
 *
__ª°ri˘
 
__£t
,

281 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

282 c⁄° 
time•ec
 *
__ª°ri˘
 
__timeout
),

283 
__sigtimedwaô64
)

284 
	`__n⁄nuŒ
 ((1));

286 
	#sigtimedwaô
 
__sigtimedwaô64


	)

292 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, c⁄° 
sigvÆ
 
__vÆ
)

293 
__THROW
;

298 #ifde‡
__USE_MISC


301 
	~<bôs/sigc⁄ãxt.h
>

304 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

309 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


310 
	#__√ed_size_t


	)

311 
	~<°ddef.h
>

313 
	~<bôs/ty≥s/°ack_t.h
>

314 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


316 
	~<sys/uc⁄ãxt.h
>

320 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_MISC


324 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW


325 
	`__©åibuã_dïªˇãd_msg__
 ("Use sigaction with SA_RESTART instead");

327 
	~<bôs/sig°ack.h
>

328 
	~<bôs/sig°ksz.h
>

329 
	~<bôs/ss_Êags.h
>

333 
	$sigÆt°ack
 (c⁄° 
°ack_t
 *
__ª°ri˘
 
__ss
,

334 
°ack_t
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

337 #i‡((
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

338 || 
deföed
 
__USE_MISC
)

339 
	~<bôs/ty≥s/°ru˘_sig°ack.h
>

342 #i‡((
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

343 || 
deföed
 
__USE_MISC
)

347 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

348 
__THROW
 
__©åibuã_dïªˇãd__
;

351 #ifde‡
__USE_XOPEN_EXTENDED


355 
	$sighﬁd
 (
__sig
Ë
__THROW


356 
	`__©åibuã_dïªˇãd_msg__
 ("UseÅhe sigprocmask function instead");

359 
	$sigªl£
 (
__sig
Ë
__THROW


360 
	`__©åibuã_dïªˇãd_msg__
 ("UseÅhe sigprocmask function instead");

363 
	$sigign‹e
 (
__sig
Ë
__THROW


364 
	`__©åibuã_dïªˇãd_msg__
 ("UseÅhe signal function instead");

367 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW


368 
__©åibuã_dïªˇãd_msg__


372 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


375 
	~<bôs/±hªadty≥s.h
>

376 
	~<bôs/sigthªad.h
>

383 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

385 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

387 
	#SIGRTMIN
 (
	`__libc_cuºít_sigπmö
 ())

	)

388 
	#SIGRTMAX
 (
	`__libc_cuºít_sigπmax
 ())

	)

391 
	~<bôs/sig«l_ext.h
>

393 
__END_DECLS


	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


24 
	#_STDIO_H
 1

	)

26 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

27 
	~<bôs/libc-hódî-°¨t.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	#__√ed___va_li°


	)

36 
	~<°d¨g.h
>

38 
	~<bôs/ty≥s.h
>

39 
	~<bôs/ty≥s/__Âos_t.h
>

40 
	~<bôs/ty≥s/__Âos64_t.h
>

41 
	~<bôs/ty≥s/__FILE.h
>

42 
	~<bôs/ty≥s/FILE.h
>

43 
	~<bôs/ty≥s/°ru˘_FILE.h
>

45 #ifde‡
__USE_GNU


46 
	~<bôs/ty≥s/cookõ_io_fun˘i⁄s_t.h
>

49 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


50 #ifde‡
__GNUC__


51 #i‚de‡
_VA_LIST_DEFINED


52 
__gnuc_va_li°
 
	tva_li°
;

53 
	#_VA_LIST_DEFINED


	)

56 
	~<°d¨g.h
>

60 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


61 #i‚de‡
__off_t_deföed


62 #i‚de‡
__USE_FILE_OFFSET64


63 
__off_t
 
	toff_t
;

65 
__off64_t
 
	toff_t
;

67 
	#__off_t_deföed


	)

69 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


70 
__off64_t
 
	toff64_t
;

71 
	#__off64_t_deföed


	)

75 #ifde‡
__USE_XOPEN2K8


76 #i‚de‡
__ssize_t_deföed


77 
__ssize_t
 
	tssize_t
;

78 
	#__ssize_t_deföed


	)

83 #i‚de‡
__USE_FILE_OFFSET64


84 
__Âos_t
 
	tÂos_t
;

86 
__Âos64_t
 
	tÂos_t
;

88 #ifde‡
__USE_LARGEFILE64


89 
__Âos64_t
 
	tÂos64_t
;

93 
	#_IOFBF
 0

	)

94 
	#_IOLBF
 1

	)

95 
	#_IONBF
 2

	)

99 
	#BUFSIZ
 8192

	)

104 
	#EOF
 (-1)

	)

109 
	#SEEK_SET
 0

	)

110 
	#SEEK_CUR
 1

	)

111 
	#SEEK_END
 2

	)

112 #ifde‡
__USE_GNU


113 
	#SEEK_DATA
 3

	)

114 
	#SEEK_HOLE
 4

	)

118 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


120 
	#P_tmpdú
 "/tmp"

	)

133 
	~<bôs/°dio_lim.h
>

136 #i‡
__GLIBC_USE
 (
ISOC2X
)

138 
	#_PRINTF_NAN_LEN_MAX
 4

	)

143 
FILE
 *
°dö
;

144 
FILE
 *
°dout
;

145 
FILE
 *
°dîr
;

147 
	#°dö
 
°dö


	)

148 
	#°dout
 
°dout


	)

149 
	#°dîr
 
°dîr


	)

152 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

154 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

156 #ifde‡
__USE_ATFILE


158 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

159 c⁄° *
__√w
Ë
__THROW
;

162 #ifde‡
__USE_GNU


164 
	#RENAME_NOREPLACE
 (1 << 0)

	)

165 
	#RENAME_EXCHANGE
 (1 << 1)

	)

166 
	#RENAME_WHITEOUT
 (1 << 2)

	)

170 
	$ª«mót2
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

171 c⁄° *
__√w
, 
__Êags
Ë
__THROW
;

178 
	`f˛o£
 (
FILE
 *
__°ªam
);

180 #unde‡
__©å_dóŒoc_f˛o£


181 
	#__©å_dóŒoc_f˛o£
 
	`__©å_dóŒoc
 (
f˛o£
, 1)

	)

187 #i‚de‡
__USE_FILE_OFFSET64


188 
FILE
 *
	$tmpfûe
 ()

189 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

191 #ifde‡
__REDIRECT


192 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
)

193 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

195 
	#tmpfûe
 
tmpfûe64


	)

199 #ifde‡
__USE_LARGEFILE64


200 
FILE
 *
	$tmpfûe64
 ()

201 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

205 *
	$tm≤am
 ([
L_tm≤am
]Ë
__THROW
 
__wur
;

207 #ifde‡
__USE_MISC


210 *
	$tm≤am_r
 (
__s
[
L_tm≤am
]Ë
__THROW
 
__wur
;

214 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


222 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

223 
__THROW
 
__©åibuã_mÆloc__
 
__wur
 
__©å_dóŒoc_‰ì
;

230 
	`fÊush
 (
FILE
 *
__°ªam
);

232 #ifde‡
__USE_MISC


239 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

242 #ifde‡
__USE_GNU


249 
	`f˛o£Æl
 ();

253 #i‚de‡
__USE_FILE_OFFSET64


258 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

259 c⁄° *
__ª°ri˘
 
__modes
)

260 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

265 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

266 c⁄° *
__ª°ri˘
 
__modes
,

267 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

269 #ifde‡
__REDIRECT


270 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

271 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

272 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

273 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

274 c⁄° *
__ª°ri˘
 
__modes
,

275 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

276 
__wur
;

278 
	#f›í
 
f›í64


	)

279 
	#‰e›í
 
‰e›í64


	)

282 #ifde‡
__USE_LARGEFILE64


283 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

284 c⁄° *
__ª°ri˘
 
__modes
)

285 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

286 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

287 c⁄° *
__ª°ri˘
 
__modes
,

288 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

291 #ifdef 
__USE_POSIX


293 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW


294 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

297 #ifdef 
__USE_GNU


300 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

301 c⁄° *
__ª°ri˘
 
__modes
,

302 
cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW


303 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

306 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

308 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

309 
__THROW
 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

314 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW


315 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

317 #ifde‡
_WCHAR_H


321 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW


322 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
;

328 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

332 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

333 
__modes
, 
size_t
 
__n
Ë
__THROW
;

335 #ifdef 
__USE_MISC


338 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

339 
size_t
 
__size
Ë
__THROW
;

342 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

350 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

351 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

356 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

358 
	$•rötf
 (*
__ª°ri˘
 
__s
,

359 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

365 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

366 
__gnuc_va_li°
 
__¨g
);

371 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
);

373 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

374 
__gnuc_va_li°
 
__¨g
Ë
__THROWNL
;

376 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


378 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

379 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

380 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

382 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

383 c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
)

384 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

387 #i‡
	`__GLIBC_USE
 (
LIB_EXT2
)

390 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

391 
__gnuc_va_li°
 
__¨g
)

392 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

393 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

394 c⁄° *
__ª°ri˘
 
__fmt
, ...)

395 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

396 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

397 c⁄° *
__ª°ri˘
 
__fmt
, ...)

398 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

401 #ifde‡
__USE_XOPEN2K8


403 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

404 
__gnuc_va_li°
 
__¨g
)

405 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

406 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

407 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

415 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

416 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

421 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

423 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

424 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

430 
	~<bôs/Êﬂä.h
>

431 #i‡!
	`__GLIBC_USE
 (
DEPRECATED_SCANF
Ë&& !
deföed
 
__LDBL_COMPAT
 \

432 && 
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 0

433 #ifde‡
__REDIRECT


434 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

435 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

436 
__isoc99_fsˇnf
Ë
__wur
;

437 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

438 
__isoc99_sˇnf
Ë
__wur
;

439 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

440 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

441 
__isoc99_ssˇnf
);

443 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

444 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

445 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

446 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

447 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

448 
	#fsˇnf
 
__isoc99_fsˇnf


	)

449 
	#sˇnf
 
__isoc99_sˇnf


	)

450 
	#ssˇnf
 
__isoc99_ssˇnf


	)

454 #ifdef 
__USE_ISOC99


459 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

460 
__gnuc_va_li°
 
__¨g
)

461 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

467 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
)

468 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

471 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

472 c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
)

473 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

476 #i‡!
	`__GLIBC_USE
 (
DEPRECATED_SCANF
)

477 #i‡
deföed
 
__REDIRECT
 && !deföed 
__LDBL_COMPAT
 \

478 && 
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 0

479 
	`__REDIRECT
 (
vfsˇnf
,

480 (
FILE
 *
__ª°ri˘
 
__s
,

481 c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
),

482 
__isoc99_vfsˇnf
)

483 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

484 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

485 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

486 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

487 
	`__REDIRECT_NTH
 (
vssˇnf
,

488 (c⁄° *
__ª°ri˘
 
__s
,

489 c⁄° *
__ª°ri˘
 
__f‹m©
,

490 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

491 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

492 #ñi‡!
deföed
 
__REDIRECT


493 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

494 c⁄° *
__ª°ri˘
 
__f‹m©
,

495 
__gnuc_va_li°
 
__¨g
Ë
__wur
;

496 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

497 
__gnuc_va_li°
 
__¨g
Ë
__wur
;

498 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

499 c⁄° *
__ª°ri˘
 
__f‹m©
,

500 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

501 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

502 
	#vsˇnf
 
__isoc99_vsˇnf


	)

503 
	#vssˇnf
 
__isoc99_vssˇnf


	)

513 
	`fgëc
 (
FILE
 *
__°ªam
);

514 
	`gëc
 (
FILE
 *
__°ªam
);

520 
	`gëch¨
 ();

522 #ifde‡
__USE_POSIX199506


527 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

528 
	`gëch¨_u∆ocked
 ();

531 #ifde‡
__USE_MISC


538 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

549 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

550 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

556 
	`putch¨
 (
__c
);

558 #ifde‡
__USE_MISC


565 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

568 #ifde‡
__USE_POSIX199506


573 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

574 
	`putch¨_u∆ocked
 (
__c
);

578 #i‡
deföed
 
__USE_MISC
 \

579 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

581 
	`gëw
 (
FILE
 *
__°ªam
);

584 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

592 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

593 
__wur
 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 1, 2);

595 #i‡
	`__GLIBC_USE
 (
DEPRECATED_GETS
)

605 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

608 #ifde‡
__USE_GNU


615 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

616 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur


617 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 1, 2);

621 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

632 
__ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

633 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

634 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

635 
__ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

636 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

637 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

645 
__ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

646 
size_t
 *
__ª°ri˘
 
__n
,

647 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

655 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

661 
	`puts
 (c⁄° *
__s
);

668 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

675 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

676 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

681 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

682 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

684 #ifde‡
__USE_GNU


691 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

692 
FILE
 *
__ª°ri˘
 
__°ªam
);

695 #ifde‡
__USE_MISC


702 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

703 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

704 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

705 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

713 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

718 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

723 
	`ªwöd
 (
FILE
 *
__°ªam
);

730 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


731 #i‚de‡
__USE_FILE_OFFSET64


736 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

741 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

743 #ifde‡
__REDIRECT


744 
	`__REDIRECT
 (
f£eko
,

745 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

746 
f£eko64
);

747 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

749 
	#f£eko
 
f£eko64


	)

750 
	#·ñlo
 
·ñlo64


	)

755 #i‚de‡
__USE_FILE_OFFSET64


760 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

765 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

767 #ifde‡
__REDIRECT


768 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

769 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

770 
	`__REDIRECT
 (
f£ços
,

771 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

773 
	#fgëpos
 
fgëpos64


	)

774 
	#f£ços
 
f£ços64


	)

778 #ifde‡
__USE_LARGEFILE64


779 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

780 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

781 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

782 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

786 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

788 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

790 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

792 #ifde‡
__USE_MISC


794 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

795 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

796 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

804 
	`≥º‹
 (c⁄° *
__s
);

807 #ifdef 
__USE_POSIX


809 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

812 #ifde‡
__USE_MISC


814 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

818 #ifde‡
__USE_POSIX2


823 
	`p˛o£
 (
FILE
 *
__°ªam
);

829 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
)

830 
__©åibuã_mÆloc__
 
	$__©å_dóŒoc
 (
p˛o£
, 1Ë
__wur
;

835 #ifdef 
__USE_POSIX


837 *
	$˘îmid
 (*
__s
Ë
__THROW


838 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1));

842 #i‡(
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
Ë|| deföed 
__USE_GNU


844 *
	$cu£rid
 (*
__s
)

845 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1));

849 #ifdef 
__USE_GNU


850 
ob°ack
;

853 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

854 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

855 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

856 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

857 c⁄° *
__ª°ri˘
 
__f‹m©
,

858 
__gnuc_va_li°
 
__¨gs
)

859 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

863 #ifde‡
__USE_POSIX199506


867 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

871 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

874 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

877 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


880 
	~<bôs/gë›t_posix.h
>

885 
	`__uÊow
 (
FILE
 *);

886 
	`__ovîÊow
 (
FILE
 *, );

890 #ifde‡
__USE_EXTERN_INLINES


891 
	~<bôs/°dio.h
>

893 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


894 
	~<bôs/°dio2.h
>

897 
	~<bôs/Êﬂä.h
>

898 #i‡
deföed
 
__LDBL_COMPAT
 || 
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 1

899 
	~<bôs/°dio-ldbl.h
>

902 
__END_DECLS


	@/usr/include/stdlib.h

23 #i‚def 
_STDLIB_H


25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

34 
	g__BEGIN_DECLS


36 
	#_STDLIB_H
 1

	)

38 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


40 
	~<bôs/waôÊags.h
>

41 
	~<bôs/waô°©us.h
>

44 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (°©us)

	)

45 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (°©us)

	)

46 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (°©us)

	)

47 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (°©us)

	)

48 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (°©us)

	)

49 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (°©us)

	)

50 #ifde‡
__WIFCONTINUED


51 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (°©us)

	)

56 
	~<bôs/Êﬂä.h
>

61 
	mquŸ
;

62 
	mªm
;

63 } 
	tdiv_t
;

66 #i‚de‡
__ldiv_t_deföed


69 
	mquŸ
;

70 
	mªm
;

71 } 
	tldiv_t
;

72 
	#__ldiv_t_deföed
 1

	)

75 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


77 
__exãnsi⁄__
 struct

79 
	mquŸ
;

80 
	mªm
;

81 } 
	tŒdiv_t
;

82 
	#__Œdiv_t_deföed
 1

	)

87 
	#RAND_MAX
 2147483647

	)

92 
	#EXIT_FAILURE
 1

	)

93 
	#EXIT_SUCCESS
 0

	)

97 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

98 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

102 
	$©of
 (c⁄° *
__≈å
)

103 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

105 
	$©oi
 (c⁄° *
__≈å
)

106 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

108 
	$©ﬁ
 (c⁄° *
__≈å
)

109 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

111 #ifde‡
__USE_ISOC99


113 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

114 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

118 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

119 **
__ª°ri˘
 
__íd±r
)

120 
__THROW
 
	`__n⁄nuŒ
 ((1));

122 #ifdef 
__USE_ISOC99


124 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

125 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

127 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

128 **
__ª°ri˘
 
__íd±r
)

129 
__THROW
 
	`__n⁄nuŒ
 ((1));

134 #i‡
__HAVE_FLOAT16
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

135 
_Flﬂt16
 
	$°πof16
 (c⁄° *
__ª°ri˘
 
__≈å
,

136 **
__ª°ri˘
 
__íd±r
)

137 
__THROW
 
	`__n⁄nuŒ
 ((1));

140 #i‡
__HAVE_FLOAT32
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

141 
_Flﬂt32
 
	$°πof32
 (c⁄° *
__ª°ri˘
 
__≈å
,

142 **
__ª°ri˘
 
__íd±r
)

143 
__THROW
 
	`__n⁄nuŒ
 ((1));

146 #i‡
__HAVE_FLOAT64
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

147 
_Flﬂt64
 
	$°πof64
 (c⁄° *
__ª°ri˘
 
__≈å
,

148 **
__ª°ri˘
 
__íd±r
)

149 
__THROW
 
	`__n⁄nuŒ
 ((1));

152 #i‡
__HAVE_FLOAT128
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

153 
_Flﬂt128
 
	$°πof128
 (c⁄° *
__ª°ri˘
 
__≈å
,

154 **
__ª°ri˘
 
__íd±r
)

155 
__THROW
 
	`__n⁄nuŒ
 ((1));

158 #i‡
__HAVE_FLOAT32X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

159 
_Flﬂt32x
 
	$°πof32x
 (c⁄° *
__ª°ri˘
 
__≈å
,

160 **
__ª°ri˘
 
__íd±r
)

161 
__THROW
 
	`__n⁄nuŒ
 ((1));

164 #i‡
__HAVE_FLOAT64X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

165 
_Flﬂt64x
 
	$°πof64x
 (c⁄° *
__ª°ri˘
 
__≈å
,

166 **
__ª°ri˘
 
__íd±r
)

167 
__THROW
 
	`__n⁄nuŒ
 ((1));

170 #i‡
__HAVE_FLOAT128X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

171 
_Flﬂt128x
 
	$°πof128x
 (c⁄° *
__ª°ri˘
 
__≈å
,

172 **
__ª°ri˘
 
__íd±r
)

173 
__THROW
 
	`__n⁄nuŒ
 ((1));

177 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

178 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

179 
__THROW
 
	`__n⁄nuŒ
 ((1));

181 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

182 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

183 
__THROW
 
	`__n⁄nuŒ
 ((1));

185 #ifde‡
__USE_MISC


187 
__exãnsi⁄__


188 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

189 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

190 
__THROW
 
	`__n⁄nuŒ
 ((1));

192 
__exãnsi⁄__


193 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

194 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

195 
__THROW
 
	`__n⁄nuŒ
 ((1));

198 #ifde‡
__USE_ISOC99


200 
__exãnsi⁄__


201 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

202 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

203 
__THROW
 
	`__n⁄nuŒ
 ((1));

205 
__exãnsi⁄__


206 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

207 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

208 
__THROW
 
	`__n⁄nuŒ
 ((1));

212 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

213 
	$°r‰omd
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

214 
__f
)

215 
__THROW
 
	`__n⁄nuŒ
 ((3));

217 
	$°r‰omf
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

218 
__f
)

219 
__THROW
 
	`__n⁄nuŒ
 ((3));

221 
	$°r‰oml
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

222 
__f
)

223 
__THROW
 
	`__n⁄nuŒ
 ((3));

226 #i‡
__HAVE_FLOAT16
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

227 
	$°r‰omf16
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

228 
_Flﬂt16
 
__f
)

229 
__THROW
 
	`__n⁄nuŒ
 ((3));

232 #i‡
__HAVE_FLOAT32
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

233 
	$°r‰omf32
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

234 
_Flﬂt32
 
__f
)

235 
__THROW
 
	`__n⁄nuŒ
 ((3));

238 #i‡
__HAVE_FLOAT64
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

239 
	$°r‰omf64
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

240 
_Flﬂt64
 
__f
)

241 
__THROW
 
	`__n⁄nuŒ
 ((3));

244 #i‡
__HAVE_FLOAT128
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

245 
	$°r‰omf128
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

246 
_Flﬂt128
 
__f
)

247 
__THROW
 
	`__n⁄nuŒ
 ((3));

250 #i‡
__HAVE_FLOAT32X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

251 
	$°r‰omf32x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

252 
_Flﬂt32x
 
__f
)

253 
__THROW
 
	`__n⁄nuŒ
 ((3));

256 #i‡
__HAVE_FLOAT64X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

257 
	$°r‰omf64x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

258 
_Flﬂt64x
 
__f
)

259 
__THROW
 
	`__n⁄nuŒ
 ((3));

262 #i‡
__HAVE_FLOAT128X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

263 
	$°r‰omf128x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

264 
_Flﬂt128x
 
__f
)

265 
__THROW
 
	`__n⁄nuŒ
 ((3));

269 #ifde‡
__USE_GNU


273 
	~<bôs/ty≥s/loˇÀ_t.h
>

275 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

276 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

277 
loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

279 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

280 **
__ª°ri˘
 
__íd±r
,

281 
__ba£
, 
loˇÀ_t
 
__loc
)

282 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

284 
__exãnsi⁄__


285 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

286 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

287 
loˇÀ_t
 
__loc
)

288 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

290 
__exãnsi⁄__


291 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

292 **
__ª°ri˘
 
__íd±r
,

293 
__ba£
, 
loˇÀ_t
 
__loc
)

294 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

296 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

297 **
__ª°ri˘
 
__íd±r
, 
loˇÀ_t
 
__loc
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

300 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

301 **
__ª°ri˘
 
__íd±r
, 
loˇÀ_t
 
__loc
)

302 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

304 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

305 **
__ª°ri˘
 
__íd±r
,

306 
loˇÀ_t
 
__loc
)

307 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

309 #i‡
__HAVE_FLOAT16


310 
_Flﬂt16
 
	$°πof16_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

311 **
__ª°ri˘
 
__íd±r
,

312 
loˇÀ_t
 
__loc
)

313 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

316 #i‡
__HAVE_FLOAT32


317 
_Flﬂt32
 
	$°πof32_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

318 **
__ª°ri˘
 
__íd±r
,

319 
loˇÀ_t
 
__loc
)

320 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

323 #i‡
__HAVE_FLOAT64


324 
_Flﬂt64
 
	$°πof64_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

325 **
__ª°ri˘
 
__íd±r
,

326 
loˇÀ_t
 
__loc
)

327 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

330 #i‡
__HAVE_FLOAT128


331 
_Flﬂt128
 
	$°πof128_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

332 **
__ª°ri˘
 
__íd±r
,

333 
loˇÀ_t
 
__loc
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

337 #i‡
__HAVE_FLOAT32X


338 
_Flﬂt32x
 
	$°πof32x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

339 **
__ª°ri˘
 
__íd±r
,

340 
loˇÀ_t
 
__loc
)

341 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

344 #i‡
__HAVE_FLOAT64X


345 
_Flﬂt64x
 
	$°πof64x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

346 **
__ª°ri˘
 
__íd±r
,

347 
loˇÀ_t
 
__loc
)

348 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

351 #i‡
__HAVE_FLOAT128X


352 
_Flﬂt128x
 
	$°πof128x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

353 **
__ª°ri˘
 
__íd±r
,

354 
loˇÀ_t
 
__loc
)

355 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

360 #ifde‡
__USE_EXTERN_INLINES


361 
__exã∫_ölöe
 

362 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

364  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

365 
	}
}

366 
__exã∫_ölöe
 

367 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

369  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

370 
	}
}

372 #ifde‡
__USE_ISOC99


373 
__exãnsi⁄__
 
__exã∫_ölöe
 

374 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

376  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

377 
	}
}

382 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


386 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

389 
	$a64l
 (c⁄° *
__s
)

390 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

394 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


395 
	~<sys/ty≥s.h
>

402 
	$øndom
 (Ë
__THROW
;

405 
	$§™dom
 (
__£ed
Ë
__THROW
;

411 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

412 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

416 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

419 #ifde‡
__USE_MISC


424 
	søndom_d©a


426 
öt32_t
 *
Âå
;

427 
öt32_t
 *
Ωå
;

428 
öt32_t
 *
°©e
;

429 
ønd_ty≥
;

430 
ønd_deg
;

431 
ønd_£p
;

432 
öt32_t
 *
íd_±r
;

435 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

436 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

438 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2));

441 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

442 
size_t
 
__°©ñí
,

443 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

444 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

446 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

447 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

448 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$ønd
 (Ë
__THROW
;

456 
	$§™d
 (
__£ed
Ë
__THROW
;

458 #ifde‡
__USE_POSIX199506


460 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

464 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


468 
	$dønd48
 (Ë
__THROW
;

469 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

472 
	$Ã™d48
 (Ë
__THROW
;

473 
	$ƒ™d48
 (
__xsubi
[3])

474 
__THROW
 
	`__n⁄nuŒ
 ((1));

477 
	$mønd48
 (Ë
__THROW
;

478 
	$jønd48
 (
__xsubi
[3])

479 
__THROW
 
	`__n⁄nuŒ
 ((1));

482 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

483 *
	$£ed48
 (
__£ed16v
[3])

484 
__THROW
 
	`__n⁄nuŒ
 ((1));

485 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

487 #ifde‡
__USE_MISC


491 
	sdønd48_d©a


493 
__x
[3];

494 
__ﬁd_x
[3];

495 
__c
;

496 
__öô
;

497 
__exãnsi⁄__
 
__a
;

502 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

503 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

504 
	$î™d48_r
 (
__xsubi
[3],

505 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

506 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

509 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

510 *
__ª°ri˘
 
__ªsu…
)

511 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

512 
	$ƒ™d48_r
 (
__xsubi
[3],

513 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

514 *
__ª°ri˘
 
__ªsu…
)

515 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

518 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

519 *
__ª°ri˘
 
__ªsu…
)

520 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

521 
	$jønd48_r
 (
__xsubi
[3],

522 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

523 *
__ª°ri˘
 
__ªsu…
)

524 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

527 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

528 
__THROW
 
	`__n⁄nuŒ
 ((2));

530 
	$£ed48_r
 (
__£ed16v
[3],

531 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

533 
	$lc⁄g48_r
 (
__∑øm
[7],

534 
dønd48_d©a
 *
__buf„r
)

535 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

540 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__


541 
	`__©åibuã_Æloc_size__
 ((1)Ë
__wur
;

543 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

544 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((1, 2)Ë
__wur
;

551 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

552 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
 
	`__©åibuã_Æloc_size__
 ((2));

555 
	$‰ì
 (*
__±r
Ë
__THROW
;

557 #ifde‡
__USE_MISC


563 *
	$ªÆloˇºay
 (*
__±r
, 
size_t
 
__nmemb
, size_à
__size
)

564 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__


565 
	`__©åibuã_Æloc_size__
 ((2, 3))

566 
__©å_dóŒoc_‰ì
;

569 *
	$ªÆloˇºay
 (*
__±r
, 
size_t
 
__nmemb
, size_à
__size
)

570 
__THROW
 
	`__©å_dóŒoc
 (
ªÆloˇºay
, 1);

573 #ifde‡
__USE_MISC


574 
	~<Æloˇ.h
>

577 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

578 || 
deföed
 
__USE_MISC


580 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__


581 
	`__©åibuã_Æloc_size__
 ((1)Ë
__wur
;

584 #ifde‡
__USE_XOPEN2K


586 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

587 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

590 #ifde‡
__USE_ISOC11


592 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

593 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_Æign__
 ((1))

594 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

598 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

602 
	$©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

604 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


606 #ifde‡
__˝lu•lus


607 "C++" 
	$©_quick_exô
 ((*
__func
) ())

608 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

610 
	$©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

614 #ifdef 
__USE_MISC


617 
	$⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

618 
__THROW
 
	`__n⁄nuŒ
 ((1));

624 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

626 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


630 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

633 #ifde‡
__USE_ISOC99


636 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

641 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

643 #ifde‡
__USE_GNU


646 *
	$£cuª_gëív
 (c⁄° *
__«me
)

647 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

650 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


654 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

657 #ifde‡
__USE_XOPEN2K


660 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

661 
__THROW
 
	`__n⁄nuŒ
 ((2));

664 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

667 #ifdef 
__USE_MISC


671 
	$˛óªnv
 (Ë
__THROW
;

675 #i‡
deföed
 
__USE_MISC
 \

676 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

682 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

685 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


694 #i‚de‡
__USE_FILE_OFFSET64


695 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

697 #ifde‡
__REDIRECT


698 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

699 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

701 
	#mk°emp
 
mk°emp64


	)

704 #ifde‡
__USE_LARGEFILE64


705 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

709 #ifde‡
__USE_MISC


716 #i‚de‡
__USE_FILE_OFFSET64


717 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

719 #ifde‡
__REDIRECT


720 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

721 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

723 
	#mk°emps
 
mk°emps64


	)

726 #ifde‡
__USE_LARGEFILE64


727 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

728 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

732 #ifde‡
__USE_XOPEN2K8


738 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

741 #ifde‡
__USE_GNU


748 #i‚de‡
__USE_FILE_OFFSET64


749 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

751 #ifde‡
__REDIRECT


752 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

753 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

755 
	#mko°emp
 
mko°emp64


	)

758 #ifde‡
__USE_LARGEFILE64


759 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

768 #i‚de‡
__USE_FILE_OFFSET64


769 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

770 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

772 #ifde‡
__REDIRECT


773 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

774 
__Êags
), 
mko°emps64
)

775 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

777 
	#mko°emps
 
mko°emps64


	)

780 #ifde‡
__USE_LARGEFILE64


781 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

782 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

791 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

794 #ifdef 
__USE_GNU


797 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

798 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_mÆloc__


799 
__©å_dóŒoc_‰ì
 
__wur
;

802 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


808 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

809 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

814 #i‚de‡
__COMPAR_FN_T


815 
	#__COMPAR_FN_T


	)

816 (*
	t__com∑r_‚_t
) (const *, const *);

818 #ifdef 
__USE_GNU


819 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

822 #ifde‡
__USE_GNU


823 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

828 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

829 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

830 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

832 #ifde‡
__USE_EXTERN_INLINES


833 
	~<bôs/°dlib-b£¨ch.h
>

838 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

839 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

840 #ifde‡
__USE_GNU


841 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

842 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

843 
	`__n⁄nuŒ
 ((1, 4));

848 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

849 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

851 #ifde‡
__USE_ISOC99


852 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

853 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

860 
div_t
 
	$div
 (
__numî
, 
__díom
)

861 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

862 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

863 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

865 #ifde‡
__USE_ISOC99


866 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

867 
__díom
)

868 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

872 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

873 || 
deföed
 
__USE_MISC


880 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

881 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

886 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

887 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

892 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

893 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

896 #ifde‡
__USE_MISC


898 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

899 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

900 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

901 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

902 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

903 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

904 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

905 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

910 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

911 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

912 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

913 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

914 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

915 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

917 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

918 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

919 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

920 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

921 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

922 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

923 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

924 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

930 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

933 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

934 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

937 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

941 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

942 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW


943 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 2));

945 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

946 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

947 
__THROW


948 
	$__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 1, 3)

949 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 2));

951 #ifde‡
__USE_MISC


956 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

960 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


967 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

968 *c⁄° *
__ª°ri˘
 
__tokís
,

969 **
__ª°ri˘
 
__vÆuï
)

970 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

976 #ifde‡
__USE_XOPEN2KXSI


978 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

981 #ifde‡
__USE_XOPEN_EXTENDED


986 
	$gø¡±
 (
__fd
Ë
__THROW
;

990 
	$u∆ock±
 (
__fd
Ë
__THROW
;

995 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

998 #ifde‡
__USE_GNU


1002 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

1003 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 2, 3);

1006 
	`gë±
 ();

1009 #ifde‡
__USE_MISC


1013 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

1014 
__THROW
 
	`__n⁄nuŒ
 ((1));

1017 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K


1020 
	$ây¶Ÿ
 (Ë
__THROW
;

1023 
	~<bôs/°dlib-Êﬂt.h
>

1026 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1027 
	~<bôs/°dlib.h
>

1030 
	~<bôs/Êﬂä.h
>

1031 #i‡
deföed
 
__LDBL_COMPAT
 || 
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 1

1032 
	~<bôs/°dlib-ldbl.h
>

1035 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

28 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

36 #i‡
deföed
 
__˝lu•lus
 && (
__GNUC_PREREQ
 (4, 4) \

37 || 
	$__glibc_˛™g_¥îeq
 (3, 5))

38 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

43 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

44 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

47 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

48 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

53 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || 
	`__GLIBC_USE
 (
ISOC2X
)

54 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

55 
__c
, 
size_t
 
__n
)

56 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 4));

61 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

64 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

65 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

80 
	$__memcm≥q
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

81 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

84 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


87 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

88 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

89 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

90 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

92 #ifde‡
__OPTIMIZE__


93 
__exã∫_Æways_ölöe
 *

94 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


96  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

99 
__exã∫_Æways_ölöe
 const *

100 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


102  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

105 
	}
}

107 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

108 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

111 #ifde‡
__USE_GNU


114 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


115 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

116 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

118 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

120 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

125 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


126 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

127 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1))

128 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 1, 3));

129 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

130 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1))

131 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 1, 3));

133 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

134 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1))

135 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 1, 3));

141 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

142 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

144 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

145 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

146 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

149 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

150 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

152 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

153 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

156 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

157 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

159 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

160 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

163 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

164 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

166 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

167 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

168 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 3));

170 #ifde‡
__USE_XOPEN2K8


172 
	~<bôs/ty≥s/loˇÀ_t.h
>

175 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
loˇÀ_t
 
__l
)

176 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

179 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

180 
loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4))

181 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 3));

184 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8
 \

185 || 
	`__GLIBC_USE
 (
LIB_EXT2
Ë|| 
	$__GLIBC_USE
 (
ISOC2X
))

187 *
	$°rdup
 (c⁄° *
__s
)

188 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

194 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
Ë|| __GLIBC_USE (
ISOC2X
)

195 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

196 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

199 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


201 
	#°rdu∑
(
s
) \

202 (
__exãnsi⁄__
 \

204 c⁄° *
__ﬁd
 = (
s
); \

205 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

206 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

207 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

208 
	}
}))

	)

211 
	#°∫du∑
(
s
, 
n
) \

212 (
__exãnsi⁄__
 \

214 c⁄° *
__ﬁd
 = (
s
); \

215 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

216 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

217 
__√w
[
__Àn
] = '\0'; \

218 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

219 }))

	)

223 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


226 *
°rchr
 (*
__s
, 
__c
)

227 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

228 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

229 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

231 #ifde‡
__OPTIMIZE__


232 
__exã∫_Æways_ölöe
 *

233 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


235  
__buûtö_°rchr
 (
__s
, 
__c
);

238 
__exã∫_Æways_ölöe
 const *

239 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


241  
__buûtö_°rchr
 (
__s
, 
__c
);

246 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

247 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

250 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


253 *
	`°ºchr
 (*
__s
, 
__c
)

254 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

255 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

256 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

258 #ifde‡
__OPTIMIZE__


259 
__exã∫_Æways_ölöe
 *

260 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


262  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

265 
__exã∫_Æways_ölöe
 const *

266 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


268  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

271 
	}
}

273 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

274 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

277 #ifde‡
__USE_GNU


280 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


281 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

282 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

283 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

284 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

286 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

287 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

293 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

294 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

297 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

298 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

300 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


303 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

304 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

305 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

306 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

308 #ifde‡
__OPTIMIZE__


309 
__exã∫_Æways_ölöe
 *

310 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


312  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

315 
__exã∫_Æways_ölöe
 const *

316 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


318  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

321 
	}
}

323 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

324 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

327 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


330 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

331 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

332 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

333 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

335 #ifde‡
__OPTIMIZE__


336 
__exã∫_Æways_ölöe
 *

337 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


339  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

342 
__exã∫_Æways_ölöe
 const *

343 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


345  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

348 
	}
}

350 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

351 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

356 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2));

361 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

362 c⁄° *
__ª°ri˘
 
__dñim
,

363 **
__ª°ri˘
 
__ßve_±r
)

364 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

365 #ifde‡
__USE_POSIX


366 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

367 **
__ª°ri˘
 
__ßve_±r
)

368 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

371 #ifde‡
__USE_GNU


373 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


374 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

375 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

376 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

377 c⁄° *
__√edÀ
)

378 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

380 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

381 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

385 #ifde‡
__USE_GNU


389 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

390 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

391 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3))

392 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 1, 2))

393 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 3, 4));

397 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

398 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

399 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

400 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

401 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

402 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

407 
size_t
 
	$°æí
 (c⁄° *
__s
)

408 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

410 #ifdef 
__USE_XOPEN2K8


413 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

414 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

419 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

420 #ifde‡
__USE_XOPEN2K


428 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


431 #ifde‡
__REDIRECT_NTH


432 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

433 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

434 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2))

435 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

437 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

438 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

439 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

444 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

445 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

448 #ifde‡
__USE_GNU


450 c⁄° *
	$°ªº‹desc_≈
 (
__îr
Ë
__THROW
;

452 c⁄° *
	$°ªº‹«me_≈
 (
__îr
Ë
__THROW
;

456 #ifde‡
__USE_XOPEN2K8


458 *
	$°ªº‹_l
 (
__î∫um
, 
loˇÀ_t
 
__l
Ë
__THROW
;

461 #ifde‡
__USE_MISC


462 
	~<°rögs.h
>

466 
	$ex∂icô_bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1))

467 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 1, 2);

471 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

472 c⁄° *
__ª°ri˘
 
__dñim
)

473 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

476 #ifdef 
__USE_XOPEN2K8


478 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

480 #ifde‡
__USE_GNU


482 c⁄° *
	$sigabbªv_≈
 (
__sig
Ë
__THROW
;

485 c⁄° *
	$sigdes¸_≈
 (
__sig
Ë
__THROW
;

489 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

490 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

491 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

492 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

496 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

497 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

498 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

499 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

500 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

501 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

504 #ifdef 
__USE_GNU


506 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

507 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

510 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

513 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1))

514 
	`__©å_ac˚ss
 ((
__ªad_wrôe__
, 1, 2));

516 #i‚de‡
ba£«me


521 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


522 "C++" *
	$ba£«me
 (*
__fûíame
)

523 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

524 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

525 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

527 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

532 #i‡
	`__GNUC_PREREQ
 (3,4)

533 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


535 
	~<bôs/°rög_f‹tifõd.h
>

539 
__END_DECLS


	@/usr/include/strings.h

18 #i‚def 
_STRINGS_H


19 
	#_STRINGS_H
 1

	)

21 
	~<„©uªs.h
>

22 
	#__√ed_size_t


	)

23 
	~<°ddef.h
>

26 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

27 
	#__CORRECT_ISO_CPP_STRINGS_H_PROTO


	)

30 
	g__BEGIN_DECLS


32 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


34 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

35 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

38 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

39 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

42 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

45 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


48 *
	`ödex
 (*
__s
, 
__c
)

49 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

50 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

51 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

53 #i‡
deföed
 
__OPTIMIZE__


54 
__exã∫_Æways_ölöe
 *

55 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


57  
	`__buûtö_ödex
 (
__s
, 
__c
);

60 
__exã∫_Æways_ölöe
 const *

61 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


63  
	`__buûtö_ödex
 (
__s
, 
__c
);

66 
	}
}

68 *
	$ödex
 (c⁄° *
__s
, 
__c
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

73 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


76 *
	`rödex
 (*
__s
, 
__c
)

77 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

78 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

79 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

81 #i‡
deföed
 
__OPTIMIZE__


82 
__exã∫_Æways_ölöe
 *

83 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


85  
	`__buûtö_rödex
 (
__s
, 
__c
);

88 
__exã∫_Æways_ölöe
 const *

89 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


91  
	`__buûtö_rödex
 (
__s
, 
__c
);

94 
	}
}

96 *
	$rödex
 (c⁄° *
__s
, 
__c
)

97 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

101 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8
 || deföed 
__USE_XOPEN2K8XSI


104 
	$ffs
 (
__i
Ë
__THROW
 
__©åibuã_c⁄°__
;

109 #ifdef 
__USE_MISC


110 
	$ff¶
 (
__l
Ë
__THROW
 
__©åibuã_c⁄°__
;

111 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

112 
__THROW
 
__©åibuã_c⁄°__
;

116 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

117 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

120 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

123 #ifdef 
__USE_XOPEN2K8


125 
	~<bôs/ty≥s/loˇÀ_t.h
>

128 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
loˇÀ_t
 
__loc
)

129 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

133 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

134 
size_t
 
__n
, 
loˇÀ_t
 
__loc
)

135 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

138 
__END_DECLS


140 #i‡
	`__GNUC_PREREQ
 (3,4Ë&& 
__USE_FORTIFY_LEVEL
 > 0 \

141 && 
deföed
 
__f‹tify_fun˘i⁄


143 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


144 
	~<bôs/°rögs_f‹tifõd.h
>

	@/usr/include/time.h

22 #i‚def 
_TIME_H


23 
	#_TIME_H
 1

	)

25 
	~<„©uªs.h
>

27 
	#__√ed_size_t


	)

28 
	#__√ed_NULL


	)

29 
	~<°ddef.h
>

33 
	~<bôs/time.h
>

37 
	~<bôs/ty≥s/˛ock_t.h
>

38 
	~<bôs/ty≥s/time_t.h
>

39 
	~<bôs/ty≥s/°ru˘_tm.h
>

41 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_ISOC11


42 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

45 #ifde‡
__USE_POSIX199309


46 
	~<bôs/ty≥s/˛ockid_t.h
>

47 
	~<bôs/ty≥s/timî_t.h
>

48 
	~<bôs/ty≥s/°ru˘_ôimî•ec.h
>

49 
	gsigevít
;

52 #ifde‡
__USE_XOPEN2K


53 #i‚de‡
__pid_t_deföed


54 
__pid_t
 
	tpid_t
;

55 
	#__pid_t_deföed


	)

59 #ifde‡
__USE_XOPEN2K8


60 
	~<bôs/ty≥s/loˇÀ_t.h
>

63 #ifde‡
__USE_ISOC11


65 
	#TIME_UTC
 1

	)

68 
__BEGIN_DECLS


72 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

74 #i‚de‡
__USE_TIME_BITS64


76 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

79 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

85 #ifde‡
__REDIRECT_NTH


86 
time_t
 
	`__REDIRECT_NTH
 (
time
, (time_à*
__timî
), 
__time64
);

87 
	`__REDIRECT_NTH
 (
dif·ime
, (
time_t
 
__time1
,Åime_à
__time0
),

88 
__dif·ime64
Ë
	`__©åibuã__
 ((
__c⁄°__
));

89 
time_t
 
	`__REDIRECT_NTH
 (
mktime
, (
tm
 *
__ç
), 
__mktime64
);

91 
	#time
 
__time64


	)

92 
	#dif·ime
 
__dif·ime64


	)

93 
	#mktime
 
__mktime64


	)

100 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

101 c⁄° *
__ª°ri˘
 
__f‹m©
,

102 c⁄° 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

104 #ifde‡
__USE_XOPEN


107 *
	$°Ωtime
 (c⁄° *
__ª°ri˘
 
__s
,

108 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

109 
__THROW
;

112 #ifde‡
__USE_XOPEN2K8


116 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

117 c⁄° *
__ª°ri˘
 
__f‹m©
,

118 c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

119 
loˇÀ_t
 
__loc
Ë
__THROW
;

122 #ifde‡
__USE_GNU


123 *
	$°Ωtime_l
 (c⁄° *
__ª°ri˘
 
__s
,

124 c⁄° *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

125 
loˇÀ_t
 
__loc
Ë
__THROW
;

129 #i‚de‡
__USE_TIME_BITS64


132 
tm
 *
	$gmtime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

136 
tm
 *
	$loˇ…ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

139 #ifde‡
__REDIRECT_NTH


140 
tm
*
	`__REDIRECT_NTH
 (
gmtime
, (c⁄° 
time_t
 *
__timî
), 
__gmtime64
);

141 
tm
 *
	`__REDIRECT_NTH
 (
loˇ…ime
, (c⁄° 
time_t
 *
__timî
),

142 
__loˇ…ime64
);

144 
	#gmtime
 
__gmtime64


	)

145 
	#loˇ…ime
 
__loˇ…ime64


	)

150 #i‡
deföed
 
__USE_POSIX
 || 
	`__GLIBC_USE
 (
ISOC2X
)

151 #i‚de‡
__USE_TIME_BITS64


154 
tm
 *
	$gmtime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

155 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

159 
tm
 *
	$loˇ…ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

160 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

162 #ifde‡
__REDIRECT_NTH


163 
tm
*
	`__REDIRECT_NTH
 (
gmtime_r
, (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

164 
tm
 *
__ª°ri˘
 
__ç
),

165 
__gmtime64_r
);

167 
tm
*
	`__REDIRECT_NTH
 (
loˇ…ime_r
, (c⁄° 
time_t
 *
__ª°ri˘
 
__t
,

168 
tm
 *
__ª°ri˘
 
__ç
),

169 
__loˇ…ime64_r
);

171 
	#gmtime_r
 
__gmtime64_r


	)

172 
	#loˇ…ime_r
 
__loˇ…ime_r


	)

179 *
	$as˘ime
 (c⁄° 
tm
 *
__ç
Ë
__THROW
;

182 #i‚de‡
__USE_TIME_BITS64


183 *
	$˘ime
 (c⁄° 
time_t
 *
__timî
Ë
__THROW
;

185 #ifde‡
__REDIRECT_NTH


186 *
	`__REDIRECT_NTH
 (
˘ime
, (c⁄° 
time_t
 *
__timî
), 
__˘ime64
);

188 
	#˘ime
 
__˘ime64


	)

192 #ifde‡
__USE_POSIX


197 *
	$as˘ime_r
 (c⁄° 
tm
 *
__ª°ri˘
 
__ç
,

198 *
__ª°ri˘
 
__buf
Ë
__THROW
;

201 #i‚de‡
__USE_TIME_BITS64


202 *
	$˘ime_r
 (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

203 *
__ª°ri˘
 
__buf
Ë
__THROW
;

205 #ifde‡
__REDIRECT_NTH


206 *
	`__REDIRECT_NTH
 (
˘ime_r
, (c⁄° 
time_t
 *
__ª°ri˘
 
__timî
,

207 *
__ª°ri˘
 
__buf
), 
__˘ime64_r
);

209 
	#˘ime_r
 
__˘ime64_r


	)

217 *
__tz«me
[2];

218 
__daylight
;

219 
__timez⁄e
;

222 #ifdef 
__USE_POSIX


224 *
tz«me
[2];

228 
	$tz£t
 (Ë
__THROW
;

231 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


232 
daylight
;

233 
timez⁄e
;

239 
	#__i¶óp
(
yór
) \

240 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

243 #ifde‡
__USE_MISC


247 #i‚de‡
__USE_TIME_BITS64


249 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

251 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

253 #ifde‡
__REDIRECT_NTH


254 
time_t
 
	`__REDIRECT_NTH
 (
timegm
, (
tm
 *
__ç
), 
__timegm64
);

255 
time_t
 
	`__REDIRECT_NTH
 (
timñoˇl
, (
tm
 *
__ç
), 
__mktime64
);

257 
	#timegm
 
__timegm64


	)

262 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

266 #ifde‡
__USE_POSIX199309


267 #i‚de‡
__USE_TIME_BITS64


272 
	`«no¶ìp
 (c⁄° 
time•ec
 *
__ªque°ed_time
,

273 
time•ec
 *
__ªmaöög
);

276 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

279 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

282 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, c⁄° 
time•ec
 *
__ç
)

283 
__THROW
;

285 #ifde‡
__REDIRECT


286 
	`__REDIRECT
 (
«no¶ìp
, (c⁄° 
time•ec
 *
__ªque°ed_time
,

287 
time•ec
 *
__ªmaöög
),

288 
__«no¶ìp64
);

289 
	`__REDIRECT_NTH
 (
˛ock_gëªs
, (
˛ockid_t
 
__˛ock_id
,

290 
time•ec
 *
__ªs
),

291 
__˛ock_gëªs64
);

292 
	`__REDIRECT_NTH
 (
˛ock_gëtime
, (
˛ockid_t
 
__˛ock_id
, 

293 
time•ec
 *
__ç
), 
__˛ock_gëtime64
);

294 
	`__REDIRECT_NTH
 (
˛ock_£âime
, (
˛ockid_t
 
__˛ock_id
, const 

295 
time•ec
 *
__ç
), 
__˛ock_£âime64
);

297 
	#«no¶ìp
 
__«no¶ìp64


	)

298 
	#˛ock_gëªs
 
__˛ock_gëªs64


	)

299 
	#˛ock_gëtime
 
__˛ock_gëtime64


	)

300 
	#˛ock_£âime
 
__˛ock_£âime64


	)

305 #ifde‡
__USE_XOPEN2K


310 #i‚de‡
__USE_TIME_BITS64


311 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

312 c⁄° 
time•ec
 *
__ªq
,

313 
time•ec
 *
__ªm
);

315 #ifde‡
__REDIRECT


316 
	`__REDIRECT
 (
˛ock_«no¶ìp
, (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

317 c⁄° 
time•ec
 *
__ªq
,

318 
time•ec
 *
__ªm
),

319 
__˛ock_«no¶ìp_time64
);

321 
	#˛ock_«no¶ìp
 
__˛ock_«no¶ìp_time64


	)

326 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

331 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

332 
sigevít
 *
__ª°ri˘
 
__evp
,

333 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

336 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

339 #i‚de‡
__USE_TIME_BITS64


340 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

341 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

342 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

345 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

346 
__THROW
;

348 #ifde‡
__REDIRECT_NTH


349 
	`__REDIRECT_NTH
 (
timî_£âime
, (
timî_t
 
__timîid
, 
__Êags
,

350 c⁄° 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

351 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
),

352 
__timî_£âime64
);

354 
	`__REDIRECT_NTH
 (
timî_gëtime
, (
timî_t
 
__timîid
,

355 
ôimî•ec
 *
__vÆue
),

356 
__timî_gëtime64
);

358 
	#timî_£âime
 
__timî_£âime64


	)

359 
	#timî_gëtime
 
__timî_gëtime64


	)

364 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

368 #ifde‡
__USE_ISOC11


369 #i‚de‡
__USE_TIME_BITS64


371 
	$time•ec_gë
 (
time•ec
 *
__ts
, 
__ba£
)

372 
__THROW
 
	`__n⁄nuŒ
 ((1));

374 #ifde‡
__REDIRECT_NTH


375 
	`__REDIRECT_NTH
 (
time•ec_gë
, (
time•ec
 *
__ts
, 
__ba£
),

376 
__time•ec_gë64
Ë
	`__n⁄nuŒ
 ((1));

378 
	#time•ec_gë
 
__time•ec_gë64


	)

384 #i‡
	`__GLIBC_USE
 (
ISOC2X
)

385 #i‚de‡
__USE_TIME_BITS64


387 
	$time•ec_gëªs
 (
time•ec
 *
__ts
, 
__ba£
)

388 
__THROW
;

390 #ifde‡
__REDIRECT_NTH


391 
	`__REDIRECT_NTH
 (
time•ec_gëªs
, (
time•ec
 *
__ts
,

392 
__ba£
),

393 
__time•ec_gëªs64
);

395 
	#time•ec_gëªs
 
__time•ec_gëªs64


	)

401 #ifde‡
__USE_XOPEN_EXTENDED


413 
gëd©e_îr
;

422 
tm
 *
	`gëd©e
 (c⁄° *
__°rög
);

425 #ifde‡
__USE_GNU


436 
	`gëd©e_r
 (c⁄° *
__ª°ri˘
 
__°rög
,

437 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

440 
__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

70 
	#_POSIX2_C_VERSION
 
__POSIX2_THIS_VERSION


	)

74 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

78 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

82 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

86 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

89 #ifde‡
__USE_XOPEN2K8


90 
	#_XOPEN_VERSION
 700

	)

91 #ñi‡
deföed
 
__USE_XOPEN2K


92 
	#_XOPEN_VERSION
 600

	)

93 #ñi‡
deföed
 
__USE_UNIX98


94 
	#_XOPEN_VERSION
 500

	)

96 
	#_XOPEN_VERSION
 4

	)

100 
	#_XOPEN_XCU_VERSION
 4

	)

103 
	#_XOPEN_XPG2
 1

	)

104 
	#_XOPEN_XPG3
 1

	)

105 
	#_XOPEN_XPG4
 1

	)

108 
	#_XOPEN_UNIX
 1

	)

112 
	#_XOPEN_ENH_I18N
 1

	)

115 
	#_XOPEN_LEGACY
 1

	)

202 
	~<bôs/posix_›t.h
>

205 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


206 
	~<bôs/ívú⁄míts.h
>

210 
	#STDIN_FILENO
 0

	)

211 
	#STDOUT_FILENO
 1

	)

212 
	#STDERR_FILENO
 2

	)

217 
	~<bôs/ty≥s.h
>

219 #i‚def 
__ssize_t_deföed


220 
__ssize_t
 
	tssize_t
;

221 
	#__ssize_t_deföed


	)

224 
	#__√ed_size_t


	)

225 
	#__√ed_NULL


	)

226 
	~<°ddef.h
>

228 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


231 #i‚de‡
__gid_t_deföed


232 
__gid_t
 
	tgid_t
;

233 
	#__gid_t_deföed


	)

236 #i‚de‡
__uid_t_deföed


237 
__uid_t
 
	tuid_t
;

238 
	#__uid_t_deföed


	)

241 #i‚de‡
__off_t_deföed


242 #i‚de‡
__USE_FILE_OFFSET64


243 
__off_t
 
	toff_t
;

245 
__off64_t
 
	toff_t
;

247 
	#__off_t_deföed


	)

249 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


250 
__off64_t
 
	toff64_t
;

251 
	#__off64_t_deföed


	)

254 #i‚de‡
__u£c⁄ds_t_deföed


255 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

256 
	#__u£c⁄ds_t_deföed


	)

259 #i‚de‡
__pid_t_deföed


260 
__pid_t
 
	tpid_t
;

261 
	#__pid_t_deföed


	)

265 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


266 #i‚de‡
__öçå_t_deföed


267 
__öçå_t
 
	töçå_t
;

268 
	#__öçå_t_deföed


	)

272 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


273 #i‚de‡
__sockÀn_t_deföed


274 
__sockÀn_t
 
	tsockÀn_t
;

275 
	#__sockÀn_t_deföed


	)

281 
	#R_OK
 4

	)

282 
	#W_OK
 2

	)

283 
	#X_OK
 1

	)

284 
	#F_OK
 0

	)

287 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

289 #ifde‡
__USE_GNU


292 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1));

300 
	$execvót
 (
__fd
, c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

301 *c⁄° 
__ívp
[], 
__Êags
)

302 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

305 #ifde‡
__USE_ATFILE


309 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

310 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

315 #i‚def 
_STDIO_H


316 
	#SEEK_SET
 0

	)

317 
	#SEEK_CUR
 1

	)

318 
	#SEEK_END
 2

	)

319 #ifde‡
__USE_GNU


320 
	#SEEK_DATA
 3

	)

321 
	#SEEK_HOLE
 4

	)

325 #i‡
deföed
 
__USE_MISC
 && !deföed 
L_SET


327 
	#L_SET
 
SEEK_SET


	)

328 
	#L_INCR
 
SEEK_CUR


	)

329 
	#L_XTND
 
SEEK_END


	)

338 #i‚de‡
__USE_FILE_OFFSET64


339 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

341 #ifde‡
__REDIRECT_NTH


342 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

343 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

344 
l£ek64
);

346 
	#l£ek
 
l£ek64


	)

349 #ifde‡
__USE_LARGEFILE64


350 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

351 
__THROW
;

358 
	`˛o£
 (
__fd
);

360 #ifde‡
__USE_MISC


363 
	$˛o£‰om
 (
__lowfd
Ë
__THROW
;

371 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur


372 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 2, 3);

378 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur


379 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 2, 3));

381 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


382 #i‚de‡
__USE_FILE_OFFSET64


389 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

390 
__off_t
 
__off£t
Ë
__wur


391 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 2, 3);

398 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

399 
__off_t
 
__off£t
Ë
__wur


400 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 2, 3));

403 #ifde‡
__REDIRECT


404 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

405 
__off64_t
 
__off£t
),

406 
¥ód64
Ë
__wur


407 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 2, 3);

408 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

409 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

410 
pwrôe64
Ë
__wur


411 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 2, 3));

413 
	#¥ód
 
¥ód64


	)

414 
	#pwrôe
 
pwrôe64


	)

418 #ifde‡
__USE_LARGEFILE64


422 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

423 
__off64_t
 
__off£t
Ë
__wur


424 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 2, 3);

427 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

428 
__off64_t
 
__off£t
Ë
__wur


429 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 2, 3));

437 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

439 #ifde‡
__USE_GNU


442 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

452 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

464 
	`¶ìp
 (
__£c⁄ds
);

466 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

467 || 
deföed
 
__USE_MISC


472 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

473 
__THROW
;

480 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

489 
	`∑u£
 ();

493 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

494 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

496 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


498 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

503 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

504 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

508 #ifde‡
__USE_ATFILE


511 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

512 
__gid_t
 
__group
, 
__Êag
)

513 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

517 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

519 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


521 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

531 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

533 #ifdef 
__USE_GNU


537 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

540 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

541 || 
deföed
 
__USE_MISC


545 *
	$gëwd
 (*
__buf
)

546 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur


547 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1));

552 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

555 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

557 #ifde‡
__USE_GNU


560 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

564 **
__ívú⁄
;

565 #ifde‡
__USE_GNU


566 **
ívú⁄
;

572 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

573 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

575 #ifde‡
__USE_XOPEN2K8


578 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

579 
__THROW
 
	`__n⁄nuŒ
 ((2));

584 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

585 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

589 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

590 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

594 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

595 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

599 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

600 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

605 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

606 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

608 #ifde‡
__USE_GNU


611 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

612 *c⁄° 
__ívp
[])

613 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

617 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


619 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

624 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

630 
	~<bôs/c⁄‚ame.h
>

633 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

634 
__THROW
 
	`__n⁄nuŒ
 ((1));

637 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

640 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

642 #ifdef 
__USE_POSIX2


644 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW


645 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 2, 3);

650 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

653 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

656 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

659 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

660 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


661 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

668 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

670 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


682 
	$£çgΩ
 (Ë
__THROW
;

689 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

691 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


693 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

697 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

700 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

703 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

706 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

711 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur


712 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 2, 1);

713 #ifdef 
__USE_GNU


715 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

722 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

724 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


727 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

730 #ifde‡
__USE_XOPEN2K


732 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

739 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

741 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


744 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

747 #ifde‡
__USE_XOPEN2K


749 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

752 #ifde‡
__USE_GNU


755 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

756 
__THROW
;

760 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

761 
__THROW
;

765 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

766 
__THROW
 
__wur
;

770 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

771 
__THROW
 
__wur
;

778 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

780 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

781 || 
deföed
 
__USE_MISC


786 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

789 #ifde‡
__USE_GNU


793 
__pid_t
 
	$_F‹k
 (Ë
__THROW
;

799 *
	$ây«me
 (
__fd
Ë
__THROW
;

803 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

804 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur


805 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 2, 3);

809 
	$ißây
 (
__fd
Ë
__THROW
;

811 #ifde‡
__USE_MISC


814 
	$ây¶Ÿ
 (Ë
__THROW
;

819 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

820 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

822 #ifde‡
__USE_ATFILE


825 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

826 c⁄° *
__to
, 
__Êags
)

827 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

830 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


832 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

833 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

838 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

839 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

840 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur


841 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 2, 3);

845 #ifde‡
__USE_ATFILE


847 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

848 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

851 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

852 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

853 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur


854 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 3, 4);

858 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

860 #ifde‡
__USE_ATFILE


862 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

863 
__THROW
 
	`__n⁄nuŒ
 ((2));

867 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

871 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

874 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

881 *
	`gëlogö
 ();

882 #ifde‡
__USE_POSIX199506


889 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1))

890 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 1, 2);

893 #ifdef 
__USE_MISC


895 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

899 #ifdef 
__USE_POSIX2


903 
	~<bôs/gë›t_posix.h
>

907 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


911 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1))

912 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 1, 2);

916 #i‡
deföed
 
__USE_MISC


919 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

920 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 1, 2));

924 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

930 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

931 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur


932 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 1, 2);

933 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

934 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 1, 2));

939 
	$vh™gup
 (Ë
__THROW
;

942 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

950 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

951 
size_t
 
__off£t
, 
__sˇÀ
)

952 
__THROW
 
	`__n⁄nuŒ
 ((1));

958 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

962 *
	$gëu£rshñl
 (Ë
__THROW
;

963 
	$ídu£rshñl
 (Ë
__THROW
;

964 
	$£tu£rshñl
 (Ë
__THROW
;

970 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

974 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

977 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

981 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

989 
	`fsync
 (
__fd
);

992 #ifde‡
__USE_GNU


995 
	$syncfs
 (
__fd
Ë
__THROW
;

999 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


1002 
	`gëho°id
 ();

1005 
	$sync
 (Ë
__THROW
;

1008 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K


1011 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

1016 
	$gëdèbÀsize
 (Ë
__THROW
;

1022 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


1025 #i‚de‡
__USE_FILE_OFFSET64


1026 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

1027 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1029 #ifde‡
__REDIRECT_NTH


1030 
	`__REDIRECT_NTH
 (
åunˇã
,

1031 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

1032 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1034 
	#åunˇã
 
åunˇã64


	)

1037 #ifde‡
__USE_LARGEFILE64


1038 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1039 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1044 #i‡
deföed
 
__USE_POSIX199309
 \

1045 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1048 #i‚de‡
__USE_FILE_OFFSET64


1049 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1051 #ifde‡
__REDIRECT_NTH


1052 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1053 
·runˇã64
Ë
__wur
;

1055 
	#·runˇã
 
·runˇã64


	)

1058 #ifde‡
__USE_LARGEFILE64


1059 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1065 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1066 || 
deföed
 
__USE_MISC


1070 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1076 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1080 #ifde‡
__USE_MISC


1091 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1096 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1108 
	#F_ULOCK
 0

	)

1109 
	#F_LOCK
 1

	)

1110 
	#F_TLOCK
 2

	)

1111 
	#F_TEST
 3

	)

1113 #i‚de‡
__USE_FILE_OFFSET64


1114 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1116 #ifde‡
__REDIRECT


1117 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1118 
lockf64
Ë
__wur
;

1120 
	#lockf
 
lockf64


	)

1123 #ifde‡
__USE_LARGEFILE64


1124 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1129 #ifde‡
__USE_GNU


1134 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1135 (
__exãnsi⁄__
 \

1136 ({ 
__ªsu…
; \

1137 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1138 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1139 
__ªsu…
; 
	}
}))

	)

1142 
ssize_t
 
c›y_fûe_ønge
 (
__öfd
, 
__off64_t
 *
__pöoff
,

1143 
__outfd
, 
__off64_t
 *
__poutoff
,

1144 
size_t
 
__Àngth
, 
__Êags
);

1147 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1150 
fd©async
 (
__fûdes
);

1153 #ifde‡
__USE_MISC


1159 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1160 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1163 #ifdef 
__USE_XOPEN


1168 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1169 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2))

1170 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 1, 3))

1171 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

1178 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1180 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1183 *
	`cu£rid
 (*
__s
);

1189 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_XOPEN2K


1190 
	$±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1191 (*
__∑ª¡
) (),

1192 (*
__chûd
Ë()Ë
__THROW
;

1195 #ifde‡
__USE_MISC


1198 
	$gëíå›y
 (*
__buf„r
, 
size_t
 
__Àngth
Ë
__wur


1199 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 2));

1202 #ifde‡
__USE_GNU


1208 
	$˛o£_ønge
 (
__fd
, 
__max_fd
,

1209 
__Êags
Ë
__THROW
;

1213 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1214 
	~<bôs/uni°d.h
>

1218 
	~<bôs/uni°d_ext.h
>

1220 
__END_DECLS


	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

126 #unde‡
__USE_ISOC11


127 #unde‡
__USE_ISOC99


128 #unde‡
__USE_ISOC95


129 #unde‡
__USE_ISOCXX11


130 #unde‡
__USE_POSIX


131 #unde‡
__USE_POSIX2


132 #unde‡
__USE_POSIX199309


133 #unde‡
__USE_POSIX199506


134 #unde‡
__USE_XOPEN


135 #unde‡
__USE_XOPEN_EXTENDED


136 #unde‡
__USE_UNIX98


137 #unde‡
__USE_XOPEN2K


138 #unde‡
__USE_XOPEN2KXSI


139 #unde‡
__USE_XOPEN2K8


140 #unde‡
__USE_XOPEN2K8XSI


141 #unde‡
__USE_LARGEFILE


142 #unde‡
__USE_LARGEFILE64


143 #unde‡
__USE_FILE_OFFSET64


144 #unde‡
__USE_MISC


145 #unde‡
__USE_ATFILE


146 #unde‡
__USE_DYNAMIC_STACK_SIZE


147 #unde‡
__USE_GNU


148 #unde‡
__USE_FORTIFY_LEVEL


149 #unde‡
__KERNEL_STRICT_NAMES


150 #unde‡
__GLIBC_USE_ISOC2X


151 #unde‡
__GLIBC_USE_DEPRECATED_GETS


152 #unde‡
__GLIBC_USE_DEPRECATED_SCANF


156 #i‚de‡
_LOOSE_KERNEL_NAMES


157 
	#__KERNEL_STRICT_NAMES


	)

167 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


168 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

169 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

171 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

178 #i‡
deföed
 
__˛™g_maj‹__
 && deföed 
__˛™g_mö‹__


179 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
) \

180 ((
__˛™g_maj‹__
 << 16Ë+ 
__˛™g_mö‹__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

182 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
Ë0

	)

186 
	#__GLIBC_USE
(
F
Ë
__GLIBC_USE_
 ## 
	)
F

192 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

193 && !
deföed
 
	g_DEFAULT_SOURCE


195 #unde‡
_DEFAULT_SOURCE


196 
	#_DEFAULT_SOURCE
 1

	)

200 #ifde‡
_GNU_SOURCE


201 #unde‡
_ISOC95_SOURCE


202 
	#_ISOC95_SOURCE
 1

	)

203 #unde‡
_ISOC99_SOURCE


204 
	#_ISOC99_SOURCE
 1

	)

205 #unde‡
_ISOC11_SOURCE


206 
	#_ISOC11_SOURCE
 1

	)

207 #unde‡
_ISOC2X_SOURCE


208 
	#_ISOC2X_SOURCE
 1

	)

209 #unde‡
_POSIX_SOURCE


210 
	#_POSIX_SOURCE
 1

	)

211 #unde‡
_POSIX_C_SOURCE


212 
	#_POSIX_C_SOURCE
 200809L

	)

213 #unde‡
_XOPEN_SOURCE


214 
	#_XOPEN_SOURCE
 700

	)

215 #unde‡
_XOPEN_SOURCE_EXTENDED


216 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

217 #unde‡
_LARGEFILE64_SOURCE


218 
	#_LARGEFILE64_SOURCE
 1

	)

219 #unde‡
_DEFAULT_SOURCE


220 
	#_DEFAULT_SOURCE
 1

	)

221 #unde‡
_ATFILE_SOURCE


222 
	#_ATFILE_SOURCE
 1

	)

223 #unde‡
_DYNAMIC_STACK_SIZE_SOURCE


224 
	#_DYNAMIC_STACK_SIZE_SOURCE
 1

	)

229 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

230 || (!
deföed
 
	g__STRICT_ANSI__
 \

231 && !
deföed
 
	g_ISOC99_SOURCE
 && !deföed 
	g_ISOC11_SOURCE
 \

232 && !
deföed
 
	g_ISOC2X_SOURCE
 \

233 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

234 && !
deföed
 
	g_XOPEN_SOURCE
))

235 #unde‡
_DEFAULT_SOURCE


236 
	#_DEFAULT_SOURCE
 1

	)

240 #i‡(
deföed
 
_ISOC2X_SOURCE
 \

241 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ > 201710L))

242 
	#__GLIBC_USE_ISOC2X
 1

	)

244 
	#__GLIBC_USE_ISOC2X
 0

	)

248 #i‡(
deföed
 
_ISOC11_SOURCE
 || deföed 
_ISOC2X_SOURCE
 \

249 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

250 
	#__USE_ISOC11
 1

	)

254 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

255 || 
deföed
 
_ISOC2X_SOURCE
 \

256 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

257 
	#__USE_ISOC99
 1

	)

261 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

262 || 
deföed
 
_ISOC2X_SOURCE
 \

263 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

264 
	#__USE_ISOC95
 1

	)

267 #ifde‡
__˝lu•lus


269 #i‡
__˝lu•lus
 >= 201703L

270 
	#__USE_ISOC11
 1

	)

274 #i‡
__˝lu•lus
 >201103L || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__


275 
	#__USE_ISOCXX11
 1

	)

276 
	#__USE_ISOC99
 1

	)

283 #ifde‡
_DEFAULT_SOURCE


284 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


285 
	#__USE_POSIX_IMPLICITLY
 1

	)

287 #unde‡
_POSIX_SOURCE


288 
	#_POSIX_SOURCE
 1

	)

289 #unde‡
_POSIX_C_SOURCE


290 
	#_POSIX_C_SOURCE
 200809L

	)

293 #i‡((!
deföed
 
__STRICT_ANSI__
 \

294 || (
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) >= 500)) \

295 && !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

296 
	#_POSIX_SOURCE
 1

	)

297 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

298 
	#_POSIX_C_SOURCE
 2

	)

299 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

300 
	#_POSIX_C_SOURCE
 199506L

	)

301 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

302 
	#_POSIX_C_SOURCE
 200112L

	)

304 
	#_POSIX_C_SOURCE
 200809L

	)

306 
	#__USE_POSIX_IMPLICITLY
 1

	)

315 #i‡((!
deföed
 
_POSIX_C_SOURCE
 || (_POSIX_C_SOURCE - 0) < 199506L) \

316 && (
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE
))

317 
	#_POSIX_SOURCE
 1

	)

318 #unde‡
_POSIX_C_SOURCE


319 
	#_POSIX_C_SOURCE
 199506L

	)

322 #i‡(
deföed
 
_POSIX_SOURCE
 \

323 || (
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 1) \

324 || 
deföed
 
_XOPEN_SOURCE
)

325 
	#__USE_POSIX
 1

	)

328 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


329 
	#__USE_POSIX2
 1

	)

332 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199309L

333 
	#__USE_POSIX199309
 1

	)

336 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199506L

337 
	#__USE_POSIX199506
 1

	)

340 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200112L

341 
	#__USE_XOPEN2K
 1

	)

342 #unde‡
__USE_ISOC95


343 
	#__USE_ISOC95
 1

	)

344 #unde‡
__USE_ISOC99


345 
	#__USE_ISOC99
 1

	)

348 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200809L

349 
	#__USE_XOPEN2K8
 1

	)

350 #unde‡
_ATFILE_SOURCE


351 
	#_ATFILE_SOURCE
 1

	)

354 #ifdef 
_XOPEN_SOURCE


355 
	#__USE_XOPEN
 1

	)

356 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

357 
	#__USE_XOPEN_EXTENDED
 1

	)

358 
	#__USE_UNIX98
 1

	)

359 #unde‡
_LARGEFILE_SOURCE


360 
	#_LARGEFILE_SOURCE
 1

	)

361 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

362 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

363 
	#__USE_XOPEN2K8
 1

	)

364 
	#__USE_XOPEN2K8XSI
 1

	)

366 
	#__USE_XOPEN2K
 1

	)

367 
	#__USE_XOPEN2KXSI
 1

	)

368 #unde‡
__USE_ISOC95


369 
	#__USE_ISOC95
 1

	)

370 #unde‡
__USE_ISOC99


371 
	#__USE_ISOC99
 1

	)

374 #ifde‡
_XOPEN_SOURCE_EXTENDED


375 
	#__USE_XOPEN_EXTENDED
 1

	)

380 #ifde‡
_LARGEFILE_SOURCE


381 
	#__USE_LARGEFILE
 1

	)

384 #ifde‡
_LARGEFILE64_SOURCE


385 
	#__USE_LARGEFILE64
 1

	)

388 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

389 
	#__USE_FILE_OFFSET64
 1

	)

392 
	~<„©uªs-time64.h
>

394 #i‡
deföed
 
_DEFAULT_SOURCE


395 
	#__USE_MISC
 1

	)

398 #ifdef 
_ATFILE_SOURCE


399 
	#__USE_ATFILE
 1

	)

402 #ifdef 
_DYNAMIC_STACK_SIZE_SOURCE


403 
	#__USE_DYNAMIC_STACK_SIZE
 1

	)

406 #ifdef 
_GNU_SOURCE


407 
	#__USE_GNU
 1

	)

410 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0

411 #i‡!
deföed
 
__OPTIMIZE__
 || __OPTIMIZE__ <= 0

412 #ñi‡!
__GNUC_PREREQ
 (4, 1)

413 #ñi‡
_FORTIFY_SOURCE
 > 2 && (
__glibc_˛™g_¥îeq
 (9, 0) \

414 || 
	$__GNUC_PREREQ
 (12, 0))

416 #i‡
_FORTIFY_SOURCE
 > 3

418 
	#__USE_FORTIFY_LEVEL
 3

	)

419 #ñi‡
_FORTIFY_SOURCE
 > 1

420 #i‡
_FORTIFY_SOURCE
 > 2

422 
	#__USE_FORTIFY_LEVEL
 2

	)

424 
	#__USE_FORTIFY_LEVEL
 1

	)

427 #i‚de‡
__USE_FORTIFY_LEVEL


428 
	#__USE_FORTIFY_LEVEL
 0

	)

435 #i‡
deföed
 
__˝lu•lus
 ? __˝lu•lu†>201402L : deföed 
__USE_ISOC11


436 
	#__GLIBC_USE_DEPRECATED_GETS
 0

	)

438 
	#__GLIBC_USE_DEPRECATED_GETS
 1

	)

453 #i‡(
deföed
 
__USE_GNU
 \

454 && (
deföed
 
__˝lu•lus
 \

455 ? (
__˝lu•lus
 < 201103L && !
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
) \

456 : (!
deföed
 
__STDC_VERSION__
 || __STDC_VERSION__ < 199901L)))

457 
	#__GLIBC_USE_DEPRECATED_SCANF
 1

	)

459 
	#__GLIBC_USE_DEPRECATED_SCANF
 0

	)

464 
	~<°dc-¥edef.h
>

472 #unde‡
__GNU_LIBRARY__


473 
	#__GNU_LIBRARY__
 6

	)

477 
	#__GLIBC__
 2

	)

478 
	#__GLIBC_MINOR__
 35

	)

480 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

481 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

484 #i‚de‡
__ASSEMBLER__


485 #i‚de‡
_SYS_CDEFS_H


486 
	~<sys/cdefs.h
>

491 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


492 
	#__USE_LARGEFILE
 1

	)

493 
	#__USE_LARGEFILE64
 1

	)

499 #i‡
	`__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

500 && !
deföed
 
__OPTIMIZE_SIZE__
 && !deföed 
__NO_INLINE__
 \

501 && 
deföed
 
__exã∫_ölöe


502 
	#__USE_EXTERN_INLINES
 1

	)

510 
	~<gnu/°ubs.h
>

	@/usr/include/gmock/gmock-actions.h

130 #i‚de‡
GOOGLEMOCK_INCLUDE_GMOCK_GMOCK_ACTIONS_H_


131 
	#GOOGLEMOCK_INCLUDE_GMOCK_GMOCK_ACTIONS_H_


	)

133 #i‚de‡
_WIN32_WCE


134 
	~<î∫o.h
>

137 
	~<Æg‹ôhm
>

138 
	~<fun˘i⁄Æ
>

139 
	~<mem‹y
>

140 
	~<°rög
>

141 
	~<tu∂e
>

142 
	~<ty≥_åaôs
>

143 
	~<utûôy
>

145 
	~"gmock/öã∫Æ/gmock-öã∫Æ-utûs.h
"

146 
	~"gmock/öã∫Æ/gmock-p‹t.h
"

147 
	~"gmock/öã∫Æ/gmock-µ.h
"

149 #ifde‡
_MSC_VER


150 #¥agm®
w¨nög
(
push
)

151 #¥agm®
w¨nög
(
dißbÀ
:4100)

154 
«me•a˚
 
	gã°ög
 {

165 
«me•a˚
 
	göã∫Æ
 {

172 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
boﬁ
 
	gkDeÁu…C⁄°ru˘ibÀ
>

173 
	sBuûtInDeÁu…VÆueGëãr
 {

174 
T
 
Gë
() {  T(); }

176 
	gãm∂©e
 <
ty≥«me
 
	gT
>

177 
	gBuûtInDeÁu…VÆueGëãr
<
	gT
, 
	gÁl£
> {

178 
T
 
Gë
() {

179 
As£π
(
Ál£
, 
__FILE__
, 
__LINE__
,

181  
	göã∫Æ
::
InvÆid
<
T
>();

194 
	gãm∂©e
 <
ty≥«me
 
	gT
>

195 ˛as†
	cBuûtInDeÁu…VÆue
 {

196 
	gpublic
:

199 
boﬁ
 
Exi°s
() {

200  ::
°d
::
is_deÁu…_c⁄°ru˘ibÀ
<
T
>::
vÆue
;

203 
T
 
Gë
() {

204  
	gBuûtInDeÁu…VÆueGëãr
<

205 
	gT
, ::
°d
::
is_deÁu…_c⁄°ru˘ibÀ
<
T
>::
vÆue
>::
Gë
();

211 
	gãm∂©e
 <
ty≥«me
 
	gT
>

212 
˛ass
 
	gBuûtInDeÁu…VÆue
<c⁄° 
	gT
> {

213 
	gpublic
:

214 
boﬁ
 
Exi°s
(Ë{  
BuûtInDeÁu…VÆue
<
T
>::Exists(); }

215 
T
 
Gë
(Ë{  
	gBuûtInDeÁu…VÆue
<
	gT
>::Get(); }

220 
	gãm∂©e
 <
ty≥«me
 
	gT
>

221 
˛ass
 
	gBuûtInDeÁu…VÆue
<
	gT
*> {

222 
	gpublic
:

223 
boﬁ
 
Exi°s
(Ë{  
åue
; }

224 
T
* 
Gë
(Ë{  
	gnuŒ±r
; }

229 
	#GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_
(
ty≥
, 
vÆue
) \

230 
ãm∂©e
 <> \

231 
˛ass
 
BuûtInDeÁu…VÆue
<
ty≥
> { \

232 
public
: \

233 
boﬁ
 
	`Exi°s
(Ë{  
åue
; } \

234 
ty≥
 
	`Gë
(Ë{  
vÆue
; } \

235 }

	)

237 
GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_
(, );

238 
GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_
(::
°d
::
°rög
, "");

239 
GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_
(
boﬁ
, 
Ál£
);

240 
GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_
(, '\0');

241 
GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_
(signed , '\0');

242 
GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_
(, '\0');

250 #i‡
GMOCK_WCHAR_T_IS_NATIVE_


251 
GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_
(
wch¨_t
, 0U);

254 
GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_
(, 0U);

255 
GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_
(signed , 0);

256 
GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_
(, 0U);

257 
GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_
(signed , 0);

258 
GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_
(, 0UL);

259 
GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_
(signed , 0L);

260 
GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_
(, 0);

261 
GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_
(signed , 0);

262 
GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_
(, 0);

263 
GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_
(, 0);

265 #unde‡
GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_


268 
	gãm∂©e
 <
ty≥«me
 
	gP
,Åy≥«mê
	gQ
>

269 
usög
 
	gdisjun˘i⁄
 = 
ty≥«me
 ::
°d
::
c⁄dôi⁄Æ
<
P
::
vÆue
, 
	gP
, 
	gQ
>::
ty≥
;

286 
	gãm∂©e
 <
ty≥«me
 
	gT
>

287 ˛as†
	cDeÁu…VÆue
 {

288 
	gpublic
:

291 
Së
(
T
 
x
) {

292 
dñëe
 
¥odu˚r_
;

293 
	g¥odu˚r_
 = 
√w
 
FixedVÆueProdu˚r
(
x
);

299 
T
 (*
	tFa˘‹yFun˘i⁄
)();

300 
SëFa˘‹y
(
Fa˘‹yFun˘i⁄
 
Á˘‹y
) {

301 
dñëe
 
	g¥odu˚r_
;

302 
	g¥odu˚r_
 = 
√w
 
Fa˘‹yVÆueProdu˚r
(
Á˘‹y
);

306 
CÀ¨
() {

307 
dñëe
 
	g¥odu˚r_
;

308 
	g¥odu˚r_
 = 
nuŒ±r
;

312 
boﬁ
 
IsSë
(Ë{  
	g¥odu˚r_
 !
nuŒ±r
; }

316 
boﬁ
 
Exi°s
() {

317  
IsSë
(Ë|| 
	göã∫Æ
::
BuûtInDeÁu…VÆue
<
T
>::
Exi°s
();

323 
T
 
Gë
() {

324  
	g¥odu˚r_
 =
nuŒ±r
 ? 
öã∫Æ
::
BuûtInDeÁu…VÆue
<
T
>::
Gë
()

325 : 
¥odu˚r_
->
Produ˚
();

328 
	g¥iv©e
:

329 ˛as†
	cVÆueProdu˚r
 {

330 
public
:

331 
vútuÆ
 ~
VÆueProdu˚r
() {}

332 
vútuÆ
 
T
 
Produ˚
() = 0;

335 ˛as†
	cFixedVÆueProdu˚r
 : 
public
 
VÆueProdu˚r
 {

336 
public
:

337 
ex∂icô
 
FixedVÆueProdu˚r
(
T
 
vÆue
Ë: 
vÆue_
(value) {}

338 
T
 
Produ˚
(Ë
ovîride
 {  
vÆue_
; }

340 
	g¥iv©e
:

341 c⁄° 
T
 
vÆue_
;

342 
GTEST_DISALLOW_COPY_AND_ASSIGN_
(
FixedVÆueProdu˚r
);

345 ˛as†
	cFa˘‹yVÆueProdu˚r
 : 
public
 
VÆueProdu˚r
 {

346 
public
:

347 
ex∂icô
 
Fa˘‹yVÆueProdu˚r
(
Fa˘‹yFun˘i⁄
 
Á˘‹y
)

348 : 
Á˘‹y_
(
Á˘‹y
) {}

349 
T
 
Produ˚
(Ë
ovîride
 {  
Á˘‹y_
(); }

351 
	g¥iv©e
:

352 c⁄° 
Fa˘‹yFun˘i⁄
 
Á˘‹y_
;

353 
GTEST_DISALLOW_COPY_AND_ASSIGN_
(
Fa˘‹yVÆueProdu˚r
);

356 
VÆueProdu˚r
* 
	g¥odu˚r_
;

361 
	gãm∂©e
 <
ty≥«me
 
	gT
>

362 
˛ass
 
	gDeÁu…VÆue
<
	gT
&> {

363 
	gpublic
:

365 
Së
(
T
& 
x
) {

366 
addªss_
 = &
x
;

370 
CÀ¨
(Ë{ 
	gaddªss_
 = 
nuŒ±r
; }

373 
boﬁ
 
IsSë
(Ë{  
	gaddªss_
 !
nuŒ±r
; }

377 
boﬁ
 
Exi°s
() {

378  
IsSë
(Ë|| 
	göã∫Æ
::
BuûtInDeÁu…VÆue
<
T
&>::
Exi°s
();

384 
	gT
& 
Gë
() {

385  
	gaddªss_
 =
nuŒ±r
 ? 
öã∫Æ
::
BuûtInDeÁu…VÆue
<
T
&>::
Gë
()

386 : *
addªss_
;

389 
	g¥iv©e
:

390 
T
* 
addªss_
;

395 
	gãm∂©e
 <>

396 
˛ass
 
	gDeÁu…VÆue
<> {

397 
	gpublic
:

398 
boﬁ
 
Exi°s
(Ë{  
åue
; }

399 
Gë
() {}

403 
	gãm∂©e
 <
ty≥«me
 
	gT
>

404 
ty≥«me
 
	gDeÁu…VÆue
<
	gT
>::
VÆueProdu˚r
* 
DeÁu…VÆue
<
T
>::
¥odu˚r_
 = 
nuŒ±r
;

407 
	gãm∂©e
 <
ty≥«me
 
	gT
>

408 
T
* 
	gDeÁu…VÆue
<
	gT
&>::
addªss_
 = 
nuŒ±r
;

411 
	gãm∂©e
 <
ty≥«me
 
	gF
>

412 ˛as†
	cA˘i⁄I¡îÁ˚
 {

413 
	gpublic
:

414 
ty≥«me
 
	töã∫Æ
::
	tFun˘i⁄
<
	tF
>::
	tResu…
 Result;

415 
ty≥«me
 
	töã∫Æ
::
	tFun˘i⁄
<
	tF
>::
	tArgumítTu∂e
 ArgumentTuple;

417 
A˘i⁄I¡îÁ˚
() {}

418 
	gvútuÆ
 ~
A˘i⁄I¡îÁ˚
() {}

424 
vútuÆ
 
Resu…
 
Pîf‹m
(c⁄° 
ArgumítTu∂e
& 
¨gs
) = 0;

426 
	g¥iv©e
:

427 
GTEST_DISALLOW_COPY_AND_ASSIGN_
(
A˘i⁄I¡îÁ˚
);

437 
	gãm∂©e
 <
ty≥«me
 
	gF
>

438 ˛as†
	cA˘i⁄
 {

441 
	sA˘i⁄Ad≠ãr
 {

443 ::
°d
::
sh¨ed_±r
<
A˘i⁄I¡îÁ˚
<
F
>> 
im∂_
;

445 
	gãm∂©e
 <
	gty≥«me
... 
	gArgs
>

446 
ty≥«me
 
	göã∫Æ
::
Fun˘i⁄
<
F
>::
Resu…
 
›î©‹
()(
Args
&&... 
¨gs
) {

447  
im∂_
->
Pîf‹m
(

448 ::
°d
::
f‹w¨d_as_tu∂e
(::°d::
f‹w¨d
<
Args
>(
¨gs
)...));

452 
	gãm∂©e
 <
ty≥«me
 
	gG
>

453 
usög
 
	gIsCom∑tibÀFun˘‹
 = 
°d
::
is_c⁄°ru˘ibÀ
<°d::
fun˘i⁄
<
F
>, 
	gG
>;

455 
	gpublic
:

456 
ty≥«me
 
	töã∫Æ
::
	tFun˘i⁄
<
	tF
>::
	tResu…
 Result;

457 
ty≥«me
 
	töã∫Æ
::
	tFun˘i⁄
<
	tF
>::
	tArgumítTu∂e
 ArgumentTuple;

461 
A˘i⁄
() {}

466 
	gãm∂©e
 <

467 
ty≥«me
 
	gG
,

468 
	gty≥«me
 = 
ty≥«me
 
°d
::
íabÀ_if
<
öã∫Æ
::
disjun˘i⁄
<

469 
IsCom∑tibÀFun˘‹
<
G
>, 
	g°d
::
is_c⁄°ru˘ibÀ
<
°d
::
fun˘i⁄
<
Resu…
()>,

470 
	gG
>>::
vÆue
>::
ty≥
>

471 
A˘i⁄
(
G
&& 
fun
) {

472 
Inô
(::
°d
::
f‹w¨d
<
G
>(
fun
), 
IsCom∑tibÀFun˘‹
<G>());

476 
ex∂icô
 
A˘i⁄
(
A˘i⁄I¡îÁ˚
<
F
>* 
im∂
)

477 : 
fun_
(
A˘i⁄Ad≠ãr
{::
°d
::
sh¨ed_±r
<
A˘i⁄I¡îÁ˚
<
F
>>(
im∂
)}) {}

482 
ãm∂©e
 <
ty≥«me
 
Func
>

483 
ex∂icô
 
A˘i⁄
(c⁄° A˘i⁄<
Func
>& 
a˘i⁄
Ë: 
fun_
(action.fun_) {}

486 
boﬁ
 
IsDoDeÁu…
(Ëc⁄° {  
fun_
 =
nuŒ±r
; }

494 
Resu…
 
Pîf‹m
(
ArgumítTu∂e
 
¨gs
) const {

495 i‡(
IsDoDeÁu…
()) {

496 
	göã∫Æ
::
IŒegÆDoDeÁu…
(
__FILE__
, 
__LINE__
);

498  
	göã∫Æ
::
Aµly
(
fun_
, ::
°d
::
move
(
¨gs
));

501 
	g¥iv©e
:

502 
ãm∂©e
 <
ty≥«me
 
G
>

503 
‰õnd
 
˛ass
 
A˘i⁄
;

505 
	gãm∂©e
 <
ty≥«me
 
	gG
>

506 
Inô
(
G
&& 
g
, ::
°d
::
åue_ty≥
) {

507 
fun_
 = ::
°d
::
f‹w¨d
<
G
>(
g
);

510 
	gãm∂©e
 <
ty≥«me
 
	gG
>

511 
Inô
(
G
&& 
g
, ::
°d
::
Ál£_ty≥
) {

512 
fun_
 = 
Ign‹eArgs
<
ty≥«me
 ::
°d
::
deˇy
<
G
>::
ty≥
>{::°d::
f‹w¨d
<G>(
g
)};

515 
	gãm∂©e
 <
ty≥«me
 
	gFun˘i⁄Im∂
>

516 
	sIgn‹eArgs
 {

517 
	gãm∂©e
 <
	gty≥«me
... 
	gArgs
>

518 
Resu…
 
›î©‹
()(c⁄° 
	gArgs
&...) const {

519  
fun˘i⁄_im∂
();

522 
Fun˘i⁄Im∂
 
	gfun˘i⁄_im∂
;

526 ::
°d
::
fun˘i⁄
<
F
> 
fun_
;

550 
	gãm∂©e
 <
ty≥«me
 
	gIm∂
>

551 ˛as†
	cPﬁym‹phicA˘i⁄
 {

552 
	gpublic
:

553 
ex∂icô
 
Pﬁym‹phicA˘i⁄
(c⁄° 
Im∂
& 
im∂
Ë: 
im∂_
(impl) {}

555 
ãm∂©e
 <
ty≥«me
 
F
>

556 
›î©‹
 
A˘i⁄
<
F
>() const {

557  
A˘i⁄
<
F
>(
√w
 
M⁄om‹phicIm∂
<F>(
im∂_
));

560 
	g¥iv©e
:

561 
ãm∂©e
 <
ty≥«me
 
F
>

562 
˛ass
 
M⁄om‹phicIm∂
 : 
public
 
A˘i⁄I¡îÁ˚
<
F
> {

563 
public
:

564 
ty≥«me
 
	töã∫Æ
::
	tFun˘i⁄
<
	tF
>::
	tResu…
 Result;

565 
ty≥«me
 
	töã∫Æ
::
	tFun˘i⁄
<
	tF
>::
	tArgumítTu∂e
 ArgumentTuple;

567 
ex∂icô
 
M⁄om‹phicIm∂
(c⁄° 
Im∂
& 
im∂
Ë: 
im∂_
(impl) {}

569 
Resu…
 
Pîf‹m
(c⁄° 
ArgumítTu∂e
& 
¨gs
Ë
ovîride
 {

570  
im∂_
.
ãm∂©e
 
Pîf‹m
<
Resu…
>(
¨gs
);

573 
	g¥iv©e
:

574 
Im∂
 
im∂_
;

577 
Im∂
 
	gim∂_
;

582 
	gãm∂©e
 <
ty≥«me
 
	gF
>

583 
	gA˘i⁄
<
	gF
> 
MakeA˘i⁄
(
A˘i⁄I¡îÁ˚
<
F
>* 
im∂
) {

584  
	gA˘i⁄
<
	gF
>(
	gim∂
);

594 
	gãm∂©e
 <
ty≥«me
 
	gIm∂
>

595 
ölöe
 
	gPﬁym‹phicA˘i⁄
<
	gIm∂
> 
	$MakePﬁym‹phicA˘i⁄
(c⁄° 
Im∂
& 
im∂
) {

596  
Pﬁym‹phicA˘i⁄
<
Im∂
>(
im∂
);

597 
	}
}

599 
«me•a˚
 
	göã∫Æ
 {

603 
	gãm∂©e
 <
ty≥«me
 
	gT
>

604 
	sByMoveWøµî
 {

605 
ex∂icô
 
ByMoveWøµî
(
T
 
vÆue
Ë: 
∑ylﬂd
(
°d
::
move
(value)) {}

606 
T
 
∑ylﬂd
;

636 
	gãm∂©e
 <
ty≥«me
 
	gR
>

637 ˛as†
	cRëu∫A˘i⁄
 {

638 
	gpublic
:

642 
ex∂icô
 
Rëu∫A˘i⁄
(
R
 
vÆue
Ë: 
vÆue_
(
√w
 R(
°d
::
move
(value))) {}

646 
ãm∂©e
 <
ty≥«me
 
F
>

647 
›î©‹
 
A˘i⁄
<
F
>() const {

656 
ty≥«me
 
	tFun˘i⁄
<
	tF
>::
	tResu…
 Result;

657 
GTEST_COMPILE_ASSERT_
(

658 !
°d
::
is_ª„ªn˚
<
Resu…
>::
vÆue
,

659 
u£_Rëu∫Ref_ö°ód_of_Rëu∫_to_ªtu∫_a_ª„ªn˚
);

660 
°©ic_as£π
(!
°d
::
is_void
<
Resu…
>::
vÆue
,

662  
	gA˘i⁄
<
	gF
>(
√w
 
	gIm∂
<
	gR
, F>(
	gvÆue_
));

665 
	g¥iv©e
:

667 
ãm∂©e
 <
ty≥«me
 
R_
,Åy≥«mê
	gF
>

668 
˛ass
 
	gIm∂
 : 
public
 
A˘i⁄I¡îÁ˚
<
F
> {

669 
public
:

670 
ty≥«me
 
	tFun˘i⁄
<
	tF
>::
	tResu…
 Result;

671 
ty≥«me
 
	tFun˘i⁄
<
	tF
>::
	tArgumítTu∂e
 ArgumentTuple;

680 
ex∂icô
 
Im∂
(c⁄° 
°d
::
sh¨ed_±r
<
R
>& 
vÆue
)

681 : 
vÆue_bef‹e_ˇ°_
(*
vÆue
),

682 
vÆue_
(
Im∂icôCa°_
<
Resu…
>(
vÆue_bef‹e_ˇ°_
)) {}

684 
Resu…
 
Pîf‹m
(c⁄° 
ArgumítTu∂e
&Ë
	govîride
 {  
	gvÆue_
; }

686 
	g¥iv©e
:

687 
GTEST_COMPILE_ASSERT_
(!
°d
::
is_ª„ªn˚
<
Resu…
>::
vÆue
,

688 
Resu…_ˇ¬Ÿ_be_a_ª„ªn˚_ty≥
);

691 
R
 
	gvÆue_bef‹e_ˇ°_
;

692 
Resu…
 
	gvÆue_
;

694 
GTEST_DISALLOW_COPY_AND_ASSIGN_
(
Im∂
);

699 
	gãm∂©e
 <
ty≥«me
 
	gR_
,Åy≥«mê
	gF
>

700 
˛ass
 
	gIm∂
<
	gByMoveWøµî
<
	gR_
>, 
	gF
> : 
public
 
A˘i⁄I¡îÁ˚
<
F
> {

701 
public
:

702 
ty≥«me
 
	tFun˘i⁄
<
	tF
>::
	tResu…
 Result;

703 
ty≥«me
 
	tFun˘i⁄
<
	tF
>::
	tArgumítTu∂e
 ArgumentTuple;

705 
ex∂icô
 
Im∂
(c⁄° 
°d
::
sh¨ed_±r
<
R
>& 
wøµî
)

706 : 
≥rf‹med_
(
Ál£
), 
wøµî_
(
wøµî
) {}

708 
Resu…
 
Pîf‹m
(c⁄° 
ArgumítTu∂e
&Ë
	govîride
 {

709 
GTEST_CHECK_
(!
≥rf‹med_
)

711 
	g≥rf‹med_
 = 
åue
;

712  
	g°d
::
move
(
wøµî_
->
∑ylﬂd
);

715 
	g¥iv©e
:

716 
boﬁ
 
≥rf‹med_
;

717 c⁄° 
	g°d
::
sh¨ed_±r
<
R
> 
wøµî_
;

720 c⁄° 
	g°d
::
sh¨ed_±r
<
R
> 
vÆue_
;

724 ˛as†
	cRëu∫NuŒA˘i⁄
 {

725 
	gpublic
:

729 
ãm∂©e
 <
ty≥«me
 
Resu…
,Åy≥«mê
	gArgumítTu∂e
>

730 
Resu…
 
Pîf‹m
(c⁄° 
ArgumítTu∂e
&) {

731  
	gnuŒ±r
;

736 ˛as†
	cRëu∫VoidA˘i⁄
 {

737 
	gpublic
:

739 
ãm∂©e
 <
ty≥«me
 
Resu…
,Åy≥«mê
	gArgumítTu∂e
>

740 
Pîf‹m
(c⁄° 
ArgumítTu∂e
&) {

741 
°©ic_as£π
(
°d
::
is_void
<
Resu…
>::
vÆue
, "Result should be void.");

748 
	gãm∂©e
 <
ty≥«me
 
	gT
>

749 ˛as†
	cRëu∫RefA˘i⁄
 {

750 
	gpublic
:

752 
ex∂icô
 
Rëu∫RefA˘i⁄
(
T
& 
ªf
Ë: 
ªf_
(ref) {}

756 
ãm∂©e
 <
ty≥«me
 
F
>

757 
›î©‹
 
A˘i⁄
<
F
>() const {

758 
ty≥«me
 
	tFun˘i⁄
<
	tF
>::
	tResu…
 Result;

762 
GTEST_COMPILE_ASSERT_
(
°d
::
is_ª„ªn˚
<
Resu…
>::
vÆue
,

763 
u£_Rëu∫_ö°ód_of_Rëu∫Ref_to_ªtu∫_a_vÆue
);

764  
	gA˘i⁄
<
	gF
>(
√w
 
	gIm∂
<F>(
	gªf_
));

767 
	g¥iv©e
:

769 
ãm∂©e
 <
ty≥«me
 
F
>

770 
˛ass
 
Im∂
 : 
public
 
A˘i⁄I¡îÁ˚
<
F
> {

771 
public
:

772 
ty≥«me
 
	tFun˘i⁄
<
	tF
>::
	tResu…
 Result;

773 
ty≥«me
 
	tFun˘i⁄
<
	tF
>::
	tArgumítTu∂e
 ArgumentTuple;

775 
ex∂icô
 
Im∂
(
T
& 
ªf
Ë: 
ªf_
(ref) {}

777 
Resu…
 
Pîf‹m
(c⁄° 
ArgumítTu∂e
&Ë
ovîride
 {  
ªf_
; }

779 
	g¥iv©e
:

780 
T
& 
ªf_
;

783 
	gT
& 
	gªf_
;

789 
	gãm∂©e
 <
ty≥«me
 
	gT
>

790 ˛as†
	cRëu∫RefOfC›yA˘i⁄
 {

791 
	gpublic
:

794 
ex∂icô
 
Rëu∫RefOfC›yA˘i⁄
(c⁄° 
T
& 
vÆue
Ë: 
vÆue_
(value) {}

798 
ãm∂©e
 <
ty≥«me
 
F
>

799 
›î©‹
 
A˘i⁄
<
F
>() const {

800 
ty≥«me
 
	tFun˘i⁄
<
	tF
>::
	tResu…
 Result;

804 
GTEST_COMPILE_ASSERT_
(

805 
°d
::
is_ª„ªn˚
<
Resu…
>::
vÆue
,

806 
u£_Rëu∫_ö°ód_of_Rëu∫RefOfC›y_to_ªtu∫_a_vÆue
);

807  
	gA˘i⁄
<
	gF
>(
√w
 
	gIm∂
<F>(
	gvÆue_
));

810 
	g¥iv©e
:

812 
ãm∂©e
 <
ty≥«me
 
F
>

813 
˛ass
 
Im∂
 : 
public
 
A˘i⁄I¡îÁ˚
<
F
> {

814 
public
:

815 
ty≥«me
 
	tFun˘i⁄
<
	tF
>::
	tResu…
 Result;

816 
ty≥«me
 
	tFun˘i⁄
<
	tF
>::
	tArgumítTu∂e
 ArgumentTuple;

818 
ex∂icô
 
Im∂
(c⁄° 
T
& 
vÆue
Ë: 
vÆue_
(value) {}

820 
Resu…
 
Pîf‹m
(c⁄° 
ArgumítTu∂e
&Ë
ovîride
 {  
vÆue_
; }

822 
	g¥iv©e
:

823 
T
 
vÆue_
;

826 c⁄° 
T
 
	gvÆue_
;

831 
	gãm∂©e
 <
ty≥«me
 
	gT
>

832 ˛as†
	cRëu∫RoundRoböA˘i⁄
 {

833 
	gpublic
:

834 
ex∂icô
 
Rëu∫RoundRoböA˘i⁄
(
°d
::
ve˘‹
<
T
> 
vÆues
) {

835 
GTEST_CHECK_
(!
vÆues
.
em±y
())

837 
	g°©e_
->
	gvÆues
 = 
°d
::
move
(
vÆues
);

840 
	gãm∂©e
 <
	gty≥«me
... 
	gArgs
>

841 
T
 
›î©‹
()(
	gArgs
&&...) const {

842  
	g°©e_
->
Next
();

845 
	g¥iv©e
:

846 
	sSèã
 {

847 
T
 
Next
() {

848 
T
 
ªt_vÆ
 = 
vÆues
[
i
++];

849 i‡(
	gi
 =
vÆues
.
size
()Ë
i
 = 0;

850  
	gªt_vÆ
;

853 
	g°d
::
ve˘‹
<
T
> 
vÆues
;

854 
size_t
 
	gi
 = 0;

856 
	g°d
::
sh¨ed_±r
<
Sèã
> 
°©e_
 = 
°d
::
make_sh¨ed
<State>();

860 ˛as†
	cDoDeÁu…A˘i⁄
 {

861 
	gpublic
:

864 
ãm∂©e
 <
ty≥«me
 
F
>

865 
›î©‹
 
A˘i⁄
<
F
>() const {  Action<F>(); }

870 
	gãm∂©e
 <
ty≥«me
 
	gT1
,Åy≥«mê
	gT2
>

871 ˛as†
	cAssignA˘i⁄
 {

872 
	gpublic
:

873 
AssignA˘i⁄
(
T1
* 
±r
, 
T2
 
vÆue
Ë: 
±r_
’å), 
vÆue_
(value) {}

875 
	gãm∂©e
 <
ty≥«me
 
	gResu…
,Åy≥«mê
	gArgumítTu∂e
>

876 
Pîf‹m
(c⁄° 
ArgumítTu∂e
& ) const {

877 *
	g±r_
 = 
vÆue_
;

880 
	g¥iv©e
:

881 
T1
* c⁄° 
±r_
;

882 c⁄° 
T2
 
	gvÆue_
;

885 #i‡!
GTEST_OS_WINDOWS_MOBILE


889 
	gãm∂©e
 <
ty≥«me
 
	gT
>

890 ˛as†
	cSëEºnoAndRëu∫A˘i⁄
 {

891 
	gpublic
:

892 
SëEºnoAndRëu∫A˘i⁄
(
î∫o_vÆue
, 
T
 
ªsu…
)

893 : 
î∫o_
(
î∫o_vÆue
),

894 
ªsu…_
(
ªsu…
) {}

895 
	gãm∂©e
 <
ty≥«me
 
	gResu…
,Åy≥«mê
	gArgumítTu∂e
>

896 
Resu…
 
Pîf‹m
(c⁄° 
ArgumítTu∂e
& ) const {

897 
	gî∫o
 = 
î∫o_
;

898  
	gªsu…_
;

901 
	g¥iv©e
:

902 c⁄° 
î∫o_
;

903 c⁄° 
T
 
	gªsu…_
;

910 
	gãm∂©e
 <
size_t
 
	gN
, 
ty≥«me
 
	gA
, 
	gty≥«me
 = >

911 
	sSëArgumítPoöãeA˘i⁄
 {

912 
A
 
vÆue
;

914 
	gãm∂©e
 <
	gty≥«me
... 
	gArgs
>

915 
›î©‹
()(c⁄° 
	gArgs
&... 
	g¨gs
) const {

916 *::
°d
::
gë
<
N
>(°d::
tõ
(
¨gs
...)Ë
vÆue
;

921 
	gãm∂©e
 <
˛ass
 
	gCœss
, 
ty≥«me
 
	gMëhodPå
>

922 
	sInvokeMëhodA˘i⁄
 {

923 
Cœss
* c⁄° 
	gobj_±r
;

924 c⁄° 
MëhodPå
 
	gmëhod_±r
;

926 
	gãm∂©e
 <
	gty≥«me
... 
	gArgs
>

927 autÿ
›î©‹
()(
	gArgs
&&... 
	g¨gs
) const

928 -> 
de˛ty≥
((
obj_±r
->*
mëhod_±r
)(
°d
::
f‹w¨d
<
Args
>(
¨gs
)...)) {

929  (
obj_±r
->*
mëhod_±r
)(
°d
::
f‹w¨d
<
Args
>(
¨gs
)...);

937 
	gãm∂©e
 <
ty≥«me
 
	gFun˘i⁄Im∂
>

938 
	sInvokeWôhoutArgsA˘i⁄
 {

939 
Fun˘i⁄Im∂
 
	gfun˘i⁄_im∂
;

943 
	gãm∂©e
 <
	gty≥«me
... 
	gArgs
>

944 autÿ
›î©‹
()(c⁄° 
	gArgs
&...Ë-> 
de˛ty≥
(
fun˘i⁄_im∂
()) {

945  
fun˘i⁄_im∂
();

950 
	gãm∂©e
 <
˛ass
 
	gCœss
, 
ty≥«me
 
	gMëhodPå
>

951 
	sInvokeMëhodWôhoutArgsA˘i⁄
 {

952 
Cœss
* c⁄° 
	gobj_±r
;

953 c⁄° 
MëhodPå
 
	gmëhod_±r
;

955 
usög
 
	gRëu∫Ty≥
 =

956 
de˛ty≥
((
°d
::
de˛vÆ
<
Cœss
*>()->*°d::de˛vÆ<
MëhodPå
>())());

958 
	gãm∂©e
 <
	gty≥«me
... 
	gArgs
>

959 
Rëu∫Ty≥
 
›î©‹
()(c⁄° 
	gArgs
&...) const {

960  (
	gobj_±r
->*
	gmëhod_±r
)();

965 
	gãm∂©e
 <
ty≥«me
 
	gA
>

966 ˛as†
	cIgn‹eResu…A˘i⁄
 {

967 
	gpublic
:

968 
ex∂icô
 
Ign‹eResu…A˘i⁄
(c⁄° 
A
& 
a˘i⁄
Ë: 
a˘i⁄_
(action) {}

970 
ãm∂©e
 <
ty≥«me
 
F
>

971 
›î©‹
 
A˘i⁄
<
F
>() const {

980 
ty≥«me
 
	töã∫Æ
::
	tFun˘i⁄
<
	tF
>::
	tResu…
 Result;

983 
°©ic_as£π
(
°d
::
is_void
<
Resu…
>::
vÆue
, "ResultÅype should be void.");

985  
	gA˘i⁄
<
	gF
>(
√w
 
	gIm∂
<F>(
	ga˘i⁄_
));

988 
	g¥iv©e
:

989 
ãm∂©e
 <
ty≥«me
 
F
>

990 
˛ass
 
Im∂
 : 
public
 
A˘i⁄I¡îÁ˚
<
F
> {

991 
public
:

992 
ty≥«me
 
	töã∫Æ
::
	tFun˘i⁄
<
	tF
>::
	tResu…
 Result;

993 
ty≥«me
 
	töã∫Æ
::
	tFun˘i⁄
<
	tF
>::
	tArgumítTu∂e
 ArgumentTuple;

995 
ex∂icô
 
Im∂
(c⁄° 
A
& 
a˘i⁄
Ë: 
a˘i⁄_
(action) {}

997 
Pîf‹m
(c⁄° 
ArgumítTu∂e
& 
¨gs
Ë
ovîride
 {

999 
a˘i⁄_
.
Pîf‹m
(
¨gs
);

1002 
	g¥iv©e
:

1005 
ty≥«me
 
	töã∫Æ
::
	tFun˘i⁄
<
	tF
>::
	tMakeResu…Ign‹edVÆue


1006 
	tOrigöÆFun˘i⁄
;

1008 c⁄° 
	gA˘i⁄
<
	gOrigöÆFun˘i⁄
> 
	ga˘i⁄_
;

1011 c⁄° 
A
 
	ga˘i⁄_
;

1014 
	gãm∂©e
 <
ty≥«me
 
	gI¬îA˘i⁄
, 
	gsize_t
... 
	gI
>

1015 
	sWôhArgsA˘i⁄
 {

1016 
I¬îA˘i⁄
 
	ga˘i⁄
;

1020 
	gãm∂©e
 <
ty≥«me
 
	gR
, 
	gty≥«me
... 
	gArgs
>

1021 
›î©‹
 
	gA˘i⁄
<
R
(
Args
...)>() const {

1022 
usög
 
	gTu∂eTy≥
 = 
°d
::
tu∂e
<
Args
...>;

1023 
	gA˘i⁄
<
R
(
ty≥«me
 
°d
::
tu∂e_ñemít
<
I
, 
Tu∂eTy≥
>::
ty≥
...)>

1024 
c⁄vîãd
(
a˘i⁄
);

1026  [
c⁄vîãd
](
	gArgs
... 
	g¨gs
Ë-> 
	gR
 {

1027  
	gc⁄vîãd
.
Pîf‹m
(
°d
::
f‹w¨d_as_tu∂e
(

1028 
°d
::
gë
<
I
>(°d::
f‹w¨d_as_tu∂e
(°d::
f‹w¨d
<
Args
>(
¨gs
)...))...));

1033 
	gãm∂©e
 <
	gty≥«me
... 
	gA˘i⁄s
>

1034 
	sDoAŒA˘i⁄
 {

1035 
	g¥iv©e
:

1036 
ãm∂©e
 <
ty≥«me
 
T
>

1037 
usög
 
N⁄FöÆTy≥
 =

1038 
ty≥«me
 
°d
::
c⁄dôi⁄Æ
<°d::
is_sˇœr
<
T
>::
vÆue
, 
	gT
, c⁄° T&>::
ty≥
;

1040 
	gãm∂©e
 <
ty≥«me
 
	gA˘i⁄T
, 
	gsize_t
... 
	gI
>

1041 
	g°d
::
ve˘‹
<
A˘i⁄T
> 
C⁄vît
(
IndexSequí˚
<
I
...>) const {

1042  {
A˘i⁄T
(
°d
::
gë
<
I
>(
a˘i⁄s
))...};

1045 
	gpublic
:

1046 
°d
::
tu∂e
<
A˘i⁄s
...> 
a˘i⁄s
;

1048 
	gãm∂©e
 <
ty≥«me
 
	gR
, 
	gty≥«me
... 
	gArgs
>

1049 
›î©‹
 
	gA˘i⁄
<
R
(
Args
...)>() const {

1050 
	sOp
 {

1051 
	g°d
::
ve˘‹
<
A˘i⁄
<(
N⁄FöÆTy≥
<
Args
>...)>> 
c⁄vîãd
;

1052 
	gA˘i⁄
<
R
(
Args
...)> 
	gœ°
;

1053 
R
 
›î©‹
()(
	gArgs
... 
	g¨gs
) const {

1054 autÿ
	gtu∂e_¨gs
 = 
°d
::
f‹w¨d_as_tu∂e
(°d::
f‹w¨d
<
Args
>(
¨gs
)...);

1055 auto& 
	ga
 : 
c⁄vîãd
) {

1056 
a
.
Pîf‹m
(
tu∂e_¨gs
);

1058  
	gœ°
.
Pîf‹m
(
°d
::
move
(
tu∂e_¨gs
));

1061  
	gOp
{
	gC⁄vît
<
	gA˘i⁄
<(
	gN⁄FöÆTy≥
<
	gArgs
>...)>>(

1062 
	gMakeIndexSequí˚
<...(
	gA˘i⁄s
) - 1>()),

1063 
	g°d
::
gë
<...(
A˘i⁄s
Ë- 1>(
a˘i⁄s
)};

1067 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	gty≥«me
... 
	gP¨ams
>

1068 
	sRëu∫NewA˘i⁄
 {

1069 
T
* 
›î©‹
()() const {

1070  
	göã∫Æ
::
Aµly
(

1071 [](c⁄° 
P¨ams
&... 
u≈acked_∑øms
) {

1072  
√w
 
T
(
u≈acked_∑øms
...);

1074 
∑øms
);

1076 
	g°d
::
tu∂e
<
P¨ams
...> 
∑øms
;

1079 
	gãm∂©e
 <
size_t
 
	gk
>

1080 
	sRëu∫ArgA˘i⁄
 {

1081 
	gãm∂©e
 <
	gty≥«me
... 
	gArgs
>

1082 autÿ
›î©‹
()(c⁄° 
	gArgs
&... 
	g¨gs
) const ->

1083 
ty≥«me
 
	g°d
::
tu∂e_ñemít
<
k
, std::
tu∂e
<
Args
...>>::
ty≥
 {

1084  
°d
::
gë
<
k
>(°d::
tõ
(
¨gs
...));

1088 
	gãm∂©e
 <
size_t
 
	gk
, 
ty≥«me
 
	gPå
>

1089 
	sSaveArgA˘i⁄
 {

1090 
På
 
	gpoöãr
;

1092 
	gãm∂©e
 <
	gty≥«me
... 
	gArgs
>

1093 
›î©‹
()(c⁄° 
	gArgs
&... 
	g¨gs
) const {

1094 *
	gpoöãr
 = 
°d
::
gë
<
k
>(°d::
tõ
(
¨gs
...));

1098 
	gãm∂©e
 <
size_t
 
	gk
, 
ty≥«me
 
	gPå
>

1099 
	sSaveArgPoöãeA˘i⁄
 {

1100 
På
 
	gpoöãr
;

1102 
	gãm∂©e
 <
	gty≥«me
... 
	gArgs
>

1103 
›î©‹
()(c⁄° 
	gArgs
&... 
	g¨gs
) const {

1104 *
	gpoöãr
 = *
°d
::
gë
<
k
>(°d::
tõ
(
¨gs
...));

1108 
	gãm∂©e
 <
size_t
 
	gk
, 
ty≥«me
 
	gT
>

1109 
	sSëArgRe„ªeA˘i⁄
 {

1110 
T
 
	gvÆue
;

1112 
	gãm∂©e
 <
	gty≥«me
... 
	gArgs
>

1113 
›î©‹
()(
	gArgs
&&... 
	g¨gs
) const {

1114 
usög
 
	g¨gk_ty≥
 =

1115 
ty≥«me
 ::
°d
::
tu∂e_ñemít
<
k
, 
	g°d
::
tu∂e
<
Args
...>>::
ty≥
;

1116 
°©ic_as£π
(
°d
::
is_lvÆue_ª„ªn˚
<
¨gk_ty≥
>::
vÆue
,

1118 
	g°d
::
gë
<
k
>(
°d
::
tõ
(
¨gs
...)Ë
vÆue
;

1122 
	gãm∂©e
 <
size_t
 
	gk
, 
ty≥«me
 
	gI1
,Åy≥«mê
	gI2
>

1123 
	sSëAºayArgumítA˘i⁄
 {

1124 
I1
 
	gfú°
;

1125 
I2
 
	gœ°
;

1127 
	gãm∂©e
 <
	gty≥«me
... 
	gArgs
>

1128 
›î©‹
()(c⁄° 
	gArgs
&... 
	g¨gs
) const {

1129 autÿ
	gvÆue
 = 
°d
::
gë
<
k
>(°d::
tõ
(
¨gs
...));

1130 autÿ
	gô
 = 
fú°
; ià!
œ°
; ++ô, ()++
	gvÆue
) {

1131 *
	gvÆue
 = *
ô
;

1136 
	gãm∂©e
 <
size_t
 
	gk
>

1137 
	sDñëeArgA˘i⁄
 {

1138 
	gãm∂©e
 <
	gty≥«me
... 
	gArgs
>

1139 
›î©‹
()(c⁄° 
	gArgs
&... 
	g¨gs
) const {

1140 
dñëe
 
	g°d
::
gë
<
k
>(
°d
::
tõ
(
¨gs
...));

1144 
	gãm∂©e
 <
ty≥«me
 
	gPå
>

1145 
	sRëu∫PoöãeA˘i⁄
 {

1146 
På
 
	gpoöãr
;

1147 
	gãm∂©e
 <
	gty≥«me
... 
	gArgs
>

1148 autÿ
›î©‹
()(c⁄° 
	gArgs
&...Ëc⁄° -> 
de˛ty≥
(*
poöãr
) {

1149  *
	gpoöãr
;

1153 #i‡
GTEST_HAS_EXCEPTIONS


1154 
	gãm∂©e
 <
ty≥«me
 
	gT
>

1155 
	sThrowA˘i⁄
 {

1156 
T
 
	gex˚±i⁄
;

1158 
	gãm∂©e
 <
ty≥«me
 
	gR
, 
	gty≥«me
... 
	gArgs
>

1159 
›î©‹
 
	gA˘i⁄
<
R
(
Args
...)>() const {

1160 
T
 
	gc›y
 = 
ex˚±i⁄
;

1161  [
c›y
](
	gArgs
...Ë-> 
	gR
 { 
throw
 
	gc›y
; };

1198 
	göã∫Æ
::
	tIgn‹edVÆue
 
	tUnu£d
;

1203 
	gãm∂©e
 <
	gty≥«me
... 
	gA˘i⁄
>

1204 
	göã∫Æ
::
DoAŒA˘i⁄
<
ty≥«me
 
°d
::
deˇy
<
A˘i⁄
>::
ty≥
...> 
	$DoAŒ
(

1205 
A˘i⁄
&&... 
a˘i⁄
) {

1206  {
°d
::
	`f‹w¨d_as_tu∂e
(°d::
f‹w¨d
<
A˘i⁄
>(
a˘i⁄
)...)};

1207 
	}
}

1214 
	gãm∂©e
 <
size_t
 
	gk
, 
ty≥«me
 
	gI¬îA˘i⁄
>

1215 
	göã∫Æ
::
WôhArgsA˘i⁄
<
ty≥«me
 
°d
::
deˇy
<
I¬îA˘i⁄
>::
ty≥
, 
	gk
>

1216 
	$WôhArg
(
I¬îA˘i⁄
&& 
a˘i⁄
) {

1217  {
°d
::
f‹w¨d
<
I¬îA˘i⁄
>(
a˘i⁄
)};

1218 
	}
}

1224 
	gãm∂©e
 <
size_t
 
	gk
, 
	gsize_t
... 
	gks
, 
ty≥«me
 
	gI¬îA˘i⁄
>

1225 
	göã∫Æ
::
WôhArgsA˘i⁄
<
ty≥«me
 
°d
::
deˇy
<
I¬îA˘i⁄
>::
ty≥
, 
	gk
, 
	gks
...>

1226 
	$WôhArgs
(
I¬îA˘i⁄
&& 
a˘i⁄
) {

1227  {
°d
::
f‹w¨d
<
I¬îA˘i⁄
>(
a˘i⁄
)};

1228 
	}
}

1234 
	gãm∂©e
 <
ty≥«me
 
	gI¬îA˘i⁄
>

1235 
	göã∫Æ
::
WôhArgsA˘i⁄
<
ty≥«me
 
°d
::
deˇy
<
I¬îA˘i⁄
>::
ty≥
>

1236 
	$WôhoutArgs
(
I¬îA˘i⁄
&& 
a˘i⁄
) {

1237  {
°d
::
f‹w¨d
<
I¬îA˘i⁄
>(
a˘i⁄
)};

1238 
	}
}

1243 
	gãm∂©e
 <
ty≥«me
 
	gR
>

1244 
	göã∫Æ
::
Rëu∫A˘i⁄
<
R
> 
	$Rëu∫
(
R
 
vÆue
) {

1245  
öã∫Æ
::
Rëu∫A˘i⁄
<
R
>(
°d
::
	`move
(
vÆue
));

1246 
	}
}

1249 
ölöe
 
	gPﬁym‹phicA˘i⁄
<
	göã∫Æ
::
Rëu∫NuŒA˘i⁄
> 
	$Rëu∫NuŒ
() {

1250  
	`MakePﬁym‹phicA˘i⁄
(
öã∫Æ
::
	`Rëu∫NuŒA˘i⁄
());

1251 
	}
}

1254 
ölöe
 
	gPﬁym‹phicA˘i⁄
<
	göã∫Æ
::
Rëu∫VoidA˘i⁄
> 
	$Rëu∫
() {

1255  
	`MakePﬁym‹phicA˘i⁄
(
öã∫Æ
::
	`Rëu∫VoidA˘i⁄
());

1256 
	}
}

1259 
	gãm∂©e
 <
ty≥«me
 
	gR
>

1260 
ölöe
 
	göã∫Æ
::
Rëu∫RefA˘i⁄
<
R
> 
	$Rëu∫Ref
(
R
& 
x
) {

1261  
öã∫Æ
::
Rëu∫RefA˘i⁄
<
R
>(
x
);

1262 
	}
}

1265 
	gãm∂©e
 <
ty≥«me
 
	gR
, R* = 
nuŒ±r
>

1266 
öã∫Æ
::
Rëu∫RefA˘i⁄
<
R
> 
Rëu∫Ref
(R&&Ë
dñëe
;

1271 
	gãm∂©e
 <
ty≥«me
 
	gR
>

1272 
ölöe
 
	göã∫Æ
::
Rëu∫RefOfC›yA˘i⁄
<
R
> 
	$Rëu∫RefOfC›y
(c⁄° 
R
& 
x
) {

1273  
öã∫Æ
::
Rëu∫RefOfC›yA˘i⁄
<
R
>(
x
);

1274 
	}
}

1280 
	gãm∂©e
 <
ty≥«me
 
	gR
>

1281 
	göã∫Æ
::
ByMoveWøµî
<
R
> 
	$ByMove
(
R
 
x
) {

1282  
öã∫Æ
::
ByMoveWøµî
<
R
>(
°d
::
	`move
(
x
));

1283 
	}
}

1288 
	gãm∂©e
 <
ty≥«me
 
	gT
>

1289 
	göã∫Æ
::
Rëu∫RoundRoböA˘i⁄
<
T
> 
Rëu∫RoundRobö
(
°d
::
ve˘‹
<T> 
vÆs
) {

1290  
öã∫Æ
::
Rëu∫RoundRoböA˘i⁄
<
T
>(
°d
::
move
(
vÆs
));

1296 
	gãm∂©e
 <
ty≥«me
 
	gT
>

1297 
	göã∫Æ
::
Rëu∫RoundRoböA˘i⁄
<
T
> 
Rëu∫RoundRobö
(

1298 
°d
::
öôülizî_li°
<
T
> 
vÆs
) {

1299  
öã∫Æ
::
Rëu∫RoundRoböA˘i⁄
<
T
>(
°d
::
ve˘‹
<T>(
vÆs
));

1303 
ölöe
 
	göã∫Æ
::
DoDeÁu…A˘i⁄
 
	$DoDeÁu…
() {

1304  
öã∫Æ
::
	`DoDeÁu…A˘i⁄
();

1305 
	}
}

1309 
	gãm∂©e
 <
size_t
 
	gN
, 
ty≥«me
 
	gT
>

1310 
	göã∫Æ
::
SëArgumítPoöãeA˘i⁄
<
N
, 
	gT
> 
	$SëArgPoöãe
(
T
 
vÆue
) {

1311  {
°d
::
	`move
(
vÆue
)};

1312 
	}
}

1315 
	gãm∂©e
 <
size_t
 
	gN
, 
ty≥«me
 
	gT
>

1316 
	göã∫Æ
::
SëArgumítPoöãeA˘i⁄
<
N
, 
	gT
> 
	$SëArgumítPoöãe
(
T
 
vÆue
) {

1317  {
°d
::
	`move
(
vÆue
)};

1318 
	}
}

1321 
	gãm∂©e
 <
ty≥«me
 
	gT1
,Åy≥«mê
	gT2
>

1322 
	gPﬁym‹phicA˘i⁄
<
	göã∫Æ
::
AssignA˘i⁄
<
T1
, 
	gT2
> > 
	$Assign
(
T1
* 
±r
, 
T2
 
vÆ
) {

1323  
	`MakePﬁym‹phicA˘i⁄
(
öã∫Æ
::
AssignA˘i⁄
<
T1
, 
T2
>(
±r
, 
vÆ
));

1324 
	}
}

1326 #i‡!
GTEST_OS_WINDOWS_MOBILE


1329 
	gãm∂©e
 <
ty≥«me
 
	gT
>

1330 
	gPﬁym‹phicA˘i⁄
<
	göã∫Æ
::
SëEºnoAndRëu∫A˘i⁄
<
T
> >

1331 
	$SëEºnoAndRëu∫
(
îrvÆ
, 
T
 
ªsu…
) {

1332  
	`MakePﬁym‹phicA˘i⁄
(

1333 
öã∫Æ
::
SëEºnoAndRëu∫A˘i⁄
<
T
>(
îrvÆ
, 
ªsu…
));

1334 
	}
}

1344 
	gãm∂©e
 <
ty≥«me
 
	gFun˘i⁄Im∂
>

1345 
ty≥«me
 
	g°d
::
deˇy
<
Fun˘i⁄Im∂
>::
ty≥
 
	$Invoke
(
Fun˘i⁄Im∂
&& 
fun˘i⁄_im∂
) {

1346  
°d
::
f‹w¨d
<
Fun˘i⁄Im∂
>(
fun˘i⁄_im∂
);

1347 
	}
}

1351 
	gãm∂©e
 <
˛ass
 
	gCœss
, 
ty≥«me
 
	gMëhodPå
>

1352 
	göã∫Æ
::
InvokeMëhodA˘i⁄
<
Cœss
, 
	gMëhodPå
> 
	$Invoke
(
Cœss
* 
obj_±r
,

1353 
MëhodPå
 
mëhod_±r
) {

1354  {
obj_±r
, 
mëhod_±r
};

1355 
	}
}

1358 
	gãm∂©e
 <
ty≥«me
 
	gFun˘i⁄Im∂
>

1359 
	göã∫Æ
::
InvokeWôhoutArgsA˘i⁄
<
ty≥«me
 
°d
::
deˇy
<
Fun˘i⁄Im∂
>::
ty≥
>

1360 
	$InvokeWôhoutArgs
(
Fun˘i⁄Im∂
 
fun˘i⁄_im∂
) {

1361  {
°d
::
	`move
(
fun˘i⁄_im∂
)};

1362 
	}
}

1366 
	gãm∂©e
 <
˛ass
 
	gCœss
, 
ty≥«me
 
	gMëhodPå
>

1367 
	göã∫Æ
::
InvokeMëhodWôhoutArgsA˘i⁄
<
Cœss
, 
	gMëhodPå
> 
	$InvokeWôhoutArgs
(

1368 
Cœss
* 
obj_±r
, 
MëhodPå
 
mëhod_±r
) {

1369  {
obj_±r
, 
mëhod_±r
};

1370 
	}
}

1375 
	gãm∂©e
 <
ty≥«me
 
	gA
>

1376 
ölöe
 
	göã∫Æ
::
Ign‹eResu…A˘i⁄
<
A
> 
	$Ign‹eResu…
(c⁄° 
A
& 
™_a˘i⁄
) {

1377  
öã∫Æ
::
Ign‹eResu…A˘i⁄
<
A
>(
™_a˘i⁄
);

1378 
	}
}

1390 
	gãm∂©e
 <
ty≥«me
 
	gT
>

1391 
	gölöe
 ::
°d
::
ª„ªn˚_wøµî
<
T
> 
	$ByRef
(
T
& 
l_vÆue
) {

1392  ::
°d
::
ª„ªn˚_wøµî
<
T
>(
l_vÆue
);

1393 
	}
}

1398 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	gty≥«me
... 
	gP¨ams
>

1399 
	göã∫Æ
::
Rëu∫NewA˘i⁄
<
T
, 
ty≥«me
 
	g°d
::
deˇy
<
P¨ams
>::
ty≥
...> 
	$Rëu∫New
(

1400 
P¨ams
&&... 
∑øms
) {

1401  {
°d
::
	`f‹w¨d_as_tu∂e
(°d::
f‹w¨d
<
P¨ams
>(
∑øms
)...)};

1402 
	}
}

1405 
	gãm∂©e
 <
size_t
 
	gk
>

1406 
	göã∫Æ
::
Rëu∫ArgA˘i⁄
<
k
> 
	$Rëu∫Arg
() {

1408 
	}
}

1412 
	gãm∂©e
 <
size_t
 
	gk
, 
ty≥«me
 
	gPå
>

1413 
	göã∫Æ
::
SaveArgA˘i⁄
<
k
, 
	gPå
> 
	$SaveArg
(
På
 
poöãr
) {

1414  {
poöãr
};

1415 
	}
}

1419 
	gãm∂©e
 <
size_t
 
	gk
, 
ty≥«me
 
	gPå
>

1420 
	göã∫Æ
::
SaveArgPoöãeA˘i⁄
<
k
, 
	gPå
> 
	$SaveArgPoöãe
(
På
 
poöãr
) {

1421  {
poöãr
};

1422 
	}
}

1426 
	gãm∂©e
 <
size_t
 
	gk
, 
ty≥«me
 
	gT
>

1427 
	göã∫Æ
::
SëArgRe„ªeA˘i⁄
<
k
, 
ty≥«me
 
	g°d
::
deˇy
<
T
>::
ty≥
> 
	$SëArgRe„ªe
(

1428 
T
&& 
vÆue
) {

1429  {
°d
::
f‹w¨d
<
T
>(
vÆue
)};

1430 
	}
}

1437 
	gãm∂©e
 <
size_t
 
	gk
, 
ty≥«me
 
	gI1
,Åy≥«mê
	gI2
>

1438 
	göã∫Æ
::
SëAºayArgumítA˘i⁄
<
k
, 
	gI1
, 
	gI2
> 
	$SëAºayArgumít
(
I1
 
fú°
,

1439 
I2
 
œ°
) {

1440  {
fú°
, 
œ°
};

1441 
	}
}

1445 
	gãm∂©e
 <
size_t
 
	gk
>

1446 
	göã∫Æ
::
DñëeArgA˘i⁄
<
k
> 
	$DñëeArg
() {

1448 
	}
}

1451 
	gãm∂©e
 <
ty≥«me
 
	gPå
>

1452 
	göã∫Æ
::
Rëu∫PoöãeA˘i⁄
<
På
> 
	$Rëu∫Poöãe
(
På
 
poöãr
) {

1453  {
poöãr
};

1454 
	}
}

1458 #i‡
GTEST_HAS_EXCEPTIONS


1459 
	gãm∂©e
 <
ty≥«me
 
	gT
>

1460 
	göã∫Æ
::
ThrowA˘i⁄
<
ty≥«me
 
°d
::
deˇy
<
T
>::
ty≥
> 
	$Throw
(
T
&& 
ex˚±i⁄
) {

1461  {
°d
::
f‹w¨d
<
T
>(
ex˚±i⁄
)};

1462 
	}
}

1465 
«me•a˚
 
	göã∫Æ
 {

1481 
	sEx˚ssiveArg
 {};

1485 
	gãm∂©e
 <
ty≥«me
 
	gF
,Åy≥«mê
	gIm∂
> 
	gA˘i⁄Im∂
;

1487 
	gãm∂©e
 <
ty≥«me
 
	gIm∂
>

1488 
	sIm∂Ba£
 {

1489 
	sHﬁdî
 {

1491 
ex∂icô
 
›î©‹
 c⁄° 
	gIm∂
&(Ëc⁄° {  *
	g±r
; }

1492 
	g°d
::
sh¨ed_±r
<
Im∂
> 
±r
;

1494 
usög
 
	gty≥
 = 
ty≥«me
 
°d
::
c⁄dôi⁄Æ
<°d::
is_c⁄°ru˘ibÀ
<
Im∂
>::
vÆue
,

1495 
	gIm∂
, 
	gHﬁdî
>::
ty≥
;

1498 
	gãm∂©e
 <
ty≥«me
 
	gR
, 
	gty≥«me
... 
	gArgs
,Åy≥«mê
	gIm∂
>

1499 
	gA˘i⁄Im∂
<
R
(
Args
...), 
	gIm∂
> : 
Im∂Ba£
<
Im∂
>::
ty≥
 {

1500 
usög
 
Ba£
 = 
ty≥«me
 
Im∂Ba£
<
Im∂
>::
ty≥
;

1501 
usög
 
	gfun˘i⁄_ty≥
 = 
R
(
Args
...);

1502 
usög
 
	g¨gs_ty≥
 = 
°d
::
tu∂e
<
Args
...>;

1504 
A˘i⁄Im∂
() = ;

1505 
ex∂icô
 
A˘i⁄Im∂
(
°d
::
sh¨ed_±r
<
Im∂
> 
im∂
Ë: 
Ba£
{°d::
move
(impl)} { }

1507 
R
 
›î©‹
()(
Args
&&... 
¨g
) const {

1508 
c⁄°ex¥
 
size_t
 
kMaxArgs
 =

1509 ...(
Args
) <= 10 ? ...(Args) : 10;

1510  
Aµly
(
MakeIndexSequí˚
<
kMaxArgs
>{},

1511 
MakeIndexSequí˚
<10 - 
kMaxArgs
>{},

1512 
¨gs_ty≥
{
°d
::
f‹w¨d
<
Args
>(
¨g
)...});

1515 
	gãm∂©e
 <
	g°d
::
size_t
... 
¨g_id
, std::size_t... 
ex˚ss_id
>

1516 
R
 
Aµly
(
IndexSequí˚
<
¨g_id
...>, IndexSequí˚<
ex˚ss_id
...>,

1517 c⁄° 
¨gs_ty≥
& 
¨gs
) const {

1523 
c⁄°ex¥
 
Ex˚ssiveArg
 
	gkEx˚ssArg
{};

1524  
	g°©ic_ˇ°
<c⁄° 
	gIm∂
&>(*
	gthis
).
ãm∂©e
 
	ggmock_Pîf‹mIm∂
<

1525  
	gfun˘i⁄_ty≥
, 
	gR
,

1526  
	g¨gs_ty≥
,

1527  
ty≥«me
 
	g°d
::
tu∂e_ñemít
<
¨g_id
, 
	g¨gs_ty≥
>::
ty≥
...>(

1528  
¨gs
, 
	g°d
::
gë
<
¨g_id
>(args)...,

1529 (()
	gex˚ss_id
, 
	gkEx˚ssArg
)...);

1535 
	gãm∂©e
 <
ty≥«me
 
	gF
,Åy≥«mê
	gIm∂
>

1536 ::
ã°ög
::
A˘i⁄
<
F
> 
MakeA˘i⁄
() {

1537  ::
ã°ög
::
A˘i⁄
<
F
>(
A˘i⁄Im∂
<F, 
	gIm∂
>());

1541 
	gãm∂©e
 <
ty≥«me
 
	gF
,Åy≥«mê
	gIm∂
>

1542 ::
ã°ög
::
A˘i⁄
<
F
> 
MakeA˘i⁄
(
°d
::
sh¨ed_±r
<
Im∂
> 
im∂
) {

1543  ::
ã°ög
::
A˘i⁄
<
F
>(
A˘i⁄Im∂
<F, 
	gIm∂
>(
	g°d
::
move
(
im∂
)));

1546 
	#GMOCK_INTERNAL_ARG_UNUSED
(
i
, 
d©a
, 
ñ
) \

1547 , c⁄° 
¨g
##
i
##
_ty≥
&árg##ò
GTEST_ATTRIBUTE_UNUSED_


	)

1548 
	#GMOCK_ACTION_ARG_TYPES_AND_NAMES_UNUSED_
 \

1549 c⁄° 
¨gs_ty≥
& 
¨gs
 
GTEST_ATTRIBUTE_UNUSED_
 
	`GMOCK_PP_REPEAT
( \

1550 
GMOCK_INTERNAL_ARG_UNUSED
, , 10)

	)

1552 
	#GMOCK_INTERNAL_ARG
(
i
, 
d©a
, 
ñ
Ë, c⁄° 
¨g
##i##
_ty≥
&árg##
	)
i

1553 
	#GMOCK_ACTION_ARG_TYPES_AND_NAMES_
 \

1554 c⁄° 
¨gs_ty≥
& 
¨gs
 
	`GMOCK_PP_REPEAT
(
GMOCK_INTERNAL_ARG
, , 10)

	)

1556 
	#GMOCK_INTERNAL_TEMPLATE_ARG
(
i
, 
d©a
, 
ñ
Ë, 
ty≥«me
 
¨g
##i##
_ty≥


	)

1557 
	#GMOCK_ACTION_TEMPLATE_ARGS_NAMES_
 \

1558 
	`GMOCK_PP_TAIL
(
	`GMOCK_PP_REPEAT
(
GMOCK_INTERNAL_TEMPLATE_ARG
, , 10))

	)

1560 
	#GMOCK_INTERNAL_TYPENAME_PARAM
(
i
, 
d©a
, 
∑øm
Ë, 
ty≥«me
Ö¨am##
_ty≥


	)

1561 
	#GMOCK_ACTION_TYPENAME_PARAMS_
(
∑øms
) \

1562 
	`GMOCK_PP_TAIL
(
	`GMOCK_PP_FOR_EACH
(
GMOCK_INTERNAL_TYPENAME_PARAM
, , 
∑øms
))

	)

1564 
	#GMOCK_INTERNAL_TYPE_PARAM
(
i
, 
d©a
, 
∑øm
Ë,Ö¨am##
_ty≥


	)

1565 
	#GMOCK_ACTION_TYPE_PARAMS_
(
∑øms
) \

1566 
	`GMOCK_PP_TAIL
(
	`GMOCK_PP_FOR_EACH
(
GMOCK_INTERNAL_TYPE_PARAM
, , 
∑øms
))

	)

1568 
	#GMOCK_INTERNAL_TYPE_GVALUE_PARAM
(
i
, 
d©a
, 
∑øm
) \

1569 , 
∑øm
##
_ty≥
 
gmock_p
##
i


	)

1570 
	#GMOCK_ACTION_TYPE_GVALUE_PARAMS_
(
∑øms
) \

1571 
	`GMOCK_PP_TAIL
(
	`GMOCK_PP_FOR_EACH
(
GMOCK_INTERNAL_TYPE_GVALUE_PARAM
, , 
∑øms
))

	)

1573 
	#GMOCK_INTERNAL_GVALUE_PARAM
(
i
, 
d©a
, 
∑øm
) \

1574 , 
°d
::
f‹w¨d
<
∑øm
##
_ty≥
>(
gmock_p
##
i
)

	)

1575 
	#GMOCK_ACTION_GVALUE_PARAMS_
(
∑øms
) \

1576 
	`GMOCK_PP_TAIL
(
	`GMOCK_PP_FOR_EACH
(
GMOCK_INTERNAL_GVALUE_PARAM
, , 
∑øms
))

	)

1578 
	#GMOCK_INTERNAL_INIT_PARAM
(
i
, 
d©a
, 
∑øm
) \

1579 , 
	`∑øm
(::
°d
::
f‹w¨d
<
∑øm
##
_ty≥
>(
gmock_p
##
i
))

	)

1580 
	#GMOCK_ACTION_INIT_PARAMS_
(
∑øms
) \

1581 
	`GMOCK_PP_TAIL
(
	`GMOCK_PP_FOR_EACH
(
GMOCK_INTERNAL_INIT_PARAM
, , 
∑øms
))

	)

1583 
	#GMOCK_INTERNAL_FIELD_PARAM
(
i
, 
d©a
, 
∑øm
Ë∑øm##
_ty≥
Ö¨am;

	)

1584 
	#GMOCK_ACTION_FIELD_PARAMS_
(
∑øms
) \

1585 
	`GMOCK_PP_FOR_EACH
(
GMOCK_INTERNAL_FIELD_PARAM
, , 
∑øms
)

	)

1587 
	#GMOCK_INTERNAL_ACTION
(
«me
, 
fuŒ_«me
, 
∑øms
) \

1588 
ãm∂©e
 <
	`GMOCK_ACTION_TYPENAME_PARAMS_
(
∑øms
)> \

1589 ˛as†
	cfuŒ_«me
 { \

1590 
public
: \

1591 
ex∂icô
 
	`fuŒ_«me
(
	`GMOCK_ACTION_TYPE_GVALUE_PARAMS_
(
∑øms
)) \

1592 : 
	`im∂_
(
°d
::
make_sh¨ed
<
gmock_Im∂
>( \

1593 
	`GMOCK_ACTION_GVALUE_PARAMS_
(
∑øms
))) { } \

1594 
	`fuŒ_«me
(c⁄° 
fuŒ_«me
&) = ; \

1595 
	`fuŒ_«me
(
fuŒ_«me
&&Ë
n€x˚±
 = ; \

1596 
ãm∂©e
 <
ty≥«me
 
F
> \

1597 
›î©‹
 ::
ã°ög
::
A˘i⁄
<
F
>() const { \

1598  ::
ã°ög
::
öã∫Æ
::
MakeA˘i⁄
<
F
>(
im∂_
); \

1600 
¥iv©e
: \

1601 ˛as†
	cgmock_Im∂
 { \

1602 
public
: \

1603 
ex∂icô
 
	`gmock_Im∂
(
	`GMOCK_ACTION_TYPE_GVALUE_PARAMS_
(
∑øms
)) \

1604 : 
	`GMOCK_ACTION_INIT_PARAMS_
(
∑øms
) {} \

1605 
ãm∂©e
 <
ty≥«me
 
fun˘i⁄_ty≥
,Åy≥«mê
ªtu∫_ty≥
, \

1606 
ty≥«me
 
¨gs_ty≥
, 
GMOCK_ACTION_TEMPLATE_ARGS_NAMES_
> \

1607 
ªtu∫_ty≥
 
	`gmock_Pîf‹mIm∂
(
GMOCK_ACTION_ARG_TYPES_AND_NAMES_
) const; \

1608 
	`GMOCK_ACTION_FIELD_PARAMS_
(
∑øms
) \

1610 
°d
::
sh¨ed_±r
<c⁄° 
gmock_Im∂
> 
im∂_
; \

1612 
ãm∂©e
 <
	`GMOCK_ACTION_TYPENAME_PARAMS_
(
∑øms
)> \

1613 
ölöe
 
fuŒ_«me
<
	`GMOCK_ACTION_TYPE_PARAMS_
(
∑øms
)> 
	`«me
( \

1614 
	`GMOCK_ACTION_TYPE_GVALUE_PARAMS_
(
∑øms
)) { \

1615  
fuŒ_«me
<
	`GMOCK_ACTION_TYPE_PARAMS_
(
∑øms
)>( \

1616 
	`GMOCK_ACTION_GVALUE_PARAMS_
(
∑øms
)); \

1618 
ãm∂©e
 <
	`GMOCK_ACTION_TYPENAME_PARAMS_
(
∑øms
)> \

1619 
ãm∂©e
 <
ty≥«me
 
fun˘i⁄_ty≥
,Åy≥«mê
ªtu∫_ty≥
,Åy≥«mê
¨gs_ty≥
, \

1620 
GMOCK_ACTION_TEMPLATE_ARGS_NAMES_
> \

1621 
ªtu∫_ty≥
 
fuŒ_«me
<
	`GMOCK_ACTION_TYPE_PARAMS_
(
∑øms
)>::
gmock_Im∂
:: \

1622 
	`gmock_Pîf‹mIm∂
(
GMOCK_ACTION_ARG_TYPES_AND_NAMES_UNUSED_
Ëc⁄°

	)

1627 
	#ACTION
(
«me
) \

1628 
˛ass
 
«me
##
A˘i⁄
 { \

1629 
public
: \

1630 
ex∂icô
 
«me
##
	`A˘i⁄
(Ë
n€x˚±
 {} \

1631 
«me
##
	`A˘i⁄
(c⁄°Çame##
A˘i⁄
&Ë
n€x˚±
 {} \

1632 
ãm∂©e
 <
ty≥«me
 
F
> \

1633 
›î©‹
 ::
ã°ög
::
A˘i⁄
<
F
>() const { \

1634  ::
ã°ög
::
öã∫Æ
::
MakeA˘i⁄
<
F
, 
gmock_Im∂
>(); \

1636 
¥iv©e
: \

1637 ˛as†
	cgmock_Im∂
 { \

1638 
public
: \

1639 
ãm∂©e
 <
ty≥«me
 
fun˘i⁄_ty≥
,Åy≥«mê
ªtu∫_ty≥
, \

1640 
ty≥«me
 
¨gs_ty≥
, 
GMOCK_ACTION_TEMPLATE_ARGS_NAMES_
> \

1641 
ªtu∫_ty≥
 
	`gmock_Pîf‹mIm∂
(
GMOCK_ACTION_ARG_TYPES_AND_NAMES_
) const; \

1644 
ölöe
 
«me
##
A˘i⁄
 
	$«me
(Ë
GTEST_MUST_USE_RESULT_
; \

1645 
ölöe
 
«me
##
A˘i⁄
 
	$«me
(Ë{  
«me
##
	`A˘i⁄
(); 
	}
} \

1646 
ãm∂©e
 <
ty≥«me
 
fun˘i⁄_ty≥
,Åy≥«mê
ªtu∫_ty≥
,Åy≥«mê
¨gs_ty≥
, \

1647 
GMOCK_ACTION_TEMPLATE_ARGS_NAMES_
> \

1648 
ªtu∫_ty≥
 
«me
##
A˘i⁄
::
gmock_Im∂
::
	`gmock_Pîf‹mIm∂
( \

1649 
GMOCK_ACTION_ARG_TYPES_AND_NAMES_UNUSED_
Ëc⁄°

	)

1651 
	#ACTION_P
(
«me
, ...) \

1652 
	`GMOCK_INTERNAL_ACTION
(
«me
,Çame##
A˘i⁄P
, (
__VA_ARGS__
))

	)

1654 
	#ACTION_P2
(
«me
, ...) \

1655 
	`GMOCK_INTERNAL_ACTION
(
«me
,Çame##
A˘i⁄P2
, (
__VA_ARGS__
))

	)

1657 
	#ACTION_P3
(
«me
, ...) \

1658 
	`GMOCK_INTERNAL_ACTION
(
«me
,Çame##
A˘i⁄P3
, (
__VA_ARGS__
))

	)

1660 
	#ACTION_P4
(
«me
, ...) \

1661 
	`GMOCK_INTERNAL_ACTION
(
«me
,Çame##
A˘i⁄P4
, (
__VA_ARGS__
))

	)

1663 
	#ACTION_P5
(
«me
, ...) \

1664 
	`GMOCK_INTERNAL_ACTION
(
«me
,Çame##
A˘i⁄P5
, (
__VA_ARGS__
))

	)

1666 
	#ACTION_P6
(
«me
, ...) \

1667 
	`GMOCK_INTERNAL_ACTION
(
«me
,Çame##
A˘i⁄P6
, (
__VA_ARGS__
))

	)

1669 
	#ACTION_P7
(
«me
, ...) \

1670 
	`GMOCK_INTERNAL_ACTION
(
«me
,Çame##
A˘i⁄P7
, (
__VA_ARGS__
))

	)

1672 
	#ACTION_P8
(
«me
, ...) \

1673 
	`GMOCK_INTERNAL_ACTION
(
«me
,Çame##
A˘i⁄P8
, (
__VA_ARGS__
))

	)

1675 
	#ACTION_P9
(
«me
, ...) \

1676 
	`GMOCK_INTERNAL_ACTION
(
«me
,Çame##
A˘i⁄P9
, (
__VA_ARGS__
))

	)

1678 
	#ACTION_P10
(
«me
, ...) \

1679 
	`GMOCK_INTERNAL_ACTION
(
«me
,Çame##
A˘i⁄P10
, (
__VA_ARGS__
))

	)

1683 #ifde‡
_MSC_VER


1684 #¥agm®
w¨nög
(
p›
)

	@/usr/include/gmock/gmock-cardinalities.h

39 #i‚de‡
GOOGLEMOCK_INCLUDE_GMOCK_GMOCK_CARDINALITIES_H_


40 
	#GOOGLEMOCK_INCLUDE_GMOCK_GMOCK_CARDINALITIES_H_


	)

42 
	~<limôs.h
>

43 
	~<mem‹y
>

44 
	~<o°ªam
>

45 
	~"gmock/öã∫Æ/gmock-p‹t.h
"

46 
	~"gã°/gã°.h
"

48 
GTEST_DISABLE_MSC_WARNINGS_PUSH_
(4251 \

51 
«me•a˚
 
	gã°ög
 {

64 ˛as†
	cC¨döÆôyI¡îÁ˚
 {

65 
	gpublic
:

66 
vútuÆ
 ~
C¨döÆôyI¡îÁ˚
() {}

70 
vútuÆ
 
C⁄£rv©iveLowîBound
() const {  0; }

71 
vútuÆ
 
C⁄£rv©iveUµîBound
(Ëc⁄° {  
	gINT_MAX
; }

75 
vútuÆ
 
boﬁ
 
IsS©isfõdByCÆlCou¡
(
ˇŒ_cou¡
) const = 0;

79 
vútuÆ
 
boﬁ
 
IsS©uøãdByCÆlCou¡
(
ˇŒ_cou¡
) const = 0;

82 
vútuÆ
 
Des¸ibeTo
(::
°d
::
o°ªam
* 
os
) const = 0;

89 ˛as†
	cGTEST_API_
 
	gC¨döÆôy
 {

90 
	gpublic
:

93 
C¨döÆôy
() {}

96 
ex∂icô
 
C¨döÆôy
(c⁄° 
C¨döÆôyI¡îÁ˚
* 
im∂
Ë: 
im∂_
(impl) {}

100 
C⁄£rv©iveLowîBound
(Ëc⁄° {  
im∂_
->ConservativeLowerBound(); }

101 
C⁄£rv©iveUµîBound
(Ëc⁄° {  
	gim∂_
->ConservativeUpperBound(); }

105 
boﬁ
 
IsS©isfõdByCÆlCou¡
(
ˇŒ_cou¡
) const {

106  
	gim∂_
->
IsS©isfõdByCÆlCou¡
(
ˇŒ_cou¡
);

111 
boﬁ
 
IsS©uøãdByCÆlCou¡
(
ˇŒ_cou¡
) const {

112  
	gim∂_
->
IsS©uøãdByCÆlCou¡
(
ˇŒ_cou¡
);

117 
boﬁ
 
IsOvîS©uøãdByCÆlCou¡
(
ˇŒ_cou¡
) const {

118  
	gim∂_
->
IsS©uøãdByCÆlCou¡
(
ˇŒ_cou¡
) &&

119 !
	gim∂_
->
IsS©isfõdByCÆlCou¡
(
ˇŒ_cou¡
);

123 
Des¸ibeTo
(::
°d
::
o°ªam
* 
os
Ëc⁄° { 
im∂_
->DescribeTo(os); }

126 
Des¸ibeA˘uÆCÆlCou¡To
(
a˘uÆ_ˇŒ_cou¡
,

127 ::
°d
::
o°ªam
* 
os
);

129 
	g¥iv©e
:

130 
°d
::
sh¨ed_±r
<c⁄° 
C¨döÆôyI¡îÁ˚
> 
im∂_
;

134 
GTEST_API_
 
C¨döÆôy
 
AtLó°
(
n
);

137 
GTEST_API_
 
C¨döÆôy
 
AtMo°
(
n
);

140 
GTEST_API_
 
C¨döÆôy
 
AnyNumbî
();

143 
GTEST_API_
 
C¨döÆôy
 
Bëwìn
(
mö
, 
max
);

146 
GTEST_API_
 
C¨döÆôy
 
Exa˘ly
(
n
);

149 
ölöe
 
C¨döÆôy
 
	$MakeC¨döÆôy
(c⁄° 
C¨döÆôyI¡îÁ˚
* 
c
) {

150  
	`C¨döÆôy
(
c
);

151 
	}
}

155 
	$GTEST_DISABLE_MSC_WARNINGS_POP_
()

	@/usr/include/gmock/gmock-function-mocker.h

36 #i‚de‡
GOOGLEMOCK_INCLUDE_GMOCK_INTERNAL_GMOCK_FUNCTION_MOCKER_H_


37 
	#GOOGLEMOCK_INCLUDE_GMOCK_INTERNAL_GMOCK_FUNCTION_MOCKER_H_


38 

	)

39 
	~<ty≥_åaôs
>

40 
	~<utûôy
>

42 
	~"gmock/gmock-•ec-buûdîs.h
"

43 
	~"gmock/öã∫Æ/gmock-öã∫Æ-utûs.h
"

44 
	~"gmock/öã∫Æ/gmock-µ.h
"

46 
«me•a˚
 
	gã°ög
 {

47 
«me•a˚
 
	göã∫Æ
 {

48 
	gãm∂©e
 <
ty≥«me
 
	gT
>

49 
usög
 
	gidítôy_t
 = 
T
;

51 
	gãm∂©e
 <
ty≥«me
 
	gP©ã∫
>

52 
	sThisRefAdju°î
 {

53 
	gãm∂©e
 <
ty≥«me
 
	gT
>

54 
usög
 
	gAdju°T
 = 
ty≥«me
 
°d
::
c⁄dôi⁄Æ
<

55 
°d
::
is_c⁄°
<
ty≥«me
 std::
ªmove_ª„ªn˚
<
P©ã∫
>::
ty≥
>::
vÆue
,

56 
ty≥«me
 
	g°d
::
c⁄dôi⁄Æ
<
°d
::
is_lvÆue_ª„ªn˚
<
P©ã∫
>::
vÆue
,

57 c⁄° 
	gT
&, c⁄° T&&>::
ty≥
,

58 
ty≥«me
 
	g°d
::
c⁄dôi⁄Æ
<
°d
::
is_lvÆue_ª„ªn˚
<
P©ã∫
>::
vÆue
, 
	gT
&,

59 
	gT
&&>::
ty≥
>::type;

61 
	gãm∂©e
 <
ty≥«me
 
	gMockTy≥
>

62 
	gAdju°T
<
	gMockTy≥
> 
Adju°
(c⁄° 
MockTy≥
& 
mock
) {

63  
	g°©ic_ˇ°
<
	gAdju°T
<
	gMockTy≥
>>(
	gc⁄°_ˇ°
<MockTy≥&>(
	gmock
));

74 
usög
 
	göã∫Æ
::
Fun˘i⁄Mockî
;

77 
	#MOCK_METHOD
(...) \

78 
	`GMOCK_PP_VARIADIC_CALL
(
GMOCK_INTERNAL_MOCK_METHOD_ARG_
, 
__VA_ARGS__
)

	)

80 
	#GMOCK_INTERNAL_MOCK_METHOD_ARG_1
(...) \

81 
	`GMOCK_INTERNAL_WRONG_ARITY
(
__VA_ARGS__
)

	)

83 
	#GMOCK_INTERNAL_MOCK_METHOD_ARG_2
(...) \

84 
	`GMOCK_INTERNAL_WRONG_ARITY
(
__VA_ARGS__
)

	)

86 
	#GMOCK_INTERNAL_MOCK_METHOD_ARG_3
(
_Rë
, 
_MëhodName
, 
_Args
) \

87 
	`GMOCK_INTERNAL_MOCK_METHOD_ARG_4
(
_Rë
, 
_MëhodName
, 
_Args
, ())

	)

89 
	#GMOCK_INTERNAL_MOCK_METHOD_ARG_4
(
_Rë
, 
_MëhodName
, 
_Args
, 
_S≥c
) \

90 
	`GMOCK_INTERNAL_ASSERT_PARENTHESIS
(
_Args
); \

91 
	`GMOCK_INTERNAL_ASSERT_PARENTHESIS
(
_S≥c
); \

92 
	`GMOCK_INTERNAL_ASSERT_VALID_SIGNATURE
( \

93 
GMOCK_PP_NARG0
 
_Args
, 
	`GMOCK_INTERNAL_SIGNATURE
(
_Rë
, _Args)); \

94 
	`GMOCK_INTERNAL_ASSERT_VALID_SPEC
(
_S≥c
) \

95 
	`GMOCK_INTERNAL_MOCK_METHOD_IMPL
( \

96 
GMOCK_PP_NARG0
 
_Args
, 
_MëhodName
, 
	`GMOCK_INTERNAL_HAS_CONST
(
_S≥c
), \

97 
	`GMOCK_INTERNAL_HAS_OVERRIDE
(
_S≥c
), 
	`GMOCK_INTERNAL_HAS_FINAL
(_Spec), \

98 
	`GMOCK_INTERNAL_GET_NOEXCEPT_SPEC
(
_S≥c
), \

99 
	`GMOCK_INTERNAL_GET_CALLTYPE
(
_S≥c
), 
	`GMOCK_INTERNAL_GET_REF_SPEC
(_Spec), \

100 (
	`GMOCK_INTERNAL_SIGNATURE
(
_Rë
, 
_Args
)))

	)

102 
	#GMOCK_INTERNAL_MOCK_METHOD_ARG_5
(...) \

103 
	`GMOCK_INTERNAL_WRONG_ARITY
(
__VA_ARGS__
)

	)

105 
	#GMOCK_INTERNAL_MOCK_METHOD_ARG_6
(...) \

106 
	`GMOCK_INTERNAL_WRONG_ARITY
(
__VA_ARGS__
)

	)

108 
	#GMOCK_INTERNAL_MOCK_METHOD_ARG_7
(...) \

109 
	`GMOCK_INTERNAL_WRONG_ARITY
(
__VA_ARGS__
)

	)

111 
	#GMOCK_INTERNAL_WRONG_ARITY
(...) \

112 
	`°©ic_as£π
( \

113 
Ál£
, \

117 "ô mu°álsÿbêí˛o£d i¿∑ª¡he£s.")

	)

119 
	#GMOCK_INTERNAL_ASSERT_PARENTHESIS
(
_Tu∂e
) \

120 
	`°©ic_as£π
( \

121 
	`GMOCK_PP_IS_ENCLOSED_PARENS
(
_Tu∂e
), \

122 
	`GMOCK_PP_STRINGIZE
(
_Tu∂e
Ë" should bêí˛o£d i¿∑ª¡he£s.")

	)

124 
	#GMOCK_INTERNAL_ASSERT_VALID_SIGNATURE
(
_N
, ...) \

125 
	`°©ic_as£π
( \

126 
°d
::
is_fun˘i⁄
<
__VA_ARGS__
>::
vÆue
, \

129 
	`°©ic_as£π
( \

130 ::
ã°ög
::
tu∂e_size
<
ty≥«me
 ::ã°ög::
öã∫Æ
::
Fun˘i⁄
< \

131 
__VA_ARGS__
>::
ArgumítTu∂e
>::
vÆue
 =
_N
, \

132 "Thi†mëhod d€†nŸÅakê" 
	`GMOCK_PP_STRINGIZE
( \

133 
_N
Ë"árgumíts. P¨íthesizêÆ»ty≥†wôh u≈rŸe˘ed commas.")

	)

135 
	#GMOCK_INTERNAL_ASSERT_VALID_SPEC
(
_S≥c
) \

136 
	`GMOCK_PP_FOR_EACH
(
GMOCK_INTERNAL_ASSERT_VALID_SPEC_ELEMENT
, ~, 
_S≥c
)

	)

138 
	#GMOCK_INTERNAL_MOCK_METHOD_IMPL
(
_N
, 
_MëhodName
, 
_C⁄°√ss
, \

139 
_Ovîride
, 
_FöÆ
, 
_N€x˚±S≥c
, \

140 
_CÆlTy≥
, 
_RefS≥c
, 
_Sig«tuª
) \

141 
ty≥«me
 ::
ã°ög
::
öã∫Æ
::
Fun˘i⁄
<
	`GMOCK_PP_REMOVE_PARENS
( \

142 
_Sig«tuª
)>::
Resu…
 \

143 
	`GMOCK_INTERNAL_EXPAND
(
_CÆlTy≥
) \

144 
	`_MëhodName
(
	`GMOCK_PP_REPEAT
(
GMOCK_INTERNAL_PARAMETER
, 
_Sig«tuª
, 
_N
)) \

145 
	`GMOCK_PP_IF
(
_C⁄°√ss
, c⁄°, ) 
_RefS≥c
 
_N€x˚±S≥c
 \

146 
	`GMOCK_PP_IF
(
_Ovîride
, 
ovîride
, ) GMOCK_PP_IF(
_FöÆ
, 
föÆ
, ) { \

147 
	`GMOCK_MOCKER_
(
_N
, 
_C⁄°√ss
, 
_MëhodName
) \

148 .
	`SëOw√rAndName
(
this
, #_MethodName); \

149  
	`GMOCK_MOCKER_
(
_N
, 
_C⁄°√ss
, 
_MëhodName
) \

150 .
	`Invoke
(
	`GMOCK_PP_REPEAT
(
GMOCK_INTERNAL_FORWARD_ARG
, 
_Sig«tuª
, 
_N
)); \

152 ::
ã°ög
::
MockS≥c
<
	`GMOCK_PP_REMOVE_PARENS
(
_Sig«tuª
)> 
gmock_
##
	`_MëhodName
( \

153 
	`GMOCK_PP_REPEAT
(
GMOCK_INTERNAL_MATCHER_PARAMETER
, 
_Sig«tuª
, 
_N
)) \

154 
	`GMOCK_PP_IF
(
_C⁄°√ss
, c⁄°, ) 
_RefS≥c
 { \

155 
	`GMOCK_MOCKER_
(
_N
, 
_C⁄°√ss
, 
_MëhodName
).
	`Regi°îOw√r
(
this
); \

156  
	`GMOCK_MOCKER_
(
_N
, 
_C⁄°√ss
, 
_MëhodName
) \

157 .
	`Wôh
(
	`GMOCK_PP_REPEAT
(
GMOCK_INTERNAL_MATCHER_ARGUMENT
, , 
_N
)); \

159 ::
ã°ög
::
MockS≥c
<
	`GMOCK_PP_REMOVE_PARENS
(
_Sig«tuª
)> 
gmock_
##
	`_MëhodName
( \

160 c⁄° ::
ã°ög
::
öã∫Æ
::
WôhoutM©chîs
&, \

161 
	`GMOCK_PP_IF
(
_C⁄°√ss
, c⁄°, )::
ã°ög
::
öã∫Æ
::
Fun˘i⁄
< \

162 
	`GMOCK_PP_REMOVE_PARENS
(
_Sig«tuª
)>*Ëc⁄° 
_RefS≥c
 
_N€x˚±S≥c
 { \

163  ::
ã°ög
::
öã∫Æ
::
ThisRefAdju°î
<
	`GMOCK_PP_IF
( \

164 
_C⁄°√ss
, c⁄°, ) 
_RefS≥c
>::
	`Adju°
(*
this
) \

165 .
gmock_
##
	`_MëhodName
(
	`GMOCK_PP_REPEAT
( \

166 
GMOCK_INTERNAL_A_MATCHER_ARGUMENT
, 
_Sig«tuª
, 
_N
)); \

168 
muèbÀ
 ::
ã°ög
::
Fun˘i⁄Mockî
<
	`GMOCK_PP_REMOVE_PARENS
(
_Sig«tuª
)> \

169 
	`GMOCK_MOCKER_
(
_N
, 
_C⁄°√ss
, 
_MëhodName
)

	)

171 
	#GMOCK_INTERNAL_EXPAND
(...Ë
__VA_ARGS__


	)

174 
	#GMOCK_INTERNAL_HAS_CONST
(
_Tu∂e
) \

175 
	`GMOCK_PP_HAS_COMMA
(
	`GMOCK_PP_FOR_EACH
(
GMOCK_INTERNAL_DETECT_CONST
, ~, 
_Tu∂e
))

	)

177 
	#GMOCK_INTERNAL_HAS_OVERRIDE
(
_Tu∂e
) \

178 
	`GMOCK_PP_HAS_COMMA
( \

179 
	`GMOCK_PP_FOR_EACH
(
GMOCK_INTERNAL_DETECT_OVERRIDE
, ~, 
_Tu∂e
))

	)

181 
	#GMOCK_INTERNAL_HAS_FINAL
(
_Tu∂e
) \

182 
	`GMOCK_PP_HAS_COMMA
(
	`GMOCK_PP_FOR_EACH
(
GMOCK_INTERNAL_DETECT_FINAL
, ~, 
_Tu∂e
))

	)

184 
	#GMOCK_INTERNAL_GET_NOEXCEPT_SPEC
(
_Tu∂e
) \

185 
	`GMOCK_PP_FOR_EACH
(
GMOCK_INTERNAL_NOEXCEPT_SPEC_IF_NOEXCEPT
, ~, 
_Tu∂e
)

	)

187 
	#GMOCK_INTERNAL_NOEXCEPT_SPEC_IF_NOEXCEPT
(
_i
, 
_
, 
_ñem
) \

188 
	`GMOCK_PP_IF
( \

189 
	`GMOCK_PP_HAS_COMMA
(
	`GMOCK_INTERNAL_DETECT_NOEXCEPT
(
_i
, 
_
, 
_ñem
)), \

190 
_ñem
, )

	)

192 
	#GMOCK_INTERNAL_GET_REF_SPEC
(
_Tu∂e
) \

193 
	`GMOCK_PP_FOR_EACH
(
GMOCK_INTERNAL_REF_SPEC_IF_REF
, ~, 
_Tu∂e
)

	)

195 
	#GMOCK_INTERNAL_REF_SPEC_IF_REF
(
_i
, 
_
, 
_ñem
) \

196 
	`GMOCK_PP_IF
(
	`GMOCK_PP_HAS_COMMA
(
	`GMOCK_INTERNAL_DETECT_REF
(
_i
, 
_
, 
_ñem
)), \

197 
	`GMOCK_PP_CAT
(
GMOCK_INTERNAL_UNPACK_
, 
_ñem
), )

	)

199 
	#GMOCK_INTERNAL_GET_CALLTYPE
(
_Tu∂e
) \

200 
	`GMOCK_PP_FOR_EACH
(
GMOCK_INTERNAL_GET_CALLTYPE_IMPL
, ~, 
_Tu∂e
)

	)

202 
	#GMOCK_INTERNAL_ASSERT_VALID_SPEC_ELEMENT
(
_i
, 
_
, 
_ñem
) \

203 
	`°©ic_as£π
( \

204 (
	`GMOCK_PP_HAS_COMMA
(
	`GMOCK_INTERNAL_DETECT_CONST
(
_i
, 
_
, 
_ñem
)) + \

205 
	`GMOCK_PP_HAS_COMMA
(
	`GMOCK_INTERNAL_DETECT_OVERRIDE
(
_i
, 
_
, 
_ñem
)) + \

206 
	`GMOCK_PP_HAS_COMMA
(
	`GMOCK_INTERNAL_DETECT_FINAL
(
_i
, 
_
, 
_ñem
)) + \

207 
	`GMOCK_PP_HAS_COMMA
(
	`GMOCK_INTERNAL_DETECT_NOEXCEPT
(
_i
, 
_
, 
_ñem
)) + \

208 
	`GMOCK_PP_HAS_COMMA
(
	`GMOCK_INTERNAL_DETECT_REF
(
_i
, 
_
, 
_ñem
)) + \

209 
	`GMOCK_INTERNAL_IS_CALLTYPE
(
_ñem
)) == 1, \

210 
	`GMOCK_PP_STRINGIZE
( \

211 
_ñem
Ë" c™nŸ bêªcognizedá†®vÆid s≥cifiˇti⁄ modifõr.");

	)

214 
	#GMOCK_INTERNAL_DETECT_CONST
(
_i
, 
_
, 
_ñem
) \

215 
	`GMOCK_PP_CAT
(
GMOCK_INTERNAL_DETECT_CONST_I_
, 
_ñem
)

	)

217 
	#GMOCK_INTERNAL_DETECT_CONST_I_c⁄°
 ,

	)

219 
	#GMOCK_INTERNAL_DETECT_OVERRIDE
(
_i
, 
_
, 
_ñem
) \

220 
	`GMOCK_PP_CAT
(
GMOCK_INTERNAL_DETECT_OVERRIDE_I_
, 
_ñem
)

	)

222 
	#GMOCK_INTERNAL_DETECT_OVERRIDE_I_ovîride
 ,

	)

224 
	#GMOCK_INTERNAL_DETECT_FINAL
(
_i
, 
_
, 
_ñem
) \

225 
	`GMOCK_PP_CAT
(
GMOCK_INTERNAL_DETECT_FINAL_I_
, 
_ñem
)

	)

227 
	#GMOCK_INTERNAL_DETECT_FINAL_I_föÆ
 ,

	)

229 
	#GMOCK_INTERNAL_DETECT_NOEXCEPT
(
_i
, 
_
, 
_ñem
) \

230 
	`GMOCK_PP_CAT
(
GMOCK_INTERNAL_DETECT_NOEXCEPT_I_
, 
_ñem
)

	)

232 
	#GMOCK_INTERNAL_DETECT_NOEXCEPT_I_n€x˚±
 ,

	)

234 
	#GMOCK_INTERNAL_DETECT_REF
(
_i
, 
_
, 
_ñem
) \

235 
	`GMOCK_PP_CAT
(
GMOCK_INTERNAL_DETECT_REF_I_
, 
_ñem
)

	)

237 
	#GMOCK_INTERNAL_DETECT_REF_I_ªf
 ,

	)

239 
	#GMOCK_INTERNAL_UNPACK_ªf
(
x
Ë
	)
x

241 
	#GMOCK_INTERNAL_GET_CALLTYPE_IMPL
(
_i
, 
_
, 
_ñem
) \

242 
	`GMOCK_PP_IF
(
	`GMOCK_INTERNAL_IS_CALLTYPE
(
_ñem
), \

243 
GMOCK_INTERNAL_GET_VALUE_CALLTYPE
, 
GMOCK_PP_EMPTY
) \

244 (
_ñem
)

	)

249 
	#GMOCK_INTERNAL_IS_CALLTYPE
(
_¨g
) \

250 
	`GMOCK_INTERNAL_IS_CALLTYPE_I
( \

251 
	`GMOCK_PP_CAT
(
GMOCK_INTERNAL_IS_CALLTYPE_HELPER_
, 
_¨g
))

	)

252 
	#GMOCK_INTERNAL_IS_CALLTYPE_I
(
_¨g
Ë
	`GMOCK_PP_IS_ENCLOSED_PARENS
(_¨g)

	)

254 
	#GMOCK_INTERNAL_GET_VALUE_CALLTYPE
(
_¨g
) \

255 
	`GMOCK_INTERNAL_GET_VALUE_CALLTYPE_I
( \

256 
	`GMOCK_PP_CAT
(
GMOCK_INTERNAL_IS_CALLTYPE_HELPER_
, 
_¨g
))

	)

257 
	#GMOCK_INTERNAL_GET_VALUE_CALLTYPE_I
(
_¨g
) \

258 
GMOCK_PP_IDENTITY
 
_¨g


	)

260 
	#GMOCK_INTERNAL_IS_CALLTYPE_HELPER_CÆ…y≥


	)

275 
	#GMOCK_INTERNAL_SIGNATURE
(
_Rë
, 
_Args
) \

276 ::
ã°ög
::
öã∫Æ
::
idítôy_t
<
	`GMOCK_PP_IF
(
	`GMOCK_PP_IS_BEGIN_PARENS
(
_Rë
), \

277 
GMOCK_PP_REMOVE_PARENS
, \

278 
GMOCK_PP_IDENTITY
)(
_Rë
)>( \

279 
	`GMOCK_PP_FOR_EACH
(
GMOCK_INTERNAL_GET_TYPE
, 
_
, 
_Args
))

	)

281 
	#GMOCK_INTERNAL_GET_TYPE
(
_i
, 
_
, 
_ñem
) \

282 
	`GMOCK_PP_COMMA_IF
(
_i
) \

283 
	`GMOCK_PP_IF
(
	`GMOCK_PP_IS_BEGIN_PARENS
(
_ñem
), 
GMOCK_PP_REMOVE_PARENS
, \

284 
GMOCK_PP_IDENTITY
) \

285 (
_ñem
)

	)

287 
	#GMOCK_INTERNAL_PARAMETER
(
_i
, 
_Sig«tuª
, 
_
) \

288 
	`GMOCK_PP_COMMA_IF
(
_i
) \

289 
	`GMOCK_INTERNAL_ARG_O
(
_i
, 
	`GMOCK_PP_REMOVE_PARENS
(
_Sig«tuª
)) \

290 
gmock_a
##
_i


	)

292 
	#GMOCK_INTERNAL_FORWARD_ARG
(
_i
, 
_Sig«tuª
, 
_
) \

293 
	`GMOCK_PP_COMMA_IF
(
_i
) \

294 ::
°d
::
f‹w¨d
<
	`GMOCK_INTERNAL_ARG_O
( \

295 
_i
, 
	`GMOCK_PP_REMOVE_PARENS
(
_Sig«tuª
))>(
gmock_a
##_i)

	)

297 
	#GMOCK_INTERNAL_MATCHER_PARAMETER
(
_i
, 
_Sig«tuª
, 
_
) \

298 
	`GMOCK_PP_COMMA_IF
(
_i
) \

299 
	`GMOCK_INTERNAL_MATCHER_O
(
_i
, 
	`GMOCK_PP_REMOVE_PARENS
(
_Sig«tuª
)) \

300 
gmock_a
##
_i


	)

302 
	#GMOCK_INTERNAL_MATCHER_ARGUMENT
(
_i
, 
_1
, 
_2
) \

303 
	`GMOCK_PP_COMMA_IF
(
_i
) \

304 
gmock_a
##
_i


	)

306 
	#GMOCK_INTERNAL_A_MATCHER_ARGUMENT
(
_i
, 
_Sig«tuª
, 
_
) \

307 
	`GMOCK_PP_COMMA_IF
(
_i
) \

308 ::
ã°ög
::
A
<
	`GMOCK_INTERNAL_ARG_O
(
_i
, 
	`GMOCK_PP_REMOVE_PARENS
(
_Sig«tuª
))>()

	)

310 
	#GMOCK_INTERNAL_ARG_O
(
_i
, ...) \

311 
ty≥«me
 ::
ã°ög
::
öã∫Æ
::
Fun˘i⁄
<
__VA_ARGS__
>::
ãm∂©e
 
Arg
<
_i
>::
ty≥


	)

313 
	#GMOCK_INTERNAL_MATCHER_O
(
_i
, ...) \

314 c⁄° ::
ã°ög
::
M©chî
<
ty≥«me
 ::ã°ög::
öã∫Æ
::
Fun˘i⁄
< \

315 
__VA_ARGS__
>::
ãm∂©e
 
Arg
<
_i
>::
ty≥
>&

	)

317 
	#MOCK_METHOD0
(
m
, ...Ë
	`GMOCK_INTERNAL_MOCK_METHODN
(, , m, 0, 
__VA_ARGS__
)

	)

318 
	#MOCK_METHOD1
(
m
, ...Ë
	`GMOCK_INTERNAL_MOCK_METHODN
(, , m, 1, 
__VA_ARGS__
)

	)

319 
	#MOCK_METHOD2
(
m
, ...Ë
	`GMOCK_INTERNAL_MOCK_METHODN
(, , m, 2, 
__VA_ARGS__
)

	)

320 
	#MOCK_METHOD3
(
m
, ...Ë
	`GMOCK_INTERNAL_MOCK_METHODN
(, , m, 3, 
__VA_ARGS__
)

	)

321 
	#MOCK_METHOD4
(
m
, ...Ë
	`GMOCK_INTERNAL_MOCK_METHODN
(, , m, 4, 
__VA_ARGS__
)

	)

322 
	#MOCK_METHOD5
(
m
, ...Ë
	`GMOCK_INTERNAL_MOCK_METHODN
(, , m, 5, 
__VA_ARGS__
)

	)

323 
	#MOCK_METHOD6
(
m
, ...Ë
	`GMOCK_INTERNAL_MOCK_METHODN
(, , m, 6, 
__VA_ARGS__
)

	)

324 
	#MOCK_METHOD7
(
m
, ...Ë
	`GMOCK_INTERNAL_MOCK_METHODN
(, , m, 7, 
__VA_ARGS__
)

	)

325 
	#MOCK_METHOD8
(
m
, ...Ë
	`GMOCK_INTERNAL_MOCK_METHODN
(, , m, 8, 
__VA_ARGS__
)

	)

326 
	#MOCK_METHOD9
(
m
, ...Ë
	`GMOCK_INTERNAL_MOCK_METHODN
(, , m, 9, 
__VA_ARGS__
)

	)

327 
	#MOCK_METHOD10
(
m
, ...) \

328 
	`GMOCK_INTERNAL_MOCK_METHODN
(, , 
m
, 10, 
__VA_ARGS__
)

	)

330 
	#MOCK_CONST_METHOD0
(
m
, ...) \

331 
	`GMOCK_INTERNAL_MOCK_METHODN
(c⁄°, , 
m
, 0, 
__VA_ARGS__
)

	)

332 
	#MOCK_CONST_METHOD1
(
m
, ...) \

333 
	`GMOCK_INTERNAL_MOCK_METHODN
(c⁄°, , 
m
, 1, 
__VA_ARGS__
)

	)

334 
	#MOCK_CONST_METHOD2
(
m
, ...) \

335 
	`GMOCK_INTERNAL_MOCK_METHODN
(c⁄°, , 
m
, 2, 
__VA_ARGS__
)

	)

336 
	#MOCK_CONST_METHOD3
(
m
, ...) \

337 
	`GMOCK_INTERNAL_MOCK_METHODN
(c⁄°, , 
m
, 3, 
__VA_ARGS__
)

	)

338 
	#MOCK_CONST_METHOD4
(
m
, ...) \

339 
	`GMOCK_INTERNAL_MOCK_METHODN
(c⁄°, , 
m
, 4, 
__VA_ARGS__
)

	)

340 
	#MOCK_CONST_METHOD5
(
m
, ...) \

341 
	`GMOCK_INTERNAL_MOCK_METHODN
(c⁄°, , 
m
, 5, 
__VA_ARGS__
)

	)

342 
	#MOCK_CONST_METHOD6
(
m
, ...) \

343 
	`GMOCK_INTERNAL_MOCK_METHODN
(c⁄°, , 
m
, 6, 
__VA_ARGS__
)

	)

344 
	#MOCK_CONST_METHOD7
(
m
, ...) \

345 
	`GMOCK_INTERNAL_MOCK_METHODN
(c⁄°, , 
m
, 7, 
__VA_ARGS__
)

	)

346 
	#MOCK_CONST_METHOD8
(
m
, ...) \

347 
	`GMOCK_INTERNAL_MOCK_METHODN
(c⁄°, , 
m
, 8, 
__VA_ARGS__
)

	)

348 
	#MOCK_CONST_METHOD9
(
m
, ...) \

349 
	`GMOCK_INTERNAL_MOCK_METHODN
(c⁄°, , 
m
, 9, 
__VA_ARGS__
)

	)

350 
	#MOCK_CONST_METHOD10
(
m
, ...) \

351 
	`GMOCK_INTERNAL_MOCK_METHODN
(c⁄°, , 
m
, 10, 
__VA_ARGS__
)

	)

353 
	#MOCK_METHOD0_T
(
m
, ...Ë
	`MOCK_METHOD0
(m, 
__VA_ARGS__
)

	)

354 
	#MOCK_METHOD1_T
(
m
, ...Ë
	`MOCK_METHOD1
(m, 
__VA_ARGS__
)

	)

355 
	#MOCK_METHOD2_T
(
m
, ...Ë
	`MOCK_METHOD2
(m, 
__VA_ARGS__
)

	)

356 
	#MOCK_METHOD3_T
(
m
, ...Ë
	`MOCK_METHOD3
(m, 
__VA_ARGS__
)

	)

357 
	#MOCK_METHOD4_T
(
m
, ...Ë
	`MOCK_METHOD4
(m, 
__VA_ARGS__
)

	)

358 
	#MOCK_METHOD5_T
(
m
, ...Ë
	`MOCK_METHOD5
(m, 
__VA_ARGS__
)

	)

359 
	#MOCK_METHOD6_T
(
m
, ...Ë
	`MOCK_METHOD6
(m, 
__VA_ARGS__
)

	)

360 
	#MOCK_METHOD7_T
(
m
, ...Ë
	`MOCK_METHOD7
(m, 
__VA_ARGS__
)

	)

361 
	#MOCK_METHOD8_T
(
m
, ...Ë
	`MOCK_METHOD8
(m, 
__VA_ARGS__
)

	)

362 
	#MOCK_METHOD9_T
(
m
, ...Ë
	`MOCK_METHOD9
(m, 
__VA_ARGS__
)

	)

363 
	#MOCK_METHOD10_T
(
m
, ...Ë
	`MOCK_METHOD10
(m, 
__VA_ARGS__
)

	)

365 
	#MOCK_CONST_METHOD0_T
(
m
, ...Ë
	`MOCK_CONST_METHOD0
(m, 
__VA_ARGS__
)

	)

366 
	#MOCK_CONST_METHOD1_T
(
m
, ...Ë
	`MOCK_CONST_METHOD1
(m, 
__VA_ARGS__
)

	)

367 
	#MOCK_CONST_METHOD2_T
(
m
, ...Ë
	`MOCK_CONST_METHOD2
(m, 
__VA_ARGS__
)

	)

368 
	#MOCK_CONST_METHOD3_T
(
m
, ...Ë
	`MOCK_CONST_METHOD3
(m, 
__VA_ARGS__
)

	)

369 
	#MOCK_CONST_METHOD4_T
(
m
, ...Ë
	`MOCK_CONST_METHOD4
(m, 
__VA_ARGS__
)

	)

370 
	#MOCK_CONST_METHOD5_T
(
m
, ...Ë
	`MOCK_CONST_METHOD5
(m, 
__VA_ARGS__
)

	)

371 
	#MOCK_CONST_METHOD6_T
(
m
, ...Ë
	`MOCK_CONST_METHOD6
(m, 
__VA_ARGS__
)

	)

372 
	#MOCK_CONST_METHOD7_T
(
m
, ...Ë
	`MOCK_CONST_METHOD7
(m, 
__VA_ARGS__
)

	)

373 
	#MOCK_CONST_METHOD8_T
(
m
, ...Ë
	`MOCK_CONST_METHOD8
(m, 
__VA_ARGS__
)

	)

374 
	#MOCK_CONST_METHOD9_T
(
m
, ...Ë
	`MOCK_CONST_METHOD9
(m, 
__VA_ARGS__
)

	)

375 
	#MOCK_CONST_METHOD10_T
(
m
, ...Ë
	`MOCK_CONST_METHOD10
(m, 
__VA_ARGS__
)

	)

377 
	#MOCK_METHOD0_WITH_CALLTYPE
(
˘
, 
m
, ...) \

378 
	`GMOCK_INTERNAL_MOCK_METHODN
(, 
˘
, 
m
, 0, 
__VA_ARGS__
)

	)

379 
	#MOCK_METHOD1_WITH_CALLTYPE
(
˘
, 
m
, ...) \

380 
	`GMOCK_INTERNAL_MOCK_METHODN
(, 
˘
, 
m
, 1, 
__VA_ARGS__
)

	)

381 
	#MOCK_METHOD2_WITH_CALLTYPE
(
˘
, 
m
, ...) \

382 
	`GMOCK_INTERNAL_MOCK_METHODN
(, 
˘
, 
m
, 2, 
__VA_ARGS__
)

	)

383 
	#MOCK_METHOD3_WITH_CALLTYPE
(
˘
, 
m
, ...) \

384 
	`GMOCK_INTERNAL_MOCK_METHODN
(, 
˘
, 
m
, 3, 
__VA_ARGS__
)

	)

385 
	#MOCK_METHOD4_WITH_CALLTYPE
(
˘
, 
m
, ...) \

386 
	`GMOCK_INTERNAL_MOCK_METHODN
(, 
˘
, 
m
, 4, 
__VA_ARGS__
)

	)

387 
	#MOCK_METHOD5_WITH_CALLTYPE
(
˘
, 
m
, ...) \

388 
	`GMOCK_INTERNAL_MOCK_METHODN
(, 
˘
, 
m
, 5, 
__VA_ARGS__
)

	)

389 
	#MOCK_METHOD6_WITH_CALLTYPE
(
˘
, 
m
, ...) \

390 
	`GMOCK_INTERNAL_MOCK_METHODN
(, 
˘
, 
m
, 6, 
__VA_ARGS__
)

	)

391 
	#MOCK_METHOD7_WITH_CALLTYPE
(
˘
, 
m
, ...) \

392 
	`GMOCK_INTERNAL_MOCK_METHODN
(, 
˘
, 
m
, 7, 
__VA_ARGS__
)

	)

393 
	#MOCK_METHOD8_WITH_CALLTYPE
(
˘
, 
m
, ...) \

394 
	`GMOCK_INTERNAL_MOCK_METHODN
(, 
˘
, 
m
, 8, 
__VA_ARGS__
)

	)

395 
	#MOCK_METHOD9_WITH_CALLTYPE
(
˘
, 
m
, ...) \

396 
	`GMOCK_INTERNAL_MOCK_METHODN
(, 
˘
, 
m
, 9, 
__VA_ARGS__
)

	)

397 
	#MOCK_METHOD10_WITH_CALLTYPE
(
˘
, 
m
, ...) \

398 
	`GMOCK_INTERNAL_MOCK_METHODN
(, 
˘
, 
m
, 10, 
__VA_ARGS__
)

	)

400 
	#MOCK_CONST_METHOD0_WITH_CALLTYPE
(
˘
, 
m
, ...) \

401 
	`GMOCK_INTERNAL_MOCK_METHODN
(c⁄°, 
˘
, 
m
, 0, 
__VA_ARGS__
)

	)

402 
	#MOCK_CONST_METHOD1_WITH_CALLTYPE
(
˘
, 
m
, ...) \

403 
	`GMOCK_INTERNAL_MOCK_METHODN
(c⁄°, 
˘
, 
m
, 1, 
__VA_ARGS__
)

	)

404 
	#MOCK_CONST_METHOD2_WITH_CALLTYPE
(
˘
, 
m
, ...) \

405 
	`GMOCK_INTERNAL_MOCK_METHODN
(c⁄°, 
˘
, 
m
, 2, 
__VA_ARGS__
)

	)

406 
	#MOCK_CONST_METHOD3_WITH_CALLTYPE
(
˘
, 
m
, ...) \

407 
	`GMOCK_INTERNAL_MOCK_METHODN
(c⁄°, 
˘
, 
m
, 3, 
__VA_ARGS__
)

	)

408 
	#MOCK_CONST_METHOD4_WITH_CALLTYPE
(
˘
, 
m
, ...) \

409 
	`GMOCK_INTERNAL_MOCK_METHODN
(c⁄°, 
˘
, 
m
, 4, 
__VA_ARGS__
)

	)

410 
	#MOCK_CONST_METHOD5_WITH_CALLTYPE
(
˘
, 
m
, ...) \

411 
	`GMOCK_INTERNAL_MOCK_METHODN
(c⁄°, 
˘
, 
m
, 5, 
__VA_ARGS__
)

	)

412 
	#MOCK_CONST_METHOD6_WITH_CALLTYPE
(
˘
, 
m
, ...) \

413 
	`GMOCK_INTERNAL_MOCK_METHODN
(c⁄°, 
˘
, 
m
, 6, 
__VA_ARGS__
)

	)

414 
	#MOCK_CONST_METHOD7_WITH_CALLTYPE
(
˘
, 
m
, ...) \

415 
	`GMOCK_INTERNAL_MOCK_METHODN
(c⁄°, 
˘
, 
m
, 7, 
__VA_ARGS__
)

	)

416 
	#MOCK_CONST_METHOD8_WITH_CALLTYPE
(
˘
, 
m
, ...) \

417 
	`GMOCK_INTERNAL_MOCK_METHODN
(c⁄°, 
˘
, 
m
, 8, 
__VA_ARGS__
)

	)

418 
	#MOCK_CONST_METHOD9_WITH_CALLTYPE
(
˘
, 
m
, ...) \

419 
	`GMOCK_INTERNAL_MOCK_METHODN
(c⁄°, 
˘
, 
m
, 9, 
__VA_ARGS__
)

	)

420 
	#MOCK_CONST_METHOD10_WITH_CALLTYPE
(
˘
, 
m
, ...) \

421 
	`GMOCK_INTERNAL_MOCK_METHODN
(c⁄°, 
˘
, 
m
, 10, 
__VA_ARGS__
)

	)

423 
	#MOCK_METHOD0_T_WITH_CALLTYPE
(
˘
, 
m
, ...) \

424 
	`MOCK_METHOD0_WITH_CALLTYPE
(
˘
, 
m
, 
__VA_ARGS__
)

	)

425 
	#MOCK_METHOD1_T_WITH_CALLTYPE
(
˘
, 
m
, ...) \

426 
	`MOCK_METHOD1_WITH_CALLTYPE
(
˘
, 
m
, 
__VA_ARGS__
)

	)

427 
	#MOCK_METHOD2_T_WITH_CALLTYPE
(
˘
, 
m
, ...) \

428 
	`MOCK_METHOD2_WITH_CALLTYPE
(
˘
, 
m
, 
__VA_ARGS__
)

	)

429 
	#MOCK_METHOD3_T_WITH_CALLTYPE
(
˘
, 
m
, ...) \

430 
	`MOCK_METHOD3_WITH_CALLTYPE
(
˘
, 
m
, 
__VA_ARGS__
)

	)

431 
	#MOCK_METHOD4_T_WITH_CALLTYPE
(
˘
, 
m
, ...) \

432 
	`MOCK_METHOD4_WITH_CALLTYPE
(
˘
, 
m
, 
__VA_ARGS__
)

	)

433 
	#MOCK_METHOD5_T_WITH_CALLTYPE
(
˘
, 
m
, ...) \

434 
	`MOCK_METHOD5_WITH_CALLTYPE
(
˘
, 
m
, 
__VA_ARGS__
)

	)

435 
	#MOCK_METHOD6_T_WITH_CALLTYPE
(
˘
, 
m
, ...) \

436 
	`MOCK_METHOD6_WITH_CALLTYPE
(
˘
, 
m
, 
__VA_ARGS__
)

	)

437 
	#MOCK_METHOD7_T_WITH_CALLTYPE
(
˘
, 
m
, ...) \

438 
	`MOCK_METHOD7_WITH_CALLTYPE
(
˘
, 
m
, 
__VA_ARGS__
)

	)

439 
	#MOCK_METHOD8_T_WITH_CALLTYPE
(
˘
, 
m
, ...) \

440 
	`MOCK_METHOD8_WITH_CALLTYPE
(
˘
, 
m
, 
__VA_ARGS__
)

	)

441 
	#MOCK_METHOD9_T_WITH_CALLTYPE
(
˘
, 
m
, ...) \

442 
	`MOCK_METHOD9_WITH_CALLTYPE
(
˘
, 
m
, 
__VA_ARGS__
)

	)

443 
	#MOCK_METHOD10_T_WITH_CALLTYPE
(
˘
, 
m
, ...) \

444 
	`MOCK_METHOD10_WITH_CALLTYPE
(
˘
, 
m
, 
__VA_ARGS__
)

	)

446 
	#MOCK_CONST_METHOD0_T_WITH_CALLTYPE
(
˘
, 
m
, ...) \

447 
	`MOCK_CONST_METHOD0_WITH_CALLTYPE
(
˘
, 
m
, 
__VA_ARGS__
)

	)

448 
	#MOCK_CONST_METHOD1_T_WITH_CALLTYPE
(
˘
, 
m
, ...) \

449 
	`MOCK_CONST_METHOD1_WITH_CALLTYPE
(
˘
, 
m
, 
__VA_ARGS__
)

	)

450 
	#MOCK_CONST_METHOD2_T_WITH_CALLTYPE
(
˘
, 
m
, ...) \

451 
	`MOCK_CONST_METHOD2_WITH_CALLTYPE
(
˘
, 
m
, 
__VA_ARGS__
)

	)

452 
	#MOCK_CONST_METHOD3_T_WITH_CALLTYPE
(
˘
, 
m
, ...) \

453 
	`MOCK_CONST_METHOD3_WITH_CALLTYPE
(
˘
, 
m
, 
__VA_ARGS__
)

	)

454 
	#MOCK_CONST_METHOD4_T_WITH_CALLTYPE
(
˘
, 
m
, ...) \

455 
	`MOCK_CONST_METHOD4_WITH_CALLTYPE
(
˘
, 
m
, 
__VA_ARGS__
)

	)

456 
	#MOCK_CONST_METHOD5_T_WITH_CALLTYPE
(
˘
, 
m
, ...) \

457 
	`MOCK_CONST_METHOD5_WITH_CALLTYPE
(
˘
, 
m
, 
__VA_ARGS__
)

	)

458 
	#MOCK_CONST_METHOD6_T_WITH_CALLTYPE
(
˘
, 
m
, ...) \

459 
	`MOCK_CONST_METHOD6_WITH_CALLTYPE
(
˘
, 
m
, 
__VA_ARGS__
)

	)

460 
	#MOCK_CONST_METHOD7_T_WITH_CALLTYPE
(
˘
, 
m
, ...) \

461 
	`MOCK_CONST_METHOD7_WITH_CALLTYPE
(
˘
, 
m
, 
__VA_ARGS__
)

	)

462 
	#MOCK_CONST_METHOD8_T_WITH_CALLTYPE
(
˘
, 
m
, ...) \

463 
	`MOCK_CONST_METHOD8_WITH_CALLTYPE
(
˘
, 
m
, 
__VA_ARGS__
)

	)

464 
	#MOCK_CONST_METHOD9_T_WITH_CALLTYPE
(
˘
, 
m
, ...) \

465 
	`MOCK_CONST_METHOD9_WITH_CALLTYPE
(
˘
, 
m
, 
__VA_ARGS__
)

	)

466 
	#MOCK_CONST_METHOD10_T_WITH_CALLTYPE
(
˘
, 
m
, ...) \

467 
	`MOCK_CONST_METHOD10_WITH_CALLTYPE
(
˘
, 
m
, 
__VA_ARGS__
)

	)

469 
	#GMOCK_INTERNAL_MOCK_METHODN
(
c⁄°√ss
, 
˘
, 
Mëhod
, 
¨gs_num
, ...) \

470 
	`GMOCK_INTERNAL_ASSERT_VALID_SIGNATURE
( \

471 
¨gs_num
, ::
ã°ög
::
öã∫Æ
::
idítôy_t
<
__VA_ARGS__
>); \

472 
	`GMOCK_INTERNAL_MOCK_METHOD_IMPL
( \

473 
¨gs_num
, 
Mëhod
, 
	`GMOCK_PP_NARG0
(
c⁄°√ss
), 0, 0, , 
˘
, , \

474 (::
ã°ög
::
öã∫Æ
::
idítôy_t
<
__VA_ARGS__
>))

	)

476 
	#GMOCK_MOCKER_
(
¨ôy
, 
c⁄°√ss
, 
Mëhod
) \

477 
	`GTEST_CONCAT_TOKEN_
(
gmock
##
c⁄°√ss
##
¨ôy
##
_
##
Mëhod
##_, 
__LINE__
)

	)

	@/usr/include/gmock/gmock-matchers.h

255 #i‚de‡
GOOGLEMOCK_INCLUDE_GMOCK_GMOCK_MATCHERS_H_


256 
	#GOOGLEMOCK_INCLUDE_GMOCK_GMOCK_MATCHERS_H_


	)

258 
	~<Æg‹ôhm
>

259 
	~<cm©h
>

260 
	~<öôülizî_li°
>

261 
	~<ôî©‹
>

262 
	~<limôs
>

263 
	~<mem‹y
>

264 
	~<o°ªam
>

265 
	~<s°ªam
>

266 
	~<°rög
>

267 
	~<ty≥_åaôs
>

268 
	~<utûôy
>

269 
	~<ve˘‹
>

271 
	~"gmock/öã∫Æ/gmock-öã∫Æ-utûs.h
"

272 
	~"gmock/öã∫Æ/gmock-p‹t.h
"

273 
	~"gmock/öã∫Æ/gmock-µ.h
"

274 
	~"gã°/gã°.h
"

277 #i‡
deföed
(
_MSC_VER
) && _MSC_VER >= 1915

278 
	#GMOCK_MAYBE_5046_
 5046

	)

280 
	#GMOCK_MAYBE_5046_


	)

283 
	$GTEST_DISABLE_MSC_WARNINGS_PUSH_
(

284 4251 
GMOCK_MAYBE_5046_


288 
«me•a˚
 
ã°ög
 {

303 ˛as†
	cSåögM©chResu…Li°íî
 : 
public
 
M©chResu…Li°íî
 {

304 
public
:

305 
	`SåögM©chResu…Li°íî
(Ë: 
	`M©chResu…Li°íî
(&
ss_
) {}

308 
°d
::
°rög
 
	`°r
(Ëc⁄° {  
ss_
.str(); }

311 
	`CÀ¨
(Ë{ 
ss_
.
	`°r
(""); }

313 
¥iv©e
:

314 ::
°d
::
°rög°ªam
 
ss_
;

316 
	`GTEST_DISALLOW_COPY_AND_ASSIGN_
(
SåögM©chResu…Li°íî
);

317 
	}
};

321 
«me•a˚
 
	göã∫Æ
 {

333 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gM
>

334 ˛as†
	cM©chîCa°Im∂
 {

335 
	gpublic
:

336 
M©chî
<
T
> 
Ca°
(c⁄° 
M
& 
pﬁym‹phic_m©chî_‹_vÆue
) {

350  
Ca°Im∂
(
pﬁym‹phic_m©chî_‹_vÆue
,

351 
°d
::
is_c⁄vîtibÀ
<
M
, 
M©chî
<
T
>>{},

352 
°d
::
is_c⁄vîtibÀ
<
M
, 
T
>{});

355 
	g¥iv©e
:

356 
ãm∂©e
 <
boﬁ
 
Ign‹e
>

357 
M©chî
<
T
> 
Ca°Im∂
(c⁄° 
M
& 
pﬁym‹phic_m©chî_‹_vÆue
,

358 
°d
::
åue_ty≥
 ,

359 
°d
::
öãgøl_c⁄°™t
<
boﬁ
, 
Ign‹e
>) {

368  
	gpﬁym‹phic_m©chî_‹_vÆue
;

374 
	gM©chî
<
	gT
> 
Ca°Im∂
(c⁄° 
M
& 
vÆue
,

375 
°d
::
Ál£_ty≥
 ,

376 
°d
::
åue_ty≥
 ) {

377  
M©chî
<
T
>(
Im∂icôCa°_
<T>(
vÆue
));

390 
	gM©chî
<
	gT
> 
Ca°Im∂
(c⁄° 
M
& 
vÆue
,

391 
°d
::
Ál£_ty≥
 ,

392 
°d
::
Ál£_ty≥
 );

398 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gU
>

399 
˛ass
 
	gM©chîCa°Im∂
<
	gT
, 
	gM©chî
<
	gU
> > {

400 
	gpublic
:

401 
M©chî
<
T
> 
Ca°
(c⁄° M©chî<
U
>& 
sour˚_m©chî
) {

402  
M©chî
<
T
>(
√w
 
Im∂
(
sour˚_m©chî
));

405 
	g¥iv©e
:

406 
˛ass
 
Im∂
 : 
public
 
M©chîI¡îÁ˚
<
T
> {

407 
public
:

408 
ex∂icô
 
Im∂
(c⁄° 
M©chî
<
U
>& 
sour˚_m©chî
)

409 : 
sour˚_m©chî_
(
sour˚_m©chî
) {}

412 
boﬁ
 
M©chAndEx∂aö
(
T
 
x
, 
M©chResu…Li°íî
* 
li°íî
Ëc⁄° 
	govîride
 {

413 
usög
 
	gFromTy≥
 = 
ty≥«me
 
°d
::
ªmove_cv
<ty≥«mê°d::
ªmove_poöãr
<

414 
ty≥«me
 
°d
::
ªmove_ª„ªn˚
<
T
>::
ty≥
>::type>::type;

415 
usög
 
	gToTy≥
 = 
ty≥«me
 
°d
::
ªmove_cv
<ty≥«mê°d::
ªmove_poöãr
<

416 
ty≥«me
 
°d
::
ªmove_ª„ªn˚
<
U
>::
ty≥
>::type>::type;

418 
°©ic_as£π
(

421 (
°d
::
is_poöãr
<
ty≥«me
 std::
ªmove_ª„ªn˚
<
T
>::
ty≥
>::
vÆue
 !=

422 
°d
::
is_poöãr
<
ty≥«me
 std::
ªmove_ª„ªn˚
<
U
>::
ty≥
>::
vÆue
) ||

423 
°d
::
is_ßme
<
FromTy≥
, 
ToTy≥
>::
vÆue
 ||

424 !
°d
::
is_ba£_of
<
FromTy≥
, 
ToTy≥
>::
vÆue
,

429 
usög
 
	gCa°Ty≥
 =

430 
ty≥«me
 
°d
::
c⁄dôi⁄Æ
<°d::
is_c⁄vîtibÀ
<
T
&, c⁄° 
	gU
&>::
vÆue
,

431 
	gT
&, 
	gU
>::
ty≥
;

433  
	gsour˚_m©chî_
.
M©chAndEx∂aö
(
°©ic_ˇ°
<
Ca°Ty≥
>(
x
),

434 
li°íî
);

437 
Des¸ibeTo
(::
°d
::
o°ªam
* 
os
Ëc⁄° 
ovîride
 {

438 
sour˚_m©chî_
.
Des¸ibeTo
(
os
);

441 
Des¸ibeNeg©i⁄To
(::
°d
::
o°ªam
* 
os
Ëc⁄° 
ovîride
 {

442 
sour˚_m©chî_
.
Des¸ibeNeg©i⁄To
(
os
);

445 
	g¥iv©e
:

446 c⁄° 
M©chî
<
U
> 
sour˚_m©chî_
;

452 
	gãm∂©e
 <
ty≥«me
 
	gT
>

453 
˛ass
 
	gM©chîCa°Im∂
<
	gT
, 
	gM©chî
<T> > {

454 
	gpublic
:

455 
M©chî
<
T
> 
Ca°
(c⁄° M©chî<T>& 
m©chî
) {  matcher; }

459 
	gãm∂©e
 <
ty≥«me
 
	gDîived
>

460 ˛as†
	cM©chîBa£Im∂
 {

461 
	gpublic
:

462 
M©chîBa£Im∂
() = ;

464 
	gãm∂©e
 <
ty≥«me
 
	gT
>

465 
	g›î©‹
 ::
ã°ög
::
M©chî
<
T
>() const {

466  ::
ã°ög
::
M©chî
<
T
>(
√w


467 
ty≥«me
 
Dîived
::
ãm∂©e
 
gmock_Im∂
<
T
>());

472 
	gãm∂©e
 <ãm∂©ê<
	gty≥«me
...> 
˛ass
 
	gDîived
,Åy≥«me... 
	gTs
>

473 
˛ass
 
	gM©chîBa£Im∂
<
	gDîived
<
	gTs
...>> {

474 
	gpublic
:

477 
ãm∂©e
 <
ty≥«me
 
E
 = 
°d
::
íabÀ_if
<...(
Ts
) == 1>,

478 
ty≥«me
 
	gE
::
ty≥
* = 
nuŒ±r
>

479 
ex∂icô
 
M©chîBa£Im∂
(
Ts
... 
∑øms
)

480 : 
∑øms_
(
°d
::
f‹w¨d
<
Ts
>(
∑øms
)...) {}

481 
ãm∂©e
 <
ty≥«me
 
E
 = 
°d
::
íabÀ_if
<...(
Ts
) != 1>,

482 
	gty≥«me
 = 
ty≥«me
 
E
::
ty≥
>

483 
M©chîBa£Im∂
(
Ts
... 
∑øms
)

484 : 
∑øms_
(
°d
::
f‹w¨d
<
Ts
>(
∑øms
)...) {}

486 
ãm∂©e
 <
ty≥«me
 
F
>

487 
›î©‹
 ::
ã°ög
::
M©chî
<
F
>() const {

488  
Aµly
<
F
>(
MakeIndexSequí˚
<...(
Ts
)>{});

491 
	g¥iv©e
:

492 
ãm∂©e
 <
ty≥«me
 
F
, 
	g°d
::
size_t
... 
tu∂e_ids
>

493 ::
ã°ög
::
M©chî
<
F
> 
Aµly
(
IndexSequí˚
<
tu∂e_ids
...>) const {

494  ::
ã°ög
::
M©chî
<
F
>(

495 
√w
 
ty≥«me
 
Dîived
<
Ts
...>::
ãm∂©e
 
gmock_Im∂
<
F
>(

496 
°d
::
gë
<
tu∂e_ids
>(
∑øms_
)...));

499 c⁄° 
	g°d
::
tu∂e
<
Ts
...> 
∑øms_
;

508 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gM
>

509 
ölöe
 
	gM©chî
<
	gT
> 
	$M©chîCa°
(c⁄° 
M
& 
m©chî
) {

510  
öã∫Æ
::
M©chîCa°Im∂
<
T
, 
M
>::
	`Ca°
(
m©chî
);

511 
	}
}

515 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gM
>

516 
ölöe
 
	gM©chî
<
	gT
> 
	$Sa„M©chîCa°
(c⁄° 
M
& 
pﬁym‹phic_m©chî_‹_vÆue
) {

517  
M©chîCa°
<
T
>(
pﬁym‹phic_m©chî_‹_vÆue
);

518 
	}
}

529 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gU
>

530 
ölöe
 
	gM©chî
<
	gT
> 
Sa„M©chîCa°
(c⁄° 
M©chî
<
U
>& 
m©chî
) {

532 
°©ic_as£π
(
°d
::
is_c⁄vîtibÀ
<c⁄° 
T
&, c⁄° 
U
&>::
vÆue
,

536 
GTEST_COMPILE_ASSERT_
(

537 
°d
::
is_ª„ªn˚
<
T
>::
vÆue
 || !°d::is_ª„ªn˚<
U
>::value,

538 
ˇ¬Ÿ_c⁄vît_n⁄_ª„ªn˚_¨g_to_ª„ªn˚
);

541 
GTEST_REMOVE_REFERENCE_AND_CONST_
(
	tT
Ë
	tRawT
;

542 
GTEST_REMOVE_REFERENCE_AND_CONST_
(
	tU
Ë
	tRawU
;

543 
c⁄°ex¥
 
boﬁ
 
	gkTIsOthî
 = 
GMOCK_KIND_OF_
(
RawT
Ë=
öã∫Æ
::
kOthî
;

544 
c⁄°ex¥
 
boﬁ
 
	gkUIsOthî
 = 
GMOCK_KIND_OF_
(
RawU
Ë=
öã∫Æ
::
kOthî
;

545 
GTEST_COMPILE_ASSERT_
(

546 
kTIsOthî
 || 
kUIsOthî
 ||

547 (
öã∫Æ
::
Los¶essArôhmëicC⁄vîtibÀ
<
RawT
, 
RawU
>::
vÆue
),

548 
c⁄vîsi⁄_of_¨ôhmëic_ty≥s_mu°_be_los¶ess
);

549  
	gM©chîCa°
<
	gT
>(
	gm©chî
);

553 
	gãm∂©e
 <
ty≥«me
 
	gT
>

554 
	gM©chî
<
	gT
> 
A
();

558 
«me•a˚
 
	göã∫Æ
 {

561 
ölöe
 
PrötIfNŸEm±y
(c⁄° 
°d
::
°rög
& 
ex∂™©i⁄
,

562 ::
°d
::
o°ªam
* 
os
) {

563 i‡(
ex∂™©i⁄
 !"" && 
os
 !
nuŒ±r
) {

564 *
os
 << ", " << 
ex∂™©i⁄
;

571 
ölöe
 
boﬁ
 
IsRódabÀTy≥Name
(c⁄° 
°d
::
°rög
& 
ty≥_«me
) {

574  (
ty≥_«me
.
Àngth
() <= 20 ||

575 
ty≥_«me
.
föd_fú°_of
("<("Ë=
°d
::
°rög
::
≈os
);

583 
	gãm∂©e
 <
ty≥«me
 
	gVÆue
,Åy≥«mê
	gT
>

584 
boﬁ
 
M©chPrötAndEx∂aö
(
VÆue
& 
vÆue
, c⁄° 
M©chî
<
T
>& 
m©chî
,

585 
M©chResu…Li°íî
* 
li°íî
) {

586 i‡(!
	gli°íî
->
IsI¡îe°ed
()) {

589  
	gm©chî
.
M©ches
(
vÆue
);

592 
SåögM©chResu…Li°íî
 
	gö√r_li°íî
;

593 c⁄° 
boﬁ
 
	gm©ch
 = 
m©chî
.
M©chAndEx∂aö
(
vÆue
, &
ö√r_li°íî
);

595 
UnivîßlPröt
(
vÆue
, 
li°íî
->
°ªam
());

596 #i‡
GTEST_HAS_RTTI


597 c⁄° 
	g°d
::
°rög
& 
ty≥_«me
 = 
GëTy≥Name
<
VÆue
>();

598 i‡(
IsRódabÀTy≥Name
(
ty≥_«me
))

599 *
	gli°íî
->
°ªam
(Ë<< " (o‡ty≥ " << 
	gty≥_«me
 << ")";

601 
PrötIfNŸEm±y
(
ö√r_li°íî
.
°r
(), 
li°íî
->
°ªam
());

603  
	gm©ch
;

608 
	gãm∂©e
 <
size_t
 
	gN
>

609 ˛as†
	cTu∂ePªfix
 {

610 
	gpublic
:

614 
ãm∂©e
 <
ty≥«me
 
M©chîTu∂e
,Åy≥«mê
	gVÆueTu∂e
>

615 
boﬁ
 
M©ches
(c⁄° 
M©chîTu∂e
& 
m©chî_tu∂e
,

616 c⁄° 
VÆueTu∂e
& 
vÆue_tu∂e
) {

617  
	gTu∂ePªfix
<
	gN
 - 1>::
M©ches
(
m©chî_tu∂e
, 
vÆue_tu∂e
) &&

618 
	g°d
::
gë
<
N
 - 1>(
m©chî_tu∂e
).
M©ches
(
°d
::gë<N - 1>(
vÆue_tu∂e
));

625 
	gãm∂©e
 <
ty≥«me
 
	gM©chîTu∂e
,Åy≥«mê
	gVÆueTu∂e
>

626 
Ex∂aöM©chFaûuªsTo
(c⁄° 
M©chîTu∂e
& 
m©chîs
,

627 c⁄° 
VÆueTu∂e
& 
vÆues
,

628 ::
°d
::
o°ªam
* 
os
) {

630 
Tu∂ePªfix
<
N
 - 1>::
Ex∂aöM©chFaûuªsTo
(
m©chîs
, 
vÆues
, 
os
);

634 
ty≥«me
 
	g°d
::
tu∂e_ñemít
<
N
 - 1, 
	gM©chîTu∂e
>::
ty≥
 
m©chî
 =

635 
°d
::
gë
<
N
 - 1>(
m©chîs
);

636 
ty≥«me
 
	t°d
::
	ttu∂e_ñemít
<
	tN
 - 1, 
	tVÆueTu∂e
>::
	tty≥
 
	tVÆue
;

637 c⁄° 
	gVÆue
& 
	gvÆue
 = 
°d
::
gë
<
N
 - 1>(
vÆues
);

638 
SåögM©chResu…Li°íî
 
	gli°íî
;

639 i‡(!
	gm©chî
.
M©chAndEx∂aö
(
vÆue
, &
li°íî
)) {

640 *
	gos
 << " Ex≥˘edárg #" << 
	gN
 - 1 << ": ";

641 
	g°d
::
gë
<
N
 - 1>(
m©chîs
).
Des¸ibeTo
(
os
);

642 *
	gos
 << "\n Actual: ";

648 
	göã∫Æ
::
UnivîßlPröt
(
vÆue
, 
os
);

649 
PrötIfNŸEm±y
(
li°íî
.
°r
(), 
os
);

650 *
	gos
 << "\n";

656 
	gãm∂©e
 <>

657 
˛ass
 
	gTu∂ePªfix
<0> {

658 
	gpublic
:

659 
ãm∂©e
 <
ty≥«me
 
M©chîTu∂e
,Åy≥«mê
	gVÆueTu∂e
>

660 
boﬁ
 
M©ches
(c⁄° 
M©chîTu∂e
& ,

661 c⁄° 
VÆueTu∂e
& ) {

662  
	gåue
;

665 
	gãm∂©e
 <
ty≥«me
 
	gM©chîTu∂e
,Åy≥«mê
	gVÆueTu∂e
>

666 
Ex∂aöM©chFaûuªsTo
(c⁄° 
M©chîTu∂e
& ,

667 c⁄° 
VÆueTu∂e
& ,

668 ::
°d
::
o°ªam
* ) {}

676 
	gãm∂©e
 <
ty≥«me
 
	gM©chîTu∂e
,Åy≥«mê
	gVÆueTu∂e
>

677 
boﬁ
 
Tu∂eM©ches
(c⁄° 
M©chîTu∂e
& 
m©chî_tu∂e
,

678 c⁄° 
VÆueTu∂e
& 
vÆue_tu∂e
) {

681 
GTEST_COMPILE_ASSERT_
(
°d
::
tu∂e_size
<
M©chîTu∂e
>::
vÆue
 ==

682 
°d
::
tu∂e_size
<
VÆueTu∂e
>::
vÆue
,

683 
m©chî_™d_vÆue_have_dif„ª¡_numbîs_of_fõlds
);

684  
	gTu∂ePªfix
<
	g°d
::
tu∂e_size
<
VÆueTu∂e
>::
vÆue
>::
M©ches
(
m©chî_tu∂e
,

685 
vÆue_tu∂e
);

690 
	gãm∂©e
 <
ty≥«me
 
	gM©chîTu∂e
,Åy≥«mê
	gVÆueTu∂e
>

691 
Ex∂aöM©chFaûuªTu∂eTo
(c⁄° 
M©chîTu∂e
& 
m©chîs
,

692 c⁄° 
VÆueTu∂e
& 
vÆues
,

693 ::
°d
::
o°ªam
* 
os
) {

694 
Tu∂ePªfix
<
°d
::
tu∂e_size
<
M©chîTu∂e
>::
vÆue
>::
Ex∂aöM©chFaûuªsTo
(

695 
m©chîs
, 
vÆues
, 
os
);

702 
	gãm∂©e
 <
ty≥«me
 
	gTu∂e
,Åy≥«mê
	gFunc
,Åy≥«mê
	gOutIãr
>

703 ˛as†
	cTønsf‹mTu∂eVÆuesHñ≥r
 {

704 
	g¥iv©e
:

705 ::
°d
::
	ttu∂e_size
<
	tTu∂e
> 
	tTu∂eSize
;

707 
	gpublic
:

710 
OutIãr
 
Run
(
Func
 
f
, c⁄° 
Tu∂e
& 
t
, OutIã∏
out
) {

711  
	gIãøãOvîTu∂e
<
	gTu∂e
, 
	gTu∂eSize
::
vÆue
>()(
f
, 
	gt
, 
	gout
);

714 
	g¥iv©e
:

715 
ãm∂©e
 <
ty≥«me
 
Tup
, 
size_t
 
	gkRemaöögSize
>

716 
	sIãøãOvîTu∂e
 {

717 
OutIãr
 
›î©‹
(Ë(
Func
 
	gf
, c⁄° 
	gTup
& 
	gt
, OutIã∏
	gout
) const {

718 *
	gout
++ = 
f
(::
°d
::
gë
<
Tu∂eSize
::
vÆue
 - 
kRemaöögSize
>(
t
));

719  
	gIãøãOvîTu∂e
<
	gTup
, 
	gkRemaöögSize
 - 1>()(
	gf
, 
	gt
, 
	gout
);

722 
	gãm∂©e
 <
ty≥«me
 
	gTup
>

723 
	gIãøãOvîTu∂e
<
	gTup
, 0> {

724 
OutIãr
 
›î©‹
(Ë(
	gFunc
 , c⁄° 
	gTup
& , OutIã∏
	gout
) const {

725  
	gout
;

733 
	gãm∂©e
 <
ty≥«me
 
	gTu∂e
,Åy≥«mê
	gFunc
,Åy≥«mê
	gOutIãr
>

734 
OutIãr
 
Tønsf‹mTu∂eVÆues
(
Func
 
f
, c⁄° 
Tu∂e
& 
t
, OutIã∏
out
) {

735  
	gTønsf‹mTu∂eVÆuesHñ≥r
<
	gTu∂e
, 
	gFunc
, 
	gOutIãr
>::
Run
(
f
, 
t
, 
out
);

742 ˛as†
	cAnythögM©chî
 {

743 
	gpublic
:

744 
usög
 
is_gã°_m©chî
 = ;

746 
	gãm∂©e
 <
ty≥«me
 
	gT
>

747 
boﬁ
 
M©chAndEx∂aö
(c⁄° 
T
& , 
°d
::
o°ªam
* ) const {

748  
åue
;

750 
Des¸ibeTo
(
°d
::
o°ªam
* 
os
) const { *os << "isánything"; }

751 
Des¸ibeNeg©i⁄To
(::
°d
::
o°ªam
* 
os
) const {

755 *
os
 << "never matches";

761 ˛as†
	cIsNuŒM©chî
 {

762 
	gpublic
:

763 
ãm∂©e
 <
ty≥«me
 
Poöãr
>

764 
boﬁ
 
M©chAndEx∂aö
(c⁄° 
Poöãr
& 
p
,

765 
M©chResu…Li°íî
* ) const {

766  
	gp
 =
nuŒ±r
;

769 
Des¸ibeTo
(::
°d
::
o°ªam
* 
os
) const { *os << "is NULL"; }

770 
Des¸ibeNeg©i⁄To
(::
°d
::
o°ªam
* 
os
) const {

771 *
os
 << "isn't NULL";

777 ˛as†
	cNŸNuŒM©chî
 {

778 
	gpublic
:

779 
ãm∂©e
 <
ty≥«me
 
Poöãr
>

780 
boﬁ
 
M©chAndEx∂aö
(c⁄° 
Poöãr
& 
p
,

781 
M©chResu…Li°íî
* ) const {

782  
	gp
 !
nuŒ±r
;

785 
Des¸ibeTo
(::
°d
::
o°ªam
* 
os
) const { *os << "isn't NULL"; }

786 
Des¸ibeNeg©i⁄To
(::
°d
::
o°ªam
* 
os
) const {

787 *
os
 << "is NULL";

804 
	gãm∂©e
 <
ty≥«me
 
	gT
>

805 
˛ass
 
	gRefM©chî
;

807 
	gãm∂©e
 <
ty≥«me
 
	gT
>

808 
˛ass
 
	gRefM©chî
<
	gT
&> {

814 
	gpublic
:

818 
ex∂icô
 
RefM©chî
(
T
& 
x
Ë: 
obje˘_
(x) {}

820 
ãm∂©e
 <
ty≥«me
 
Su≥r
>

821 
›î©‹
 
M©chî
<
Su≥r
&>() const {

827  
MakeM©chî
(
√w
 
Im∂
<
Su≥r
>(
obje˘_
));

830 
	g¥iv©e
:

831 
ãm∂©e
 <
ty≥«me
 
Su≥r
>

832 
˛ass
 
Im∂
 : 
public
 
M©chîI¡îÁ˚
<
Su≥r
&> {

833 
public
:

834 
ex∂icô
 
Im∂
(
Su≥r
& 
x
Ë: 
obje˘_
(x) {}

838 
boﬁ
 
M©chAndEx∂aö
(
Su≥r
& 
x
,

839 
M©chResu…Li°íî
* 
li°íî
Ëc⁄° 
	govîride
 {

840 *
	gli°íî
 << "which i†loˇãd @" << 
	g°©ic_ˇ°
<c⁄° *>(&
	gx
);

841  &
	gx
 =&
obje˘_
;

844 
Des¸ibeTo
(::
°d
::
o°ªam
* 
os
Ëc⁄° 
ovîride
 {

845 *
os
 << "referencesÅhe variable ";

846 
	gUnivîßlPröãr
<
	gSu≥r
&>::
Pröt
(
obje˘_
, 
os
);

849 
Des¸ibeNeg©i⁄To
(::
°d
::
o°ªam
* 
os
Ëc⁄° 
ovîride
 {

850 *
os
 << "doesÇotÑeferenceÅhe variable ";

851 
	gUnivîßlPröãr
<
	gSu≥r
&>::
Pröt
(
obje˘_
, 
os
);

854 
	g¥iv©e
:

855 c⁄° 
Su≥r
& 
obje˘_
;

858 
	gT
& 
	gobje˘_
;

862 
ölöe
 
boﬁ
 
Ca£In£nsôiveCSåögEquÆs
(c⁄° * 
lhs
, c⁄° * 
rhs
) {

863  
	gSåög
::
Ca£In£nsôiveCSåögEquÆs
(
lhs
, 
rhs
);

866 
ölöe
 
boﬁ
 
Ca£In£nsôiveCSåögEquÆs
(c⁄° 
wch¨_t
* 
lhs
,

867 c⁄° 
wch¨_t
* 
rhs
) {

868  
	gSåög
::
Ca£In£nsôiveWideCSåögEquÆs
(
lhs
, 
rhs
);

873 
	gãm∂©e
 <
ty≥«me
 
	gSåögTy≥
>

874 
boﬁ
 
Ca£In£nsôiveSåögEquÆs
(c⁄° 
SåögTy≥
& 
s1
,

875 c⁄° 
SåögTy≥
& 
s2
) {

877 i‡(!
Ca£In£nsôiveCSåögEquÆs
(
s1
.
c_°r
(), 
s2
.c_str())) {

878  
	gÁl£
;

882 c⁄° 
ty≥«me
 
	gSåögTy≥
::
vÆue_ty≥
 
nul
 = 0;

883 c⁄° 
size_t
 
	gi1
 = 
s1
.
föd
(
nul
), 
	gi2
 = 
s2
.find(nul);

886 i‡(
	gi1
 =
SåögTy≥
::
≈os
 || 
i2
 == StringType::npos) {

887  
i1
 =
i2
;

891  
Ca£In£nsôiveSåögEquÆs
(
s1
.
sub°r
(
i1
 + 1), 
s2
.sub°r(
i2
 + 1));

897 
	gãm∂©e
 <
ty≥«me
 
	gSåögTy≥
>

898 ˛as†
	cSåEquÆôyM©chî
 {

899 
	gpublic
:

900 
SåEquÆôyM©chî
(
SåögTy≥
 
°r
, 
boﬁ
 
ex≥˘_eq
, boﬁ 
ˇ£_£nsôive
)

901 : 
°rög_
(
°d
::
move
(
°r
)),

902 
ex≥˘_eq_
(
ex≥˘_eq
),

903 
ˇ£_£nsôive_
(
ˇ£_£nsôive
) {}

905 #i‡
GTEST_INTERNAL_HAS_STRING_VIEW


906 
boﬁ
 
M©chAndEx∂aö
(c⁄° 
öã∫Æ
::
SåögVõw
& 
s
,

907 
M©chResu…Li°íî
* 
li°íî
) const {

910 c⁄° 
	gSåögTy≥
& 
	g°r
 = 
°d
::
°rög
(
s
);

911  
M©chAndEx∂aö
(
°r
, 
li°íî
);

920 
	gãm∂©e
 <
ty≥«me
 
	gCh¨Ty≥
>

921 
boﬁ
 
M©chAndEx∂aö
(
Ch¨Ty≥
* 
s
, 
M©chResu…Li°íî
* 
li°íî
) const {

922 i‡(
	gs
 =
nuŒ±r
) {

923  !
ex≥˘_eq_
;

925  
M©chAndEx∂aö
(
SåögTy≥
(
s
), 
li°íî
);

932 
	gãm∂©e
 <
ty≥«me
 
	gM©chìSåögTy≥
>

933 
boﬁ
 
M©chAndEx∂aö
(c⁄° 
M©chìSåögTy≥
& 
s
,

934 
M©chResu…Li°íî
* ) const {

935 c⁄° 
SåögTy≥
 
s2
(
s
);

936 c⁄° 
boﬁ
 
	geq
 = 
ˇ£_£nsôive_
 ? 
s2
 =
°rög_
 :

937 
Ca£In£nsôiveSåögEquÆs
(
s2
, 
°rög_
);

938  
	gex≥˘_eq_
 =
eq
;

941 
Des¸ibeTo
(::
°d
::
o°ªam
* 
os
) const {

942 
Des¸ibeToHñ≥r
(
ex≥˘_eq_
, 
os
);

945 
Des¸ibeNeg©i⁄To
(::
°d
::
o°ªam
* 
os
) const {

946 
Des¸ibeToHñ≥r
(!
ex≥˘_eq_
, 
os
);

949 
	g¥iv©e
:

950 
Des¸ibeToHñ≥r
(
boﬁ
 
ex≥˘_eq
, ::
°d
::
o°ªam
* 
os
) const {

951 *
os
 << (
ex≥˘_eq
 ? "is " : "isn't ");

952 *
	gos
 << "equalÅo ";

953 i‡(!
	gˇ£_£nsôive_
) {

954 *
	gos
 << "(ignoring case) ";

956 
UnivîßlPröt
(
°rög_
, 
os
);

959 c⁄° 
SåögTy≥
 
	g°rög_
;

960 c⁄° 
boﬁ
 
	gex≥˘_eq_
;

961 c⁄° 
boﬁ
 
	gˇ£_£nsôive_
;

967 
	gãm∂©e
 <
ty≥«me
 
	gSåögTy≥
>

968 ˛as†
	cHasSub°rM©chî
 {

969 
	gpublic
:

970 
ex∂icô
 
HasSub°rM©chî
(c⁄° 
SåögTy≥
& 
sub°rög
)

971 : 
sub°rög_
(
sub°rög
) {}

973 #i‡
GTEST_INTERNAL_HAS_STRING_VIEW


974 
boﬁ
 
M©chAndEx∂aö
(c⁄° 
öã∫Æ
::
SåögVõw
& 
s
,

975 
M©chResu…Li°íî
* 
li°íî
) const {

978 c⁄° 
	gSåögTy≥
& 
	g°r
 = 
°d
::
°rög
(
s
);

979  
M©chAndEx∂aö
(
°r
, 
li°íî
);

988 
	gãm∂©e
 <
ty≥«me
 
	gCh¨Ty≥
>

989 
boﬁ
 
M©chAndEx∂aö
(
Ch¨Ty≥
* 
s
, 
M©chResu…Li°íî
* 
li°íî
) const {

990  
	gs
 !
nuŒ±r
 && 
M©chAndEx∂aö
(
SåögTy≥
(
s
), 
li°íî
);

997 
	gãm∂©e
 <
ty≥«me
 
	gM©chìSåögTy≥
>

998 
boﬁ
 
M©chAndEx∂aö
(c⁄° 
M©chìSåögTy≥
& 
s
,

999 
M©chResu…Li°íî
* ) const {

1000  
SåögTy≥
(
s
).
föd
(
sub°rög_
Ë!SåögTy≥::
≈os
;

1004 
Des¸ibeTo
(::
°d
::
o°ªam
* 
os
) const {

1005 *
os
 << "has substring ";

1006 
UnivîßlPröt
(
sub°rög_
, 
os
);

1009 
Des¸ibeNeg©i⁄To
(::
°d
::
o°ªam
* 
os
) const {

1010 *
os
 << "hasÇo substring ";

1011 
UnivîßlPröt
(
sub°rög_
, 
os
);

1014 
	g¥iv©e
:

1015 c⁄° 
SåögTy≥
 
sub°rög_
;

1021 
	gãm∂©e
 <
ty≥«me
 
	gSåögTy≥
>

1022 ˛as†
	cSèπsWôhM©chî
 {

1023 
	gpublic
:

1024 
ex∂icô
 
SèπsWôhM©chî
(c⁄° 
SåögTy≥
& 
¥efix
Ë: 
¥efix_
(prefix) {

1027 #i‡
GTEST_INTERNAL_HAS_STRING_VIEW


1028 
boﬁ
 
M©chAndEx∂aö
(c⁄° 
öã∫Æ
::
SåögVõw
& 
s
,

1029 
M©chResu…Li°íî
* 
li°íî
) const {

1032 c⁄° 
	gSåögTy≥
& 
	g°r
 = 
°d
::
°rög
(
s
);

1033  
M©chAndEx∂aö
(
°r
, 
li°íî
);

1042 
	gãm∂©e
 <
ty≥«me
 
	gCh¨Ty≥
>

1043 
boﬁ
 
M©chAndEx∂aö
(
Ch¨Ty≥
* 
s
, 
M©chResu…Li°íî
* 
li°íî
) const {

1044  
	gs
 !
nuŒ±r
 && 
M©chAndEx∂aö
(
SåögTy≥
(
s
), 
li°íî
);

1051 
	gãm∂©e
 <
ty≥«me
 
	gM©chìSåögTy≥
>

1052 
boﬁ
 
M©chAndEx∂aö
(c⁄° 
M©chìSåögTy≥
& 
s
,

1053 
M©chResu…Li°íî
* ) const {

1054 c⁄° 
	gSåögTy≥
& 
s2
(
s
);

1055  
	gs2
.
Àngth
(Ë>
¥efix_
.length() &&

1056 
s2
.
sub°r
(0, 
¥efix_
.
Àngth
()) ==Örefix_;

1059 
Des¸ibeTo
(::
°d
::
o°ªam
* 
os
) const {

1060 *
os
 << "starts with ";

1061 
UnivîßlPröt
(
¥efix_
, 
os
);

1064 
Des¸ibeNeg©i⁄To
(::
°d
::
o°ªam
* 
os
) const {

1065 *
os
 << "doesn't start with ";

1066 
UnivîßlPröt
(
¥efix_
, 
os
);

1069 
	g¥iv©e
:

1070 c⁄° 
SåögTy≥
 
¥efix_
;

1076 
	gãm∂©e
 <
ty≥«me
 
	gSåögTy≥
>

1077 ˛as†
	cEndsWôhM©chî
 {

1078 
	gpublic
:

1079 
ex∂icô
 
EndsWôhM©chî
(c⁄° 
SåögTy≥
& 
suffix
Ë: 
suffix_
(suffix) {}

1081 #i‡
GTEST_INTERNAL_HAS_STRING_VIEW


1082 
boﬁ
 
M©chAndEx∂aö
(c⁄° 
öã∫Æ
::
SåögVõw
& 
s
,

1083 
M©chResu…Li°íî
* 
li°íî
) const {

1086 c⁄° 
	gSåögTy≥
& 
	g°r
 = 
°d
::
°rög
(
s
);

1087  
M©chAndEx∂aö
(
°r
, 
li°íî
);

1096 
	gãm∂©e
 <
ty≥«me
 
	gCh¨Ty≥
>

1097 
boﬁ
 
M©chAndEx∂aö
(
Ch¨Ty≥
* 
s
, 
M©chResu…Li°íî
* 
li°íî
) const {

1098  
	gs
 !
nuŒ±r
 && 
M©chAndEx∂aö
(
SåögTy≥
(
s
), 
li°íî
);

1105 
	gãm∂©e
 <
ty≥«me
 
	gM©chìSåögTy≥
>

1106 
boﬁ
 
M©chAndEx∂aö
(c⁄° 
M©chìSåögTy≥
& 
s
,

1107 
M©chResu…Li°íî
* ) const {

1108 c⁄° 
	gSåögTy≥
& 
s2
(
s
);

1109  
	gs2
.
Àngth
(Ë>
suffix_
.length() &&

1110 
s2
.
sub°r
(s2.
Àngth
(Ë- 
suffix_
.length()) == suffix_;

1113 
Des¸ibeTo
(::
°d
::
o°ªam
* 
os
) const {

1114 *
os
 << "ends with ";

1115 
UnivîßlPröt
(
suffix_
, 
os
);

1118 
Des¸ibeNeg©i⁄To
(::
°d
::
o°ªam
* 
os
) const {

1119 *
os
 << "doesn'tÉnd with ";

1120 
UnivîßlPröt
(
suffix_
, 
os
);

1123 
	g¥iv©e
:

1124 c⁄° 
SåögTy≥
 
suffix_
;

1135 
	gãm∂©e
 <
ty≥«me
 
	gD
,Åy≥«mê
	gOp
>

1136 ˛as†
	cPaúM©chBa£
 {

1137 
	gpublic
:

1138 
ãm∂©e
 <
ty≥«me
 
T1
,Åy≥«mê
	gT2
>

1139 
›î©‹
 
	gM©chî
<::
°d
::
tu∂e
<
T1
, 
	gT2
>>() const {

1140  
	gM©chî
<::
°d
::
tu∂e
<
T1
, 
	gT2
>>(
√w
 
	gIm∂
<const ::std::tuple<T1, T2>&>);

1142 
	gãm∂©e
 <
ty≥«me
 
	gT1
,Åy≥«mê
	gT2
>

1143 
›î©‹
 
	gM©chî
<c⁄° ::
°d
::
tu∂e
<
T1
, 
	gT2
>&>() const {

1144  
MakeM©chî
(
√w
 
Im∂
<c⁄° ::
°d
::
tu∂e
<
T1
, 
T2
>&>);

1147 
	g¥iv©e
:

1148 ::
°d
::
o°ªam
& 
GëDesc
(::°d::o°ªam& 
os
) {

1149  
os
 << 
D
::
Desc
();

1152 
	gãm∂©e
 <
ty≥«me
 
	gTu∂e
>

1153 
˛ass
 
	gIm∂
 : 
public
 
M©chîI¡îÁ˚
<
Tu∂e
> {

1154 
public
:

1155 
boﬁ
 
M©chAndEx∂aö
(
Tu∂e
 
¨gs
,

1156 
M©chResu…Li°íî
* ) c⁄° 
	govîride
 {

1157  
Op
()(::
°d
::
gë
<0>(
¨gs
), ::std::get<1>(args));

1159 
Des¸ibeTo
(::
°d
::
o°ªam
* 
os
Ëc⁄° 
ovîride
 {

1160 *
os
 << "¨ê" << 
GëDesc
;

1162 
Des¸ibeNeg©i⁄To
(::
°d
::
o°ªam
* 
os
Ëc⁄° 
ovîride
 {

1163 *
os
 << "¨í'à" << 
GëDesc
;

1168 
˛ass
 
	gEq2M©chî
 : 
public
 
PaúM©chBa£
<
Eq2M©chî
, 
	gAnyEq
> {

1169 
	gpublic
:

1170 c⁄° * 
Desc
() {  "anÉqualÖair"; }

1172 
˛ass
 
	gNe2M©chî
 : 
public
 
PaúM©chBa£
<
Ne2M©chî
, 
	gAnyNe
> {

1173 
	gpublic
:

1174 c⁄° * 
Desc
() {  "an unequalÖair"; }

1176 
˛ass
 
	gLt2M©chî
 : 
public
 
PaúM©chBa£
<
Lt2M©chî
, 
	gAnyLt
> {

1177 
	gpublic
:

1178 c⁄° * 
Desc
() {  "aÖair whereÅhe first <Åhe second"; }

1180 
˛ass
 
	gGt2M©chî
 : 
public
 
PaúM©chBa£
<
Gt2M©chî
, 
	gAnyGt
> {

1181 
	gpublic
:

1182 c⁄° * 
Desc
() {  "aÖair whereÅhe first >Åhe second"; }

1184 
˛ass
 
	gLe2M©chî
 : 
public
 
PaúM©chBa£
<
Le2M©chî
, 
	gAnyLe
> {

1185 
	gpublic
:

1186 c⁄° * 
Desc
() {  "aÖair whereÅhe first <=Åhe second"; }

1188 
˛ass
 
	gGe2M©chî
 : 
public
 
PaúM©chBa£
<
Ge2M©chî
, 
	gAnyGe
> {

1189 
	gpublic
:

1190 c⁄° * 
Desc
() {  "aÖair whereÅhe first >=Åhe second"; }

1197 
	gãm∂©e
 <
ty≥«me
 
	gT
>

1198 
˛ass
 
	gNŸM©chîIm∂
 : 
public
 
M©chîI¡îÁ˚
<c⁄° 
T
&> {

1199 
public
:

1200 
ex∂icô
 
NŸM©chîIm∂
(c⁄° 
M©chî
<
T
>& 
m©chî
)

1201 : 
m©chî_
(
m©chî
) {}

1203 
boﬁ
 
M©chAndEx∂aö
(c⁄° 
T
& 
x
,

1204 
M©chResu…Li°íî
* 
li°íî
Ëc⁄° 
	govîride
 {

1205  !
	gm©chî_
.
M©chAndEx∂aö
(
x
, 
li°íî
);

1208 
Des¸ibeTo
(::
°d
::
o°ªam
* 
os
Ëc⁄° 
ovîride
 {

1209 
m©chî_
.
Des¸ibeNeg©i⁄To
(
os
);

1212 
Des¸ibeNeg©i⁄To
(::
°d
::
o°ªam
* 
os
Ëc⁄° 
ovîride
 {

1213 
m©chî_
.
Des¸ibeTo
(
os
);

1216 
	g¥iv©e
:

1217 c⁄° 
M©chî
<
T
> 
m©chî_
;

1222 
	gãm∂©e
 <
ty≥«me
 
	gI¬îM©chî
>

1223 ˛as†
	cNŸM©chî
 {

1224 
	gpublic
:

1225 
ex∂icô
 
NŸM©chî
(
I¬îM©chî
 
m©chî
Ë: 
m©chî_
(matcher) {}

1229 
ãm∂©e
 <
ty≥«me
 
T
>

1230 
›î©‹
 
M©chî
<
T
>() const {

1231  
M©chî
<
T
>(
√w
 
NŸM©chîIm∂
<T>(
Sa„M©chîCa°
<T>(
m©chî_
)));

1234 
	g¥iv©e
:

1235 
I¬îM©chî
 
m©chî_
;

1242 
	gãm∂©e
 <
ty≥«me
 
	gT
>

1243 
˛ass
 
	gAŒOfM©chîIm∂
 : 
public
 
M©chîI¡îÁ˚
<c⁄° 
T
&> {

1244 
public
:

1245 
ex∂icô
 
AŒOfM©chîIm∂
(
°d
::
ve˘‹
<
M©chî
<
T
> > 
m©chîs
)

1246 : 
m©chîs_
(
°d
::
move
(
m©chîs
)) {}

1248 
Des¸ibeTo
(::
°d
::
o°ªam
* 
os
Ëc⁄° 
ovîride
 {

1249 *
os
 << "(";

1250 
size_t
 
	gi
 = 0; i < 
	gm©chîs_
.
size
(); ++i) {

1251 i‡(
	gi
 !0Ë*
os
 << ")ánd (";

1252 
	gm©chîs_
[
i
].
Des¸ibeTo
(
os
);

1254 *
	gos
 << ")";

1257 
Des¸ibeNeg©i⁄To
(::
°d
::
o°ªam
* 
os
Ëc⁄° 
ovîride
 {

1258 *
os
 << "(";

1259 
size_t
 
	gi
 = 0; i < 
	gm©chîs_
.
size
(); ++i) {

1260 i‡(
	gi
 !0Ë*
os
 << ") or (";

1261 
	gm©chîs_
[
i
].
Des¸ibeNeg©i⁄To
(
os
);

1263 *
	gos
 << ")";

1266 
boﬁ
 
M©chAndEx∂aö
(c⁄° 
T
& 
x
,

1267 
M©chResu…Li°íî
* 
li°íî
Ëc⁄° 
	govîride
 {

1270 
	g°d
::
°rög
 
Æl_m©ch_ªsu…
;

1272 
size_t
 
	gi
 = 0; i < 
	gm©chîs_
.
size
(); ++i) {

1273 
SåögM©chResu…Li°íî
 
	g¶i°íî
;

1274 i‡(
	gm©chîs_
[
i
].
M©chAndEx∂aö
(
x
, &
¶i°íî
)) {

1275 i‡(
	gÆl_m©ch_ªsu…
.
em±y
()) {

1276 
	gÆl_m©ch_ªsu…
 = 
¶i°íî
.
°r
();

1278 
	g°d
::
°rög
 
ªsu…
 = 
¶i°íî
.
°r
();

1279 i‡(!
	gªsu…
.
em±y
()) {

1280 
	gÆl_m©ch_ªsu…
 += ",ánd ";

1281 
	gÆl_m©ch_ªsu…
 +
ªsu…
;

1285 *
	gli°íî
 << 
	g¶i°íî
.
°r
();

1286  
	gÁl£
;

1291 *
	gli°íî
 << 
	gÆl_m©ch_ªsu…
;

1292  
	gåue
;

1295 
	g¥iv©e
:

1296 c⁄° 
°d
::
ve˘‹
<
M©chî
<
T
> > 
m©chîs_
;

1303 
	gãm∂©e
 <ãm∂©ê<
ty≥«me
 
	gT
> 
˛ass
 
	gComböögM©chî
, 
	gty≥«me
... 
	gArgs
>

1304 ˛as†
	cV¨üdicM©chî
 {

1305 
	gpublic
:

1306 
V¨üdicM©chî
(c⁄° 
Args
&... 
m©chîs
)

1307 : 
m©chîs_
(
m©chîs
...) {

1308 
°©ic_as£π
(...(
Args
) > 0, "Must haveátÜeast one matcher.");

1311 
V¨üdicM©chî
(const VariadicMatcher&) = ;

1312 
	gV¨üdicM©chî
& 
	g›î©‹
=(c⁄° 
V¨üdicM©chî
&Ë
dñëe
;

1317 
	gãm∂©e
 <
ty≥«me
 
	gT
>

1318 
›î©‹
 
	gM©chî
<
	gT
>() const {

1319 
	g°d
::
ve˘‹
<
M©chî
<
T
> > 
vÆues
;

1320 
	gCª©eV¨üdicM©chî
<
	gT
>(&
	gvÆues
, 
	g°d
::
öãgøl_c⁄°™t
<
size_t
, 0>());

1321  
	gM©chî
<
	gT
>(
√w
 
	gComböögM©chî
<T>(
	g°d
::
move
(
vÆues
)));

1324 
	g¥iv©e
:

1325 
ãm∂©e
 <
ty≥«me
 
T
, 
size_t
 
	gI
>

1326 
Cª©eV¨üdicM©chî
(
°d
::
ve˘‹
<
M©chî
<
T
> >* 
vÆues
,

1327 
°d
::
öãgøl_c⁄°™t
<
size_t
, 
I
>) const {

1328 
	gvÆues
->
push_back
(
Sa„M©chîCa°
<
T
>(
°d
::
gë
<
I
>(
m©chîs_
)));

1329 
	gCª©eV¨üdicM©chî
<
	gT
>(
	gvÆues
, 
	g°d
::
öãgøl_c⁄°™t
<
size_t
, 
	gI
 + 1>());

1332 
	gãm∂©e
 <
ty≥«me
 
	gT
>

1333 
Cª©eV¨üdicM©chî
(

1334 
°d
::
ve˘‹
<
M©chî
<
T
> >*,

1335 
°d
::
öãgøl_c⁄°™t
<
size_t
, ...(
Args
)>) const {}

1337 
	g°d
::
tu∂e
<
Args
...> 
m©chîs_
;

1340 
	gãm∂©e
 <
	gty≥«me
... 
	gArgs
>

1341 
usög
 
	gAŒOfM©chî
 = 
V¨üdicM©chî
<
AŒOfM©chîIm∂
, 
	gArgs
...>;

1347 
	gãm∂©e
 <
ty≥«me
 
	gT
>

1348 
˛ass
 
	gAnyOfM©chîIm∂
 : 
public
 
M©chîI¡îÁ˚
<c⁄° 
T
&> {

1349 
public
:

1350 
ex∂icô
 
AnyOfM©chîIm∂
(
°d
::
ve˘‹
<
M©chî
<
T
> > 
m©chîs
)

1351 : 
m©chîs_
(
°d
::
move
(
m©chîs
)) {}

1353 
Des¸ibeTo
(::
°d
::
o°ªam
* 
os
Ëc⁄° 
ovîride
 {

1354 *
os
 << "(";

1355 
size_t
 
	gi
 = 0; i < 
	gm©chîs_
.
size
(); ++i) {

1356 i‡(
	gi
 !0Ë*
os
 << ") or (";

1357 
	gm©chîs_
[
i
].
Des¸ibeTo
(
os
);

1359 *
	gos
 << ")";

1362 
Des¸ibeNeg©i⁄To
(::
°d
::
o°ªam
* 
os
Ëc⁄° 
ovîride
 {

1363 *
os
 << "(";

1364 
size_t
 
	gi
 = 0; i < 
	gm©chîs_
.
size
(); ++i) {

1365 i‡(
	gi
 !0Ë*
os
 << ")ánd (";

1366 
	gm©chîs_
[
i
].
Des¸ibeNeg©i⁄To
(
os
);

1368 *
	gos
 << ")";

1371 
boﬁ
 
M©chAndEx∂aö
(c⁄° 
T
& 
x
,

1372 
M©chResu…Li°íî
* 
li°íî
Ëc⁄° 
	govîride
 {

1373 
	g°d
::
°rög
 
no_m©ch_ªsu…
;

1377 
size_t
 
	gi
 = 0; i < 
	gm©chîs_
.
size
(); ++i) {

1378 
SåögM©chResu…Li°íî
 
	g¶i°íî
;

1379 i‡(
	gm©chîs_
[
i
].
M©chAndEx∂aö
(
x
, &
¶i°íî
)) {

1380 *
	gli°íî
 << 
	g¶i°íî
.
°r
();

1381  
	gåue
;

1383 i‡(
	gno_m©ch_ªsu…
.
em±y
()) {

1384 
	gno_m©ch_ªsu…
 = 
¶i°íî
.
°r
();

1386 
	g°d
::
°rög
 
ªsu…
 = 
¶i°íî
.
°r
();

1387 i‡(!
	gªsu…
.
em±y
()) {

1388 
	gno_m©ch_ªsu…
 += ",ánd ";

1389 
	gno_m©ch_ªsu…
 +
ªsu…
;

1396 *
	gli°íî
 << 
	gno_m©ch_ªsu…
;

1397  
	gÁl£
;

1400 
	g¥iv©e
:

1401 c⁄° 
°d
::
ve˘‹
<
M©chî
<
T
> > 
m©chîs_
;

1405 
	gãm∂©e
 <
	gty≥«me
... 
	gArgs
>

1406 
usög
 
	gAnyOfM©chî
 = 
V¨üdicM©chî
<
AnyOfM©chîIm∂
, 
	gArgs
...>;

1409 
	gãm∂©e
 <ãm∂©ê<
	g˛ass
> 
˛ass
 
	gM©chîIm∂
, 
ty≥«me
 
	gT
>

1410 ˛as†
	cSomeOfAºayM©chî
 {

1411 
	gpublic
:

1414 
ãm∂©e
 <
ty≥«me
 
Iãr
>

1415 
SomeOfAºayM©chî
(
Iãr
 
fú°
, Iã∏
œ°
Ë: 
m©chîs_
(first,Üast) {}

1417 
	gãm∂©e
 <
ty≥«me
 
	gU
>

1418 
›î©‹
 
	gM©chî
<
	gU
>() const {

1419 
usög
 
	gRawU
 = 
ty≥«me
 
°d
::
deˇy
<
U
>::
ty≥
;

1420 
	g°d
::
ve˘‹
<
M©chî
<
RawU
>> 
m©chîs
;

1421 c⁄°áuto& 
	gm©chî
 : 
m©chîs_
) {

1422 
m©chîs
.
push_back
(
M©chîCa°
<
RawU
>(
m©chî
));

1424  
	gM©chî
<
	gU
>(
√w
 
	gM©chîIm∂
<
	gRawU
>(
	g°d
::
move
(
m©chîs
)));

1427 
	g¥iv©e
:

1428 c⁄° ::
°d
::
ve˘‹
<
T
> 
m©chîs_
;

1431 
	gãm∂©e
 <
ty≥«me
 
	gT
>

1432 
usög
 
	gAŒOfAºayM©chî
 = 
SomeOfAºayM©chî
<
AŒOfM©chîIm∂
, 
	gT
>;

1434 
	gãm∂©e
 <
ty≥«me
 
	gT
>

1435 
usög
 
	gAnyOfAºayM©chî
 = 
SomeOfAºayM©chî
<
AnyOfM©chîIm∂
, 
	gT
>;

1439 
	gãm∂©e
 <
ty≥«me
 
	gPªdiˇã
>

1440 ˛as†
	cTrulyM©chî
 {

1441 
	gpublic
:

1442 
ex∂icô
 
TrulyM©chî
(
Pªdiˇã
 
¥ed
Ë: 
¥ediˇã_
(pred) {}

1448 
ãm∂©e
 <
ty≥«me
 
T
>

1449 
boﬁ
 
M©chAndEx∂aö
(
T
& 
x
,

1450 
M©chResu…Li°íî
* 
li°íî
) const {

1457 i‡(
¥ediˇã_
(
x
))

1458  
	gåue
;

1459 *
	gli°íî
 << "didn't satisfyÅhe givenÖredicate";

1460  
	gÁl£
;

1463 
Des¸ibeTo
(::
°d
::
o°ªam
* 
os
) const {

1464 *
os
 << "satisfiesÅhe givenÖredicate";

1467 
Des¸ibeNeg©i⁄To
(::
°d
::
o°ªam
* 
os
) const {

1468 *
os
 << "doesn't satisfyÅhe givenÖredicate";

1471 
	g¥iv©e
:

1472 
Pªdiˇã
 
¥ediˇã_
;

1477 
	gãm∂©e
 <
ty≥«me
 
	gM
>

1478 ˛as†
	cM©chîAsPªdiˇã
 {

1479 
	gpublic
:

1480 
ex∂icô
 
M©chîAsPªdiˇã
(
M
 
m©chî
Ë: 
m©chî_
(matcher) {}

1488 
ãm∂©e
 <
ty≥«me
 
T
>

1489 
boﬁ
 
›î©‹
()(c⁄° 
T
& 
x
) const {

1504  
M©chîCa°
<c⁄° 
T
&>(
m©chî_
).
M©ches
(
x
);

1507 
	g¥iv©e
:

1508 
M
 
m©chî_
;

1513 
	gãm∂©e
 <
ty≥«me
 
	gM
>

1514 ˛as†
	cPªdiˇãF‹m©ãrFromM©chî
 {

1515 
	gpublic
:

1516 
ex∂icô
 
PªdiˇãF‹m©ãrFromM©chî
(
M
 
m
Ë: 
m©chî_
(
°d
::
move
(m)) {}

1521 
ãm∂©e
 <
ty≥«me
 
T
>

1522 
As£πi⁄Resu…
 
›î©‹
()(c⁄° * 
vÆue_ãxt
, c⁄° 
	gT
& 
	gx
) const {

1534 c⁄° 
	gM©chî
<c⁄° 
	gT
&> 
	gm©chî
 = 
Sa„M©chîCa°
<c⁄° 
T
&>(
m©chî_
);

1538 i‡(
	gm©chî
.
M©ches
(
x
)) {

1539  
As£πi⁄Suc˚ss
();

1542 ::
°d
::
°rög°ªam
 
ss
;

1543 
	gss
 << "VÆuêof: " << 
	gvÆue_ãxt
 << "\n"

1545 
	gm©chî
.
Des¸ibeTo
(&
ss
);

1548 
SåögM©chResu…Li°íî
 
	gli°íî
;

1549 i‡(
M©chPrötAndEx∂aö
(
x
, 
m©chî
, &
li°íî
)) {

1550 
	gss
 << "\n The matcher failed onÅhe initialáttempt; butÖassed when "

1553 
	gss
 << "\¿ A˘uÆ: " << 
	gli°íî
.
°r
();

1554  
As£πi⁄Faûuª
(Ë<< 
	gss
.
°r
();

1557 
	g¥iv©e
:

1558 c⁄° 
M
 
m©chî_
;

1565 
	gãm∂©e
 <
ty≥«me
 
	gM
>

1566 
ölöe
 
	gPªdiˇãF‹m©ãrFromM©chî
<
	gM
>

1567 
MakePªdiˇãF‹m©ãrFromM©chî
(
M
 
m©chî
) {

1568  
	gPªdiˇãF‹m©ãrFromM©chî
<
	gM
>(
	g°d
::
move
(
m©chî
));

1573 ˛as†
	cIsN™M©chî
 {

1574 
	gpublic
:

1575 
ãm∂©e
 <
ty≥«me
 
FlﬂtTy≥
>

1576 
boﬁ
 
M©chAndEx∂aö
(c⁄° 
FlﬂtTy≥
& 
f
,

1577 
M©chResu…Li°íî
* ) const {

1578  (::
°d
::
i¢™
)(
f
);

1581 
Des¸ibeTo
(::
°d
::
o°ªam
* 
os
) const { *os << "is NaN"; }

1582 
Des¸ibeNeg©i⁄To
(::
°d
::
o°ªam
* 
os
) const {

1583 *
os
 << "isn't NaN";

1591 
	gãm∂©e
 <
ty≥«me
 
	gFlﬂtTy≥
>

1592 ˛as†
	cFlﬂtögEqM©chî
 {

1593 
	gpublic
:

1600 
FlﬂtögEqM©chî
(
FlﬂtTy≥
 
ex≥˘ed
, 
boﬁ
 
«n_eq_«n
) :

1601 
ex≥˘ed_
(
ex≥˘ed
), 
«n_eq_«n_
(
«n_eq_«n
), 
max_abs_îr‹_
(-1) {

1607 
FlﬂtögEqM©chî
(
FlﬂtTy≥
 
ex≥˘ed
, 
boﬁ
 
«n_eq_«n
,

1608 
FlﬂtTy≥
 
max_abs_îr‹
)

1609 : 
ex≥˘ed_
(
ex≥˘ed
),

1610 
«n_eq_«n_
(
«n_eq_«n
),

1611 
max_abs_îr‹_
(
max_abs_îr‹
) {

1612 
GTEST_CHECK_
(
max_abs_îr‹
 >= 0)

1613 << ", whîêmax_abs_îr‹ is" << 
max_abs_îr‹
;

1617 
	gãm∂©e
 <
ty≥«me
 
	gT
>

1618 
˛ass
 
	gIm∂
 : 
public
 
M©chîI¡îÁ˚
<
T
> {

1619 
public
:

1620 
Im∂
(
FlﬂtTy≥
 
ex≥˘ed
, 
boﬁ
 
«n_eq_«n
, FlﬂtTy≥ 
max_abs_îr‹
)

1621 : 
ex≥˘ed_
(
ex≥˘ed
),

1622 
«n_eq_«n_
(
«n_eq_«n
),

1623 
max_abs_îr‹_
(
max_abs_îr‹
) {}

1625 
boﬁ
 
M©chAndEx∂aö
(
T
 
vÆue
,

1626 
M©chResu…Li°íî
* 
li°íî
Ëc⁄° 
	govîride
 {

1627 c⁄° 
	gFlﬂtögPoöt
<
	gFlﬂtTy≥
> 
a˘uÆ
(
vÆue
), 
ex≥˘ed
(
ex≥˘ed_
);

1630 i‡(
	ga˘uÆ
.
is_«n
(Ë|| 
	gex≥˘ed
.is_nan()) {

1631 i‡(
	ga˘uÆ
.
is_«n
(Ë&& 
	gex≥˘ed
.is_nan()) {

1632  
	g«n_eq_«n_
;

1635  
	gÁl£
;

1637 i‡(
HasMaxAbsEº‹
()) {

1642 i‡(
	gvÆue
 =
ex≥˘ed_
) {

1643  
åue
;

1646 c⁄° 
FlﬂtTy≥
 
	gdiff
 = 
vÆue
 - 
ex≥˘ed_
;

1647 i‡(::
°d
::
Ábs
(
diff
Ë<
max_abs_îr‹_
) {

1648  
åue
;

1651 i‡(
	gli°íî
->
IsI¡îe°ed
()) {

1652 *
	gli°íî
 << "which i†" << 
	gdiff
 << " from " << 
	gex≥˘ed_
;

1654  
	gÁl£
;

1656  
	ga˘uÆ
.
Almo°EquÆs
(
ex≥˘ed
);

1660 
Des¸ibeTo
(::
°d
::
o°ªam
* 
os
Ëc⁄° 
ovîride
 {

1664 c⁄° ::
°d
::
°ªamsize
 
ﬁd_¥ecisi⁄
 = 
os
->
¥ecisi⁄
(

1665 ::
°d
::
numîic_limôs
<
FlﬂtTy≥
>::
digôs10
 + 2);

1666 i‡(
	gFlﬂtögPoöt
<
	gFlﬂtTy≥
>(
	gex≥˘ed_
).
is_«n
()) {

1667 i‡(
	g«n_eq_«n_
) {

1668 *
	gos
 << "is NaN";

1670 *
	gos
 << "never matches";

1673 *
	gos
 << "i†≠¥oxim©ñy " << 
	gex≥˘ed_
;

1674 i‡(
HasMaxAbsEº‹
()) {

1675 *
	gos
 << " (absﬁuãÉº‹ <" << 
	gmax_abs_îr‹_
 << ")";

1678 
	gos
->
¥ecisi⁄
(
ﬁd_¥ecisi⁄
);

1681 
Des¸ibeNeg©i⁄To
(::
°d
::
o°ªam
* 
os
Ëc⁄° 
ovîride
 {

1683 c⁄° ::
°d
::
°ªamsize
 
ﬁd_¥ecisi⁄
 = 
os
->
¥ecisi⁄
(

1684 ::
°d
::
numîic_limôs
<
FlﬂtTy≥
>::
digôs10
 + 2);

1685 i‡(
	gFlﬂtögPoöt
<
	gFlﬂtTy≥
>(
	gex≥˘ed_
).
is_«n
()) {

1686 i‡(
	g«n_eq_«n_
) {

1687 *
	gos
 << "isn't NaN";

1689 *
	gos
 << "isánything";

1692 *
	gos
 << "i¢'à≠¥oxim©ñy " << 
	gex≥˘ed_
;

1693 i‡(
HasMaxAbsEº‹
()) {

1694 *
	gos
 << " (absﬁuãÉº‹ > " << 
	gmax_abs_îr‹_
 << ")";

1698 
	gos
->
¥ecisi⁄
(
ﬁd_¥ecisi⁄
);

1701 
	g¥iv©e
:

1702 
boﬁ
 
HasMaxAbsEº‹
() const {

1703  
max_abs_îr‹_
 >= 0;

1706 c⁄° 
FlﬂtTy≥
 
	gex≥˘ed_
;

1707 c⁄° 
boﬁ
 
	g«n_eq_«n_
;

1709 c⁄° 
FlﬂtTy≥
 
	gmax_abs_îr‹_
;

1715 
›î©‹
 
	gM©chî
<
	gFlﬂtTy≥
>() const {

1716  
MakeM©chî
(

1717 
√w
 
Im∂
<
FlﬂtTy≥
>(
ex≥˘ed_
, 
«n_eq_«n_
, 
max_abs_îr‹_
));

1720 
›î©‹
 
	gM©chî
<c⁄° 
	gFlﬂtTy≥
&>() const {

1721  
MakeM©chî
(

1722 
√w
 
Im∂
<c⁄° 
FlﬂtTy≥
&>(
ex≥˘ed_
, 
«n_eq_«n_
, 
max_abs_îr‹_
));

1725 
›î©‹
 
	gM©chî
<
	gFlﬂtTy≥
&>() const {

1726  
MakeM©chî
(

1727 
√w
 
Im∂
<
FlﬂtTy≥
&>(
ex≥˘ed_
, 
«n_eq_«n_
, 
max_abs_îr‹_
));

1730 
	g¥iv©e
:

1731 c⁄° 
FlﬂtTy≥
 
ex≥˘ed_
;

1732 c⁄° 
boﬁ
 
	g«n_eq_«n_
;

1734 c⁄° 
FlﬂtTy≥
 
	gmax_abs_îr‹_
;

1742 
	gãm∂©e
 <
ty≥«me
 
	gFlﬂtTy≥
>

1743 ˛as†
	cFlﬂtögEq2M©chî
 {

1744 
	gpublic
:

1745 
FlﬂtögEq2M©chî
(Ë{ 
Inô
(-1, 
Ál£
); }

1747 
ex∂icô
 
FlﬂtögEq2M©chî
(
boﬁ
 
«n_eq_«n
Ë{ 
Inô
(-1,Çan_eq_nan); }

1749 
ex∂icô
 
FlﬂtögEq2M©chî
(
FlﬂtTy≥
 
max_abs_îr‹
) {

1750 
Inô
(
max_abs_îr‹
, 
Ál£
);

1753 
FlﬂtögEq2M©chî
(
FlﬂtTy≥
 
max_abs_îr‹
, 
boﬁ
 
«n_eq_«n
) {

1754 
Inô
(
max_abs_îr‹
, 
«n_eq_«n
);

1757 
	gãm∂©e
 <
ty≥«me
 
	gT1
,Åy≥«mê
	gT2
>

1758 
›î©‹
 
	gM©chî
<::
°d
::
tu∂e
<
T1
, 
	gT2
>>() const {

1759  
MakeM©chî
(

1760 
√w
 
Im∂
<::
°d
::
tu∂e
<
T1
, 
T2
>>(
max_abs_îr‹_
, 
«n_eq_«n_
));

1762 
	gãm∂©e
 <
ty≥«me
 
	gT1
,Åy≥«mê
	gT2
>

1763 
›î©‹
 
	gM©chî
<c⁄° ::
°d
::
tu∂e
<
T1
, 
	gT2
>&>() const {

1764  
MakeM©chî
(

1765 
√w
 
Im∂
<c⁄° ::
°d
::
tu∂e
<
T1
, 
T2
>&>(
max_abs_îr‹_
, 
«n_eq_«n_
));

1768 
	g¥iv©e
:

1769 ::
°d
::
o°ªam
& 
GëDesc
(::°d::o°ªam& 
os
) {

1770  
os
 << "análmost-equalÖair";

1773 
	gãm∂©e
 <
ty≥«me
 
	gTu∂e
>

1774 
˛ass
 
	gIm∂
 : 
public
 
M©chîI¡îÁ˚
<
Tu∂e
> {

1775 
public
:

1776 
Im∂
(
FlﬂtTy≥
 
max_abs_îr‹
, 
boﬁ
 
«n_eq_«n
) :

1777 
max_abs_îr‹_
(
max_abs_îr‹
),

1778 
«n_eq_«n_
(
«n_eq_«n
) {}

1780 
boﬁ
 
M©chAndEx∂aö
(
Tu∂e
 
¨gs
,

1781 
M©chResu…Li°íî
* 
li°íî
Ëc⁄° 
	govîride
 {

1782 i‡(
	gmax_abs_îr‹_
 == -1) {

1783 
FlﬂtögEqM©chî
<
FlﬂtTy≥
> 
fm
(::
°d
::
gë
<0>(
¨gs
), 
«n_eq_«n_
);

1784  
	g°©ic_ˇ°
<
	gM©chî
<
	gFlﬂtTy≥
>>(
	gfm
).
M©chAndEx∂aö
(

1785 ::
°d
::
gë
<1>(
¨gs
), 
li°íî
);

1787 
	gFlﬂtögEqM©chî
<
	gFlﬂtTy≥
> 
fm
(::
°d
::
gë
<0>(
¨gs
), 
«n_eq_«n_
,

1788 
max_abs_îr‹_
);

1789  
	g°©ic_ˇ°
<
	gM©chî
<
	gFlﬂtTy≥
>>(
	gfm
).
M©chAndEx∂aö
(

1790 ::
°d
::
gë
<1>(
¨gs
), 
li°íî
);

1793 
Des¸ibeTo
(::
°d
::
o°ªam
* 
os
Ëc⁄° 
ovîride
 {

1794 *
os
 << "¨ê" << 
GëDesc
;

1796 
Des¸ibeNeg©i⁄To
(::
°d
::
o°ªam
* 
os
Ëc⁄° 
ovîride
 {

1797 *
os
 << "¨í'à" << 
GëDesc
;

1800 
	g¥iv©e
:

1801 
FlﬂtTy≥
 
max_abs_îr‹_
;

1802 c⁄° 
boﬁ
 
	g«n_eq_«n_
;

1805 
Inô
(
FlﬂtTy≥
 
max_abs_îr‹_vÆ
, 
boﬁ
 
«n_eq_«n_vÆ
) {

1806 
	gmax_abs_îr‹_
 = 
max_abs_îr‹_vÆ
;

1807 
	g«n_eq_«n_
 = 
«n_eq_«n_vÆ
;

1809 
FlﬂtTy≥
 
	gmax_abs_îr‹_
;

1810 
boﬁ
 
	g«n_eq_«n_
;

1815 
	gãm∂©e
 <
ty≥«me
 
	gI¬îM©chî
>

1816 ˛as†
	cPoöãeM©chî
 {

1817 
	gpublic
:

1818 
ex∂icô
 
PoöãeM©chî
(c⁄° 
I¬îM©chî
& 
m©chî
Ë: 
m©chî_
(matcher) {}

1828 
ãm∂©e
 <
ty≥«me
 
Poöãr
>

1829 
›î©‹
 
M©chî
<
Poöãr
>() const {

1830  
M©chî
<
Poöãr
>(
√w
 
Im∂
<c⁄° Poöãr&>(
m©chî_
));

1833 
	g¥iv©e
:

1835 
ãm∂©e
 <
ty≥«me
 
Poöãr
>

1836 
˛ass
 
Im∂
 : 
public
 
M©chîI¡îÁ˚
<
Poöãr
> {

1837 
public
:

1838 
usög
 
Poöãe
 =

1839 
ty≥«me
 
°d
::
poöãr_åaôs
<
GTEST_REMOVE_REFERENCE_AND_CONST_
(

1840 
Poöãr
)>::
ñemít_ty≥
;

1842 
ex∂icô
 
Im∂
(c⁄° 
I¬îM©chî
& 
m©chî
)

1843 : 
m©chî_
(
M©chîCa°
<c⁄° 
Poöãe
&>(
m©chî
)) {}

1845 
Des¸ibeTo
(::
°d
::
o°ªam
* 
os
Ëc⁄° 
ovîride
 {

1846 *
os
 << "pointsÅoá valueÅhat ";

1847 
	gm©chî_
.
Des¸ibeTo
(
os
);

1850 
Des¸ibeNeg©i⁄To
(::
°d
::
o°ªam
* 
os
Ëc⁄° 
ovîride
 {

1851 *
os
 << "doesÇotÖointÅoá valueÅhat ";

1852 
	gm©chî_
.
Des¸ibeTo
(
os
);

1855 
boﬁ
 
M©chAndEx∂aö
(
Poöãr
 
poöãr
,

1856 
M©chResu…Li°íî
* 
li°íî
Ëc⁄° 
	govîride
 {

1857 i‡(
GëRawPoöãr
(
poöãr
Ë=
nuŒ±r
Ë 
Ál£
;

1859 *
	gli°íî
 << "whichÖointsÅo ";

1860  
M©chPrötAndEx∂aö
(*
poöãr
, 
m©chî_
, 
li°íî
);

1863 
	g¥iv©e
:

1864 c⁄° 
M©chî
<c⁄° 
Poöãe
&> 
m©chî_
;

1867 c⁄° 
I¬îM©chî
 
	gm©chî_
;

1874 
	gãm∂©e
 <
ty≥«me
 
	gI¬îM©chî
>

1875 ˛as†
	cPoöãrM©chî
 {

1876 
	gpublic
:

1877 
ex∂icô
 
PoöãrM©chî
(c⁄° 
I¬îM©chî
& 
m©chî
Ë: 
m©chî_
(matcher) {}

1887 
ãm∂©e
 <
ty≥«me
 
PoöãrTy≥
>

1888 
›î©‹
 
M©chî
<
PoöãrTy≥
>() const {

1889  
M©chî
<
PoöãrTy≥
>(
√w
 
Im∂
<c⁄° PoöãrTy≥&>(
m©chî_
));

1892 
	g¥iv©e
:

1894 
ãm∂©e
 <
ty≥«me
 
PoöãrTy≥
>

1895 
˛ass
 
Im∂
 : 
public
 
M©chîI¡îÁ˚
<
PoöãrTy≥
> {

1896 
public
:

1897 
usög
 
Poöãr
 =

1898 c⁄° 
ty≥«me
 
°d
::
poöãr_åaôs
<
GTEST_REMOVE_REFERENCE_AND_CONST_
(

1899 
PoöãrTy≥
)>::
ñemít_ty≥
*;

1901 
ex∂icô
 
Im∂
(c⁄° 
I¬îM©chî
& 
m©chî
)

1902 : 
m©chî_
(
M©chîCa°
<
Poöãr
>(
m©chî
)) {}

1904 
Des¸ibeTo
(::
°d
::
o°ªam
* 
os
Ëc⁄° 
ovîride
 {

1905 *
os
 << "isáÖointerÅhat ";

1906 
	gm©chî_
.
Des¸ibeTo
(
os
);

1909 
Des¸ibeNeg©i⁄To
(::
°d
::
o°ªam
* 
os
Ëc⁄° 
ovîride
 {

1910 *
os
 << "isÇotáÖointerÅhat ";

1911 
	gm©chî_
.
Des¸ibeTo
(
os
);

1914 
boﬁ
 
M©chAndEx∂aö
(
PoöãrTy≥
 
poöãr
,

1915 
M©chResu…Li°íî
* 
li°íî
Ëc⁄° 
	govîride
 {

1916 *
	gli°íî
 << "which isáÖointerÅhat ";

1917 
Poöãr
 
	gp
 = 
GëRawPoöãr
(
poöãr
);

1918  
M©chPrötAndEx∂aö
(
p
, 
m©chî_
, 
li°íî
);

1921 
	g¥iv©e
:

1922 
M©chî
<
Poöãr
> 
m©chî_
;

1925 c⁄° 
I¬îM©chî
 
	gm©chî_
;

1928 #i‡
GTEST_HAS_RTTI


1935 
	gãm∂©e
 <
ty≥«me
 
	gTo
>

1936 ˛as†
	cWhíDy«micCa°ToM©chîBa£
 {

1937 
	gpublic
:

1938 
ex∂icô
 
WhíDy«micCa°ToM©chîBa£
(c⁄° 
M©chî
<
To
>& 
m©chî
)

1939 : 
m©chî_
(
m©chî
) {}

1941 
Des¸ibeTo
(::
°d
::
o°ªam
* 
os
) const {

1942 
GëCa°Ty≥Des¸ùti⁄
(
os
);

1943 
	gm©chî_
.
Des¸ibeTo
(
os
);

1946 
Des¸ibeNeg©i⁄To
(::
°d
::
o°ªam
* 
os
) const {

1947 
GëCa°Ty≥Des¸ùti⁄
(
os
);

1948 
	gm©chî_
.
Des¸ibeNeg©i⁄To
(
os
);

1951 
	g¥Ÿe˘ed
:

1952 c⁄° 
M©chî
<
To
> 
m©chî_
;

1954 
	g°d
::
°rög
 
GëToName
() {

1955  
GëTy≥Name
<
To
>();

1958 
	g¥iv©e
:

1959 
GëCa°Ty≥Des¸ùti⁄
(::
°d
::
o°ªam
* 
os
) {

1960 *
os
 << "whí dy«mic_ˇ°Åÿ" << 
GëToName
() << ", ";

1966 
	gãm∂©e
 <
ty≥«me
 
	gTo
>

1967 
˛ass
 
	gWhíDy«micCa°ToM©chî
 : 
public
 
WhíDy«micCa°ToM©chîBa£
<
To
> {

1968 
public
:

1969 
ex∂icô
 
WhíDy«micCa°ToM©chî
(c⁄° 
M©chî
<
To
>& 
m©chî
)

1970 : 
WhíDy«micCa°ToM©chîBa£
<
To
>(
m©chî
) {}

1972 
ãm∂©e
 <
ty≥«me
 
From
>

1973 
boﬁ
 
M©chAndEx∂aö
(
From
 
‰om
, 
M©chResu…Li°íî
* 
li°íî
) const {

1974 
To
 
	gto
 = 
dy«mic_ˇ°
<To>(
‰om
);

1975  
M©chPrötAndEx∂aö
(
to
, 
this
->
m©chî_
, 
li°íî
);

1981 
	gãm∂©e
 <
ty≥«me
 
	gTo
>

1982 
˛ass
 
	gWhíDy«micCa°ToM©chî
<
	gTo
&> : 
public
 
WhíDy«micCa°ToM©chîBa£
<
To
&> {

1983 
public
:

1984 
ex∂icô
 
WhíDy«micCa°ToM©chî
(c⁄° 
M©chî
<
To
&>& 
m©chî
)

1985 : 
WhíDy«micCa°ToM©chîBa£
<
To
&>(
m©chî
) {}

1987 
ãm∂©e
 <
ty≥«me
 
From
>

1988 
boﬁ
 
M©chAndEx∂aö
(
From
& 
‰om
, 
M©chResu…Li°íî
* 
li°íî
) const {

1990 
To
* 
	gto
 = 
dy«mic_ˇ°
<To*>(&
‰om
);

1991 i‡(
	gto
 =
nuŒ±r
) {

1992 *
li°íî
 << "which c™nŸ bêdy«mic_ˇ°Åÿ" << 
this
->
GëToName
();

1993  
	gÁl£
;

1995  
M©chPrötAndEx∂aö
(*
to
, 
this
->
m©chî_
, 
li°íî
);

2002 
	gãm∂©e
 <
ty≥«me
 
	gCœss
,Åy≥«mê
	gFõldTy≥
>

2003 ˛as†
	cFõldM©chî
 {

2004 
	gpublic
:

2005 
FõldM©chî
(
FõldTy≥
 
Cœss
::*
fõld
,

2006 c⁄° 
M©chî
<c⁄° 
FõldTy≥
&>& 
m©chî
)

2007 : 
fõld_
(
fõld
), 
m©chî_
(
m©chî
), 
who£_fõld_
("whose given field ") {}

2009 
FõldM©chî
(c⁄° 
°d
::
°rög
& 
fõld_«me
, 
FõldTy≥
 
Cœss
::*
fõld
,

2010 c⁄° 
M©chî
<c⁄° 
FõldTy≥
&>& 
m©chî
)

2011 : 
fõld_
(
fõld
),

2012 
m©chî_
(
m©chî
),

2013 
who£_fõld_
("who£ fõld `" + 
fõld_«me
 + "` ") {}

2015 
Des¸ibeTo
(::
°d
::
o°ªam
* 
os
) const {

2016 *
os
 << "i†™ obje˘ " << 
who£_fõld_
;

2017 
	gm©chî_
.
Des¸ibeTo
(
os
);

2020 
Des¸ibeNeg©i⁄To
(::
°d
::
o°ªam
* 
os
) const {

2021 *
os
 << "i†™ obje˘ " << 
who£_fõld_
;

2022 
	gm©chî_
.
Des¸ibeNeg©i⁄To
(
os
);

2025 
	gãm∂©e
 <
ty≥«me
 
	gT
>

2026 
boﬁ
 
M©chAndEx∂aö
(c⁄° 
T
& 
vÆue
, 
M©chResu…Li°íî
* 
li°íî
) const {

2029  
M©chAndEx∂aöIm∂
(

2030 
ty≥«me
 
°d
::
is_poöãr
<ty≥«mê°d::
ªmove_c⁄°
<
T
>::
ty≥
>::type(),

2031 
vÆue
, 
li°íî
);

2034 
	g¥iv©e
:

2035 
boﬁ
 
M©chAndEx∂aöIm∂
(
°d
::
Ál£_ty≥
 ,

2036 c⁄° 
Cœss
& 
obj
,

2037 
M©chResu…Li°íî
* 
li°íî
) const {

2038 *
	gli°íî
 << 
	gwho£_fõld_
 << "is ";

2039  
M©chPrötAndEx∂aö
(
obj
.*
fõld_
, 
m©chî_
, 
li°íî
);

2042 
boﬁ
 
M©chAndEx∂aöIm∂
(
°d
::
åue_ty≥
 , c⁄° 
Cœss
* 
p
,

2043 
M©chResu…Li°íî
* 
li°íî
) const {

2044 i‡(
	gp
 =
nuŒ±r
Ë 
Ál£
;

2046 *
	gli°íî
 << "whichÖointsÅoán object ";

2050  
M©chAndEx∂aöIm∂
(
°d
::
Ál£_ty≥
(), *
p
, 
li°íî
);

2053 c⁄° 
FõldTy≥
 
	gCœss
::*
fõld_
;

2054 c⁄° 
	gM©chî
<c⁄° 
	gFõldTy≥
&> 
	gm©chî_
;

2058 c⁄° 
	g°d
::
°rög
 
who£_fõld_
;

2066 
	gãm∂©e
 <
ty≥«me
 
	gCœss
,Åy≥«mê
	gPr›îtyTy≥
,Åy≥«mê
	gPr›îty
>

2067 ˛as†
	cPr›îtyM©chî
 {

2068 
	gpublic
:

2069 c⁄° 
	tPr›îtyTy≥
& 
	tRefToC⁄°Pr›îty
;

2071 
Pr›îtyM©chî
(
Pr›îty
 
¥›îty
, c⁄° 
M©chî
<
RefToC⁄°Pr›îty
>& 
m©chî
)

2072 : 
¥›îty_
(
¥›îty
),

2073 
m©chî_
(
m©chî
),

2074 
who£_¥›îty_
("whose givenÖroperty ") {}

2076 
Pr›îtyM©chî
(c⁄° 
°d
::
°rög
& 
¥›îty_«me
, 
Pr›îty
 
¥›îty
,

2077 c⁄° 
M©chî
<
RefToC⁄°Pr›îty
>& 
m©chî
)

2078 : 
¥›îty_
(
¥›îty
),

2079 
m©chî_
(
m©chî
),

2080 
who£_¥›îty_
("who£Ör›îty `" + 
¥›îty_«me
 + "` ") {}

2082 
Des¸ibeTo
(::
°d
::
o°ªam
* 
os
) const {

2083 *
os
 << "i†™ obje˘ " << 
who£_¥›îty_
;

2084 
	gm©chî_
.
Des¸ibeTo
(
os
);

2087 
Des¸ibeNeg©i⁄To
(::
°d
::
o°ªam
* 
os
) const {

2088 *
os
 << "i†™ obje˘ " << 
who£_¥›îty_
;

2089 
	gm©chî_
.
Des¸ibeNeg©i⁄To
(
os
);

2092 
	gãm∂©e
 <
ty≥«me
 
	gT
>

2093 
boﬁ
 
M©chAndEx∂aö
(c⁄° 
T
&
vÆue
, 
M©chResu…Li°íî
* 
li°íî
) const {

2094  
M©chAndEx∂aöIm∂
(

2095 
ty≥«me
 
°d
::
is_poöãr
<ty≥«mê°d::
ªmove_c⁄°
<
T
>::
ty≥
>::type(),

2096 
vÆue
, 
li°íî
);

2099 
	g¥iv©e
:

2100 
boﬁ
 
M©chAndEx∂aöIm∂
(
°d
::
Ál£_ty≥
 ,

2101 c⁄° 
Cœss
& 
obj
,

2102 
M©chResu…Li°íî
* 
li°íî
) const {

2103 *
	gli°íî
 << 
	gwho£_¥›îty_
 << "is ";

2106 
RefToC⁄°Pr›îty
 
	gªsu…
 = (
obj
.*
¥›îty_
)();

2107  
M©chPrötAndEx∂aö
(
ªsu…
, 
m©chî_
, 
li°íî
);

2110 
boﬁ
 
M©chAndEx∂aöIm∂
(
°d
::
åue_ty≥
 , c⁄° 
Cœss
* 
p
,

2111 
M©chResu…Li°íî
* 
li°íî
) const {

2112 i‡(
	gp
 =
nuŒ±r
Ë 
Ál£
;

2114 *
	gli°íî
 << "whichÖointsÅoán object ";

2118  
M©chAndEx∂aöIm∂
(
°d
::
Ál£_ty≥
(), *
p
, 
li°íî
);

2121 
Pr›îty
 
	g¥›îty_
;

2122 c⁄° 
	gM©chî
<
	gRefToC⁄°Pr›îty
> 
	gm©chî_
;

2126 c⁄° 
	g°d
::
°rög
 
who£_¥›îty_
;

2131 
	gãm∂©e
 <
ty≥«me
 
	gFun˘‹
>

2132 
	sCÆœbÀTøôs
 {

2133 
Fun˘‹
 
	tSt‹ageTy≥
;

2135 
CheckIsVÆid
(
Fun˘‹
 ) {}

2137 
	gãm∂©e
 <
ty≥«me
 
	gT
>

2138 autÿ
Invoke
(
Fun˘‹
 
f
, c⁄° 
T
& 
¨g
Ë-> 
de˛ty≥
(f(arg)) {

2139  
f
(
¨g
);

2144 
	gãm∂©e
 <
ty≥«me
 
	gArgTy≥
,Åy≥«mê
	gResTy≥
>

2145 
	gCÆœbÀTøôs
<
ResTy≥
(*)(
	gArgTy≥
)> {

2146 
ResTy≥
 
	tResu…Ty≥
;

2147 
ResTy≥
(*
	tSt‹ageTy≥
)(
	tArgTy≥
);

2149 
CheckIsVÆid
(
ResTy≥
(*
f
)(
ArgTy≥
)) {

2150 
GTEST_CHECK_
(
f
 !
nuŒ±r
)

2153 
	gãm∂©e
 <
ty≥«me
 
	gT
>

2154 
ResTy≥
 
Invoke
(ResTy≥(*
f
)(
ArgTy≥
), 
T
 
¨g
) {

2155  (*
	gf
)(
	g¨g
);

2161 
	gãm∂©e
 <
ty≥«me
 
	gCÆœbÀ
,Åy≥«mê
	gI¬îM©chî
>

2162 ˛as†
	cResu…OfM©chî
 {

2163 
	gpublic
:

2164 
Resu…OfM©chî
(
CÆœbÀ
 
ˇŒabÀ
, 
I¬îM©chî
 
m©chî
)

2165 : 
ˇŒabÀ_
(
°d
::
move
(
ˇŒabÀ
)), 
m©chî_
(°d::move(
m©chî
)) {

2166 
CÆœbÀTøôs
<
CÆœbÀ
>::
CheckIsVÆid
(
ˇŒabÀ_
);

2169 
	gãm∂©e
 <
ty≥«me
 
	gT
>

2170 
›î©‹
 
	gM©chî
<
	gT
>() const {

2171  
	gM©chî
<
	gT
>(
√w
 
	gIm∂
<c⁄° T&>(
	gˇŒabÀ_
, 
	gm©chî_
));

2174 
	g¥iv©e
:

2175 
ty≥«me
 
	tCÆœbÀTøôs
<
	tCÆœbÀ
>::
	tSt‹ageTy≥
 
	tCÆœbÀSt‹ageTy≥
;

2177 
	gãm∂©e
 <
ty≥«me
 
	gT
>

2178 
˛ass
 
	gIm∂
 : 
public
 
M©chîI¡îÁ˚
<
T
> {

2179 
usög
 
Resu…Ty≥
 = 
de˛ty≥
(
CÆœbÀTøôs
<
CÆœbÀ
>::
ãm∂©e
 
Invoke
<
T
>(

2180 
°d
::
de˛vÆ
<
CÆœbÀSt‹ageTy≥
>(), std::de˛vÆ<
T
>()));

2182 
	gpublic
:

2183 
ãm∂©e
 <
ty≥«me
 
M
>

2184 
Im∂
(c⁄° 
CÆœbÀSt‹ageTy≥
& 
ˇŒabÀ
, c⁄° 
M
& 
m©chî
)

2185 : 
ˇŒabÀ_
(
ˇŒabÀ
), 
m©chî_
(
M©chîCa°
<
Resu…Ty≥
>(
m©chî
)) {}

2187 
Des¸ibeTo
(::
°d
::
o°ªam
* 
os
Ëc⁄° 
ovîride
 {

2188 *
os
 << "is mapped byÅhe given callableÅoá valueÅhat ";

2189 
	gm©chî_
.
Des¸ibeTo
(
os
);

2192 
Des¸ibeNeg©i⁄To
(::
°d
::
o°ªam
* 
os
Ëc⁄° 
ovîride
 {

2193 *
os
 << "is mapped byÅhe given callableÅoá valueÅhat ";

2194 
	gm©chî_
.
Des¸ibeNeg©i⁄To
(
os
);

2197 
boﬁ
 
M©chAndEx∂aö
(
T
 
obj
, 
M©chResu…Li°íî
* 
li°íî
Ëc⁄° 
	govîride
 {

2198 *
	gli°íî
 << "which is mapped byÅhe given callableÅo ";

2203 
Resu…Ty≥
 
	gªsu…
 =

2204 
CÆœbÀTøôs
<
CÆœbÀ
>::
ãm∂©e
 
Invoke
<
T
>(
ˇŒabÀ_
, 
	gobj
);

2205  
M©chPrötAndEx∂aö
(
ªsu…
, 
m©chî_
, 
li°íî
);

2208 
	g¥iv©e
:

2214 
muèbÀ
 
CÆœbÀSt‹ageTy≥
 
ˇŒabÀ_
;

2215 c⁄° 
	gM©chî
<
	gResu…Ty≥
> 
	gm©chî_
;

2218 c⁄° 
CÆœbÀSt‹ageTy≥
 
	gˇŒabÀ_
;

2219 c⁄° 
I¬îM©chî
 
	gm©chî_
;

2223 
	gãm∂©e
 <
ty≥«me
 
	gSizeM©chî
>

2224 ˛as†
	cSizeIsM©chî
 {

2225 
	gpublic
:

2226 
ex∂icô
 
SizeIsM©chî
(c⁄° 
SizeM©chî
& 
size_m©chî
)

2227 : 
size_m©chî_
(
size_m©chî
) {

2230 
ãm∂©e
 <
ty≥«me
 
C⁄èöî
>

2231 
›î©‹
 
M©chî
<
C⁄èöî
>() const {

2232  
M©chî
<
C⁄èöî
>(
√w
 
Im∂
<c⁄° C⁄èöî&>(
size_m©chî_
));

2235 
	gãm∂©e
 <
ty≥«me
 
	gC⁄èöî
>

2236 
˛ass
 
	gIm∂
 : 
public
 
M©chîI¡îÁ˚
<
C⁄èöî
> {

2237 
public
:

2238 
usög
 
SizeTy≥
 = 
de˛ty≥
(
°d
::
de˛vÆ
<
C⁄èöî
>().
size
());

2239 
ex∂icô
 
Im∂
(c⁄° 
SizeM©chî
& 
size_m©chî
)

2240 : 
size_m©chî_
(
M©chîCa°
<
SizeTy≥
>(
size_m©chî
)) {}

2242 
Des¸ibeTo
(::
°d
::
o°ªam
* 
os
Ëc⁄° 
ovîride
 {

2243 *
os
 << "size ";

2244 
	gsize_m©chî_
.
Des¸ibeTo
(
os
);

2246 
Des¸ibeNeg©i⁄To
(::
°d
::
o°ªam
* 
os
Ëc⁄° 
ovîride
 {

2247 *
os
 << "size ";

2248 
	gsize_m©chî_
.
Des¸ibeNeg©i⁄To
(
os
);

2251 
boﬁ
 
M©chAndEx∂aö
(
C⁄èöî
 
c⁄èöî
,

2252 
M©chResu…Li°íî
* 
li°íî
Ëc⁄° 
	govîride
 {

2253 
SizeTy≥
 
	gsize
 = 
c⁄èöî
.
size
();

2254 
SåögM©chResu…Li°íî
 
	gsize_li°íî
;

2255 c⁄° 
boﬁ
 
	gªsu…
 = 
size_m©chî_
.
M©chAndEx∂aö
(
size
, &
size_li°íî
);

2256 *
	gli°íî


2257 << "who£ sizê" << 
	gsize
 << (
	gªsu…
 ? " matches" : " doesn't match");

2258 
PrötIfNŸEm±y
(
size_li°íî
.
°r
(), 
li°íî
->
°ªam
());

2259  
	gªsu…
;

2262 
	g¥iv©e
:

2263 c⁄° 
M©chî
<
SizeTy≥
> 
size_m©chî_
;

2266 
	g¥iv©e
:

2267 c⁄° 
SizeM©chî
 
size_m©chî_
;

2272 
	gãm∂©e
 <
ty≥«me
 
	gDi°™˚M©chî
>

2273 ˛as†
	cBegöEndDi°™˚IsM©chî
 {

2274 
	gpublic
:

2275 
ex∂icô
 
BegöEndDi°™˚IsM©chî
(c⁄° 
Di°™˚M©chî
& 
di°™˚_m©chî
)

2276 : 
di°™˚_m©chî_
(
di°™˚_m©chî
) {}

2278 
ãm∂©e
 <
ty≥«me
 
C⁄èöî
>

2279 
›î©‹
 
M©chî
<
C⁄èöî
>() const {

2280  
M©chî
<
C⁄èöî
>(
√w
 
Im∂
<c⁄° C⁄èöî&>(
di°™˚_m©chî_
));

2283 
	gãm∂©e
 <
ty≥«me
 
	gC⁄èöî
>

2284 
˛ass
 
	gIm∂
 : 
public
 
M©chîI¡îÁ˚
<
C⁄èöî
> {

2285 
public
:

2286 
öã∫Æ
::
	tSéC⁄èöîVõw
<

2287 
	tGTEST_REMOVE_REFERENCE_AND_CONST_
(
	tC⁄èöî
)> 
	tC⁄èöîVõw
;

2288 
ty≥«me
 
	t°d
::
	tôî©‹_åaôs
<

2289 
	tty≥«me
 
	tC⁄èöîVõw
::
	tty≥
::
	tc⁄°_ôî©‹
>::
	tdif„ªn˚_ty≥


2290 
	tDi°™˚Ty≥
;

2291 
ex∂icô
 
Im∂
(c⁄° 
Di°™˚M©chî
& 
di°™˚_m©chî
)

2292 : 
di°™˚_m©chî_
(
M©chîCa°
<
Di°™˚Ty≥
>(
di°™˚_m©chî
)) {}

2294 
Des¸ibeTo
(::
°d
::
o°ªam
* 
os
Ëc⁄° 
ovîride
 {

2295 *
os
 << "distance between begin()ándÉnd() ";

2296 
	gdi°™˚_m©chî_
.
Des¸ibeTo
(
os
);

2298 
Des¸ibeNeg©i⁄To
(::
°d
::
o°ªam
* 
os
Ëc⁄° 
ovîride
 {

2299 *
os
 << "distance between begin()ándÉnd() ";

2300 
	gdi°™˚_m©chî_
.
Des¸ibeNeg©i⁄To
(
os
);

2303 
boﬁ
 
M©chAndEx∂aö
(
C⁄èöî
 
c⁄èöî
,

2304 
M©chResu…Li°íî
* 
li°íî
Ëc⁄° 
	govîride
 {

2305 
usög
 
	g°d
::
begö
;

2306 
usög
 
	g°d
::
íd
;

2307 
Di°™˚Ty≥
 
	gdi°™˚
 = 
°d
::
di°™˚
(
begö
(
c⁄èöî
), 
íd
(container));

2308 
SåögM©chResu…Li°íî
 
	gdi°™˚_li°íî
;

2309 c⁄° 
boﬁ
 
	gªsu…
 =

2310 
di°™˚_m©chî_
.
M©chAndEx∂aö
(
di°™˚
, &
di°™˚_li°íî
);

2311 *
	gli°íî
 << "who£ di°™˚ bëwì¿begö(Ë™dÉnd(Ë" << 
	gdi°™˚


2312 << (
	gªsu…
 ? " matches" : " doesn't match");

2313 
PrötIfNŸEm±y
(
di°™˚_li°íî
.
°r
(), 
li°íî
->
°ªam
());

2314  
	gªsu…
;

2317 
	g¥iv©e
:

2318 c⁄° 
M©chî
<
Di°™˚Ty≥
> 
di°™˚_m©chî_
;

2321 
	g¥iv©e
:

2322 c⁄° 
Di°™˚M©chî
 
di°™˚_m©chî_
;

2335 
	gãm∂©e
 <
ty≥«me
 
	gC⁄èöî
>

2336 ˛as†
	cC⁄èöîEqM©chî
 {

2337 
	gpublic
:

2338 
öã∫Æ
::
	tSéC⁄èöîVõw
<
	tC⁄èöî
> 
	tVõw
;

2339 
ty≥«me
 
	tVõw
::
	tty≥
 
	tSéC⁄èöî
;

2340 
ty≥«me
 
	tVõw
::
	tc⁄°_ª„ªn˚
 
	tSéC⁄èöîRe„ªn˚
;

2342 
°©ic_as£π
(!
°d
::
is_c⁄°
<
C⁄èöî
>::
vÆue
,

2344 
°©ic_as£π
(!
°d
::
is_ª„ªn˚
<
C⁄èöî
>::
vÆue
,

2349 
ex∂icô
 
C⁄èöîEqM©chî
(c⁄° 
C⁄èöî
& 
ex≥˘ed
)

2350 : 
ex≥˘ed_
(
Võw
::
C›y
(
ex≥˘ed
)) {}

2352 
Des¸ibeTo
(::
°d
::
o°ªam
* 
os
) const {

2353 *
os
 << "equals ";

2354 
UnivîßlPröt
(
ex≥˘ed_
, 
os
);

2356 
Des¸ibeNeg©i⁄To
(::
°d
::
o°ªam
* 
os
) const {

2357 *
os
 << "doesÇotÉqual ";

2358 
UnivîßlPröt
(
ex≥˘ed_
, 
os
);

2361 
	gãm∂©e
 <
ty≥«me
 
	gLhsC⁄èöî
>

2362 
boﬁ
 
M©chAndEx∂aö
(c⁄° 
LhsC⁄èöî
& 
lhs
,

2363 
M©chResu…Li°íî
* 
li°íî
) const {

2364 
	göã∫Æ
::
	tSéC⁄èöîVõw
<

2365 
	tty≥«me
 
	t°d
::
	tªmove_c⁄°
<
	tLhsC⁄èöî
>::
	tty≥
>

2366 
	tLhsVõw
;

2367 
ty≥«me
 
	tLhsVõw
::
	tty≥
 
	tLhsSéC⁄èöî
;

2368 
SéC⁄èöîRe„ªn˚
 
	glhs_°l_c⁄èöî
 = 
LhsVõw
::
C⁄°Re„ªn˚
(
lhs
);

2369 i‡(
	glhs_°l_c⁄èöî
 =
ex≥˘ed_
)

2370  
åue
;

2372 ::
°d
::
o°ªam
* c⁄° 
os
 = 
li°íî
->
°ªam
();

2373 i‡(
	gos
 !
nuŒ±r
) {

2375 
boﬁ
 
¥öãd_hódî
 = 
Ál£
;

2376 
ty≥«me
 
	gLhsSéC⁄èöî
::
c⁄°_ôî©‹
 
ô
 =

2377 
lhs_°l_c⁄èöî
.
begö
();

2378 
	gô
 !
lhs_°l_c⁄èöî
.
íd
(); ++it) {

2379 i‡(
	göã∫Æ
::
AºayAw¨eFöd
(
ex≥˘ed_
.
begö
(),Éx≥˘ed_.
íd
(), *
ô
) ==

2380 
ex≥˘ed_
.
íd
()) {

2381 i‡(
¥öãd_hódî
) {

2382 *
os
 << ", ";

2384 *
	gos
 << "which hasÅhese unexpectedÉlements: ";

2385 
	g¥öãd_hódî
 = 
åue
;

2387 
UnivîßlPröt
(*
ô
, 
os
);

2392 
boﬁ
 
	g¥öãd_hódî2
 = 
Ál£
;

2393 
ty≥«me
 
	gSéC⁄èöî
::
c⁄°_ôî©‹
 
ô
 = 
ex≥˘ed_
.
begö
();

2394 
	gô
 !
ex≥˘ed_
.
íd
(); ++it) {

2395 i‡(
	göã∫Æ
::
AºayAw¨eFöd
(

2396 
lhs_°l_c⁄èöî
.
begö
(),Ühs_°l_c⁄èöî.
íd
(), *
ô
) ==

2397 
lhs_°l_c⁄èöî
.
íd
()) {

2398 i‡(
¥öãd_hódî2
) {

2399 *
os
 << ", ";

2401 *
	gos
 << (
	g¥öãd_hódî
 ? ",\nand" : "which")

2403 
	g¥öãd_hódî2
 = 
åue
;

2405 
UnivîßlPröt
(*
ô
, 
os
);

2410  
	gÁl£
;

2413 
	g¥iv©e
:

2414 c⁄° 
SéC⁄èöî
 
ex≥˘ed_
;

2418 
	sLessCom∑øt‹
 {

2419 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gU
>

2420 
boﬁ
 
›î©‹
()(c⁄° 
	gT
& 
	glhs
, c⁄° 
	gU
& 
	grhs
) const { Ühs <Ñhs; }

2424 
	gãm∂©e
 <
ty≥«me
 
	gCom∑øt‹
,Åy≥«mê
	gC⁄èöîM©chî
>

2425 ˛as†
	cWhíS‹ãdByM©chî
 {

2426 
	gpublic
:

2427 
WhíS‹ãdByM©chî
(c⁄° 
Com∑øt‹
& 
com∑øt‹
,

2428 c⁄° 
C⁄èöîM©chî
& 
m©chî
)

2429 : 
com∑øt‹_
(
com∑øt‹
), 
m©chî_
(
m©chî
) {}

2431 
	gãm∂©e
 <
ty≥«me
 
	gLhsC⁄èöî
>

2432 
›î©‹
 
	gM©chî
<
	gLhsC⁄èöî
>() const {

2433  
MakeM©chî
(
√w
 
Im∂
<
LhsC⁄èöî
>(
com∑øt‹_
, 
m©chî_
));

2436 
	gãm∂©e
 <
ty≥«me
 
	gLhsC⁄èöî
>

2437 
˛ass
 
	gIm∂
 : 
public
 
M©chîI¡îÁ˚
<
LhsC⁄èöî
> {

2438 
public
:

2439 
öã∫Æ
::
	tSéC⁄èöîVõw
<

2440 
	tGTEST_REMOVE_REFERENCE_AND_CONST_
(
	tLhsC⁄èöî
)> 
	tLhsVõw
;

2441 
ty≥«me
 
	tLhsVõw
::
	tty≥
 
	tLhsSéC⁄èöî
;

2442 
ty≥«me
 
	tLhsVõw
::
	tc⁄°_ª„ªn˚
 
	tLhsSéC⁄èöîRe„ªn˚
;

2445 
ty≥«me
 
	tRemoveC⁄°FromKey
<

2446 
	tty≥«me
 
	tLhsSéC⁄èöî
::
	tvÆue_ty≥
>::
	tty≥
 
	tLhsVÆue
;

2448 
Im∂
(c⁄° 
Com∑øt‹
& 
com∑øt‹
, c⁄° 
C⁄èöîM©chî
& 
m©chî
)

2449 : 
com∑øt‹_
(
com∑øt‹
), 
m©chî_
(
m©chî
) {}

2451 
Des¸ibeTo
(::
°d
::
o°ªam
* 
os
Ëc⁄° 
ovîride
 {

2452 *
os
 << "(when sorted) ";

2453 
	gm©chî_
.
Des¸ibeTo
(
os
);

2456 
Des¸ibeNeg©i⁄To
(::
°d
::
o°ªam
* 
os
Ëc⁄° 
ovîride
 {

2457 *
os
 << "(when sorted) ";

2458 
	gm©chî_
.
Des¸ibeNeg©i⁄To
(
os
);

2461 
boﬁ
 
M©chAndEx∂aö
(
LhsC⁄èöî
 
lhs
,

2462 
M©chResu…Li°íî
* 
li°íî
Ëc⁄° 
	govîride
 {

2463 
LhsSéC⁄èöîRe„ªn˚
 
	glhs_°l_c⁄èöî
 = 
LhsVõw
::
C⁄°Re„ªn˚
(
lhs
);

2464 ::
°d
::
ve˘‹
<
LhsVÆue
> 
s‹ãd_c⁄èöî
(
lhs_°l_c⁄èöî
.
begö
(),

2465 
lhs_°l_c⁄èöî
.
íd
());

2466 ::
°d
::
s‹t
(

2467 
s‹ãd_c⁄èöî
.
begö
(), s‹ãd_c⁄èöî.
íd
(), 
com∑øt‹_
);

2469 i‡(!
	gli°íî
->
IsI¡îe°ed
()) {

2472  
	gm©chî_
.
M©ches
(
s‹ãd_c⁄èöî
);

2475 *
	gli°íî
 << "which is ";

2476 
UnivîßlPröt
(
s‹ãd_c⁄èöî
, 
li°íî
->
°ªam
());

2477 *
	gli°íî
 << " when sorted";

2479 
SåögM©chResu…Li°íî
 
	gö√r_li°íî
;

2480 c⁄° 
boﬁ
 
	gm©ch
 = 
m©chî_
.
M©chAndEx∂aö
(
s‹ãd_c⁄èöî
,

2481 &
ö√r_li°íî
);

2482 
PrötIfNŸEm±y
(
ö√r_li°íî
.
°r
(), 
li°íî
->
°ªam
());

2483  
	gm©ch
;

2486 
	g¥iv©e
:

2487 c⁄° 
Com∑øt‹
 
com∑øt‹_
;

2488 c⁄° 
	gM©chî
<c⁄° ::
°d
::
ve˘‹
<
LhsVÆue
>&> 
m©chî_
;

2490 
GTEST_DISALLOW_COPY_AND_ASSIGN_
(
Im∂
);

2493 
	g¥iv©e
:

2494 c⁄° 
Com∑øt‹
 
com∑øt‹_
;

2495 c⁄° 
C⁄èöîM©chî
 
	gm©chî_
;

2502 
	gãm∂©e
 <
ty≥«me
 
	gTu∂eM©chî
,Åy≥«mê
	gRhsC⁄èöî
>

2503 ˛as†
	cPoötwi£M©chî
 {

2504 
GTEST_COMPILE_ASSERT_
(

2505 !
IsHashTabÀ
<
GTEST_REMOVE_REFERENCE_AND_CONST_
(
RhsC⁄èöî
)>::
vÆue
,

2506 
u£_Un‹dîedPoötwi£_wôh_hash_èbÀs
);

2508 
	gpublic
:

2509 
öã∫Æ
::
	tSéC⁄èöîVõw
<
	tRhsC⁄èöî
> 
	tRhsVõw
;

2510 
ty≥«me
 
	tRhsVõw
::
	tty≥
 
	tRhsSéC⁄èöî
;

2511 
ty≥«me
 
	tRhsSéC⁄èöî
::
	tvÆue_ty≥
 
	tRhsVÆue
;

2513 
°©ic_as£π
(!
°d
::
is_c⁄°
<
RhsC⁄èöî
>::
vÆue
,

2515 
°©ic_as£π
(!
°d
::
is_ª„ªn˚
<
RhsC⁄èöî
>::
vÆue
,

2520 
Poötwi£M©chî
(c⁄° 
Tu∂eM©chî
& 
tu∂e_m©chî
, c⁄° 
RhsC⁄èöî
& 
rhs
)

2521 : 
tu∂e_m©chî_
(
tu∂e_m©chî
), 
rhs_
(
RhsVõw
::
C›y
(
rhs
)) {}

2523 
ãm∂©e
 <
ty≥«me
 
LhsC⁄èöî
>

2524 
›î©‹
 
M©chî
<
LhsC⁄èöî
>() const {

2525 
GTEST_COMPILE_ASSERT_
(

2526 !
IsHashTabÀ
<
GTEST_REMOVE_REFERENCE_AND_CONST_
(
LhsC⁄èöî
)>::
vÆue
,

2527 
u£_Un‹dîedPoötwi£_wôh_hash_èbÀs
);

2529  
	gM©chî
<
	gLhsC⁄èöî
>(

2530 
√w
 
	gIm∂
<c⁄° 
	gLhsC⁄èöî
&>(
	gtu∂e_m©chî_
, 
	grhs_
));

2533 
	gãm∂©e
 <
ty≥«me
 
	gLhsC⁄èöî
>

2534 
˛ass
 
	gIm∂
 : 
public
 
M©chîI¡îÁ˚
<
LhsC⁄èöî
> {

2535 
public
:

2536 
öã∫Æ
::
	tSéC⁄èöîVõw
<

2537 
	tGTEST_REMOVE_REFERENCE_AND_CONST_
(
	tLhsC⁄èöî
)> 
	tLhsVõw
;

2538 
ty≥«me
 
	tLhsVõw
::
	tty≥
 
	tLhsSéC⁄èöî
;

2539 
ty≥«me
 
	tLhsVõw
::
	tc⁄°_ª„ªn˚
 
	tLhsSéC⁄èöîRe„ªn˚
;

2540 
ty≥«me
 
	tLhsSéC⁄èöî
::
	tvÆue_ty≥
 
	tLhsVÆue
;

2545 ::
°d
::
	ttu∂e
<c⁄° 
	tLhsVÆue
&, c⁄° 
	tRhsVÆue
&> 
	tI¬îM©chîArg
;

2547 
Im∂
(c⁄° 
Tu∂eM©chî
& 
tu∂e_m©chî
, c⁄° 
RhsSéC⁄èöî
& 
rhs
)

2549 : 
m⁄o_tu∂e_m©chî_
(
Sa„M©chîCa°
<
I¬îM©chîArg
>(
tu∂e_m©chî
)),

2550 
rhs_
(
rhs
) {}

2552 
Des¸ibeTo
(::
°d
::
o°ªam
* 
os
Ëc⁄° 
ovîride
 {

2553 *
os
 << "c⁄èö†" << 
rhs_
.
size
()

2555 
	gUnivîßlPröãr
<
	gRhsSéC⁄èöî
>::
Pröt
(
rhs_
, 
os
);

2556 *
	gos
 << " ";

2557 
	gm⁄o_tu∂e_m©chî_
.
Des¸ibeTo
(
os
);

2559 
Des¸ibeNeg©i⁄To
(::
°d
::
o°ªam
* 
os
Ëc⁄° 
ovîride
 {

2560 *
os
 << "d€¢'àc⁄èöÉxa˘ly " << 
rhs_
.
size
()

2563 
UnivîßlPröt
(
rhs_
, 
os
);

2564 *
	gos
 << " ";

2565 
	gm⁄o_tu∂e_m©chî_
.
Des¸ibeNeg©i⁄To
(
os
);

2568 
boﬁ
 
M©chAndEx∂aö
(
LhsC⁄èöî
 
lhs
,

2569 
M©chResu…Li°íî
* 
li°íî
Ëc⁄° 
	govîride
 {

2570 
LhsSéC⁄èöîRe„ªn˚
 
	glhs_°l_c⁄èöî
 = 
LhsVõw
::
C⁄°Re„ªn˚
(
lhs
);

2571 c⁄° 
size_t
 
	ga˘uÆ_size
 = 
lhs_°l_c⁄èöî
.
size
();

2572 i‡(
	ga˘uÆ_size
 !
rhs_
.
size
()) {

2573 *
li°íî
 << "which c⁄èö†" << 
a˘uÆ_size
 << " values";

2574  
	gÁl£
;

2577 
ty≥«me
 
	gLhsSéC⁄èöî
::
c⁄°_ôî©‹
 
À·
 = 
lhs_°l_c⁄èöî
.
begö
();

2578 
ty≥«me
 
	gRhsSéC⁄èöî
::
c⁄°_ôî©‹
 
right
 = 
rhs_
.
begö
();

2579 
size_t
 
	gi
 = 0; i !
a˘uÆ_size
; ++i, ++
	gÀ·
, ++
	gright
) {

2580 i‡(
	gli°íî
->
IsI¡îe°ed
()) {

2581 
SåögM©chResu…Li°íî
 
	gö√r_li°íî
;

2585 i‡(!
	gm⁄o_tu∂e_m©chî_
.
M©chAndEx∂aö
(

2586 
I¬îM©chîArg
(
Im∂icôCa°_
<c⁄° 
LhsVÆue
&>(*
À·
),

2587 
Im∂icôCa°_
<c⁄° 
RhsVÆue
&>(*
right
)),

2588 &
ö√r_li°íî
)) {

2589 *
	gli°íî
 << "whereÅhe valueÖair (";

2590 
UnivîßlPröt
(*
À·
, 
li°íî
->
°ªam
());

2591 *
	gli°íî
 << ", ";

2592 
UnivîßlPröt
(*
right
, 
li°íî
->
°ªam
());

2593 *
	gli°íî
 << "Ë© index #" << 
	gi
 << " don't match";

2594 
PrötIfNŸEm±y
(
ö√r_li°íî
.
°r
(), 
li°íî
->
°ªam
());

2595  
	gÁl£
;

2598 i‡(!
	gm⁄o_tu∂e_m©chî_
.
M©ches
(

2599 
I¬îM©chîArg
(
Im∂icôCa°_
<c⁄° 
LhsVÆue
&>(*
À·
),

2600 
Im∂icôCa°_
<c⁄° 
RhsVÆue
&>(*
right
))))

2601  
	gÁl£
;

2605  
	gåue
;

2608 
	g¥iv©e
:

2609 c⁄° 
M©chî
<
I¬îM©chîArg
> 
m⁄o_tu∂e_m©chî_
;

2610 c⁄° 
RhsSéC⁄èöî
 
	grhs_
;

2613 
	g¥iv©e
:

2614 c⁄° 
Tu∂eM©chî
 
tu∂e_m©chî_
;

2615 c⁄° 
RhsSéC⁄èöî
 
	grhs_
;

2619 
	gãm∂©e
 <
ty≥«me
 
	gC⁄èöî
>

2620 
˛ass
 
	gQu™tifõrM©chîIm∂
 : 
public
 
M©chîI¡îÁ˚
<
C⁄èöî
> {

2621 
public
:

2622 
GTEST_REMOVE_REFERENCE_AND_CONST_
(
	tC⁄èöî
Ë
	tRawC⁄èöî
;

2623 
	gSéC⁄èöîVõw
<
	tRawC⁄èöî
> 
	tVõw
;

2624 
ty≥«me
 
	tVõw
::
	tty≥
 
	tSéC⁄èöî
;

2625 
ty≥«me
 
	tVõw
::
	tc⁄°_ª„ªn˚
 
	tSéC⁄èöîRe„ªn˚
;

2626 
ty≥«me
 
	tSéC⁄èöî
::
	tvÆue_ty≥
 
	tEÀmít
;

2628 
	gãm∂©e
 <
ty≥«me
 
	gI¬îM©chî
>

2629 
ex∂icô
 
Qu™tifõrM©chîIm∂
(
I¬îM©chî
 
ö√r_m©chî
)

2630 : 
ö√r_m©chî_
(

2631 
ã°ög
::
Sa„M©chîCa°
<c⁄° 
EÀmít
&>(
ö√r_m©chî
)) {}

2636 
boﬁ
 
M©chAndEx∂aöIm∂
(boﬁ 
Æl_ñemíts_should_m©ch
,

2637 
C⁄èöî
 
c⁄èöî
,

2638 
M©chResu…Li°íî
* 
li°íî
) const {

2639 
SéC⁄èöîRe„ªn˚
 
	g°l_c⁄èöî
 = 
Võw
::
C⁄°Re„ªn˚
(
c⁄èöî
);

2640 
size_t
 
	gi
 = 0;

2641 
ty≥«me
 
	gSéC⁄èöî
::
c⁄°_ôî©‹
 
ô
 = 
°l_c⁄èöî
.
begö
();

2642 
	gô
 !
°l_c⁄èöî
.
íd
(); ++ô, ++
	gi
) {

2643 
SåögM©chResu…Li°íî
 
	gö√r_li°íî
;

2644 c⁄° 
boﬁ
 
	gm©ches
 = 
ö√r_m©chî_
.
M©chAndEx∂aö
(*
ô
, &
ö√r_li°íî
);

2646 i‡(
	gm©ches
 !
Æl_ñemíts_should_m©ch
) {

2647 *
li°íî
 << "who£ÉÀmíà#" << 
i


2648 << (
m©ches
 ? " matches" : " doesn't match");

2649 
PrötIfNŸEm±y
(
ö√r_li°íî
.
°r
(), 
li°íî
->
°ªam
());

2650  !
	gÆl_ñemíts_should_m©ch
;

2653  
	gÆl_ñemíts_should_m©ch
;

2656 
	g¥Ÿe˘ed
:

2657 c⁄° 
M©chî
<c⁄° 
EÀmít
&> 
ö√r_m©chî_
;

2662 
	gãm∂©e
 <
ty≥«me
 
	gC⁄èöî
>

2663 
˛ass
 
	gC⁄èösM©chîIm∂
 : 
public
 
Qu™tifõrM©chîIm∂
<
C⁄èöî
> {

2664 
public
:

2665 
ãm∂©e
 <
ty≥«me
 
I¬îM©chî
>

2666 
ex∂icô
 
C⁄èösM©chîIm∂
(
I¬îM©chî
 
ö√r_m©chî
)

2667 : 
Qu™tifõrM©chîIm∂
<
C⁄èöî
>(
ö√r_m©chî
) {}

2670 
Des¸ibeTo
(::
°d
::
o°ªam
* 
os
Ëc⁄° 
ovîride
 {

2671 *
os
 << "containsátÜeast oneÉlementÅhat ";

2672 
	gthis
->
	gö√r_m©chî_
.
Des¸ibeTo
(
os
);

2675 
Des¸ibeNeg©i⁄To
(::
°d
::
o°ªam
* 
os
Ëc⁄° 
ovîride
 {

2676 *
os
 << "doesn't containányÉlementÅhat ";

2677 
	gthis
->
	gö√r_m©chî_
.
Des¸ibeTo
(
os
);

2680 
boﬁ
 
M©chAndEx∂aö
(
C⁄èöî
 
c⁄èöî
,

2681 
M©chResu…Li°íî
* 
li°íî
Ëc⁄° 
	govîride
 {

2682  
	gthis
->
M©chAndEx∂aöIm∂
(
Ál£
, 
c⁄èöî
, 
li°íî
);

2688 
	gãm∂©e
 <
ty≥«me
 
	gC⁄èöî
>

2689 
˛ass
 
	gEachM©chîIm∂
 : 
public
 
Qu™tifõrM©chîIm∂
<
C⁄èöî
> {

2690 
public
:

2691 
ãm∂©e
 <
ty≥«me
 
I¬îM©chî
>

2692 
ex∂icô
 
EachM©chîIm∂
(
I¬îM©chî
 
ö√r_m©chî
)

2693 : 
Qu™tifõrM©chîIm∂
<
C⁄èöî
>(
ö√r_m©chî
) {}

2696 
Des¸ibeTo
(::
°d
::
o°ªam
* 
os
Ëc⁄° 
ovîride
 {

2697 *
os
 << "only containsÉlementsÅhat ";

2698 
	gthis
->
	gö√r_m©chî_
.
Des¸ibeTo
(
os
);

2701 
Des¸ibeNeg©i⁄To
(::
°d
::
o°ªam
* 
os
Ëc⁄° 
ovîride
 {

2702 *
os
 << "contains someÉlementÅhat ";

2703 
	gthis
->
	gö√r_m©chî_
.
Des¸ibeNeg©i⁄To
(
os
);

2706 
boﬁ
 
M©chAndEx∂aö
(
C⁄èöî
 
c⁄èöî
,

2707 
M©chResu…Li°íî
* 
li°íî
Ëc⁄° 
	govîride
 {

2708  
	gthis
->
M©chAndEx∂aöIm∂
(
åue
, 
c⁄èöî
, 
li°íî
);

2713 
	gãm∂©e
 <
ty≥«me
 
	gM
>

2714 ˛as†
	cC⁄èösM©chî
 {

2715 
	gpublic
:

2716 
ex∂icô
 
C⁄èösM©chî
(
M
 
m
Ë: 
ö√r_m©chî_
(m) {}

2718 
ãm∂©e
 <
ty≥«me
 
C⁄èöî
>

2719 
›î©‹
 
M©chî
<
C⁄èöî
>() const {

2720  
M©chî
<
C⁄èöî
>(

2721 
√w
 
C⁄èösM©chîIm∂
<c⁄° 
C⁄èöî
&>(
ö√r_m©chî_
));

2724 
	g¥iv©e
:

2725 c⁄° 
M
 
ö√r_m©chî_
;

2729 
	gãm∂©e
 <
ty≥«me
 
	gM
>

2730 ˛as†
	cEachM©chî
 {

2731 
	gpublic
:

2732 
ex∂icô
 
EachM©chî
(
M
 
m
Ë: 
ö√r_m©chî_
(m) {}

2734 
ãm∂©e
 <
ty≥«me
 
C⁄èöî
>

2735 
›î©‹
 
M©chî
<
C⁄èöî
>() const {

2736  
M©chî
<
C⁄èöî
>(

2737 
√w
 
EachM©chîIm∂
<c⁄° 
C⁄èöî
&>(
ö√r_m©chî_
));

2740 
	g¥iv©e
:

2741 c⁄° 
M
 
ö√r_m©chî_
;

2744 
	sR™k1
 {};

2745 
	gR™k0
 : 
R™k1
 {};

2747 
«me•a˚
 
	g∑ú_gëãrs
 {

2748 
usög
 
	g°d
::
gë
;

2749 
	gãm∂©e
 <
ty≥«me
 
	gT
>

2750 autÿ
Fú°
(
T
& 
x
, 
R™k1
Ë-> 
de˛ty≥
(
gë
<0>(x)) {

2751  
	ggë
<0>(
	gx
);

2753 
	gãm∂©e
 <
ty≥«me
 
	gT
>

2754 autÿ
Fú°
(
T
& 
x
, 
R™k0
Ë-> 
de˛ty≥
((x.
fú°
)) {

2755  
	gx
.
	gfú°
;

2758 
	gãm∂©e
 <
ty≥«me
 
	gT
>

2759 autÿ
Sec⁄d
(
T
& 
x
, 
R™k1
Ë-> 
de˛ty≥
(
gë
<1>(x)) {

2760  
	ggë
<1>(
	gx
);

2762 
	gãm∂©e
 <
ty≥«me
 
	gT
>

2763 autÿ
Sec⁄d
(
T
& 
x
, 
R™k0
Ë-> 
de˛ty≥
((x.
£c⁄d
)) {

2764  
	gx
.
	g£c⁄d
;

2772 
	gãm∂©e
 <
ty≥«me
 
	gPaúTy≥
>

2773 
˛ass
 
	gKeyM©chîIm∂
 : 
public
 
M©chîI¡îÁ˚
<
PaúTy≥
> {

2774 
public
:

2775 
GTEST_REMOVE_REFERENCE_AND_CONST_
(
	tPaúTy≥
Ë
	tRawPaúTy≥
;

2776 
ty≥«me
 
	tRawPaúTy≥
::
	tfú°_ty≥
 
	tKeyTy≥
;

2778 
	gãm∂©e
 <
ty≥«me
 
	gI¬îM©chî
>

2779 
ex∂icô
 
KeyM©chîIm∂
(
I¬îM©chî
 
ö√r_m©chî
)

2780 : 
ö√r_m©chî_
(

2781 
ã°ög
::
Sa„M©chîCa°
<c⁄° 
KeyTy≥
&>(
ö√r_m©chî
)) {

2786 
boﬁ
 
M©chAndEx∂aö
(
PaúTy≥
 
key_vÆue
,

2787 
M©chResu…Li°íî
* 
li°íî
Ëc⁄° 
	govîride
 {

2788 
SåögM©chResu…Li°íî
 
	gö√r_li°íî
;

2789 c⁄° 
boﬁ
 
	gm©ch
 = 
ö√r_m©chî_
.
M©chAndEx∂aö
(

2790 
∑ú_gëãrs
::
Fú°
(
key_vÆue
, 
R™k0
()), &
ö√r_li°íî
);

2791 c⁄° 
	g°d
::
°rög
 
ex∂™©i⁄
 = 
ö√r_li°íî
.
°r
();

2792 i‡(
	gex∂™©i⁄
 != "") {

2793 *
li°íî
 << "who£ fú° fõld i†®vÆuê" << 
ex∂™©i⁄
;

2795  
	gm©ch
;

2799 
Des¸ibeTo
(::
°d
::
o°ªam
* 
os
Ëc⁄° 
ovîride
 {

2800 *
os
 << "hasá keyÅhat ";

2801 
	gö√r_m©chî_
.
Des¸ibeTo
(
os
);

2805 
Des¸ibeNeg©i⁄To
(::
°d
::
o°ªam
* 
os
Ëc⁄° 
ovîride
 {

2806 *
os
 << "doesn't haveá keyÅhat ";

2807 
	gö√r_m©chî_
.
Des¸ibeTo
(
os
);

2810 
	g¥iv©e
:

2811 c⁄° 
M©chî
<c⁄° 
KeyTy≥
&> 
ö√r_m©chî_
;

2815 
	gãm∂©e
 <
ty≥«me
 
	gM
>

2816 ˛as†
	cKeyM©chî
 {

2817 
	gpublic
:

2818 
ex∂icô
 
KeyM©chî
(
M
 
m
Ë: 
m©chî_f‹_key_
(m) {}

2820 
ãm∂©e
 <
ty≥«me
 
PaúTy≥
>

2821 
›î©‹
 
M©chî
<
PaúTy≥
>() const {

2822  
M©chî
<
PaúTy≥
>(

2823 
√w
 
KeyM©chîIm∂
<c⁄° 
PaúTy≥
&>(
m©chî_f‹_key_
));

2826 
	g¥iv©e
:

2827 c⁄° 
M
 
m©chî_f‹_key_
;

2831 
	gãm∂©e
 <
ty≥«me
 
	gI¬îM©chî
>

2832 ˛as†
	cAddªssM©chî
 {

2833 
	gpublic
:

2834 
ex∂icô
 
AddªssM©chî
(
I¬îM©chî
 
m
Ë: 
m©chî_
(m) {}

2836 
ãm∂©e
 <
ty≥«me
 
Ty≥
>

2837 
›î©‹
 
M©chî
<
Ty≥
>() const {

2838  
M©chî
<
Ty≥
>(
√w
 
Im∂
<c⁄° Ty≥&>(
m©chî_
));

2841 
	g¥iv©e
:

2843 
ãm∂©e
 <
ty≥«me
 
Ty≥
>

2844 
˛ass
 
Im∂
 : 
public
 
M©chîI¡îÁ˚
<
Ty≥
> {

2845 
public
:

2846 
usög
 
Addªss
 = c⁄° 
GTEST_REMOVE_REFERENCE_AND_CONST_
(
Ty≥
) *;

2847 
ex∂icô
 
Im∂
(c⁄° 
I¬îM©chî
& 
m©chî
)

2848 : 
m©chî_
(
M©chîCa°
<
Addªss
>(
m©chî
)) {}

2850 
Des¸ibeTo
(::
°d
::
o°ªam
* 
os
Ëc⁄° 
ovîride
 {

2851 *
os
 << "hasáddressÅhat ";

2852 
	gm©chî_
.
Des¸ibeTo
(
os
);

2855 
Des¸ibeNeg©i⁄To
(::
°d
::
o°ªam
* 
os
Ëc⁄° 
ovîride
 {

2856 *
os
 << "doesÇot haveáddressÅhat ";

2857 
	gm©chî_
.
Des¸ibeTo
(
os
);

2860 
boﬁ
 
M©chAndEx∂aö
(
Ty≥
 
obje˘
,

2861 
M©chResu…Li°íî
* 
li°íî
Ëc⁄° 
	govîride
 {

2862 *
	gli°íî
 << "which hasáddress ";

2863 
Addªss
 
	gaddªss
 = 
°d
::
addªssof
(
obje˘
);

2864  
M©chPrötAndEx∂aö
(
addªss
, 
m©chî_
, 
li°íî
);

2867 
	g¥iv©e
:

2868 c⁄° 
M©chî
<
Addªss
> 
m©chî_
;

2870 c⁄° 
I¬îM©chî
 
	gm©chî_
;

2875 
	gãm∂©e
 <
ty≥«me
 
	gPaúTy≥
>

2876 
˛ass
 
	gPaúM©chîIm∂
 : 
public
 
M©chîI¡îÁ˚
<
PaúTy≥
> {

2877 
public
:

2878 
GTEST_REMOVE_REFERENCE_AND_CONST_
(
	tPaúTy≥
Ë
	tRawPaúTy≥
;

2879 
ty≥«me
 
	tRawPaúTy≥
::
	tfú°_ty≥
 
	tFú°Ty≥
;

2880 
ty≥«me
 
	tRawPaúTy≥
::
	t£c⁄d_ty≥
 
	tSec⁄dTy≥
;

2882 
	gãm∂©e
 <
ty≥«me
 
	gFú°M©chî
,Åy≥«mê
	gSec⁄dM©chî
>

2883 
PaúM©chîIm∂
(
Fú°M©chî
 
fú°_m©chî
, 
Sec⁄dM©chî
 
£c⁄d_m©chî
)

2884 : 
fú°_m©chî_
(

2885 
ã°ög
::
Sa„M©chîCa°
<c⁄° 
Fú°Ty≥
&>(
fú°_m©chî
)),

2886 
£c⁄d_m©chî_
(

2887 
ã°ög
::
Sa„M©chîCa°
<c⁄° 
Sec⁄dTy≥
&>(
£c⁄d_m©chî
)) {

2891 
Des¸ibeTo
(::
°d
::
o°ªam
* 
os
Ëc⁄° 
ovîride
 {

2892 *
os
 << "hasá first fieldÅhat ";

2893 
	gfú°_m©chî_
.
Des¸ibeTo
(
os
);

2894 *
	gos
 << ",ánd hasá second fieldÅhat ";

2895 
	g£c⁄d_m©chî_
.
Des¸ibeTo
(
os
);

2899 
Des¸ibeNeg©i⁄To
(::
°d
::
o°ªam
* 
os
Ëc⁄° 
ovîride
 {

2900 *
os
 << "hasá first fieldÅhat ";

2901 
	gfú°_m©chî_
.
Des¸ibeNeg©i⁄To
(
os
);

2902 *
	gos
 << ", or hasá second fieldÅhat ";

2903 
	g£c⁄d_m©chî_
.
Des¸ibeNeg©i⁄To
(
os
);

2908 
boﬁ
 
M©chAndEx∂aö
(
PaúTy≥
 
a_∑ú
,

2909 
M©chResu…Li°íî
* 
li°íî
Ëc⁄° 
	govîride
 {

2910 i‡(!
	gli°íî
->
IsI¡îe°ed
()) {

2913  
	gfú°_m©chî_
.
M©ches
(
∑ú_gëãrs
::
Fú°
(
a_∑ú
, 
R™k0
())) &&

2914 
	g£c⁄d_m©chî_
.
M©ches
(
∑ú_gëãrs
::
Sec⁄d
(
a_∑ú
, 
R™k0
()));

2916 
SåögM©chResu…Li°íî
 
	gfú°_ö√r_li°íî
;

2917 i‡(!
	gfú°_m©chî_
.
M©chAndEx∂aö
(
∑ú_gëãrs
::
Fú°
(
a_∑ú
, 
R™k0
()),

2918 &
fú°_ö√r_li°íî
)) {

2919 *
	gli°íî
 << "whose first field doesÇot match";

2920 
PrötIfNŸEm±y
(
fú°_ö√r_li°íî
.
°r
(), 
li°íî
->
°ªam
());

2921  
	gÁl£
;

2923 
SåögM©chResu…Li°íî
 
	g£c⁄d_ö√r_li°íî
;

2924 i‡(!
	g£c⁄d_m©chî_
.
M©chAndEx∂aö
(
∑ú_gëãrs
::
Sec⁄d
(
a_∑ú
, 
R™k0
()),

2925 &
£c⁄d_ö√r_li°íî
)) {

2926 *
	gli°íî
 << "whose second field doesÇot match";

2927 
PrötIfNŸEm±y
(
£c⁄d_ö√r_li°íî
.
°r
(), 
li°íî
->
°ªam
());

2928  
	gÁl£
;

2930 
Ex∂aöSuc˚ss
(
fú°_ö√r_li°íî
.
°r
(), 
£c⁄d_ö√r_li°íî
.str(),

2931 
li°íî
);

2932  
	gåue
;

2935 
	g¥iv©e
:

2936 
Ex∂aöSuc˚ss
(c⁄° 
°d
::
°rög
& 
fú°_ex∂™©i⁄
,

2937 c⁄° 
°d
::
°rög
& 
£c⁄d_ex∂™©i⁄
,

2938 
M©chResu…Li°íî
* 
li°íî
) const {

2939 *
	gli°íî
 << "whose both fields match";

2940 i‡(
	gfú°_ex∂™©i⁄
 != "") {

2941 *
li°íî
 << ", whîêthêfú° fõld i†®vÆuê" << 
fú°_ex∂™©i⁄
;

2943 i‡(
	g£c⁄d_ex∂™©i⁄
 != "") {

2944 *
li°íî
 << ", ";

2945 i‡(
	gfú°_ex∂™©i⁄
 != "") {

2946 *
li°íî
 << "and ";

2948 *
	gli°íî
 << "where ";

2950 *
	gli°íî
 << "thê£c⁄d fõld i†®vÆuê" << 
	g£c⁄d_ex∂™©i⁄
;

2954 c⁄° 
	gM©chî
<c⁄° 
	gFú°Ty≥
&> 
	gfú°_m©chî_
;

2955 c⁄° 
	gM©chî
<c⁄° 
	gSec⁄dTy≥
&> 
	g£c⁄d_m©chî_
;

2959 
	gãm∂©e
 <
ty≥«me
 
	gFú°M©chî
,Åy≥«mê
	gSec⁄dM©chî
>

2960 ˛as†
	cPaúM©chî
 {

2961 
	gpublic
:

2962 
PaúM©chî
(
Fú°M©chî
 
fú°_m©chî
, 
Sec⁄dM©chî
 
£c⁄d_m©chî
)

2963 : 
fú°_m©chî_
(
fú°_m©chî
), 
£c⁄d_m©chî_
(
£c⁄d_m©chî
) {}

2965 
	gãm∂©e
 <
ty≥«me
 
	gPaúTy≥
>

2966 
›î©‹
 
	gM©chî
<
	gPaúTy≥
> () const {

2967  
	gM©chî
<
	gPaúTy≥
>(

2968 
√w
 
	gPaúM©chîIm∂
<c⁄° 
	gPaúTy≥
&>(
	gfú°_m©chî_
, 
	g£c⁄d_m©chî_
));

2971 
	g¥iv©e
:

2972 c⁄° 
Fú°M©chî
 
fú°_m©chî_
;

2973 c⁄° 
Sec⁄dM©chî
 
	g£c⁄d_m©chî_
;

2976 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	gsize_t
... 
	gI
>

2977 autÿ
U≈ackSåu˘Im∂
(c⁄° 
T
& 
t
, 
IndexSequí˚
<
I
...>, )

2978 -> 
de˛ty≥
(
°d
::
tõ
(
gë
<
I
>(
t
)...)) {

2979 
°©ic_as£π
(
°d
::
tu∂e_size
<
T
>::
vÆue
 =...(
I
),

2981  
	g°d
::
tõ
(
gë
<
I
>(
t
)...);

2984 #i‡
deföed
(
__˝p_°ru˘uªd_bödögs
) && __cpp_structured_bindings >= 201606

2985 
	gãm∂©e
 <
ty≥«me
 
	gT
>

2986 autÿ
U≈ackSåu˘Im∂
(c⁄° 
T
& 
t
, 
MakeIndexSequí˚
<1>, ) {

2987 c⁄°áuto& [
a
] = 
t
;

2988  
	g°d
::
tõ
(
a
);

2990 
	gãm∂©e
 <
ty≥«me
 
	gT
>

2991 autÿ
U≈ackSåu˘Im∂
(c⁄° 
T
& 
t
, 
MakeIndexSequí˚
<2>, ) {

2992 c⁄°áuto& [
a
, 
b
] = 
t
;

2993  
	g°d
::
tõ
(
a
, 
b
);

2995 
	gãm∂©e
 <
ty≥«me
 
	gT
>

2996 autÿ
U≈ackSåu˘Im∂
(c⁄° 
T
& 
t
, 
MakeIndexSequí˚
<3>, ) {

2997 c⁄°áuto& [
a
, 
b
, 
c
] = 
t
;

2998  
	g°d
::
tõ
(
a
, 
b
, 
c
);

3000 
	gãm∂©e
 <
ty≥«me
 
	gT
>

3001 autÿ
U≈ackSåu˘Im∂
(c⁄° 
T
& 
t
, 
MakeIndexSequí˚
<4>, ) {

3002 c⁄°áuto& [
a
, 
b
, 
c
, 
d
] = 
t
;

3003  
	g°d
::
tõ
(
a
, 
b
, 
c
, 
d
);

3005 
	gãm∂©e
 <
ty≥«me
 
	gT
>

3006 autÿ
U≈ackSåu˘Im∂
(c⁄° 
T
& 
t
, 
MakeIndexSequí˚
<5>, ) {

3007 c⁄°áuto& [
a
, 
b
, 
c
, 
d
, 
e
] = 
t
;

3008  
	g°d
::
tõ
(
a
, 
b
, 
c
, 
d
, 
e
);

3010 
	gãm∂©e
 <
ty≥«me
 
	gT
>

3011 autÿ
U≈ackSåu˘Im∂
(c⁄° 
T
& 
t
, 
MakeIndexSequí˚
<6>, ) {

3012 c⁄°áuto& [
a
, 
b
, 
c
, 
d
, 
e
, 
f
] = 
t
;

3013  
	g°d
::
tõ
(
a
, 
b
, 
c
, 
d
, 
e
, 
f
);

3015 
	gãm∂©e
 <
ty≥«me
 
	gT
>

3016 autÿ
U≈ackSåu˘Im∂
(c⁄° 
T
& 
t
, 
MakeIndexSequí˚
<7>, ) {

3017 c⁄°áuto& [
a
, 
b
, 
c
, 
d
, 
e
, 
f
, 
g
] = 
t
;

3018  
	g°d
::
tõ
(
a
, 
b
, 
c
, 
d
, 
e
, 
f
, 
g
);

3020 
	gãm∂©e
 <
ty≥«me
 
	gT
>

3021 autÿ
U≈ackSåu˘Im∂
(c⁄° 
T
& 
t
, 
MakeIndexSequí˚
<8>, ) {

3022 c⁄°áuto& [
a
, 
b
, 
c
, 
d
, 
e
, 
f
, 
g
, 
h
] = 
t
;

3023  
	g°d
::
tõ
(
a
, 
b
, 
c
, 
d
, 
e
, 
f
, 
g
, 
h
);

3025 
	gãm∂©e
 <
ty≥«me
 
	gT
>

3026 autÿ
U≈ackSåu˘Im∂
(c⁄° 
T
& 
t
, 
MakeIndexSequí˚
<9>, ) {

3027 c⁄°áuto& [
a
, 
b
, 
c
, 
d
, 
e
, 
f
, 
g
, 
h
, 
i
] = 
t
;

3028  
	g°d
::
tõ
(
a
, 
b
, 
c
, 
d
, 
e
, 
f
, 
g
, 
h
, 
i
);

3030 
	gãm∂©e
 <
ty≥«me
 
	gT
>

3031 autÿ
U≈ackSåu˘Im∂
(c⁄° 
T
& 
t
, 
MakeIndexSequí˚
<10>, ) {

3032 c⁄°áuto& [
a
, 
b
, 
c
, 
d
, 
e
, 
f
, 
g
, 
h
, 
i
, 
j
] = 
t
;

3033  
	g°d
::
tõ
(
a
, 
b
, 
c
, 
d
, 
e
, 
f
, 
g
, 
h
, 
i
, 
j
);

3035 
	gãm∂©e
 <
ty≥«me
 
	gT
>

3036 autÿ
U≈ackSåu˘Im∂
(c⁄° 
T
& 
t
, 
MakeIndexSequí˚
<11>, ) {

3037 c⁄°áuto& [
a
, 
b
, 
c
, 
d
, 
e
, 
f
, 
g
, 
h
, 
i
, 
j
, 
k
] = 
t
;

3038  
	g°d
::
tõ
(
a
, 
b
, 
c
, 
d
, 
e
, 
f
, 
g
, 
h
, 
i
, 
j
, 
k
);

3040 
	gãm∂©e
 <
ty≥«me
 
	gT
>

3041 autÿ
U≈ackSåu˘Im∂
(c⁄° 
T
& 
t
, 
MakeIndexSequí˚
<12>, ) {

3042 c⁄°áuto& [
a
, 
b
, 
c
, 
d
, 
e
, 
f
, 
g
, 
h
, 
i
, 
j
, 
k
, 
l
] = 
t
;

3043  
	g°d
::
tõ
(
a
, 
b
, 
c
, 
d
, 
e
, 
f
, 
g
, 
h
, 
i
, 
j
, 
k
, 
l
);

3045 
	gãm∂©e
 <
ty≥«me
 
	gT
>

3046 autÿ
U≈ackSåu˘Im∂
(c⁄° 
T
& 
t
, 
MakeIndexSequí˚
<13>, ) {

3047 c⁄°áuto& [
a
, 
b
, 
c
, 
d
, 
e
, 
f
, 
g
, 
h
, 
i
, 
j
, 
k
, 
l
, 
m
] = 
t
;

3048  
	g°d
::
tõ
(
a
, 
b
, 
c
, 
d
, 
e
, 
f
, 
g
, 
h
, 
i
, 
j
, 
k
, 
l
, 
m
);

3050 
	gãm∂©e
 <
ty≥«me
 
	gT
>

3051 autÿ
U≈ackSåu˘Im∂
(c⁄° 
T
& 
t
, 
MakeIndexSequí˚
<14>, ) {

3052 c⁄°áuto& [
a
, 
b
, 
c
, 
d
, 
e
, 
f
, 
g
, 
h
, 
i
, 
j
, 
k
, 
l
, 
m
, 
n
] = 
t
;

3053  
	g°d
::
tõ
(
a
, 
b
, 
c
, 
d
, 
e
, 
f
, 
g
, 
h
, 
i
, 
j
, 
k
, 
l
, 
m
, 
n
);

3055 
	gãm∂©e
 <
ty≥«me
 
	gT
>

3056 autÿ
U≈ackSåu˘Im∂
(c⁄° 
T
& 
t
, 
MakeIndexSequí˚
<15>, ) {

3057 c⁄°áuto& [
a
, 
b
, 
c
, 
d
, 
e
, 
f
, 
g
, 
h
, 
i
, 
j
, 
k
, 
l
, 
m
, 
n
, 
o
] = 
t
;

3058  
	g°d
::
tõ
(
a
, 
b
, 
c
, 
d
, 
e
, 
f
, 
g
, 
h
, 
i
, 
j
, 
k
, 
l
, 
m
, 
n
, 
o
);

3060 
	gãm∂©e
 <
ty≥«me
 
	gT
>

3061 autÿ
U≈ackSåu˘Im∂
(c⁄° 
T
& 
t
, 
MakeIndexSequí˚
<16>, ) {

3062 c⁄°áuto& [
a
, 
b
, 
c
, 
d
, 
e
, 
f
, 
g
, 
h
, 
i
, 
j
, 
k
, 
l
, 
m
, 
n
, 
o
, 
p
] = 
t
;

3063  
	g°d
::
tõ
(
a
, 
b
, 
c
, 
d
, 
e
, 
f
, 
g
, 
h
, 
i
, 
j
, 
k
, 
l
, 
m
, 
n
, 
o
, 
p
);

3067 
	gãm∂©e
 <
size_t
 
	gI
, 
ty≥«me
 
	gT
>

3068 autÿ
U≈ackSåu˘
(c⁄° 
T
& 
t
)

3069 -> 
de˛ty≥
((
U≈ackSåu˘Im∂
)(
t
, 
MakeIndexSequí˚
<
I
>{}, 0)) {

3070  (
	gU≈ackSåu˘Im∂
)(
	gt
, 
	gMakeIndexSequí˚
<
	gI
>{}, 0);

3076 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
size_t
 
	gN
>

3077 
V¨üdicEx∑nd
(c⁄° 
T
 (&)[
N
]) {}

3079 
	gãm∂©e
 <
ty≥«me
 
	gSåu˘
,Åy≥«mê
	gSåu˘Size
>

3080 
˛ass
 
	gFõldsAªM©chîIm∂
;

3082 
	gãm∂©e
 <
ty≥«me
 
	gSåu˘
, 
	gsize_t
... 
	gI
>

3083 
˛ass
 
	gFõldsAªM©chîIm∂
<
	gSåu˘
, 
	gIndexSequí˚
<
	gI
...>>

3084 : 
public
 
M©chîI¡îÁ˚
<
Såu˘
> {

3085 
usög
 
U≈ackedTy≥
 =

3086 
de˛ty≥
(
U≈ackSåu˘
<...(
I
)>(
°d
::
de˛vÆ
<c⁄° 
Såu˘
&>()));

3087 
usög
 
	gM©chîsTy≥
 = 
°d
::
tu∂e
<

3088 
M©chî
<c⁄° 
ty≥«me
 
°d
::
tu∂e_ñemít
<
I
, 
	gU≈ackedTy≥
>::
ty≥
&>...>;

3090 
	gpublic
:

3091 
ãm∂©e
 <
ty≥«me
 
I¬î
>

3092 
ex∂icô
 
FõldsAªM©chîIm∂
(c⁄° 
I¬î
& 
m©chîs
)

3093 : 
m©chîs_
(
ã°ög
::
Sa„M©chîCa°
<

3094 c⁄° 
ty≥«me
 
°d
::
tu∂e_ñemít
<
I
, 
U≈ackedTy≥
>::
ty≥
&>(

3095 
°d
::
gë
<
I
>(
m©chîs
))...) {}

3097 
Des¸ibeTo
(::
°d
::
o°ªam
* 
os
Ëc⁄° 
ovîride
 {

3098 c⁄° * 
£∑øt‹
 = "";

3099 
V¨üdicEx∑nd
(

3100 {(*
os
 << 
£∑øt‹
 << "ha†fõld #" << 
I
 << "Åhat ",

3101 
°d
::
gë
<
I
>(
m©chîs_
).
Des¸ibeTo
(
os
), 
£∑øt‹
 = ",ánd ")...});

3104 
Des¸ibeNeg©i⁄To
(::
°d
::
o°ªam
* 
os
Ëc⁄° 
ovîride
 {

3105 c⁄° * 
£∑øt‹
 = "";

3106 
V¨üdicEx∑nd
({(*
os
 << 
£∑øt‹
 << "ha†fõld #" << 
I
 << "Åhat ",

3107 
°d
::
gë
<
I
>(
m©chîs_
).
Des¸ibeNeg©i⁄To
(
os
),

3108 
£∑øt‹
 = ", or ")...});

3111 
boﬁ
 
M©chAndEx∂aö
(
Såu˘
 
t
, 
M©chResu…Li°íî
* 
li°íî
Ëc⁄° 
	govîride
 {

3112  
M©chI¡î«l
((
U≈ackSåu˘
<...(
I
)>)(
t
), 
li°íî
);

3115 
	g¥iv©e
:

3116 
boﬁ
 
M©chI¡î«l
(
U≈ackedTy≥
 
tu∂e
, 
M©chResu…Li°íî
* 
li°íî
) const {

3117 i‡(!
	gli°íî
->
IsI¡îe°ed
()) {

3120 
boﬁ
 
	ggood
 = 
åue
;

3121 
V¨üdicEx∑nd
({
good
 = good && 
°d
::
gë
<
I
>(
m©chîs_
).
M©ches
(

3122 
°d
::
gë
<
I
>(
tu∂e
))...});

3123  
	ggood
;

3126 
size_t
 
	gÁûed_pos
 = ~size_t{};

3128 
	g°d
::
ve˘‹
<
SåögM©chResu…Li°íî
> 
ö√r_li°íî
(...(
I
));

3130 
V¨üdicEx∑nd
(

3131 {
Áûed_pos
 =~
size_t
{} && !
°d
::
gë
<
I
>(
m©chîs_
).
M©chAndEx∂aö
(

3132 
°d
::
gë
<
I
>(
tu∂e
), &
ö√r_li°íî
[I])

3133 ? 
Áûed_pos
 = 
I


3135 i‡(
	gÁûed_pos
 !~
size_t
{}) {

3136 *
li°íî
 << "who£ fõld #" << 
Áûed_pos
 << " doesÇot match";

3137 
PrötIfNŸEm±y
(
ö√r_li°íî
[
Áûed_pos
].
°r
(), 
li°íî
->
°ªam
());

3138  
	gÁl£
;

3141 *
	gli°íî
 << "whoseállÉlements match";

3142 c⁄° * 
	g£∑øt‹
 = ", where";

3143 
size_t
 
	gödex
 = 0; index < ...(
	gI
); ++index) {

3144 c⁄° 
	g°d
::
°rög
 
°r
 = 
ö√r_li°íî
[
ödex
].str();

3145 i‡(!
	g°r
.
em±y
()) {

3146 *
	gli°íî
 << 
	g£∑øt‹
 << " fõld #" << 
	gödex
 << " i†®vÆuê" << 
	g°r
;

3147 
	g£∑øt‹
 = ",ánd";

3151  
	gåue
;

3154 
M©chîsTy≥
 
	gm©chîs_
;

3157 
	gãm∂©e
 <
	gty≥«me
... 
	gI¬î
>

3158 ˛as†
	cFõldsAªM©chî
 {

3159 
	gpublic
:

3160 
ex∂icô
 
FõldsAªM©chî
(
I¬î
... 
ö√r
Ë: 
m©chîs_
(
°d
::
move
(inner)...) {}

3162 
ãm∂©e
 <
ty≥«me
 
Såu˘
>

3163 
›î©‹
 
M©chî
<
Såu˘
>() const {

3164  
M©chî
<
Såu˘
>(

3165 
√w
 
FõldsAªM©chîIm∂
<c⁄° 
Såu˘
&, 
	gIndexSequí˚F‹
<
	gI¬î
...>>(

3166 
	gm©chîs_
));

3169 
	g¥iv©e
:

3170 
°d
::
tu∂e
<
I¬î
...> 
m©chîs_
;

3174 
	gãm∂©e
 <
ty≥«me
 
	gC⁄èöî
>

3175 
˛ass
 
	gEÀmítsAªM©chîIm∂
 : 
public
 
M©chîI¡îÁ˚
<
C⁄èöî
> {

3176 
public
:

3177 
GTEST_REMOVE_REFERENCE_AND_CONST_
(
	tC⁄èöî
Ë
	tRawC⁄èöî
;

3178 
	göã∫Æ
::
	tSéC⁄èöîVõw
<
	tRawC⁄èöî
> 
	tVõw
;

3179 
ty≥«me
 
	tVõw
::
	tty≥
 
	tSéC⁄èöî
;

3180 
ty≥«me
 
	tVõw
::
	tc⁄°_ª„ªn˚
 
	tSéC⁄èöîRe„ªn˚
;

3181 
ty≥«me
 
	tSéC⁄èöî
::
	tvÆue_ty≥
 
	tEÀmít
;

3185 
	gãm∂©e
 <
ty≥«me
 
	gI≈utIãr
>

3186 
EÀmítsAªM©chîIm∂
(
I≈utIãr
 
fú°
, I≈utIã∏
œ°
) {

3187 
	gfú°
 !
œ°
) {

3188 
m©chîs_
.
push_back
(
M©chîCa°
<c⁄° 
EÀmít
&>(*
fú°
++));

3193 
Des¸ibeTo
(::
°d
::
o°ªam
* 
os
Ëc⁄° 
ovîride
 {

3194 i‡(
cou¡
() == 0) {

3195 *
os
 << "isÉmpty";

3196 } i‡(
cou¡
() == 1) {

3197 *
os
 << "has 1ÉlementÅhat ";

3198 
	gm©chîs_
[0].
Des¸ibeTo
(
os
);

3200 *
	gos
 << "ha†" << 
EÀmíts
(
cou¡
()) << " where\n";

3201 
size_t
 
	gi
 = 0; i !
cou¡
(); ++i) {

3202 *
	gos
 << "ñemíà#" << 
	gi
 << " ";

3203 
	gm©chîs_
[
i
].
Des¸ibeTo
(
os
);

3204 i‡(
	gi
 + 1 < 
cou¡
()) {

3205 *
	gos
 << ",\n";

3212 
Des¸ibeNeg©i⁄To
(::
°d
::
o°ªam
* 
os
Ëc⁄° 
ovîride
 {

3213 i‡(
cou¡
() == 0) {

3214 *
os
 << "isn'tÉmpty";

3218 *
	gos
 << "d€¢'àhavê" << 
EÀmíts
(
cou¡
()) << ", or\n";

3219 
size_t
 
	gi
 = 0; i !
cou¡
(); ++i) {

3220 *
	gos
 << "ñemíà#" << 
	gi
 << " ";

3221 
	gm©chîs_
[
i
].
Des¸ibeNeg©i⁄To
(
os
);

3222 i‡(
	gi
 + 1 < 
cou¡
()) {

3223 *
	gos
 << ", or\n";

3228 
boﬁ
 
M©chAndEx∂aö
(
C⁄èöî
 
c⁄èöî
,

3229 
M©chResu…Li°íî
* 
li°íî
Ëc⁄° 
	govîride
 {

3233 c⁄° 
boﬁ
 
	gli°íî_öãª°ed
 = 
li°íî
->
IsI¡îe°ed
();

3236 ::
°d
::
ve˘‹
<°d::
°rög
> 
ex∂™©i⁄s
(
cou¡
());

3237 
SéC⁄èöîRe„ªn˚
 
	g°l_c⁄èöî
 = 
Võw
::
C⁄°Re„ªn˚
(
c⁄èöî
);

3238 
ty≥«me
 
	gSéC⁄èöî
::
c⁄°_ôî©‹
 
ô
 = 
°l_c⁄èöî
.
begö
();

3239 
size_t
 
	gexam_pos
 = 0;

3240 
boﬁ
 
	gmism©ch_found
 = 
Ál£
;

3245 ; 
	gô
 !
°l_c⁄èöî
.
íd
(Ë&& 
exam_pos
 !
cou¡
(); ++ô, ++
	gexam_pos
) {

3246 
boﬁ
 
	gm©ch
;

3247 i‡(
	gli°íî_öãª°ed
) {

3248 
SåögM©chResu…Li°íî
 
	gs
;

3249 
	gm©ch
 = 
m©chîs_
[
exam_pos
].
M©chAndEx∂aö
(*
ô
, &
s
);

3250 
	gex∂™©i⁄s
[
exam_pos
] = 
s
.
°r
();

3252 
	gm©ch
 = 
m©chîs_
[
exam_pos
].
M©ches
(*
ô
);

3255 i‡(!
	gm©ch
) {

3256 
	gmism©ch_found
 = 
åue
;

3265 
size_t
 
	ga˘uÆ_cou¡
 = 
exam_pos
;

3266 ; 
	gô
 !
°l_c⁄èöî
.
íd
(); ++it) {

3267 ++
	ga˘uÆ_cou¡
;

3270 i‡(
	ga˘uÆ_cou¡
 !
cou¡
()) {

3275 i‡(
li°íî_öãª°ed
 && (
a˘uÆ_cou¡
 != 0)) {

3276 *
li°íî
 << "which ha†" << 
EÀmíts
(
a˘uÆ_cou¡
);

3278  
	gÁl£
;

3281 i‡(
	gmism©ch_found
) {

3283 i‡(
	gli°íî_öãª°ed
) {

3284 *
	gli°íî
 << "who£ÉÀmíà#" << 
	gexam_pos
 << " doesn't match";

3285 
PrötIfNŸEm±y
(
ex∂™©i⁄s
[
exam_pos
], 
li°íî
->
°ªam
());

3287  
	gÁl£
;

3292 i‡(
	gli°íî_öãª°ed
) {

3293 
boﬁ
 
	gªas⁄_¥öãd
 = 
Ál£
;

3294 
size_t
 
	gi
 = 0; i !
cou¡
(); ++i) {

3295 c⁄° 
	g°d
::
°rög
& 
s
 = 
ex∂™©i⁄s
[
i
];

3296 i‡(!
	gs
.
em±y
()) {

3297 i‡(
	gªas⁄_¥öãd
) {

3298 *
	gli°íî
 << ",\nand ";

3300 *
	gli°íî
 << "who£ÉÀmíà#" << 
	gi
 << " m©ches, " << 
	gs
;

3301 
	gªas⁄_¥öãd
 = 
åue
;

3305  
	gåue
;

3308 
	g¥iv©e
:

3309 
Mesßge
 
EÀmíts
(
size_t
 
cou¡
) {

3310  
Mesßge
(Ë<< 
cou¡
 << (count == 1 ? "Élement" : "Élements");

3313 
size_t
 
cou¡
(Ëc⁄° {  
	gm©chîs_
.
size
(); }

3315 ::
°d
::
ve˘‹
<
M©chî
<c⁄° 
EÀmít
&> > 
m©chîs_
;

3322 ˛as†
	cGTEST_API_
 
	gM©chM©rix
 {

3323 
	gpublic
:

3324 
M©chM©rix
(
size_t
 
num_ñemíts
, size_à
num_m©chîs
)

3325 : 
num_ñemíts_
(
num_ñemíts
),

3326 
num_m©chîs_
(
num_m©chîs
),

3327 
m©ched_
(
num_ñemíts_
* 
num_m©chîs_
, 0) {

3330 
size_t
 
LhsSize
(Ëc⁄° {  
	gnum_ñemíts_
; }

3331 
size_t
 
RhsSize
(Ëc⁄° {  
	gnum_m©chîs_
; }

3332 
boﬁ
 
HasEdge
(
size_t
 
ûhs
, size_à
úhs
) const {

3333  
	gm©ched_
[
S∑˚Index
(
ûhs
, 
úhs
)] == 1;

3335 
SëEdge
(
size_t
 
ûhs
, size_à
úhs
, 
boﬁ
 
b
) {

3336 
	gm©ched_
[
S∑˚Index
(
ûhs
, 
úhs
)] = 
b
 ? 1 : 0;

3342 
boﬁ
 
NextGøph
();

3344 
R™domize
();

3346 
	g°d
::
°rög
 
DebugSåög
() const;

3348 
	g¥iv©e
:

3349 
size_t
 
S∑˚Index
(size_à
ûhs
, size_à
úhs
) const {

3350  
ûhs
 * 
	gnum_m©chîs_
 + 
	gúhs
;

3353 
size_t
 
	gnum_ñemíts_
;

3354 
size_t
 
	gnum_m©chîs_
;

3359 ::
°d
::
ve˘‹
<> 
m©ched_
;

3362 ::
°d
::
	t∑ú
<
	tsize_t
, size_t> 
	tEÀmítM©chîPaú
;

3363 ::
°d
::
	tve˘‹
<
	tEÀmítM©chîPaú
> 
	tEÀmítM©chîPaús
;

3367 
GTEST_API_
 
EÀmítM©chîPaús


3368 
FödMaxBù¨tôeM©chög
(c⁄° 
M©chM©rix
& 
g
);

3370 
	sUn‹dîedM©chîRequúe
 {

3371 
	eFœgs
 {

3372 
	gSu≥r£t
 = 1 << 0,

3373 
	gSub£t
 = 1 << 1,

3374 
	gExa˘M©ch
 = 
Su≥r£t
 | 
Sub£t
,

3381 ˛as†
	cGTEST_API_
 
	gUn‹dîedEÀmítsAªM©chîIm∂Ba£
 {

3382 
	g¥Ÿe˘ed
:

3383 
ex∂icô
 
Un‹dîedEÀmítsAªM©chîIm∂Ba£
(

3384 
Un‹dîedM©chîRequúe
::
Fœgs
 
m©chî_Êags
)

3385 : 
m©ch_Êags_
(
m©chî_Êags
) {}

3390 ::
°d
::
	tve˘‹
<c⁄° 
	tM©chîDes¸ibîI¡îÁ˚
*> 
	tM©chîDes¸ibîVec
;

3393 
Des¸ibeToIm∂
(::
°d
::
o°ªam
* 
os
) const;

3396 
Des¸ibeNeg©i⁄ToIm∂
(::
°d
::
o°ªam
* 
os
) const;

3398 
boﬁ
 
VîifyM©chM©rix
(c⁄° ::
°d
::
ve˘‹
<°d::
°rög
>& 
ñemít_¥ötouts
,

3399 c⁄° 
M©chM©rix
& 
m©rix
,

3400 
M©chResu…Li°íî
* 
li°íî
) const;

3402 
boﬁ
 
FödPaúög
(c⁄° 
M©chM©rix
& 
m©rix
,

3403 
M©chResu…Li°íî
* 
li°íî
) const;

3405 
	gM©chîDes¸ibîVec
& 
m©chî_des¸ibîs
() {

3406  
	gm©chî_des¸ibîs_
;

3409 
Mesßge
 
EÀmíts
(
size_t
 
n
) {

3410  
Mesßge
(Ë<< 
	gn
 << "Élement" << (n == 1 ? "" : "s");

3413 
	gUn‹dîedM©chîRequúe
::
Fœgs
 
m©ch_Êags
(Ëc⁄° {  
m©ch_Êags_
; }

3415 
	g¥iv©e
:

3416 
Un‹dîedM©chîRequúe
::
Fœgs
 
m©ch_Êags_
;

3417 
M©chîDes¸ibîVec
 
	gm©chî_des¸ibîs_
;

3422 
	gãm∂©e
 <
ty≥«me
 
	gC⁄èöî
>

3423 
˛ass
 
	gUn‹dîedEÀmítsAªM©chîIm∂


3424 : 
public
 
M©chîI¡îÁ˚
<
C⁄èöî
>,

3425 
public
 
	gUn‹dîedEÀmítsAªM©chîIm∂Ba£
 {

3426 
	gpublic
:

3427 
GTEST_REMOVE_REFERENCE_AND_CONST_
(
	tC⁄èöî
Ë
	tRawC⁄èöî
;

3428 
	göã∫Æ
::
	tSéC⁄èöîVõw
<
	tRawC⁄èöî
> 
	tVõw
;

3429 
ty≥«me
 
	tVõw
::
	tty≥
 
	tSéC⁄èöî
;

3430 
ty≥«me
 
	tVõw
::
	tc⁄°_ª„ªn˚
 
	tSéC⁄èöîRe„ªn˚
;

3431 
ty≥«me
 
	tSéC⁄èöî
::
	tc⁄°_ôî©‹
 
	tSéC⁄èöîC⁄°Iãøt‹
;

3432 
ty≥«me
 
	tSéC⁄èöî
::
	tvÆue_ty≥
 
	tEÀmít
;

3434 
	gãm∂©e
 <
ty≥«me
 
	gI≈utIãr
>

3435 
Un‹dîedEÀmítsAªM©chîIm∂
(
Un‹dîedM©chîRequúe
::
Fœgs
 
m©chî_Êags
,

3436 
I≈utIãr
 
fú°
, I≈utIã∏
œ°
)

3437 : 
Un‹dîedEÀmítsAªM©chîIm∂Ba£
(
m©chî_Êags
) {

3438 ; 
	gfú°
 !
œ°
; ++first) {

3439 
	gm©chîs_
.
push_back
(
M©chîCa°
<c⁄° 
EÀmít
&>(*
fú°
));

3441 c⁄°áuto& 
	gm
 : 
m©chîs_
) {

3442 
m©chî_des¸ibîs
().
push_back
(
m
.
GëDes¸ibî
());

3447 
Des¸ibeTo
(::
°d
::
o°ªam
* 
os
Ëc⁄° 
ovîride
 {

3448  
Un‹dîedEÀmítsAªM©chîIm∂Ba£
::
Des¸ibeToIm∂
(
os
);

3452 
Des¸ibeNeg©i⁄To
(::
°d
::
o°ªam
* 
os
Ëc⁄° 
ovîride
 {

3453  
Un‹dîedEÀmítsAªM©chîIm∂Ba£
::
Des¸ibeNeg©i⁄ToIm∂
(
os
);

3456 
boﬁ
 
M©chAndEx∂aö
(
C⁄èöî
 
c⁄èöî
,

3457 
M©chResu…Li°íî
* 
li°íî
Ëc⁄° 
	govîride
 {

3458 
SéC⁄èöîRe„ªn˚
 
	g°l_c⁄èöî
 = 
Võw
::
C⁄°Re„ªn˚
(
c⁄èöî
);

3459 ::
°d
::
ve˘‹
<°d::
°rög
> 
ñemít_¥ötouts
;

3460 
M©chM©rix
 
	gm©rix
 =

3461 
A«lyzeEÀmíts
(
°l_c⁄èöî
.
begö
(), sé_c⁄èöî.
íd
(),

3462 &
ñemít_¥ötouts
, 
li°íî
);

3464 i‡(
	gm©rix
.
LhsSize
(Ë=0 && 
m©rix
.
RhsSize
() == 0) {

3465  
åue
;

3468 i‡(
m©ch_Êags
(Ë=
Un‹dîedM©chîRequúe
::
Exa˘M©ch
) {

3469 i‡(
m©rix
.
LhsSize
(Ë!m©rix.
RhsSize
()) {

3474 i‡(
m©rix
.
LhsSize
(Ë!0 && 
li°íî
->
IsI¡îe°ed
()) {

3475 *
li°íî
 << "which ha†" << 
EÀmíts
(
m©rix
.
LhsSize
());

3477  
	gÁl£
;

3481  
VîifyM©chM©rix
(
ñemít_¥ötouts
, 
m©rix
, 
li°íî
) &&

3482 
FödPaúög
(
m©rix
, 
li°íî
);

3485 
	g¥iv©e
:

3486 
ãm∂©e
 <
ty≥«me
 
EÀmítIãr
>

3487 
M©chM©rix
 
A«lyzeEÀmíts
(
EÀmítIãr
 
ñem_fú°
, EÀmítIã∏
ñem_œ°
,

3488 ::
°d
::
ve˘‹
<°d::
°rög
>* 
ñemít_¥ötouts
,

3489 
M©chResu…Li°íî
* 
li°íî
) const {

3490 
	gñemít_¥ötouts
->
˛ór
();

3491 ::
°d
::
ve˘‹
<> 
did_m©ch
;

3492 
size_t
 
	gnum_ñemíts
 = 0;

3493 
DummyM©chResu…Li°íî
 
	gdummy
;

3494 ; 
	gñem_fú°
 !
ñem_œ°
; ++
	gnum_ñemíts
, ++elem_first) {

3495 i‡(
	gli°íî
->
IsI¡îe°ed
()) {

3496 
	gñemít_¥ötouts
->
push_back
(
PrötToSåög
(*
ñem_fú°
));

3498 
size_t
 
	gúhs
 = 0; irh†!
m©chîs_
.
size
(); ++irhs) {

3499 
	gdid_m©ch
.
push_back
(

3500 
m©chîs_
[
úhs
].
M©chAndEx∂aö
(*
ñem_fú°
, &
dummy
));

3504 
M©chM©rix
 
m©rix
(
num_ñemíts
, 
m©chîs_
.
size
());

3505 ::
°d
::
ve˘‹
<>::
c⁄°_ôî©‹
 
did_m©ch_ôî
 = 
did_m©ch
.
begö
();

3506 
size_t
 
	gûhs
 = 0; ilh†!
num_ñemíts
; ++ilhs) {

3507 
size_t
 
	gúhs
 = 0; irh†!
m©chîs_
.
size
(); ++irhs) {

3508 
	gm©rix
.
SëEdge
(
ûhs
, 
úhs
, *
did_m©ch_ôî
++ != 0);

3511  
	gm©rix
;

3514 ::
°d
::
ve˘‹
<
M©chî
<c⁄° 
EÀmít
&> > 
m©chîs_
;

3519 
	gãm∂©e
 <
ty≥«me
 
	gT¨gë
>

3520 
	sCa°AndAµídTønsf‹m
 {

3521 
	gãm∂©e
 <
ty≥«me
 
	gArg
>

3522 
	gM©chî
<
	gT¨gë
> 
›î©‹
()(c⁄° 
	gArg
& 
	ga
) const {

3523  
	gM©chîCa°
<
	gT¨gë
>(
	ga
);

3528 
	gãm∂©e
 <
ty≥«me
 
	gM©chîTu∂e
>

3529 ˛as†
	cUn‹dîedEÀmítsAªM©chî
 {

3530 
	gpublic
:

3531 
ex∂icô
 
Un‹dîedEÀmítsAªM©chî
(c⁄° 
M©chîTu∂e
& 
¨gs
)

3532 : 
m©chîs_
(
¨gs
) {}

3534 
ãm∂©e
 <
ty≥«me
 
C⁄èöî
>

3535 
›î©‹
 
M©chî
<
C⁄èöî
>() const {

3536 
GTEST_REMOVE_REFERENCE_AND_CONST_
(
	tC⁄èöî
Ë
	tRawC⁄èöî
;

3537 
ty≥«me
 
	töã∫Æ
::
	tSéC⁄èöîVõw
<
	tRawC⁄èöî
>::
	tty≥
 
	tVõw
;

3538 
ty≥«me
 
	tVõw
::
	tvÆue_ty≥
 
	tEÀmít
;

3539 ::
°d
::
	tve˘‹
<
	tM©chî
<c⁄° 
	tEÀmít
&> > 
	tM©chîVec
;

3540 
M©chîVec
 
	gm©chîs
;

3541 
	gm©chîs
.
ª£rve
(::
°d
::
tu∂e_size
<
M©chîTu∂e
>::
vÆue
);

3542 
Tønsf‹mTu∂eVÆues
(
Ca°AndAµídTønsf‹m
<c⁄° 
EÀmít
&>(), 
m©chîs_
,

3543 ::
°d
::
back_ö£πî
(
m©chîs
));

3544  
	gM©chî
<
	gC⁄èöî
>(

3545 
√w
 
	gUn‹dîedEÀmítsAªM©chîIm∂
<c⁄° 
	gC⁄èöî
&>(

3546 
	gUn‹dîedM©chîRequúe
::
Exa˘M©ch
, 
	gm©chîs
.
begö
(),

3547 
	gm©chîs
.
íd
()));

3550 
	g¥iv©e
:

3551 c⁄° 
M©chîTu∂e
 
m©chîs_
;

3555 
	gãm∂©e
 <
ty≥«me
 
	gM©chîTu∂e
>

3556 ˛as†
	cEÀmítsAªM©chî
 {

3557 
	gpublic
:

3558 
ex∂icô
 
EÀmítsAªM©chî
(c⁄° 
M©chîTu∂e
& 
¨gs
Ë: 
m©chîs_
(args) {}

3560 
ãm∂©e
 <
ty≥«me
 
C⁄èöî
>

3561 
›î©‹
 
M©chî
<
C⁄èöî
>() const {

3562 
GTEST_COMPILE_ASSERT_
(

3563 !
IsHashTabÀ
<
GTEST_REMOVE_REFERENCE_AND_CONST_
(
C⁄èöî
)>::
vÆue
 ||

3564 ::
°d
::
tu∂e_size
<
M©chîTu∂e
>::
vÆue
 < 2,

3565 
u£_Un‹dîedEÀmítsAª_wôh_hash_èbÀs
);

3567 
GTEST_REMOVE_REFERENCE_AND_CONST_
(
	tC⁄èöî
Ë
	tRawC⁄èöî
;

3568 
ty≥«me
 
	töã∫Æ
::
	tSéC⁄èöîVõw
<
	tRawC⁄èöî
>::
	tty≥
 
	tVõw
;

3569 
ty≥«me
 
	tVõw
::
	tvÆue_ty≥
 
	tEÀmít
;

3570 ::
°d
::
	tve˘‹
<
	tM©chî
<c⁄° 
	tEÀmít
&> > 
	tM©chîVec
;

3571 
M©chîVec
 
	gm©chîs
;

3572 
	gm©chîs
.
ª£rve
(::
°d
::
tu∂e_size
<
M©chîTu∂e
>::
vÆue
);

3573 
Tønsf‹mTu∂eVÆues
(
Ca°AndAµídTønsf‹m
<c⁄° 
EÀmít
&>(), 
m©chîs_
,

3574 ::
°d
::
back_ö£πî
(
m©chîs
));

3575  
	gM©chî
<
	gC⁄èöî
>(
√w
 
	gEÀmítsAªM©chîIm∂
<const Container&>(

3576 
	gm©chîs
.
begö
(), m©chîs.
íd
()));

3579 
	g¥iv©e
:

3580 c⁄° 
M©chîTu∂e
 
m©chîs_
;

3584 
	gãm∂©e
 <
ty≥«me
 
	gT
>

3585 ˛as†
	cUn‹dîedEÀmítsAªAºayM©chî
 {

3586 
	gpublic
:

3587 
ãm∂©e
 <
ty≥«me
 
Iãr
>

3588 
Un‹dîedEÀmítsAªAºayM©chî
(
Un‹dîedM©chîRequúe
::
Fœgs
 
m©ch_Êags
,

3589 
Iãr
 
fú°
, Iã∏
œ°
)

3590 : 
m©ch_Êags_
(
m©ch_Êags
), 
m©chîs_
(
fú°
, 
œ°
) {}

3592 
	gãm∂©e
 <
ty≥«me
 
	gC⁄èöî
>

3593 
›î©‹
 
	gM©chî
<
	gC⁄èöî
>() const {

3594  
	gM©chî
<
	gC⁄èöî
>(

3595 
√w
 
	gUn‹dîedEÀmítsAªM©chîIm∂
<c⁄° 
	gC⁄èöî
&>(

3596 
	gm©ch_Êags_
, 
	gm©chîs_
.
begö
(), m©chîs_.
íd
()));

3599 
	g¥iv©e
:

3600 
Un‹dîedM©chîRequúe
::
Fœgs
 
m©ch_Êags_
;

3601 ::
°d
::
ve˘‹
<
T
> 
m©chîs_
;

3605 
	gãm∂©e
 <
ty≥«me
 
	gT
>

3606 ˛as†
	cEÀmítsAªAºayM©chî
 {

3607 
	gpublic
:

3608 
ãm∂©e
 <
ty≥«me
 
Iãr
>

3609 
EÀmítsAªAºayM©chî
(
Iãr
 
fú°
, Iã∏
œ°
Ë: 
m©chîs_
(first,Üast) {}

3611 
	gãm∂©e
 <
ty≥«me
 
	gC⁄èöî
>

3612 
›î©‹
 
	gM©chî
<
	gC⁄èöî
>() const {

3613 
GTEST_COMPILE_ASSERT_
(

3614 !
IsHashTabÀ
<
GTEST_REMOVE_REFERENCE_AND_CONST_
(
C⁄èöî
)>::
vÆue
,

3615 
u£_Un‹dîedEÀmítsAªAºay_wôh_hash_èbÀs
);

3617  
	gM©chî
<
	gC⁄èöî
>(
√w
 
	gEÀmítsAªM©chîIm∂
<const Container&>(

3618 
	gm©chîs_
.
begö
(), m©chîs_.
íd
()));

3621 
	g¥iv©e
:

3622 c⁄° ::
°d
::
ve˘‹
<
T
> 
m©chîs_
;

3634 
	gãm∂©e
 <
ty≥«me
 
	gTu∂e2M©chî
,Åy≥«mê
	gSec⁄d
>

3635 ˛as†
	cBoundSec⁄dM©chî
 {

3636 
	gpublic
:

3637 
BoundSec⁄dM©chî
(c⁄° 
Tu∂e2M©chî
& 
tm
, c⁄° 
Sec⁄d
& 
£c⁄d
)

3638 : 
tu∂e2_m©chî_
(
tm
), 
£c⁄d_vÆue_
(
£c⁄d
) {}

3640 
BoundSec⁄dM©chî
(c⁄° BoundSec⁄dM©chî& 
Ÿhî
) = ;

3642 
	gãm∂©e
 <
ty≥«me
 
	gT
>

3643 
›î©‹
 
	gM©chî
<
	gT
>() const {

3644  
MakeM©chî
(
√w
 
Im∂
<
T
>(
tu∂e2_m©chî_
, 
£c⁄d_vÆue_
));

3655 
	g›î©‹
=(c⁄° 
BoundSec⁄dM©chî
& ) {

3656 
GTEST_LOG_
(
FATAL
) << "BoundSecondMatcher shouldÇever beássigned.";

3659 
	g¥iv©e
:

3660 
ãm∂©e
 <
ty≥«me
 
T
>

3661 
˛ass
 
Im∂
 : 
public
 
M©chîI¡îÁ˚
<
T
> {

3662 
public
:

3663 ::
°d
::
	ttu∂e
<
	tT
, 
	tSec⁄d
> 
	tArgTu∂e
;

3665 
Im∂
(c⁄° 
Tu∂e2M©chî
& 
tm
, c⁄° 
Sec⁄d
& 
£c⁄d
)

3666 : 
m⁄o_tu∂e2_m©chî_
(
Sa„M©chîCa°
<c⁄° 
ArgTu∂e
&>(
tm
)),

3667 
£c⁄d_vÆue_
(
£c⁄d
) {}

3669 
Des¸ibeTo
(::
°d
::
o°ªam
* 
os
Ëc⁄° 
ovîride
 {

3670 *
os
 << "and ";

3671 
UnivîßlPröt
(
£c⁄d_vÆue_
, 
os
);

3672 *
	gos
 << " ";

3673 
	gm⁄o_tu∂e2_m©chî_
.
Des¸ibeTo
(
os
);

3676 
boﬁ
 
M©chAndEx∂aö
(
T
 
x
, 
M©chResu…Li°íî
* 
li°íî
Ëc⁄° 
	govîride
 {

3677  
	gm⁄o_tu∂e2_m©chî_
.
M©chAndEx∂aö
(
ArgTu∂e
(
x
, 
£c⁄d_vÆue_
),

3678 
li°íî
);

3681 
	g¥iv©e
:

3682 c⁄° 
M©chî
<c⁄° 
ArgTu∂e
&> 
m⁄o_tu∂e2_m©chî_
;

3683 c⁄° 
Sec⁄d
 
	g£c⁄d_vÆue_
;

3686 c⁄° 
Tu∂e2M©chî
 
	gtu∂e2_m©chî_
;

3687 c⁄° 
Sec⁄d
 
	g£c⁄d_vÆue_
;

3694 
	gãm∂©e
 <
ty≥«me
 
	gTu∂e2M©chî
,Åy≥«mê
	gSec⁄d
>

3695 
	gBoundSec⁄dM©chî
<
	gTu∂e2M©chî
, 
	gSec⁄d
> 
M©chîBödSec⁄d
(

3696 c⁄° 
Tu∂e2M©chî
& 
tm
, c⁄° 
Sec⁄d
& 
£c⁄d
) {

3697  
	gBoundSec⁄dM©chî
<
	gTu∂e2M©chî
, 
	gSec⁄d
>(
	gtm
, 
	g£c⁄d
);

3705 
GTEST_API_
 
	g°d
::
°rög
 
F‹m©M©chîDes¸ùti⁄
(
boﬁ
 
√g©i⁄
,

3706 c⁄° * 
m©chî_«me
,

3707 c⁄° 
Såögs
& 
∑øm_vÆues
);

3710 
	gãm∂©e
 <
ty≥«me
 
	gVÆueM©chî
>

3711 ˛as†
	cO±i⁄ÆM©chî
 {

3712 
	gpublic
:

3713 
ex∂icô
 
O±i⁄ÆM©chî
(c⁄° 
VÆueM©chî
& 
vÆue_m©chî
)

3714 : 
vÆue_m©chî_
(
vÆue_m©chî
) {}

3716 
ãm∂©e
 <
ty≥«me
 
O±i⁄Æ
>

3717 
›î©‹
 
M©chî
<
O±i⁄Æ
>() const {

3718  
M©chî
<
O±i⁄Æ
>(
√w
 
Im∂
<c⁄° O±i⁄Æ&>(
vÆue_m©chî_
));

3721 
	gãm∂©e
 <
ty≥«me
 
	gO±i⁄Æ
>

3722 
˛ass
 
	gIm∂
 : 
public
 
M©chîI¡îÁ˚
<
O±i⁄Æ
> {

3723 
public
:

3724 
GTEST_REMOVE_REFERENCE_AND_CONST_
(
	tO±i⁄Æ
Ë
	tO±i⁄ÆVõw
;

3725 
ty≥«me
 
	tO±i⁄ÆVõw
::
	tvÆue_ty≥
 
	tVÆueTy≥
;

3726 
ex∂icô
 
Im∂
(c⁄° 
VÆueM©chî
& 
vÆue_m©chî
)

3727 : 
vÆue_m©chî_
(
M©chîCa°
<
VÆueTy≥
>(
vÆue_m©chî
)) {}

3729 
Des¸ibeTo
(::
°d
::
o°ªam
* 
os
Ëc⁄° 
ovîride
 {

3730 *
os
 << "value ";

3731 
	gvÆue_m©chî_
.
Des¸ibeTo
(
os
);

3734 
Des¸ibeNeg©i⁄To
(::
°d
::
o°ªam
* 
os
Ëc⁄° 
ovîride
 {

3735 *
os
 << "value ";

3736 
	gvÆue_m©chî_
.
Des¸ibeNeg©i⁄To
(
os
);

3739 
boﬁ
 
M©chAndEx∂aö
(
O±i⁄Æ
 
›ti⁄Æ
,

3740 
M©chResu…Li°íî
* 
li°íî
Ëc⁄° 
	govîride
 {

3741 i‡(!
	g›ti⁄Æ
) {

3742 *
	gli°íî
 << "which isÇotÉngaged";

3743  
	gÁl£
;

3745 c⁄° 
	gVÆueTy≥
& 
	gvÆue
 = *
›ti⁄Æ
;

3746 
SåögM©chResu…Li°íî
 
	gvÆue_li°íî
;

3747 c⁄° 
boﬁ
 
	gm©ch
 = 
vÆue_m©chî_
.
M©chAndEx∂aö
(
vÆue
, &
vÆue_li°íî
);

3748 *
	gli°íî
 << "who£ vÆuê" << 
PrötToSåög
(
vÆue
)

3749 << (
	gm©ch
 ? " matches" : " doesn't match");

3750 
PrötIfNŸEm±y
(
vÆue_li°íî
.
°r
(), 
li°íî
->
°ªam
());

3751  
	gm©ch
;

3754 
	g¥iv©e
:

3755 c⁄° 
M©chî
<
VÆueTy≥
> 
vÆue_m©chî_
;

3758 
	g¥iv©e
:

3759 c⁄° 
VÆueM©chî
 
vÆue_m©chî_
;

3762 
«me•a˚
 
	gv¨ü¡_m©chî
 {

3764 
	gãm∂©e
 <
ty≥«me
 
	gT
>

3765 
hﬁds_Æã∫©ive
() {}

3766 
	gãm∂©e
 <
ty≥«me
 
	gT
>

3767 
gë
() {}

3770 
	gãm∂©e
 <
ty≥«me
 
	gT
>

3771 ˛as†
	cV¨ü¡M©chî
 {

3772 
	gpublic
:

3773 
ex∂icô
 
V¨ü¡M©chî
(::
ã°ög
::
M©chî
<c⁄° 
T
&> 
m©chî
)

3774 : 
m©chî_
(
°d
::
move
(
m©chî
)) {}

3776 
ãm∂©e
 <
ty≥«me
 
V¨ü¡
>

3777 
boﬁ
 
M©chAndEx∂aö
(c⁄° 
V¨ü¡
& 
vÆue
,

3778 ::
ã°ög
::
M©chResu…Li°íî
* 
li°íî
) const {

3779 
usög
 
°d
::
gë
;

3780 i‡(!
	gli°íî
->
IsI¡îe°ed
()) {

3781  
	ghﬁds_Æã∫©ive
<
	gT
>(
	gvÆue
Ë&& 
	gm©chî_
.
M©ches
(
gë
<
T
>(
vÆue
));

3784 i‡(!
	ghﬁds_Æã∫©ive
<
	gT
>(
	gvÆue
)) {

3785 *
	gli°íî
 << "who£ vÆuêi†nŸ o‡ty≥ '" << 
GëTy≥Name
() << "'";

3786  
	gÁl£
;

3789 c⁄° 
	gT
& 
	gñem
 = 
gë
<
T
>(
vÆue
);

3790 
SåögM©chResu…Li°íî
 
	gñem_li°íî
;

3791 c⁄° 
boﬁ
 
	gm©ch
 = 
m©chî_
.
M©chAndEx∂aö
(
ñem
, &
ñem_li°íî
);

3792 *
	gli°íî
 << "who£ vÆuê" << 
PrötToSåög
(
ñem
)

3793 << (
	gm©ch
 ? " matches" : " doesn't match");

3794 
PrötIfNŸEm±y
(
ñem_li°íî
.
°r
(), 
li°íî
->
°ªam
());

3795  
	gm©ch
;

3798 
Des¸ibeTo
(
°d
::
o°ªam
* 
os
) const {

3799 *
os
 << "i†®v¨ü¡<> wôh vÆuêo‡ty≥ '" << 
GëTy≥Name
()

3801 
	gm©chî_
.
Des¸ibeTo
(
os
);

3804 
Des¸ibeNeg©i⁄To
(
°d
::
o°ªam
* 
os
) const {

3805 *
os
 << "i†®v¨ü¡<> wôh vÆuêo‡ty≥ othîÅh™ '" << 
GëTy≥Name
()

3807 
	gm©chî_
.
Des¸ibeNeg©i⁄To
(
os
);

3810 
	g¥iv©e
:

3811 
°d
::
°rög
 
GëTy≥Name
() {

3812 #i‡
GTEST_HAS_RTTI


3813 
GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_
(

3814  
öã∫Æ
::
GëTy≥Name
<
T
>());

3819 c⁄° ::
ã°ög
::
M©chî
<c⁄° 
T
&> 
m©chî_
;

3824 
«me•a˚
 
	g™y_ˇ°_m©chî
 {

3827 
	gãm∂©e
 <
ty≥«me
 
	gT
>

3828 
™y_ˇ°
() {}

3831 
	gãm∂©e
 <
ty≥«me
 
	gT
>

3832 ˛as†
	cAnyCa°M©chî
 {

3833 
	gpublic
:

3834 
ex∂icô
 
AnyCa°M©chî
(c⁄° ::
ã°ög
::
M©chî
<c⁄° 
T
&>& 
m©chî
)

3835 : 
m©chî_
(
m©chî
) {}

3837 
ãm∂©e
 <
ty≥«me
 
AnyTy≥
>

3838 
boﬁ
 
M©chAndEx∂aö
(c⁄° 
AnyTy≥
& 
vÆue
,

3839 ::
ã°ög
::
M©chResu…Li°íî
* 
li°íî
) const {

3840 i‡(!
li°íî
->
IsI¡îe°ed
()) {

3841 c⁄° 
T
* 
±r
 = 
™y_ˇ°
<T>(&
vÆue
);

3842  
	g±r
 !
nuŒ±r
 && 
m©chî_
.
M©ches
(*
±r
);

3845 c⁄° 
T
* 
	gñem
 = 
™y_ˇ°
<T>(&
vÆue
);

3846 i‡(
	gñem
 =
nuŒ±r
) {

3847 *
li°íî
 << "who£ vÆuêi†nŸ o‡ty≥ '" << 
GëTy≥Name
() << "'";

3848  
	gÁl£
;

3851 
SåögM©chResu…Li°íî
 
	gñem_li°íî
;

3852 c⁄° 
boﬁ
 
	gm©ch
 = 
m©chî_
.
M©chAndEx∂aö
(*
ñem
, &
ñem_li°íî
);

3853 *
	gli°íî
 << "who£ vÆuê" << 
PrötToSåög
(*
ñem
)

3854 << (
	gm©ch
 ? " matches" : " doesn't match");

3855 
PrötIfNŸEm±y
(
ñem_li°íî
.
°r
(), 
li°íî
->
°ªam
());

3856  
	gm©ch
;

3859 
Des¸ibeTo
(
°d
::
o°ªam
* 
os
) const {

3860 *
os
 << "i†™ '™y'Åy≥ wôh vÆuêo‡ty≥ '" << 
GëTy≥Name
()

3862 
	gm©chî_
.
Des¸ibeTo
(
os
);

3865 
Des¸ibeNeg©i⁄To
(
°d
::
o°ªam
* 
os
) const {

3866 *
os
 << "i†™ '™y'Åy≥ wôh vÆuêo‡ty≥ othîÅh™ '" << 
GëTy≥Name
()

3868 
	gm©chî_
.
Des¸ibeNeg©i⁄To
(
os
);

3871 
	g¥iv©e
:

3872 
°d
::
°rög
 
GëTy≥Name
() {

3873 #i‡
GTEST_HAS_RTTI


3874 
GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_
(

3875  
öã∫Æ
::
GëTy≥Name
<
T
>());

3880 c⁄° ::
ã°ög
::
M©chî
<c⁄° 
T
&> 
m©chî_
;

3886 
	gãm∂©e
 <
˛ass
 
	gArgsTu∂e
, 
	gsize_t
... 
	gk
>

3887 
˛ass
 
	gArgsM©chîIm∂
 : 
public
 
M©chîI¡îÁ˚
<
ArgsTu∂e
> {

3888 
public
:

3889 
usög
 
RawArgsTu∂e
 = 
ty≥«me
 
°d
::
deˇy
<
ArgsTu∂e
>::
ty≥
;

3890 
usög
 
	gSñe˘edArgs
 =

3891 
°d
::
tu∂e
<
ty≥«me
 std::
tu∂e_ñemít
<
k
, 
	gRawArgsTu∂e
>::
ty≥
...>;

3892 
usög
 
	gM⁄om‹phicI¬îM©chî
 = 
M©chî
<c⁄° 
Sñe˘edArgs
&>;

3894 
	gãm∂©e
 <
ty≥«me
 
	gI¬îM©chî
>

3895 
ex∂icô
 
ArgsM©chîIm∂
(c⁄° 
I¬îM©chî
& 
ö√r_m©chî
)

3896 : 
ö√r_m©chî_
(
Sa„M©chîCa°
<c⁄° 
Sñe˘edArgs
&>(
ö√r_m©chî
)) {}

3898 
boﬁ
 
M©chAndEx∂aö
(
ArgsTu∂e
 
¨gs
,

3899 
M©chResu…Li°íî
* 
li°íî
Ëc⁄° 
	govîride
 {

3901 ()
	g¨gs
;

3902 c⁄° 
	gSñe˘edArgs
& 
	g£À˘ed_¨gs
 =

3903 
°d
::
f‹w¨d_as_tu∂e
(°d::
gë
<
k
>(
¨gs
)...);

3904 i‡(!
	gli°íî
->
IsI¡îe°ed
()Ë 
	gö√r_m©chî_
.
M©ches
(
£À˘ed_¨gs
);

3906 
PrötIndi˚s
(
li°íî
->
°ªam
());

3907 *
	gli°íî
 << "¨ê" << 
PrötToSåög
(
£À˘ed_¨gs
);

3909 
SåögM©chResu…Li°íî
 
	gö√r_li°íî
;

3910 c⁄° 
boﬁ
 
	gm©ch
 =

3911 
ö√r_m©chî_
.
M©chAndEx∂aö
(
£À˘ed_¨gs
, &
ö√r_li°íî
);

3912 
PrötIfNŸEm±y
(
ö√r_li°íî
.
°r
(), 
li°íî
->
°ªam
());

3913  
	gm©ch
;

3916 
Des¸ibeTo
(::
°d
::
o°ªam
* 
os
Ëc⁄° 
ovîride
 {

3917 *
os
 << "areáÅuple ";

3918 
PrötIndi˚s
(
os
);

3919 
	gö√r_m©chî_
.
Des¸ibeTo
(
os
);

3922 
Des¸ibeNeg©i⁄To
(::
°d
::
o°ªam
* 
os
Ëc⁄° 
ovîride
 {

3923 *
os
 << "areáÅuple ";

3924 
PrötIndi˚s
(
os
);

3925 
	gö√r_m©chî_
.
Des¸ibeNeg©i⁄To
(
os
);

3928 
	g¥iv©e
:

3930 
PrötIndi˚s
(::
°d
::
o°ªam
* 
os
) {

3931 *
os
 << "whose fields (";

3932 c⁄° * 
	g£p
 = "";

3934 ()
	g£p
;

3935 c⁄° * 
	gdummy
[] = {"", (*
os
 << 
£p
 << "#" << 
k
, sep = ", ")...};

3936 ()
	gdummy
;

3937 *
	gos
 << ") ";

3940 
M⁄om‹phicI¬îM©chî
 
	gö√r_m©chî_
;

3943 
	gãm∂©e
 <
˛ass
 
	gI¬îM©chî
, 
	gsize_t
... 
	gk
>

3944 ˛as†
	cArgsM©chî
 {

3945 
	gpublic
:

3946 
ex∂icô
 
ArgsM©chî
(
I¬îM©chî
 
ö√r_m©chî
)

3947 : 
ö√r_m©chî_
(
°d
::
move
(
ö√r_m©chî
)) {}

3949 
ãm∂©e
 <
ty≥«me
 
ArgsTu∂e
>

3950 
›î©‹
 
M©chî
<
ArgsTu∂e
>() const {

3951  
MakeM©chî
(
√w
 
ArgsM©chîIm∂
<
ArgsTu∂e
, 
k
...>(
ö√r_m©chî_
));

3954 
	g¥iv©e
:

3955 
I¬îM©chî
 
ö√r_m©chî_
;

3975 
	gãm∂©e
 <
ty≥«me
 
	gIãr
>

3976 
ölöe
 
	göã∫Æ
::
EÀmítsAªAºayM©chî
<

3977 
ty≥«me
 ::
°d
::
ôî©‹_åaôs
<
Iãr
>::
vÆue_ty≥
>

3978 
	$EÀmítsAªAºay
(
Iãr
 
fú°
, Iã∏
œ°
) {

3979 
ty≥«me
 ::
	t°d
::
	tôî©‹_åaôs
<
	tIãr
>::
	tvÆue_ty≥
 
	tT
;

3980  
öã∫Æ
::
EÀmítsAªAºayM©chî
<
T
>(
fú°
, 
œ°
);

3981 
	}
}

3983 
	gãm∂©e
 <
ty≥«me
 
	gT
>

3984 
ölöe
 
	göã∫Æ
::
EÀmítsAªAºayM©chî
<
T
> 
	$EÀmítsAªAºay
(

3985 c⁄° 
T
* 
poöãr
, 
size_t
 
cou¡
) {

3986  
	`EÀmítsAªAºay
(
poöãr
,Öoöã∏+ 
cou¡
);

3987 
	}
}

3989 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
size_t
 
	gN
>

3990 
ölöe
 
	göã∫Æ
::
EÀmítsAªAºayM©chî
<
T
> 
EÀmítsAªAºay
(

3991 c⁄° 
T
 (&
¨øy
)[
N
]) {

3992  
EÀmítsAªAºay
(
¨øy
, 
N
);

3995 
	gãm∂©e
 <
ty≥«me
 
	gC⁄èöî
>

3996 
ölöe
 
	göã∫Æ
::
EÀmítsAªAºayM©chî
<
ty≥«me
 
C⁄èöî
::
vÆue_ty≥
>

3997 
	$EÀmítsAªAºay
(c⁄° 
C⁄èöî
& 
c⁄èöî
) {

3998  
	`EÀmítsAªAºay
(
c⁄èöî
.
	`begö
(), c⁄èöî.
	`íd
());

3999 
	}
}

4001 
	gãm∂©e
 <
ty≥«me
 
	gT
>

4002 
ölöe
 
	göã∫Æ
::
EÀmítsAªAºayM©chî
<
T
>

4003 
EÀmítsAªAºay
(::
°d
::
öôülizî_li°
<
T
> 
xs
) {

4004  
EÀmítsAªAºay
(
xs
.
begö
(), xs.
íd
());

4020 
	gãm∂©e
 <
ty≥«me
 
	gIãr
>

4021 
ölöe
 
	göã∫Æ
::
Un‹dîedEÀmítsAªAºayM©chî
<

4022 
ty≥«me
 ::
°d
::
ôî©‹_åaôs
<
Iãr
>::
vÆue_ty≥
>

4023 
	$Un‹dîedEÀmítsAªAºay
(
Iãr
 
fú°
, Iã∏
œ°
) {

4024 
ty≥«me
 ::
	t°d
::
	tôî©‹_åaôs
<
	tIãr
>::
	tvÆue_ty≥
 
	tT
;

4025  
öã∫Æ
::
Un‹dîedEÀmítsAªAºayM©chî
<
T
>(

4026 
öã∫Æ
::
Un‹dîedM©chîRequúe
::
Exa˘M©ch
, 
fú°
, 
œ°
);

4027 
	}
}

4029 
	gãm∂©e
 <
ty≥«me
 
	gT
>

4030 
ölöe
 
	göã∫Æ
::
Un‹dîedEÀmítsAªAºayM©chî
<
T
>

4031 
	$Un‹dîedEÀmítsAªAºay
(c⁄° 
T
* 
poöãr
, 
size_t
 
cou¡
) {

4032  
	`Un‹dîedEÀmítsAªAºay
(
poöãr
,Öoöã∏+ 
cou¡
);

4033 
	}
}

4035 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
size_t
 
	gN
>

4036 
ölöe
 
	göã∫Æ
::
Un‹dîedEÀmítsAªAºayM©chî
<
T
>

4037 
Un‹dîedEÀmítsAªAºay
(c⁄° 
T
 (&
¨øy
)[
N
]) {

4038  
Un‹dîedEÀmítsAªAºay
(
¨øy
, 
N
);

4041 
	gãm∂©e
 <
ty≥«me
 
	gC⁄èöî
>

4042 
ölöe
 
	göã∫Æ
::
Un‹dîedEÀmítsAªAºayM©chî
<

4043 
ty≥«me
 
C⁄èöî
::
vÆue_ty≥
>

4044 
	$Un‹dîedEÀmítsAªAºay
(c⁄° 
C⁄èöî
& 
c⁄èöî
) {

4045  
	`Un‹dîedEÀmítsAªAºay
(
c⁄èöî
.
	`begö
(), c⁄èöî.
	`íd
());

4046 
	}
}

4048 
	gãm∂©e
 <
ty≥«me
 
	gT
>

4049 
ölöe
 
	göã∫Æ
::
Un‹dîedEÀmítsAªAºayM©chî
<
T
>

4050 
Un‹dîedEÀmítsAªAºay
(::
°d
::
öôülizî_li°
<
T
> 
xs
) {

4051  
Un‹dîedEÀmítsAªAºay
(
xs
.
begö
(), xs.
íd
());

4063 c⁄° 
	göã∫Æ
::
AnythögM©chî
 
_
 = {};

4065 
	gãm∂©e
 <
ty≥«me
 
	gT
>

4066 
ölöe
 
	gM©chî
<
	gT
> 
	$A
() {

4067  
_
;

4068 
	}
}

4071 
	gãm∂©e
 <
ty≥«me
 
	gT
>

4072 
ölöe
 
	gM©chî
<
	gT
> 
	$An
() {

4073  
_
;

4074 
	}
}

4076 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gM
>

4077 
	gM©chî
<
	gT
> 
	göã∫Æ
::
M©chîCa°Im∂
<
T
, 
	gM
>::
	$Ca°Im∂
(

4078 c⁄° 
M
& 
vÆue
, 
°d
::
Ál£_ty≥
 ,

4079 
°d
::
Ál£_ty≥
 ) {

4080  
	`Eq
(
vÆue
);

4081 
	}
}

4084 
ölöe
 
	gPﬁym‹phicM©chî
<
	göã∫Æ
::
IsNuŒM©chî
 > 
	$IsNuŒ
() {

4085  
	`MakePﬁym‹phicM©chî
(
öã∫Æ
::
	`IsNuŒM©chî
());

4086 
	}
}

4091 
ölöe
 
	gPﬁym‹phicM©chî
<
	göã∫Æ
::
NŸNuŒM©chî
 > 
	$NŸNuŒ
() {

4092  
	`MakePﬁym‹phicM©chî
(
öã∫Æ
::
	`NŸNuŒM©chî
());

4093 
	}
}

4097 
	gãm∂©e
 <
ty≥«me
 
	gT
>

4098 
ölöe
 
	göã∫Æ
::
RefM©chî
<
T
&> 
	$Ref
(
T
& 
x
) {

4099  
öã∫Æ
::
RefM©chî
<
T
&>(
x
);

4100 
	}
}

4103 
ölöe
 
	gPﬁym‹phicM©chî
<
	göã∫Æ
::
IsN™M©chî
> 
	$IsN™
() {

4104  
	`MakePﬁym‹phicM©chî
(
öã∫Æ
::
	`IsN™M©chî
());

4105 
	}
}

4109 
ölöe
 
	göã∫Æ
::
FlﬂtögEqM©chî
<> 
	$DoubÀEq
(
rhs
) {

4110  
öã∫Æ
::
FlﬂtögEqM©chî
<>(
rhs
, 
Ál£
);

4111 
	}
}

4115 
ölöe
 
	göã∫Æ
::
FlﬂtögEqM©chî
<> 
	$N™SísôiveDoubÀEq
(
rhs
) {

4116  
öã∫Æ
::
FlﬂtögEqM©chî
<>(
rhs
, 
åue
);

4117 
	}
}

4122 
ölöe
 
	göã∫Æ
::
FlﬂtögEqM©chî
<> 
	$DoubÀNór
(

4123 
rhs
, 
max_abs_îr‹
) {

4124  
öã∫Æ
::
FlﬂtögEqM©chî
<>(
rhs
, 
Ál£
, 
max_abs_îr‹
);

4125 
	}
}

4130 
ölöe
 
	göã∫Æ
::
FlﬂtögEqM©chî
<> 
	$N™SísôiveDoubÀNór
(

4131 
rhs
, 
max_abs_îr‹
) {

4132  
öã∫Æ
::
FlﬂtögEqM©chî
<>(
rhs
, 
åue
, 
max_abs_îr‹
);

4133 
	}
}

4137 
ölöe
 
	göã∫Æ
::
FlﬂtögEqM©chî
<> 
	$FlﬂtEq
(
rhs
) {

4138  
öã∫Æ
::
FlﬂtögEqM©chî
<>(
rhs
, 
Ál£
);

4139 
	}
}

4143 
ölöe
 
	göã∫Æ
::
FlﬂtögEqM©chî
<> 
	$N™SísôiveFlﬂtEq
(
rhs
) {

4144  
öã∫Æ
::
FlﬂtögEqM©chî
<>(
rhs
, 
åue
);

4145 
	}
}

4150 
ölöe
 
	göã∫Æ
::
FlﬂtögEqM©chî
<> 
	$FlﬂtNór
(

4151 
rhs
, 
max_abs_îr‹
) {

4152  
öã∫Æ
::
FlﬂtögEqM©chî
<>(
rhs
, 
Ál£
, 
max_abs_îr‹
);

4153 
	}
}

4158 
ölöe
 
	göã∫Æ
::
FlﬂtögEqM©chî
<> 
	$N™SísôiveFlﬂtNór
(

4159 
rhs
, 
max_abs_îr‹
) {

4160  
öã∫Æ
::
FlﬂtögEqM©chî
<>(
rhs
, 
åue
, 
max_abs_îr‹
);

4161 
	}
}

4165 
	gãm∂©e
 <
ty≥«me
 
	gI¬îM©chî
>

4166 
ölöe
 
	göã∫Æ
::
PoöãeM©chî
<
I¬îM©chî
> 
	$Poöãe
(

4167 c⁄° 
I¬îM©chî
& 
ö√r_m©chî
) {

4168  
öã∫Æ
::
PoöãeM©chî
<
I¬îM©chî
>(
ö√r_m©chî
);

4169 
	}
}

4171 #i‡
GTEST_HAS_RTTI


4178 
	gãm∂©e
 <
ty≥«me
 
	gTo
>

4179 
ölöe
 
	gPﬁym‹phicM©chî
<
	göã∫Æ
::
WhíDy«micCa°ToM©chî
<
To
> >

4180 
WhíDy«micCa°To
(c⁄° 
M©chî
<
To
>& 
ö√r_m©chî
) {

4181  
MakePﬁym‹phicM©chî
(

4182 
öã∫Æ
::
WhíDy«micCa°ToM©chî
<
To
>(
ö√r_m©chî
));

4190 
	gãm∂©e
 <
ty≥«me
 
	gCœss
,Åy≥«mê
	gFõldTy≥
,Åy≥«mê
	gFõldM©chî
>

4191 
ölöe
 
	gPﬁym‹phicM©chî
<

4192 
	göã∫Æ
::
FõldM©chî
<
Cœss
, 
	gFõldTy≥
> > 
	$Fõld
(

4193 
FõldTy≥
 
Cœss
::*
fõld
, c⁄° 
FõldM©chî
& 
m©chî
) {

4194  
	`MakePﬁym‹phicM©chî
(

4195 
öã∫Æ
::
FõldM©chî
<
Cœss
, 
FõldTy≥
>(

4196 
fõld
, 
M©chîCa°
<c⁄° 
FõldTy≥
&>(
m©chî
)));

4201 
	}
}

4205 
	gãm∂©e
 <
ty≥«me
 
	gCœss
,Åy≥«mê
	gFõldTy≥
,Åy≥«mê
	gFõldM©chî
>

4206 
ölöe
 
	gPﬁym‹phicM©chî
<
	göã∫Æ
::
FõldM©chî
<
Cœss
, 
	gFõldTy≥
> > 
	$Fõld
(

4207 c⁄° 
°d
::
°rög
& 
fõld_«me
, 
FõldTy≥
 
Cœss
::*
fõld
,

4208 c⁄° 
FõldM©chî
& 
m©chî
) {

4209  
	`MakePﬁym‹phicM©chî
(
öã∫Æ
::
FõldM©chî
<
Cœss
, 
FõldTy≥
>(

4210 
fõld_«me
, 
fõld
, 
M©chîCa°
<c⁄° 
FõldTy≥
&>(
m©chî
)));

4211 
	}
}

4217 
	gãm∂©e
 <
ty≥«me
 
	gCœss
,Åy≥«mê
	gPr›îtyTy≥
,Åy≥«mê
	gPr›îtyM©chî
>

4218 
ölöe
 
	gPﬁym‹phicM©chî
<
	göã∫Æ
::
Pr›îtyM©chî
<

4219 
Cœss
, 
	gPr›îtyTy≥
, 
	$Pr›îtyTy≥
 (
Cœss
::*)() const> >

4220 
	`Pr›îty
(
	$Pr›îtyTy≥
 (
Cœss
::*
¥›îty
)() const,

4221 c⁄° 
Pr›îtyM©chî
& 
m©chî
) {

4222  
	`MakePﬁym‹phicM©chî
(

4223 
öã∫Æ
::
Pr›îtyM©chî
<
Cœss
, 
Pr›îtyTy≥
,

4224 
	`Pr›îtyTy≥
 (
Cœss
::*)() const>(

4225 
¥›îty
, 
M©chîCa°
<c⁄° 
Pr›îtyTy≥
&>(
m©chî
)));

4230 
	}
}

4234 
	gãm∂©e
 <
ty≥«me
 
	gCœss
,Åy≥«mê
	gPr›îtyTy≥
,Åy≥«mê
	gPr›îtyM©chî
>

4235 
ölöe
 
	gPﬁym‹phicM©chî
<
	göã∫Æ
::
Pr›îtyM©chî
<

4236 
Cœss
, 
	gPr›îtyTy≥
, 
	$Pr›îtyTy≥
 (
Cœss
::*)() const> >

4237 
	`Pr›îty
(c⁄° 
°d
::
°rög
& 
¥›îty_«me
,

4238 
	$Pr›îtyTy≥
 (
Cœss
::*
¥›îty
)() const,

4239 c⁄° 
Pr›îtyM©chî
& 
m©chî
) {

4240  
	`MakePﬁym‹phicM©chî
(

4241 
öã∫Æ
::
Pr›îtyM©chî
<
Cœss
, 
Pr›îtyTy≥
,

4242 
	`Pr›îtyTy≥
 (
Cœss
::*)() const>(

4243 
¥›îty_«me
, 
¥›îty
, 
M©chîCa°
<c⁄° 
Pr›îtyTy≥
&>(
m©chî
)));

4244 
	}
}

4247 
	gãm∂©e
 <
ty≥«me
 
	gCœss
,Åy≥«mê
	gPr›îtyTy≥
,Åy≥«mê
	gPr›îtyM©chî
>

4248 
ölöe
 
	gPﬁym‹phicM©chî
<
	göã∫Æ
::
Pr›îtyM©chî
<

4249 
Cœss
, 
	gPr›îtyTy≥
, 
	$Pr›îtyTy≥
 (
Cœss
::*)() const &> >

4250 
	`Pr›îty
(
	$Pr›îtyTy≥
 (
Cœss
::*
¥›îty
)() const &,

4251 c⁄° 
Pr›îtyM©chî
& 
m©chî
) {

4252  
	`MakePﬁym‹phicM©chî
(

4253 
öã∫Æ
::
Pr›îtyM©chî
<
Cœss
, 
Pr›îtyTy≥
,

4254 
	`Pr›îtyTy≥
 (
Cœss
::*)() const&>(

4255 
¥›îty
, 
M©chîCa°
<c⁄° 
Pr›îtyTy≥
&>(
m©chî
)));

4256 
	}
}

4259 
	gãm∂©e
 <
ty≥«me
 
	gCœss
,Åy≥«mê
	gPr›îtyTy≥
,Åy≥«mê
	gPr›îtyM©chî
>

4260 
ölöe
 
	gPﬁym‹phicM©chî
<
	göã∫Æ
::
Pr›îtyM©chî
<

4261 
Cœss
, 
	gPr›îtyTy≥
, 
	$Pr›îtyTy≥
 (
Cœss
::*)() const &> >

4262 
	`Pr›îty
(c⁄° 
°d
::
°rög
& 
¥›îty_«me
,

4263 
	$Pr›îtyTy≥
 (
Cœss
::*
¥›îty
)() const &,

4264 c⁄° 
Pr›îtyM©chî
& 
m©chî
) {

4265  
	`MakePﬁym‹phicM©chî
(

4266 
öã∫Æ
::
Pr›îtyM©chî
<
Cœss
, 
Pr›îtyTy≥
,

4267 
	`Pr›îtyTy≥
 (
Cœss
::*)() const&>(

4268 
¥›îty_«me
, 
¥›îty
, 
M©chîCa°
<c⁄° 
Pr›îtyTy≥
&>(
m©chî
)));

4269 
	}
}

4279 
	gãm∂©e
 <
ty≥«me
 
	gCÆœbÀ
,Åy≥«mê
	gI¬îM©chî
>

4280 
	göã∫Æ
::
Resu…OfM©chî
<
CÆœbÀ
, 
	gI¬îM©chî
> 
	$Resu…Of
(

4281 
CÆœbÀ
 
ˇŒabÀ
, 
I¬îM©chî
 
m©chî
) {

4282  
öã∫Æ
::
Resu…OfM©chî
<
CÆœbÀ
, 
I¬îM©chî
>(

4283 
°d
::
	`move
(
ˇŒabÀ
), std::move(
m©chî
));

4284 
	}
}

4289 
	gãm∂©e
 <
ty≥«me
 
	gT
 = 
°d
::
°rög
>

4290 
Pﬁym‹phicM©chî
<
öã∫Æ
::
SåEquÆôyM©chî
<
°d
::
°rög
> > 
SåEq
(

4291 c⁄° 
öã∫Æ
::
SåögLike
<
T
>& 
°r
) {

4292  
MakePﬁym‹phicM©chî
(

4293 
öã∫Æ
::
SåEquÆôyM©chî
<
°d
::
°rög
>(°d::°rög(
°r
), 
åue
,Årue));

4297 
	gãm∂©e
 <
ty≥«me
 
	gT
 = 
°d
::
°rög
>

4298 
Pﬁym‹phicM©chî
<
öã∫Æ
::
SåEquÆôyM©chî
<
°d
::
°rög
> > 
SåNe
(

4299 c⁄° 
öã∫Æ
::
SåögLike
<
T
>& 
°r
) {

4300  
MakePﬁym‹phicM©chî
(

4301 
öã∫Æ
::
SåEquÆôyM©chî
<
°d
::
°rög
>(°d::°rög(
°r
), 
Ál£
, 
åue
));

4305 
	gãm∂©e
 <
ty≥«me
 
	gT
 = 
°d
::
°rög
>

4306 
Pﬁym‹phicM©chî
<
öã∫Æ
::
SåEquÆôyM©chî
<
°d
::
°rög
> > 
SåCa£Eq
(

4307 c⁄° 
öã∫Æ
::
SåögLike
<
T
>& 
°r
) {

4308  
MakePﬁym‹phicM©chî
(

4309 
öã∫Æ
::
SåEquÆôyM©chî
<
°d
::
°rög
>(°d::°rög(
°r
), 
åue
, 
Ál£
));

4313 
	gãm∂©e
 <
ty≥«me
 
	gT
 = 
°d
::
°rög
>

4314 
Pﬁym‹phicM©chî
<
öã∫Æ
::
SåEquÆôyM©chî
<
°d
::
°rög
> > 
SåCa£Ne
(

4315 c⁄° 
öã∫Æ
::
SåögLike
<
T
>& 
°r
) {

4316  
MakePﬁym‹phicM©chî
(
öã∫Æ
::
SåEquÆôyM©chî
<
°d
::
°rög
>(

4317 
°d
::
°rög
(
°r
), 
Ál£
, false));

4322 
	gãm∂©e
 <
ty≥«me
 
	gT
 = 
°d
::
°rög
>

4323 
Pﬁym‹phicM©chî
<
öã∫Æ
::
HasSub°rM©chî
<
°d
::
°rög
> > 
HasSub°r
(

4324 c⁄° 
öã∫Æ
::
SåögLike
<
T
>& 
sub°rög
) {

4325  
MakePﬁym‹phicM©chî
(

4326 
öã∫Æ
::
HasSub°rM©chî
<
°d
::
°rög
>(°d::°rög(
sub°rög
)));

4330 
	gãm∂©e
 <
ty≥«me
 
	gT
 = 
°d
::
°rög
>

4331 
Pﬁym‹phicM©chî
<
öã∫Æ
::
SèπsWôhM©chî
<
°d
::
°rög
> > 
SèπsWôh
(

4332 c⁄° 
öã∫Æ
::
SåögLike
<
T
>& 
¥efix
) {

4333  
MakePﬁym‹phicM©chî
(

4334 
öã∫Æ
::
SèπsWôhM©chî
<
°d
::
°rög
>(°d::°rög(
¥efix
)));

4338 
	gãm∂©e
 <
ty≥«me
 
	gT
 = 
°d
::
°rög
>

4339 
Pﬁym‹phicM©chî
<
öã∫Æ
::
EndsWôhM©chî
<
°d
::
°rög
> > 
EndsWôh
(

4340 c⁄° 
öã∫Æ
::
SåögLike
<
T
>& 
suffix
) {

4341  
MakePﬁym‹phicM©chî
(

4342 
öã∫Æ
::
EndsWôhM©chî
<
°d
::
°rög
>(°d::°rög(
suffix
)));

4345 #i‡
GTEST_HAS_STD_WSTRING


4349 
ölöe
 
	gPﬁym‹phicM©chî
<
	göã∫Æ
::
SåEquÆôyM©chî
<
°d
::
w°rög
> > 
	$SåEq
(

4350 c⁄° 
°d
::
w°rög
& 
°r
) {

4351  
	`MakePﬁym‹phicM©chî
(

4352 
öã∫Æ
::
SåEquÆôyM©chî
<
°d
::
w°rög
>(
°r
, 
åue
,Årue));

4353 
	}
}

4356 
ölöe
 
	gPﬁym‹phicM©chî
<
	göã∫Æ
::
SåEquÆôyM©chî
<
°d
::
w°rög
> > 
	$SåNe
(

4357 c⁄° 
°d
::
w°rög
& 
°r
) {

4358  
	`MakePﬁym‹phicM©chî
(

4359 
öã∫Æ
::
SåEquÆôyM©chî
<
°d
::
w°rög
>(
°r
, 
Ál£
, 
åue
));

4360 
	}
}

4363 
ölöe
 
	gPﬁym‹phicM©chî
<
	göã∫Æ
::
SåEquÆôyM©chî
<
°d
::
w°rög
> >

4364 
	$SåCa£Eq
(c⁄° 
°d
::
w°rög
& 
°r
) {

4365  
	`MakePﬁym‹phicM©chî
(

4366 
öã∫Æ
::
SåEquÆôyM©chî
<
°d
::
w°rög
>(
°r
, 
åue
, 
Ál£
));

4367 
	}
}

4370 
ölöe
 
	gPﬁym‹phicM©chî
<
	göã∫Æ
::
SåEquÆôyM©chî
<
°d
::
w°rög
> >

4371 
	$SåCa£Ne
(c⁄° 
°d
::
w°rög
& 
°r
) {

4372  
	`MakePﬁym‹phicM©chî
(

4373 
öã∫Æ
::
SåEquÆôyM©chî
<
°d
::
w°rög
>(
°r
, 
Ál£
, false));

4374 
	}
}

4378 
ölöe
 
	gPﬁym‹phicM©chî
<
	göã∫Æ
::
HasSub°rM©chî
<
°d
::
w°rög
> > 
	$HasSub°r
(

4379 c⁄° 
°d
::
w°rög
& 
sub°rög
) {

4380  
	`MakePﬁym‹phicM©chî
(

4381 
öã∫Æ
::
HasSub°rM©chî
<
°d
::
w°rög
>(
sub°rög
));

4382 
	}
}

4385 
ölöe
 
	gPﬁym‹phicM©chî
<
	göã∫Æ
::
SèπsWôhM©chî
<
°d
::
w°rög
> >

4386 
	$SèπsWôh
(c⁄° 
°d
::
w°rög
& 
¥efix
) {

4387  
	`MakePﬁym‹phicM©chî
(

4388 
öã∫Æ
::
SèπsWôhM©chî
<
°d
::
w°rög
>(
¥efix
));

4389 
	}
}

4392 
ölöe
 
	gPﬁym‹phicM©chî
<
	göã∫Æ
::
EndsWôhM©chî
<
°d
::
w°rög
> > 
	$EndsWôh
(

4393 c⁄° 
°d
::
w°rög
& 
suffix
) {

4394  
	`MakePﬁym‹phicM©chî
(

4395 
öã∫Æ
::
EndsWôhM©chî
<
°d
::
w°rög
>(
suffix
));

4396 
	}
}

4402 
ölöe
 
	göã∫Æ
::
Eq2M©chî
 
	$Eq
(Ë{  
öã∫Æ
::
	`Eq2M©chî
(); 
	}
}

4406 
ölöe
 
	göã∫Æ
::
Ge2M©chî
 
	$Ge
(Ë{  
öã∫Æ
::
	`Ge2M©chî
(); 
	}
}

4410 
ölöe
 
	göã∫Æ
::
Gt2M©chî
 
	$Gt
(Ë{  
öã∫Æ
::
	`Gt2M©chî
(); 
	}
}

4414 
ölöe
 
	göã∫Æ
::
Le2M©chî
 
	$Le
(Ë{  
öã∫Æ
::
	`Le2M©chî
(); 
	}
}

4418 
ölöe
 
	göã∫Æ
::
Lt2M©chî
 
	$Lt
(Ë{  
öã∫Æ
::
	`Lt2M©chî
(); 
	}
}

4422 
ölöe
 
	göã∫Æ
::
Ne2M©chî
 
	$Ne
(Ë{  
öã∫Æ
::
	`Ne2M©chî
(); 
	}
}

4426 
ölöe
 
	göã∫Æ
::
FlﬂtögEq2M©chî
<> 
	$FlﬂtEq
() {

4427  
öã∫Æ
::
FlﬂtögEq2M©chî
<>();

4428 
	}
}

4432 
ölöe
 
	göã∫Æ
::
FlﬂtögEq2M©chî
<> 
	$DoubÀEq
() {

4433  
öã∫Æ
::
FlﬂtögEq2M©chî
<>();

4434 
	}
}

4438 
ölöe
 
	göã∫Æ
::
FlﬂtögEq2M©chî
<> 
	$N™SísôiveFlﬂtEq
() {

4439  
öã∫Æ
::
FlﬂtögEq2M©chî
<>(
åue
);

4440 
	}
}

4444 
ölöe
 
	göã∫Æ
::
FlﬂtögEq2M©chî
<> 
	$N™SísôiveDoubÀEq
() {

4445  
öã∫Æ
::
FlﬂtögEq2M©chî
<>(
åue
);

4446 
	}
}

4450 
ölöe
 
	göã∫Æ
::
FlﬂtögEq2M©chî
<> 
	$FlﬂtNór
(
max_abs_îr‹
) {

4451  
öã∫Æ
::
FlﬂtögEq2M©chî
<>(
max_abs_îr‹
);

4452 
	}
}

4456 
ölöe
 
	göã∫Æ
::
FlﬂtögEq2M©chî
<> 
	$DoubÀNór
(
max_abs_îr‹
) {

4457  
öã∫Æ
::
FlﬂtögEq2M©chî
<>(
max_abs_îr‹
);

4458 
	}
}

4463 
ölöe
 
	göã∫Æ
::
FlﬂtögEq2M©chî
<> 
	$N™SísôiveFlﬂtNór
(

4464 
max_abs_îr‹
) {

4465  
öã∫Æ
::
FlﬂtögEq2M©chî
<>(
max_abs_îr‹
, 
åue
);

4466 
	}
}

4471 
ölöe
 
	göã∫Æ
::
FlﬂtögEq2M©chî
<> 
	$N™SísôiveDoubÀNór
(

4472 
max_abs_îr‹
) {

4473  
öã∫Æ
::
FlﬂtögEq2M©chî
<>(
max_abs_îr‹
, 
åue
);

4474 
	}
}

4478 
	gãm∂©e
 <
ty≥«me
 
	gI¬îM©chî
>

4479 
ölöe
 
	göã∫Æ
::
NŸM©chî
<
I¬îM©chî
> 
	$NŸ
(
I¬îM©chî
 
m
) {

4480  
öã∫Æ
::
NŸM©chî
<
I¬îM©chî
>(
m
);

4481 
	}
}

4486 
	gãm∂©e
 <
ty≥«me
 
	gPªdiˇã
>

4487 
ölöe
 
	gPﬁym‹phicM©chî
<
	göã∫Æ
::
TrulyM©chî
<
Pªdiˇã
> >

4488 
	$Truly
(
Pªdiˇã
 
¥ed
) {

4489  
	`MakePﬁym‹phicM©chî
(
öã∫Æ
::
TrulyM©chî
<
Pªdiˇã
>(
¥ed
));

4490 
	}
}

4498 
	gãm∂©e
 <
ty≥«me
 
	gSizeM©chî
>

4499 
ölöe
 
	göã∫Æ
::
SizeIsM©chî
<
SizeM©chî
>

4500 
	$SizeIs
(c⁄° 
SizeM©chî
& 
size_m©chî
) {

4501  
öã∫Æ
::
SizeIsM©chî
<
SizeM©chî
>(
size_m©chî
);

4502 
	}
}

4509 
	gãm∂©e
 <
ty≥«me
 
	gDi°™˚M©chî
>

4510 
ölöe
 
	göã∫Æ
::
BegöEndDi°™˚IsM©chî
<
Di°™˚M©chî
>

4511 
	$BegöEndDi°™˚Is
(c⁄° 
Di°™˚M©chî
& 
di°™˚_m©chî
) {

4512  
öã∫Æ
::
BegöEndDi°™˚IsM©chî
<
Di°™˚M©chî
>(
di°™˚_m©chî
);

4513 
	}
}

4519 
	gãm∂©e
 <
ty≥«me
 
	gC⁄èöî
>

4520 
ölöe
 
	gPﬁym‹phicM©chî
<
	göã∫Æ
::
C⁄èöîEqM©chî
<

4521 
ty≥«me
 
°d
::
ªmove_c⁄°
<
C⁄èöî
>::
ty≥
>>

4522 
	$C⁄èöîEq
(c⁄° 
C⁄èöî
& 
rhs
) {

4523  
	`MakePﬁym‹phicM©chî
(
öã∫Æ
::
C⁄èöîEqM©chî
<
C⁄èöî
>(
rhs
));

4524 
	}
}

4528 
	gãm∂©e
 <
ty≥«me
 
	gCom∑øt‹
,Åy≥«mê
	gC⁄èöîM©chî
>

4529 
ölöe
 
	göã∫Æ
::
WhíS‹ãdByM©chî
<
Com∑øt‹
, 
	gC⁄èöîM©chî
>

4530 
	$WhíS‹ãdBy
(c⁄° 
Com∑øt‹
& 
com∑øt‹
,

4531 c⁄° 
C⁄èöîM©chî
& 
c⁄èöî_m©chî
) {

4532  
öã∫Æ
::
WhíS‹ãdByM©chî
<
Com∑øt‹
, 
C⁄èöîM©chî
>(

4533 
com∑øt‹
, 
c⁄èöî_m©chî
);

4534 
	}
}

4538 
	gãm∂©e
 <
ty≥«me
 
	gC⁄èöîM©chî
>

4539 
ölöe
 
	göã∫Æ
::
WhíS‹ãdByM©chî
<
öã∫Æ
::
LessCom∑øt‹
, 
	gC⁄èöîM©chî
>

4540 
	$WhíS‹ãd
(c⁄° 
C⁄èöîM©chî
& 
c⁄èöî_m©chî
) {

4542 
öã∫Æ
::
WhíS‹ãdByM©chî
<öã∫Æ::
LessCom∑øt‹
, 
C⁄èöîM©chî
>(

4543 
öã∫Æ
::
	`LessCom∑øt‹
(), 
c⁄èöî_m©chî
);

4544 
	}
}

4552 
	gãm∂©e
 <
ty≥«me
 
	gTu∂eM©chî
,Åy≥«mê
	gC⁄èöî
>

4553 
ölöe
 
	göã∫Æ
::
Poötwi£M©chî
<
Tu∂eM©chî
,

4554 
ty≥«me
 
	g°d
::
ªmove_c⁄°
<
C⁄èöî
>::
ty≥
>

4555 
	$Poötwi£
(c⁄° 
Tu∂eM©chî
& 
tu∂e_m©chî
, c⁄° 
C⁄èöî
& 
rhs
) {

4556  
öã∫Æ
::
Poötwi£M©chî
<
Tu∂eM©chî
, 
C⁄èöî
>(
tu∂e_m©chî
,

4557 
rhs
);

4558 
	}
}

4562 
	gãm∂©e
 <
ty≥«me
 
	gTu∂eM©chî
,Åy≥«mê
	gT
>

4563 
ölöe
 
	göã∫Æ
::
Poötwi£M©chî
<
Tu∂eM©chî
, 
	g°d
::
ve˘‹
<
T
> > 
Poötwi£
(

4564 c⁄° 
Tu∂eM©chî
& 
tu∂e_m©chî
, 
°d
::
öôülizî_li°
<
T
> 
rhs
) {

4565  
Poötwi£
(
tu∂e_m©chî
, 
°d
::
ve˘‹
<
T
>(
rhs
));

4580 
	gãm∂©e
 <
ty≥«me
 
	gTu∂e2M©chî
,Åy≥«mê
	gRhsC⁄èöî
>

4581 
ölöe
 
	göã∫Æ
::
Un‹dîedEÀmítsAªAºayM©chî
<

4582 
ty≥«me
 
öã∫Æ
::
BoundSec⁄dM©chî
<

4583 
Tu∂e2M©chî
,

4584 
ty≥«me
 
	göã∫Æ
::
SéC⁄èöîVõw
<

4585 
ty≥«me
 
°d
::
ªmove_c⁄°
<
RhsC⁄èöî
>::
ty≥
>::ty≥::
vÆue_ty≥
>>

4586 
	$Un‹dîedPoötwi£
(c⁄° 
Tu∂e2M©chî
& 
tu∂e2_m©chî
,

4587 c⁄° 
RhsC⁄èöî
& 
rhs_c⁄èöî
) {

4590 
ty≥«me
 
	töã∫Æ
::
	tSéC⁄èöîVõw
<
	tRhsC⁄èöî
> 
	tRhsVõw
;

4591 
ty≥«me
 
	tRhsVõw
::
	tty≥
 
	tRhsSéC⁄èöî
;

4592 
ty≥«me
 
	tRhsSéC⁄èöî
::
	tvÆue_ty≥
 
	tSec⁄d
;

4593 c⁄° 
RhsSéC⁄èöî
& 
rhs_°l_c⁄èöî
 =

4594 
RhsVõw
::
	`C⁄°Re„ªn˚
(
rhs_c⁄èöî
);

4597 ::
°d
::
ve˘‹
<
öã∫Æ
::
BoundSec⁄dM©chî
<
Tu∂e2M©chî
, 
Sec⁄d
> > 
m©chîs
;

4598 
ty≥«me
 
RhsSéC⁄èöî
::
c⁄°_ôî©‹
 
ô
 = 
rhs_°l_c⁄èöî
.
	`begö
();

4599 
ô
 !
rhs_°l_c⁄èöî
.
	`íd
(); ++it) {

4600 
m©chîs
.
	`push_back
(

4601 
öã∫Æ
::
	`M©chîBödSec⁄d
(
tu∂e2_m©chî
, *
ô
));

4605  
	`Un‹dîedEÀmítsAªAºay
(
m©chîs
);

4606 
	}
}

4610 
	gãm∂©e
 <
ty≥«me
 
	gTu∂e2M©chî
,Åy≥«mê
	gT
>

4611 
ölöe
 
	göã∫Æ
::
Un‹dîedEÀmítsAªAºayM©chî
<

4612 
ty≥«me
 
öã∫Æ
::
BoundSec⁄dM©chî
<
Tu∂e2M©chî
, 
	gT
> >

4613 
Un‹dîedPoötwi£
(c⁄° 
Tu∂e2M©chî
& 
tu∂e2_m©chî
,

4614 
°d
::
öôülizî_li°
<
T
> 
rhs
) {

4615  
Un‹dîedPoötwi£
(
tu∂e2_m©chî
, 
°d
::
ve˘‹
<
T
>(
rhs
));

4637 
	gãm∂©e
 <
ty≥«me
 
	gM
>

4638 
ölöe
 
	göã∫Æ
::
C⁄èösM©chî
<
M
> 
	$C⁄èös
(
M
 
m©chî
) {

4639  
öã∫Æ
::
C⁄èösM©chî
<
M
>(
m©chî
);

4640 
	}
}

4669 
	gãm∂©e
 <
ty≥«me
 
	gIãr
>

4670 
ölöe
 
	göã∫Æ
::
Un‹dîedEÀmítsAªAºayM©chî
<

4671 
ty≥«me
 ::
°d
::
ôî©‹_åaôs
<
Iãr
>::
vÆue_ty≥
>

4672 
	$IsSu≥r£tOf
(
Iãr
 
fú°
, Iã∏
œ°
) {

4673 
ty≥«me
 ::
	t°d
::
	tôî©‹_åaôs
<
	tIãr
>::
	tvÆue_ty≥
 
	tT
;

4674  
öã∫Æ
::
Un‹dîedEÀmítsAªAºayM©chî
<
T
>(

4675 
öã∫Æ
::
Un‹dîedM©chîRequúe
::
Su≥r£t
, 
fú°
, 
œ°
);

4676 
	}
}

4678 
	gãm∂©e
 <
ty≥«me
 
	gT
>

4679 
ölöe
 
	göã∫Æ
::
Un‹dîedEÀmítsAªAºayM©chî
<
T
> 
	$IsSu≥r£tOf
(

4680 c⁄° 
T
* 
poöãr
, 
size_t
 
cou¡
) {

4681  
	`IsSu≥r£tOf
(
poöãr
,Öoöã∏+ 
cou¡
);

4682 
	}
}

4684 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
size_t
 
	gN
>

4685 
ölöe
 
	göã∫Æ
::
Un‹dîedEÀmítsAªAºayM©chî
<
T
> 
IsSu≥r£tOf
(

4686 c⁄° 
T
 (&
¨øy
)[
N
]) {

4687  
IsSu≥r£tOf
(
¨øy
, 
N
);

4690 
	gãm∂©e
 <
ty≥«me
 
	gC⁄èöî
>

4691 
ölöe
 
	göã∫Æ
::
Un‹dîedEÀmítsAªAºayM©chî
<

4692 
ty≥«me
 
C⁄èöî
::
vÆue_ty≥
>

4693 
	$IsSu≥r£tOf
(c⁄° 
C⁄èöî
& 
c⁄èöî
) {

4694  
	`IsSu≥r£tOf
(
c⁄èöî
.
	`begö
(), c⁄èöî.
	`íd
());

4695 
	}
}

4697 
	gãm∂©e
 <
ty≥«me
 
	gT
>

4698 
ölöe
 
	göã∫Æ
::
Un‹dîedEÀmítsAªAºayM©chî
<
T
> 
IsSu≥r£tOf
(

4699 ::
°d
::
öôülizî_li°
<
T
> 
xs
) {

4700  
IsSu≥r£tOf
(
xs
.
begö
(), xs.
íd
());

4726 
	gãm∂©e
 <
ty≥«me
 
	gIãr
>

4727 
ölöe
 
	göã∫Æ
::
Un‹dîedEÀmítsAªAºayM©chî
<

4728 
ty≥«me
 ::
°d
::
ôî©‹_åaôs
<
Iãr
>::
vÆue_ty≥
>

4729 
	$IsSub£tOf
(
Iãr
 
fú°
, Iã∏
œ°
) {

4730 
ty≥«me
 ::
	t°d
::
	tôî©‹_åaôs
<
	tIãr
>::
	tvÆue_ty≥
 
	tT
;

4731  
öã∫Æ
::
Un‹dîedEÀmítsAªAºayM©chî
<
T
>(

4732 
öã∫Æ
::
Un‹dîedM©chîRequúe
::
Sub£t
, 
fú°
, 
œ°
);

4733 
	}
}

4735 
	gãm∂©e
 <
ty≥«me
 
	gT
>

4736 
ölöe
 
	göã∫Æ
::
Un‹dîedEÀmítsAªAºayM©chî
<
T
> 
	$IsSub£tOf
(

4737 c⁄° 
T
* 
poöãr
, 
size_t
 
cou¡
) {

4738  
	`IsSub£tOf
(
poöãr
,Öoöã∏+ 
cou¡
);

4739 
	}
}

4741 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
size_t
 
	gN
>

4742 
ölöe
 
	göã∫Æ
::
Un‹dîedEÀmítsAªAºayM©chî
<
T
> 
IsSub£tOf
(

4743 c⁄° 
T
 (&
¨øy
)[
N
]) {

4744  
IsSub£tOf
(
¨øy
, 
N
);

4747 
	gãm∂©e
 <
ty≥«me
 
	gC⁄èöî
>

4748 
ölöe
 
	göã∫Æ
::
Un‹dîedEÀmítsAªAºayM©chî
<

4749 
ty≥«me
 
C⁄èöî
::
vÆue_ty≥
>

4750 
	$IsSub£tOf
(c⁄° 
C⁄èöî
& 
c⁄èöî
) {

4751  
	`IsSub£tOf
(
c⁄èöî
.
	`begö
(), c⁄èöî.
	`íd
());

4752 
	}
}

4754 
	gãm∂©e
 <
ty≥«me
 
	gT
>

4755 
ölöe
 
	göã∫Æ
::
Un‹dîedEÀmítsAªAºayM©chî
<
T
> 
IsSub£tOf
(

4756 ::
°d
::
öôülizî_li°
<
T
> 
xs
) {

4757  
IsSub£tOf
(
xs
.
begö
(), xs.
íd
());

4787 
	gãm∂©e
 <
ty≥«me
 
	gM
>

4788 
ölöe
 
	göã∫Æ
::
EachM©chî
<
M
> 
	$Each
(
M
 
m©chî
) {

4789  
öã∫Æ
::
EachM©chî
<
M
>(
m©chî
);

4790 
	}
}

4795 
	gãm∂©e
 <
ty≥«me
 
	gM
>

4796 
ölöe
 
	göã∫Æ
::
KeyM©chî
<
M
> 
	$Key
(
M
 
ö√r_m©chî
) {

4797  
öã∫Æ
::
KeyM©chî
<
M
>(
ö√r_m©chî
);

4798 
	}
}

4805 
	gãm∂©e
 <
ty≥«me
 
	gFú°M©chî
,Åy≥«mê
	gSec⁄dM©chî
>

4806 
ölöe
 
	göã∫Æ
::
PaúM©chî
<
Fú°M©chî
, 
	gSec⁄dM©chî
>

4807 
	$Paú
(
Fú°M©chî
 
fú°_m©chî
, 
Sec⁄dM©chî
 
£c⁄d_m©chî
) {

4808  
öã∫Æ
::
PaúM©chî
<
Fú°M©chî
, 
Sec⁄dM©chî
>(

4809 
fú°_m©chî
, 
£c⁄d_m©chî
);

4810 
	}
}

4812 
«me•a˚
 
	gno_adl
 {

4817 
	gãm∂©e
 <
	gty≥«me
... 
	gM
>

4818 
	göã∫Æ
::
FõldsAªM©chî
<
ty≥«me
 
°d
::
deˇy
<
M
>::
ty≥
...> 
FõldsAª
(

4819 
M
&&... 
m©chîs
) {

4820  
öã∫Æ
::
FõldsAªM©chî
<
ty≥«me
 
°d
::
deˇy
<
M
>::
ty≥
...>(

4821 
°d
::
f‹w¨d
<
M
>(
m©chîs
)...);

4826 
	gãm∂©e
 <
ty≥«me
 
	gI¬îM©chî
>

4827 
ölöe
 
	göã∫Æ
::
PoöãrM©chî
<
I¬îM©chî
> 
Poöãr
(

4828 c⁄° 
I¬îM©chî
& 
ö√r_m©chî
) {

4829  
öã∫Æ
::
PoöãrM©chî
<
I¬îM©chî
>(
ö√r_m©chî
);

4834 
	gãm∂©e
 <
ty≥«me
 
	gI¬îM©chî
>

4835 
ölöe
 
	göã∫Æ
::
AddªssM©chî
<
I¬îM©chî
> 
Addªss
(

4836 c⁄° 
I¬îM©chî
& 
ö√r_m©chî
) {

4837  
öã∫Æ
::
AddªssM©chî
<
I¬îM©chî
>(
ö√r_m©chî
);

4843 
	gãm∂©e
 <
ty≥«me
 
	gM
>

4844 
ölöe
 
	göã∫Æ
::
M©chîAsPªdiˇã
<
M
> 
	$M©ches
(
M
 
m©chî
) {

4845  
öã∫Æ
::
M©chîAsPªdiˇã
<
M
>(
m©chî
);

4846 
	}
}

4849 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gM
>

4850 
ölöe
 
boﬁ
 
	$VÆue
(c⁄° 
T
& 
vÆue
, 
M
 
m©chî
) {

4851  
ã°ög
::
	`M©ches
(
m©chî
)(
vÆue
);

4852 
	}
}

4856 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gM
>

4857 
ölöe
 
boﬁ
 
	$Ex∂aöM©chResu…
(

4858 
M
 
m©chî
, c⁄° 
T
& 
vÆue
, 
M©chResu…Li°íî
* 
li°íî
) {

4859  
Sa„M©chîCa°
<c⁄° 
T
&>(
m©chî
).
	`M©chAndEx∂aö
(
vÆue
, 
li°íî
);

4860 
	}
}

4872 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gM
>

4873 
	g°d
::
°rög
 
	$Des¸ibeM©chî
(c⁄° 
M
& 
m©chî
, 
boﬁ
 
√g©i⁄
 = 
Ál£
) {

4874 ::
°d
::
°rög°ªam
 
ss
;

4875 
M©chî
<
T
> 
m⁄om‹phic_m©chî
 = 
Sa„M©chîCa°
<T>(
m©chî
);

4876 i‡(
√g©i⁄
) {

4877 
m⁄om‹phic_m©chî
.
	`Des¸ibeNeg©i⁄To
(&
ss
);

4879 
m⁄om‹phic_m©chî
.
	`Des¸ibeTo
(&
ss
);

4881  
ss
.
	`°r
();

4882 
	}
}

4884 
	gãm∂©e
 <
	gty≥«me
... 
	gArgs
>

4885 
	göã∫Æ
::
EÀmítsAªM©chî
<

4886 
°d
::
tu∂e
<
ty≥«me
 std::
deˇy
<c⁄° 
Args
&>::
ty≥
...>>

4887 
	$EÀmítsAª
(c⁄° 
Args
&... 
m©chîs
) {

4888  
öã∫Æ
::
EÀmítsAªM©chî
<

4889 
°d
::
tu∂e
<
ty≥«me
 std::
deˇy
<c⁄° 
Args
&>::
ty≥
...>>(

4890 
°d
::
	`make_tu∂e
(
m©chîs
...));

4891 
	}
}

4893 
	gãm∂©e
 <
	gty≥«me
... 
	gArgs
>

4894 
	göã∫Æ
::
Un‹dîedEÀmítsAªM©chî
<

4895 
°d
::
tu∂e
<
ty≥«me
 std::
deˇy
<c⁄° 
Args
&>::
ty≥
...>>

4896 
	$Un‹dîedEÀmítsAª
(c⁄° 
Args
&... 
m©chîs
) {

4897  
öã∫Æ
::
Un‹dîedEÀmítsAªM©chî
<

4898 
°d
::
tu∂e
<
ty≥«me
 std::
deˇy
<c⁄° 
Args
&>::
ty≥
...>>(

4899 
°d
::
	`make_tu∂e
(
m©chîs
...));

4900 
	}
}

4903 
	gãm∂©e
 <
	gty≥«me
... 
	gArgs
>

4904 
	göã∫Æ
::
AŒOfM©chî
<
ty≥«me
 
°d
::
deˇy
<c⁄° 
Args
&>::
ty≥
...> 
	$AŒOf
(

4905 c⁄° 
Args
&... 
m©chîs
) {

4906  
öã∫Æ
::
AŒOfM©chî
<
ty≥«me
 
°d
::
deˇy
<c⁄° 
Args
&>::
ty≥
...>(

4907 
m©chîs
...);

4908 
	}
}

4910 
	gãm∂©e
 <
	gty≥«me
... 
	gArgs
>

4911 
	göã∫Æ
::
AnyOfM©chî
<
ty≥«me
 
°d
::
deˇy
<c⁄° 
Args
&>::
ty≥
...> 
	$AnyOf
(

4912 c⁄° 
Args
&... 
m©chîs
) {

4913  
öã∫Æ
::
AnyOfM©chî
<
ty≥«me
 
°d
::
deˇy
<c⁄° 
Args
&>::
ty≥
...>(

4914 
m©chîs
...);

4915 
	}
}

4939 
	gãm∂©e
 <
ty≥«me
 
	gIãr
>

4940 
ölöe
 
	göã∫Æ
::
AnyOfAºayM©chî
<

4941 
ty≥«me
 ::
°d
::
ôî©‹_åaôs
<
Iãr
>::
vÆue_ty≥
>

4942 
	$AnyOfAºay
(
Iãr
 
fú°
, Iã∏
œ°
) {

4943  
öã∫Æ
::
AnyOfAºayM©chî
<

4944 
ty≥«me
 ::
°d
::
ôî©‹_åaôs
<
Iãr
>::
vÆue_ty≥
>(
fú°
, 
œ°
);

4945 
	}
}

4947 
	gãm∂©e
 <
ty≥«me
 
	gIãr
>

4948 
ölöe
 
	göã∫Æ
::
AŒOfAºayM©chî
<

4949 
ty≥«me
 ::
°d
::
ôî©‹_åaôs
<
Iãr
>::
vÆue_ty≥
>

4950 
	$AŒOfAºay
(
Iãr
 
fú°
, Iã∏
œ°
) {

4951  
öã∫Æ
::
AŒOfAºayM©chî
<

4952 
ty≥«me
 ::
°d
::
ôî©‹_åaôs
<
Iãr
>::
vÆue_ty≥
>(
fú°
, 
œ°
);

4953 
	}
}

4955 
	gãm∂©e
 <
ty≥«me
 
	gT
>

4956 
ölöe
 
	göã∫Æ
::
AnyOfAºayM©chî
<
T
> 
	$AnyOfAºay
(c⁄° 
T
* 
±r
, 
size_t
 
cou¡
) {

4957  
	`AnyOfAºay
(
±r
,Öå + 
cou¡
);

4958 
	}
}

4960 
	gãm∂©e
 <
ty≥«me
 
	gT
>

4961 
ölöe
 
	göã∫Æ
::
AŒOfAºayM©chî
<
T
> 
	$AŒOfAºay
(c⁄° 
T
* 
±r
, 
size_t
 
cou¡
) {

4962  
	`AŒOfAºay
(
±r
,Öå + 
cou¡
);

4963 
	}
}

4965 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
size_t
 
	gN
>

4966 
ölöe
 
	göã∫Æ
::
AnyOfAºayM©chî
<
T
> 
AnyOfAºay
(c⁄° T (&
¨øy
)[
N
]) {

4967  
AnyOfAºay
(
¨øy
, 
N
);

4970 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
size_t
 
	gN
>

4971 
ölöe
 
	göã∫Æ
::
AŒOfAºayM©chî
<
T
> 
AŒOfAºay
(c⁄° T (&
¨øy
)[
N
]) {

4972  
AŒOfAºay
(
¨øy
, 
N
);

4975 
	gãm∂©e
 <
ty≥«me
 
	gC⁄èöî
>

4976 
ölöe
 
	göã∫Æ
::
AnyOfAºayM©chî
<
ty≥«me
 
C⁄èöî
::
vÆue_ty≥
> 
	$AnyOfAºay
(

4977 c⁄° 
C⁄èöî
& 
c⁄èöî
) {

4978  
	`AnyOfAºay
(
c⁄èöî
.
	`begö
(), c⁄èöî.
	`íd
());

4979 
	}
}

4981 
	gãm∂©e
 <
ty≥«me
 
	gC⁄èöî
>

4982 
ölöe
 
	göã∫Æ
::
AŒOfAºayM©chî
<
ty≥«me
 
C⁄èöî
::
vÆue_ty≥
> 
	$AŒOfAºay
(

4983 c⁄° 
C⁄èöî
& 
c⁄èöî
) {

4984  
	`AŒOfAºay
(
c⁄èöî
.
	`begö
(), c⁄èöî.
	`íd
());

4985 
	}
}

4987 
	gãm∂©e
 <
ty≥«me
 
	gT
>

4988 
ölöe
 
	göã∫Æ
::
AnyOfAºayM©chî
<
T
> 
AnyOfAºay
(

4989 ::
°d
::
öôülizî_li°
<
T
> 
xs
) {

4990  
AnyOfAºay
(
xs
.
begö
(), xs.
íd
());

4993 
	gãm∂©e
 <
ty≥«me
 
	gT
>

4994 
ölöe
 
	göã∫Æ
::
AŒOfAºayM©chî
<
T
> 
AŒOfAºay
(

4995 ::
°d
::
öôülizî_li°
<
T
> 
xs
) {

4996  
AŒOfAºay
(
xs
.
begö
(), xs.
íd
());

5002 
	gãm∂©e
 <
	gsize_t
... 
	gk
, 
ty≥«me
 
	gI¬îM©chî
>

5003 
	göã∫Æ
::
ArgsM©chî
<
ty≥«me
 
°d
::
deˇy
<
I¬îM©chî
>::
ty≥
, 
	gk
...> 
	$Args
(

5004 
I¬îM©chî
&& 
m©chî
) {

5005  
öã∫Æ
::
ArgsM©chî
<
ty≥«me
 
°d
::
deˇy
<
I¬îM©chî
>::
ty≥
, 
k
...>(

5006 
°d
::
f‹w¨d
<
I¬îM©chî
>(
m©chî
));

5007 
	}
}

5016 
	gãm∂©e
 <
ty≥«me
 
	gI¬îM©chî
>

5017 
ölöe
 
I¬îM©chî
 
	$AŒArgs
(c⁄° 
I¬îM©chî
& 
m©chî
Ë{  m©chî; 
	}
}

5027 
	gãm∂©e
 <
ty≥«me
 
	gVÆueM©chî
>

5028 
ölöe
 
	göã∫Æ
::
O±i⁄ÆM©chî
<
VÆueM©chî
> 
	$O±i⁄Æ
(

5029 c⁄° 
VÆueM©chî
& 
vÆue_m©chî
) {

5030  
öã∫Æ
::
O±i⁄ÆM©chî
<
VÆueM©chî
>(
vÆue_m©chî
);

5031 
	}
}

5034 
	gãm∂©e
 <
ty≥«me
 
	gT
>

5035 
	gPﬁym‹phicM©chî
<
	göã∫Æ
::
™y_ˇ°_m©chî
::
AnyCa°M©chî
<
T
> > 
AnyWôh
(

5036 c⁄° 
M©chî
<c⁄° 
T
&>& 
m©chî
) {

5037  
MakePﬁym‹phicM©chî
(

5038 
öã∫Æ
::
™y_ˇ°_m©chî
::
AnyCa°M©chî
<
T
>(
m©chî
));

5045 
	gãm∂©e
 <
ty≥«me
 
	gT
>

5046 
	gPﬁym‹phicM©chî
<
	göã∫Æ
::
v¨ü¡_m©chî
::
V¨ü¡M©chî
<
T
> > 
V¨ü¡Wôh
(

5047 c⁄° 
M©chî
<c⁄° 
T
&>& 
m©chî
) {

5048  
MakePﬁym‹phicM©chî
(

5049 
öã∫Æ
::
v¨ü¡_m©chî
::
V¨ü¡M©chî
<
T
>(
m©chî
));

5052 #i‡
GTEST_HAS_EXCEPTIONS


5056 
«me•a˚
 
	göã∫Æ
 {

5058 ˛as†
	cWôhWh©M©chîIm∂
 {

5059 
	gpublic
:

5060 
WôhWh©M©chîIm∂
(
M©chî
<
°d
::
°rög
> 
m©chî
)

5061 : 
m©chî_
(
°d
::
move
(
m©chî
)) {}

5063 
Des¸ibeTo
(
°d
::
o°ªam
* 
os
) const {

5064 *
os
 << "contains .what()Åhat ";

5065 
	gm©chî_
.
Des¸ibeTo
(
os
);

5068 
Des¸ibeNeg©i⁄To
(
°d
::
o°ªam
* 
os
) const {

5069 *
os
 << "contains .what()Åhat doesÇot ";

5070 
	gm©chî_
.
Des¸ibeTo
(
os
);

5073 
	gãm∂©e
 <
ty≥«me
 
	gEº
>

5074 
boﬁ
 
M©chAndEx∂aö
(c⁄° 
Eº
& 
îr
, 
M©chResu…Li°íî
* 
li°íî
) const {

5075 *
	gli°íî
 << "which contains .what()Åhat ";

5076  
	gm©chî_
.
M©chAndEx∂aö
(
îr
.
wh©
(), 
li°íî
);

5079 
	g¥iv©e
:

5080 c⁄° 
M©chî
<
°d
::
°rög
> 
m©chî_
;

5083 
ölöe
 
	gPﬁym‹phicM©chî
<
	gWôhWh©M©chîIm∂
> 
WôhWh©
(

5084 
M©chî
<
°d
::
°rög
> 
m
) {

5085  
MakePﬁym‹phicM©chî
(
WôhWh©M©chîIm∂
(
°d
::
move
(
m
)));

5088 
	gãm∂©e
 <
ty≥«me
 
	gEº
>

5089 ˛as†
	cEx˚±i⁄M©chîIm∂
 {

5090 ˛as†
	cNevîThrown
 {

5091 
	gpublic
:

5092 c⁄° * 
wh©
(Ëc⁄° 
n€x˚±
 {

5118 
usög
 
	gDeÁu…Ex˚±i⁄Ty≥
 = 
ty≥«me
 
°d
::
c⁄dôi⁄Æ
<

5119 
°d
::
is_ßme
<
ty≥«me
 std::
ªmove_cv
<

5120 
ty≥«me
 
°d
::
ªmove_ª„ªn˚
<
Eº
>::
ty≥
>::type,

5121 
	g°d
::
ex˚±i⁄
>::
vÆue
,

5122 c⁄° 
	gNevîThrown
&, c⁄° 
	g°d
::
ex˚±i⁄
&>::
ty≥
;

5124 
	gpublic
:

5125 
Ex˚±i⁄M©chîIm∂
(
M©chî
<c⁄° 
Eº
&> 
m©chî
)

5126 : 
m©chî_
(
°d
::
move
(
m©chî
)) {}

5128 
Des¸ibeTo
(
°d
::
o°ªam
* 
os
) const {

5129 *
os
 << "throw†™Éx˚±i⁄ which i†®" << 
GëTy≥Name
<
Eº
>();

5130 *
	gos
 << " which ";

5131 
	gm©chî_
.
Des¸ibeTo
(
os
);

5134 
Des¸ibeNeg©i⁄To
(
°d
::
o°ªam
* 
os
) const {

5135 *
os
 << "throw†™Éx˚±i⁄ which i†nŸá " << 
GëTy≥Name
<
Eº
>();

5136 *
	gos
 << " which ";

5137 
	gm©chî_
.
Des¸ibeNeg©i⁄To
(
os
);

5140 
	gãm∂©e
 <
ty≥«me
 
	gT
>

5141 
boﬁ
 
M©chAndEx∂aö
(
T
&& 
x
, 
M©chResu…Li°íî
* 
li°íî
) const {

5142 
	gåy
 {

5143 ()(
	g°d
::
f‹w¨d
<
T
>(
x
)());

5144 } 
ˇtch
 (c⁄° 
Eº
& 
îr
) {

5145 *
	gli°íî
 << "throw†™Éx˚±i⁄ which i†®" << 
	gGëTy≥Name
<
	gEº
>();

5146 *
	gli°íî
 << " ";

5147  
	gm©chî_
.
M©chAndEx∂aö
(
îr
, 
li°íî
);

5148 } 
ˇtch
 (
DeÁu…Ex˚±i⁄Ty≥
 
îr
) {

5149 #i‡
GTEST_HAS_RTTI


5150 *
	gli°íî
 << "throw†™Éx˚±i⁄ o‡ty≥ " << 
GëTy≥Name
(
ty≥id
(
îr
));

5151 *
	gli°íî
 << " ";

5153 *
	gli°íî
 << "throwsán std::exception-derivedÅype ";

5155 *
	gli°íî
 << "wôh des¸ùti⁄ \"" << 
	gîr
.
wh©
() << "\"";

5156  
	gÁl£
;

5157 } 
ˇtch
 (...) {

5158 *
	gli°íî
 << "throwsánÉxception ofán unknownÅype";

5159  
	gÁl£
;

5162 *
	gli°íî
 << "doesÇotÅhrowányÉxception";

5163  
	gÁl£
;

5166 
	g¥iv©e
:

5167 c⁄° 
M©chî
<c⁄° 
Eº
&> 
m©chî_
;

5194 
	gãm∂©e
 <
ty≥«me
 
	gEº
>

5195 
	gPﬁym‹phicM©chî
<
	göã∫Æ
::
Ex˚±i⁄M©chîIm∂
<
Eº
>> 
	$Throws
() {

5196  
	`MakePﬁym‹phicM©chî
(

5197 
öã∫Æ
::
Ex˚±i⁄M©chîIm∂
<
Eº
>(
A
<const Err&>()));

5198 
	}
}

5200 
	gãm∂©e
 <
ty≥«me
 
	gEº
,Åy≥«mê
	gEx˚±i⁄M©chî
>

5201 
	gPﬁym‹phicM©chî
<
	göã∫Æ
::
Ex˚±i⁄M©chîIm∂
<
Eº
>> 
	$Throws
(

5202 c⁄° 
Ex˚±i⁄M©chî
& 
ex˚±i⁄_m©chî
) {

5206  
	`MakePﬁym‹phicM©chî
(
öã∫Æ
::
Ex˚±i⁄M©chîIm∂
<
Eº
>(

5207 
Sa„M©chîCa°
<c⁄° 
Eº
&>(
ex˚±i⁄_m©chî
)));

5208 
	}
}

5210 
	gãm∂©e
 <
ty≥«me
 
	gEº
,Åy≥«mê
	gMesßgeM©chî
>

5211 
	gPﬁym‹phicM©chî
<
	göã∫Æ
::
Ex˚±i⁄M©chîIm∂
<
Eº
>> 
	$ThrowsMesßge
(

5212 
MesßgeM©chî
&& 
mesßge_m©chî
) {

5213 
	`°©ic_as£π
(
°d
::
is_ba£_of
<°d::
ex˚±i⁄
, 
Eº
>::
vÆue
,

5215  
Throws
<
Eº
>(
öã∫Æ
::
	`WôhWh©
(

5216 
M©chîCa°
<
°d
::
°rög
>(°d::
f‹w¨d
<
MesßgeM©chî
>(
mesßge_m©chî
))));

5217 
	}
}

5225 
	#ASSERT_THAT
(
vÆue
, 
m©chî
Ë
	`ASSERT_PRED_FORMAT1
(\

5226 ::
ã°ög
::
öã∫Æ
::
	`MakePªdiˇãF‹m©ãrFromM©chî
(
m©chî
), 
vÆue
)

	)

5227 
	#EXPECT_THAT
(
vÆue
, 
m©chî
Ë
	`EXPECT_PRED_FORMAT1
(\

5228 ::
ã°ög
::
öã∫Æ
::
	`MakePªdiˇãF‹m©ãrFromM©chî
(
m©chî
), 
vÆue
)

	)

5231 
	#MATCHER
(
«me
, 
des¸ùti⁄
) \

5232 
˛ass
 
«me
##
M©chî
 \

5233 : 
public
 ::
ã°ög
::
öã∫Æ
::
M©chîBa£Im∂
<
«me
##
M©chî
> { \

5234 
public
: \

5235 
ãm∂©e
 <
ty≥«me
 
¨g_ty≥
> \

5236 
˛ass
 
gmock_Im∂
 : 
public
 ::
ã°ög
::
M©chîI¡îÁ˚
<c⁄° 
¨g_ty≥
&> { \

5237 
public
: \

5238 
	`gmock_Im∂
() {} \

5239 
boﬁ
 
	`M©chAndEx∂aö
( \

5240 c⁄° 
¨g_ty≥
& 
¨g
, \

5241 ::
ã°ög
::
M©chResu…Li°íî
* 
ªsu…_li°íî
Ëc⁄° 
ovîride
; \

5242 
	`Des¸ibeTo
(::
°d
::
o°ªam
* 
gmock_os
Ëc⁄° 
ovîride
 { \

5243 *
gmock_os
 << 
	`F‹m©Des¸ùti⁄
(
Ál£
); \

5245 
	`Des¸ibeNeg©i⁄To
(::
°d
::
o°ªam
* 
gmock_os
Ëc⁄° 
ovîride
 { \

5246 *
gmock_os
 << 
	`F‹m©Des¸ùti⁄
(
åue
); \

5249 
¥iv©e
: \

5250 ::
°d
::
°rög
 
	`F‹m©Des¸ùti⁄
(
boﬁ
 
√g©i⁄
) const { \

5251 ::
°d
::
°rög
 
gmock_des¸ùti⁄
 = (
des¸ùti⁄
); \

5252 i‡(!
gmock_des¸ùti⁄
.
	`em±y
()) { \

5253  
gmock_des¸ùti⁄
; \

5255  ::
ã°ög
::
öã∫Æ
::
	`F‹m©M©chîDes¸ùti⁄
(
√g©i⁄
, #name, \

5260 
GTEST_ATTRIBUTE_UNUSED_
 
ölöe
 
«me
##
M©chî
 
	$«me
(Ë{  {}; 
	}
} \

5261 
ãm∂©e
 <
ty≥«me
 
¨g_ty≥
> \

5262 
boﬁ
 
«me
##
M©chî
::
gmock_Im∂
<
¨g_ty≥
>::
	`M©chAndEx∂aö
( \

5263 c⁄° 
¨g_ty≥
& 
¨g
, \

5264 ::
ã°ög
::
M©chResu…Li°íî
* 
ªsu…_li°íî
 
GTEST_ATTRIBUTE_UNUSED_
) \

5265 c⁄°

	)

5267 
	#MATCHER_P
(
«me
, 
p0
, 
des¸ùti⁄
) \

5268 
	`GMOCK_INTERNAL_MATCHER
(
«me
,Çame##
M©chîP
, 
des¸ùti⁄
, (
p0
))

	)

5269 
	#MATCHER_P2
(
«me
, 
p0
, 
p1
, 
des¸ùti⁄
) \

5270 
	`GMOCK_INTERNAL_MATCHER
(
«me
,Çame##
M©chîP2
, 
des¸ùti⁄
, (
p0
, 
p1
))

	)

5271 
	#MATCHER_P3
(
«me
, 
p0
, 
p1
, 
p2
, 
des¸ùti⁄
) \

5272 
	`GMOCK_INTERNAL_MATCHER
(
«me
,Çame##
M©chîP3
, 
des¸ùti⁄
, (
p0
, 
p1
, 
p2
))

	)

5273 
	#MATCHER_P4
(
«me
, 
p0
, 
p1
, 
p2
, 
p3
, 
des¸ùti⁄
) \

5274 
	`GMOCK_INTERNAL_MATCHER
(
«me
,Çame##
M©chîP4
, 
des¸ùti⁄
, (
p0
, 
p1
, 
p2
, 
p3
))

	)

5275 
	#MATCHER_P5
(
«me
, 
p0
, 
p1
, 
p2
, 
p3
, 
p4
, 
des¸ùti⁄
) \

5276 
	`GMOCK_INTERNAL_MATCHER
(
«me
,Çame##
M©chîP5
, 
des¸ùti⁄
, \

5277 (
p0
, 
p1
, 
p2
, 
p3
, 
p4
))

	)

5278 
	#MATCHER_P6
(
«me
, 
p0
, 
p1
, 
p2
, 
p3
, 
p4
, 
p5
, 
des¸ùti⁄
) \

5279 
	`GMOCK_INTERNAL_MATCHER
(
«me
,Çame##
M©chîP6
, 
des¸ùti⁄
, \

5280 (
p0
, 
p1
, 
p2
, 
p3
, 
p4
, 
p5
))

	)

5281 
	#MATCHER_P7
(
«me
, 
p0
, 
p1
, 
p2
, 
p3
, 
p4
, 
p5
, 
p6
, 
des¸ùti⁄
) \

5282 
	`GMOCK_INTERNAL_MATCHER
(
«me
,Çame##
M©chîP7
, 
des¸ùti⁄
, \

5283 (
p0
, 
p1
, 
p2
, 
p3
, 
p4
, 
p5
, 
p6
))

	)

5284 
	#MATCHER_P8
(
«me
, 
p0
, 
p1
, 
p2
, 
p3
, 
p4
, 
p5
, 
p6
, 
p7
, 
des¸ùti⁄
) \

5285 
	`GMOCK_INTERNAL_MATCHER
(
«me
,Çame##
M©chîP8
, 
des¸ùti⁄
, \

5286 (
p0
, 
p1
, 
p2
, 
p3
, 
p4
, 
p5
, 
p6
, 
p7
))

	)

5287 
	#MATCHER_P9
(
«me
, 
p0
, 
p1
, 
p2
, 
p3
, 
p4
, 
p5
, 
p6
, 
p7
, 
p8
, 
des¸ùti⁄
) \

5288 
	`GMOCK_INTERNAL_MATCHER
(
«me
,Çame##
M©chîP9
, 
des¸ùti⁄
, \

5289 (
p0
, 
p1
, 
p2
, 
p3
, 
p4
, 
p5
, 
p6
, 
p7
, 
p8
))

	)

5290 
	#MATCHER_P10
(
«me
, 
p0
, 
p1
, 
p2
, 
p3
, 
p4
, 
p5
, 
p6
, 
p7
, 
p8
, 
p9
, 
des¸ùti⁄
) \

5291 
	`GMOCK_INTERNAL_MATCHER
(
«me
,Çame##
M©chîP10
, 
des¸ùti⁄
, \

5292 (
p0
, 
p1
, 
p2
, 
p3
, 
p4
, 
p5
, 
p6
, 
p7
, 
p8
, 
p9
))

	)

5294 
	#GMOCK_INTERNAL_MATCHER
(
«me
, 
fuŒ_«me
, 
des¸ùti⁄
, 
¨gs
) \

5295 
ãm∂©e
 <
	`GMOCK_INTERNAL_MATCHER_TEMPLATE_PARAMS
(
¨gs
)> \

5296 
˛ass
 
fuŒ_«me
 : 
public
 ::
ã°ög
::
öã∫Æ
::
M©chîBa£Im∂
< \

5297 
fuŒ_«me
<
	`GMOCK_INTERNAL_MATCHER_TYPE_PARAMS
(
¨gs
)>> { \

5298 
public
: \

5299 
usög
 
fuŒ_«me
::
M©chîBa£Im∂
::MatcherBaseImpl; \

5300 
ãm∂©e
 <
ty≥«me
 
¨g_ty≥
> \

5301 
˛ass
 
gmock_Im∂
 : 
public
 ::
ã°ög
::
M©chîI¡îÁ˚
<c⁄° 
¨g_ty≥
&> { \

5302 
public
: \

5303 
ex∂icô
 
	`gmock_Im∂
(
	`GMOCK_INTERNAL_MATCHER_FUNCTION_ARGS
(
¨gs
)) \

5304 : 
	`GMOCK_INTERNAL_MATCHER_FORWARD_ARGS
(
¨gs
) {} \

5305 
boﬁ
 
	`M©chAndEx∂aö
( \

5306 c⁄° 
¨g_ty≥
& 
¨g
, \

5307 ::
ã°ög
::
M©chResu…Li°íî
* 
ªsu…_li°íî
Ëc⁄° 
ovîride
; \

5308 
	`Des¸ibeTo
(::
°d
::
o°ªam
* 
gmock_os
Ëc⁄° 
ovîride
 { \

5309 *
gmock_os
 << 
	`F‹m©Des¸ùti⁄
(
Ál£
); \

5311 
	`Des¸ibeNeg©i⁄To
(::
°d
::
o°ªam
* 
gmock_os
Ëc⁄° 
ovîride
 { \

5312 *
gmock_os
 << 
	`F‹m©Des¸ùti⁄
(
åue
); \

5314 
	`GMOCK_INTERNAL_MATCHER_MEMBERS
(
¨gs
) \

5316 
¥iv©e
: \

5317 ::
°d
::
°rög
 
	`F‹m©Des¸ùti⁄
(
boﬁ
 
√g©i⁄
) const { \

5318 ::
°d
::
°rög
 
gmock_des¸ùti⁄
 = (
des¸ùti⁄
); \

5319 i‡(!
gmock_des¸ùti⁄
.
	`em±y
()) { \

5320  
gmock_des¸ùti⁄
; \

5322  ::
ã°ög
::
öã∫Æ
::
	`F‹m©M©chîDes¸ùti⁄
( \

5323 
√g©i⁄
, #name, \

5324 ::
ã°ög
::
öã∫Æ
::
	`UnivîßlTî£PrötTu∂eFõldsToSåögs
( \

5325 ::
°d
::
tu∂e
<
	`GMOCK_INTERNAL_MATCHER_TYPE_PARAMS
(
¨gs
)>( \

5326 
	`GMOCK_INTERNAL_MATCHER_MEMBERS_USAGE
(
¨gs
)))); \

5330 
ãm∂©e
 <
	`GMOCK_INTERNAL_MATCHER_TEMPLATE_PARAMS
(
¨gs
)> \

5331 
ölöe
 
fuŒ_«me
<
	`GMOCK_INTERNAL_MATCHER_TYPE_PARAMS
(
¨gs
)> 
	`«me
( \

5332 
	$GMOCK_INTERNAL_MATCHER_FUNCTION_ARGS
(
¨gs
)) { \

5333  
fuŒ_«me
<
	`GMOCK_INTERNAL_MATCHER_TYPE_PARAMS
(
¨gs
)>( \

5334 
	`GMOCK_INTERNAL_MATCHER_ARGS_USAGE
(
¨gs
)); \

5335 
	}
} \

5336 
ãm∂©e
 <
	`GMOCK_INTERNAL_MATCHER_TEMPLATE_PARAMS
(
¨gs
)> \

5337 
ãm∂©e
 <
ty≥«me
 
¨g_ty≥
> \

5338 
boﬁ
 
fuŒ_«me
<
	`GMOCK_INTERNAL_MATCHER_TYPE_PARAMS
(
¨gs
)>::
gmock_Im∂
< \

5339 
¨g_ty≥
>::
	`M©chAndEx∂aö
(c⁄°árg_ty≥& 
¨g
, \

5340 ::
ã°ög
::
M©chResu…Li°íî
* \

5341 
ªsu…_li°íî
 
GTEST_ATTRIBUTE_UNUSED_
) \

5342 c⁄°

	)

5344 
	#GMOCK_INTERNAL_MATCHER_TEMPLATE_PARAMS
(
¨gs
) \

5345 
	`GMOCK_PP_TAIL
( \

5346 
	$GMOCK_PP_FOR_EACH
(
GMOCK_INTERNAL_MATCHER_TEMPLATE_PARAM
, , 
¨gs
))

	)

5347 
	#GMOCK_INTERNAL_MATCHER_TEMPLATE_PARAM
(
i_unu£d
, 
d©a_unu£d
, 
¨g
) \

5348 , 
ty≥«me
 
¨g
##
_ty≥


	)

5350 
	#GMOCK_INTERNAL_MATCHER_TYPE_PARAMS
(
¨gs
) \

5351 
	`GMOCK_PP_TAIL
(
	$GMOCK_PP_FOR_EACH
(
GMOCK_INTERNAL_MATCHER_TYPE_PARAM
, , 
¨gs
))

	)

5352 
	#GMOCK_INTERNAL_MATCHER_TYPE_PARAM
(
i_unu£d
, 
d©a_unu£d
, 
¨g
) \

5353 , 
¨g
##
_ty≥


	)

5355 
	#GMOCK_INTERNAL_MATCHER_FUNCTION_ARGS
(
¨gs
) \

5356 
	`GMOCK_PP_TAIL
(
dummy_fú°
 
	`GMOCK_PP_FOR_EACH
( \

5357 
GMOCK_INTERNAL_MATCHER_FUNCTION_ARG
, , 
¨gs
))

	)

5358 
	#GMOCK_INTERNAL_MATCHER_FUNCTION_ARG
(
i
, 
d©a_unu£d
, 
¨g
) \

5359 , 
¨g
##
_ty≥
 
gmock_p
##
i


	)

5361 
	#GMOCK_INTERNAL_MATCHER_FORWARD_ARGS
(
¨gs
) \

5362 
	`GMOCK_PP_TAIL
(
	$GMOCK_PP_FOR_EACH
(
GMOCK_INTERNAL_MATCHER_FORWARD_ARG
, , 
¨gs
))

	)

5363 
	#GMOCK_INTERNAL_MATCHER_FORWARD_ARG
(
i
, 
d©a_unu£d
, 
¨g
) \

5364 , 
	`¨g
(::
°d
::
f‹w¨d
<
¨g
##
_ty≥
>(
gmock_p
##
i
))

	)

5366 
	#GMOCK_INTERNAL_MATCHER_MEMBERS
(
¨gs
) \

5367 
	$GMOCK_PP_FOR_EACH
(
GMOCK_INTERNAL_MATCHER_MEMBER
, , 
¨gs
)

	)

5368 
	#GMOCK_INTERNAL_MATCHER_MEMBER
(
i_unu£d
, 
d©a_unu£d
, 
¨g
) \

5369 c⁄° 
¨g
##
_ty≥
árg;

	)

5371 
	#GMOCK_INTERNAL_MATCHER_MEMBERS_USAGE
(
¨gs
) \

5372 
	`GMOCK_PP_TAIL
(
	$GMOCK_PP_FOR_EACH
(
GMOCK_INTERNAL_MATCHER_MEMBER_USAGE
, , 
¨gs
))

	)

5373 
	#GMOCK_INTERNAL_MATCHER_MEMBER_USAGE
(
i_unu£d
, 
d©a_unu£d
, 
¨g
Ë, 
	)
arg

5375 
	#GMOCK_INTERNAL_MATCHER_ARGS_USAGE
(
¨gs
) \

5376 
	`GMOCK_PP_TAIL
(
	$GMOCK_PP_FOR_EACH
(
GMOCK_INTERNAL_MATCHER_ARG_USAGE
, , 
¨gs
))

	)

5377 
	#GMOCK_INTERNAL_MATCHER_ARG_USAGE
(
i
, 
d©a_unu£d
, 
¨g_unu£d
) \

5378 , 
gmock_p
##
i


	)

5381 
usög
 
«me•a˚
 
no_adl
;

5383 
	}
}

5385 
	$GTEST_DISABLE_MSC_WARNINGS_POP_
()

5390 
	~"gmock/öã∫Æ/cu°om/gmock-m©chîs.h
"

	@/usr/include/gmock/gmock-more-actions.h

37 #i‚de‡
GOOGLEMOCK_INCLUDE_GMOCK_GMOCK_MORE_ACTIONS_H_


38 
	#GOOGLEMOCK_INCLUDE_GMOCK_GMOCK_MORE_ACTIONS_H_


	)

40 
	~<mem‹y
>

41 
	~<utûôy
>

43 
	~"gmock/gmock-a˘i⁄s.h
"

44 
	~"gmock/öã∫Æ/gmock-p‹t.h
"

47 
	~"gmock/öã∫Æ/cu°om/gmock-gíî©ed-a˘i⁄s.h
"

131 
	#GMOCK_INTERNAL_DECL_HAS_1_TEMPLATE_PARAMS
(
köd0
, 
«me0
Ëköd0 
	)
name0

132 
	#GMOCK_INTERNAL_DECL_HAS_2_TEMPLATE_PARAMS
(
köd0
, 
«me0
, 
köd1
, \

133 
«me1
Ë
köd0
 
«me0
, 
köd1
 
	)
name1

134 
	#GMOCK_INTERNAL_DECL_HAS_3_TEMPLATE_PARAMS
(
köd0
, 
«me0
, 
köd1
, 
«me1
, \

135 
köd2
, 
«me2
Ë
köd0
 
«me0
, 
köd1
 
«me1
, köd2 
	)
name2

136 
	#GMOCK_INTERNAL_DECL_HAS_4_TEMPLATE_PARAMS
(
köd0
, 
«me0
, 
köd1
, 
«me1
, \

137 
köd2
, 
«me2
, 
köd3
, 
«me3
Ë
köd0
 
«me0
, 
köd1
 
«me1
, kind2Çame2, \

138 
köd3
 
«me3


	)

139 
	#GMOCK_INTERNAL_DECL_HAS_5_TEMPLATE_PARAMS
(
köd0
, 
«me0
, 
köd1
, 
«me1
, \

140 
köd2
, 
«me2
, 
köd3
, 
«me3
, 
köd4
, 
«me4
Ë
köd0
 
«me0
, 
köd1
 
«me1
, \

141 
köd2
 
«me2
, 
köd3
 
«me3
, 
köd4
 
«me4


	)

142 
	#GMOCK_INTERNAL_DECL_HAS_6_TEMPLATE_PARAMS
(
köd0
, 
«me0
, 
köd1
, 
«me1
, \

143 
köd2
, 
«me2
, 
köd3
, 
«me3
, 
köd4
, 
«me4
, 
köd5
, 
«me5
Ë
köd0
 
«me0
, \

144 
köd1
 
«me1
, 
köd2
 
«me2
, 
köd3
 
«me3
, 
köd4
 
«me4
, 
köd5
 
«me5


	)

145 
	#GMOCK_INTERNAL_DECL_HAS_7_TEMPLATE_PARAMS
(
köd0
, 
«me0
, 
köd1
, 
«me1
, \

146 
köd2
, 
«me2
, 
köd3
, 
«me3
, 
köd4
, 
«me4
, 
köd5
, 
«me5
, 
köd6
, \

147 
«me6
Ë
köd0
 
«me0
, 
köd1
 
«me1
, 
köd2
 
«me2
, 
köd3
 
«me3
, 
köd4
 
«me4
, \

148 
köd5
 
«me5
, 
köd6
 
«me6


	)

149 
	#GMOCK_INTERNAL_DECL_HAS_8_TEMPLATE_PARAMS
(
köd0
, 
«me0
, 
köd1
, 
«me1
, \

150 
köd2
, 
«me2
, 
köd3
, 
«me3
, 
köd4
, 
«me4
, 
köd5
, 
«me5
, 
köd6
, 
«me6
, \

151 
köd7
, 
«me7
Ë
köd0
 
«me0
, 
köd1
 
«me1
, 
köd2
 
«me2
, 
köd3
 
«me3
, \

152 
köd4
 
«me4
, 
köd5
 
«me5
, 
köd6
 
«me6
, 
köd7
 
«me7


	)

153 
	#GMOCK_INTERNAL_DECL_HAS_9_TEMPLATE_PARAMS
(
köd0
, 
«me0
, 
köd1
, 
«me1
, \

154 
köd2
, 
«me2
, 
köd3
, 
«me3
, 
köd4
, 
«me4
, 
köd5
, 
«me5
, 
köd6
, 
«me6
, \

155 
köd7
, 
«me7
, 
köd8
, 
«me8
Ë
köd0
 
«me0
, 
köd1
 
«me1
, 
köd2
 
«me2
, \

156 
köd3
 
«me3
, 
köd4
 
«me4
, 
köd5
 
«me5
, 
köd6
 
«me6
, 
köd7
 
«me7
, \

157 
köd8
 
«me8


	)

158 
	#GMOCK_INTERNAL_DECL_HAS_10_TEMPLATE_PARAMS
(
köd0
, 
«me0
, 
köd1
, \

159 
«me1
, 
köd2
, 
«me2
, 
köd3
, 
«me3
, 
köd4
, 
«me4
, 
köd5
, 
«me5
, 
köd6
, \

160 
«me6
, 
köd7
, 
«me7
, 
köd8
, 
«me8
, 
köd9
, 
«me9
Ë
köd0
 
«me0
, \

161 
köd1
 
«me1
, 
köd2
 
«me2
, 
köd3
 
«me3
, 
köd4
 
«me4
, 
köd5
 
«me5
, \

162 
köd6
 
«me6
, 
köd7
 
«me7
, 
köd8
 
«me8
, 
köd9
 
«me9


	)

165 
	#GMOCK_INTERNAL_LIST_HAS_1_TEMPLATE_PARAMS
(
köd0
, 
«me0
Ë
	)
name0

166 
	#GMOCK_INTERNAL_LIST_HAS_2_TEMPLATE_PARAMS
(
köd0
, 
«me0
, 
köd1
, \

167 
«me1
Ë
«me0
, 
	)
name1

168 
	#GMOCK_INTERNAL_LIST_HAS_3_TEMPLATE_PARAMS
(
köd0
, 
«me0
, 
köd1
, 
«me1
, \

169 
köd2
, 
«me2
Ë
«me0
, 
«me1
, 
	)
name2

170 
	#GMOCK_INTERNAL_LIST_HAS_4_TEMPLATE_PARAMS
(
köd0
, 
«me0
, 
köd1
, 
«me1
, \

171 
köd2
, 
«me2
, 
köd3
, 
«me3
Ë
«me0
, 
«me1
,Çame2, 
	)
name3

172 
	#GMOCK_INTERNAL_LIST_HAS_5_TEMPLATE_PARAMS
(
köd0
, 
«me0
, 
köd1
, 
«me1
, \

173 
köd2
, 
«me2
, 
köd3
, 
«me3
, 
köd4
, 
«me4
Ë
«me0
, 
«me1
,Çame2,Çame3, \

174 
«me4


	)

175 
	#GMOCK_INTERNAL_LIST_HAS_6_TEMPLATE_PARAMS
(
köd0
, 
«me0
, 
köd1
, 
«me1
, \

176 
köd2
, 
«me2
, 
köd3
, 
«me3
, 
köd4
, 
«me4
, 
köd5
, 
«me5
Ë
«me0
, 
«me1
, \

177 
«me2
, 
«me3
, 
«me4
, 
«me5


	)

178 
	#GMOCK_INTERNAL_LIST_HAS_7_TEMPLATE_PARAMS
(
köd0
, 
«me0
, 
köd1
, 
«me1
, \

179 
köd2
, 
«me2
, 
köd3
, 
«me3
, 
köd4
, 
«me4
, 
köd5
, 
«me5
, 
köd6
, \

180 
«me6
Ë
«me0
, 
«me1
, 
«me2
, 
«me3
, 
«me4
, 
«me5
, 
	)
name6

181 
	#GMOCK_INTERNAL_LIST_HAS_8_TEMPLATE_PARAMS
(
köd0
, 
«me0
, 
köd1
, 
«me1
, \

182 
köd2
, 
«me2
, 
köd3
, 
«me3
, 
köd4
, 
«me4
, 
köd5
, 
«me5
, 
köd6
, 
«me6
, \

183 
köd7
, 
«me7
Ë
«me0
, 
«me1
, 
«me2
, 
«me3
, 
«me4
, 
«me5
, 
«me6
, 
	)
name7

184 
	#GMOCK_INTERNAL_LIST_HAS_9_TEMPLATE_PARAMS
(
köd0
, 
«me0
, 
köd1
, 
«me1
, \

185 
köd2
, 
«me2
, 
köd3
, 
«me3
, 
köd4
, 
«me4
, 
köd5
, 
«me5
, 
köd6
, 
«me6
, \

186 
köd7
, 
«me7
, 
köd8
, 
«me8
Ë
«me0
, 
«me1
, 
«me2
, 
«me3
, 
«me4
, 
«me5
, \

187 
«me6
, 
«me7
, 
«me8


	)

188 
	#GMOCK_INTERNAL_LIST_HAS_10_TEMPLATE_PARAMS
(
köd0
, 
«me0
, 
köd1
, \

189 
«me1
, 
köd2
, 
«me2
, 
köd3
, 
«me3
, 
köd4
, 
«me4
, 
köd5
, 
«me5
, 
köd6
, \

190 
«me6
, 
köd7
, 
«me7
, 
köd8
, 
«me8
, 
köd9
, 
«me9
Ë
«me0
, 
«me1
, 
«me2
, \

191 
«me3
, 
«me4
, 
«me5
, 
«me6
, 
«me7
, 
«me8
, 
«me9


	)

194 
	#GMOCK_INTERNAL_DECL_TYPE_AND_0_VALUE_PARAMS
()

	)

195 
	#GMOCK_INTERNAL_DECL_TYPE_AND_1_VALUE_PARAMS
(
p0
Ë, 
ty≥«me
Ö0##
_ty≥


	)

196 
	#GMOCK_INTERNAL_DECL_TYPE_AND_2_VALUE_PARAMS
(
p0
, 
p1
) , \

197 
ty≥«me
 
p0
##
_ty≥
,Åy≥«mê
p1
##
	)
_type

198 
	#GMOCK_INTERNAL_DECL_TYPE_AND_3_VALUE_PARAMS
(
p0
, 
p1
, 
p2
) , \

199 
ty≥«me
 
p0
##
_ty≥
,Åy≥«mê
p1
##_ty≥,Åy≥«mê
p2
##
	)
_type

200 
	#GMOCK_INTERNAL_DECL_TYPE_AND_4_VALUE_PARAMS
(
p0
, 
p1
, 
p2
, 
p3
) , \

201 
ty≥«me
 
p0
##
_ty≥
,Åy≥«mê
p1
##_ty≥,Åy≥«mê
p2
##_type, \

202 
ty≥«me
 
p3
##
_ty≥


	)

203 
	#GMOCK_INTERNAL_DECL_TYPE_AND_5_VALUE_PARAMS
(
p0
, 
p1
, 
p2
, 
p3
, 
p4
) , \

204 
ty≥«me
 
p0
##
_ty≥
,Åy≥«mê
p1
##_ty≥,Åy≥«mê
p2
##_type, \

205 
ty≥«me
 
p3
##
_ty≥
,Åy≥«mê
p4
##
	)
_type

206 
	#GMOCK_INTERNAL_DECL_TYPE_AND_6_VALUE_PARAMS
(
p0
, 
p1
, 
p2
, 
p3
, 
p4
, 
p5
) , \

207 
ty≥«me
 
p0
##
_ty≥
,Åy≥«mê
p1
##_ty≥,Åy≥«mê
p2
##_type, \

208 
ty≥«me
 
p3
##
_ty≥
,Åy≥«mê
p4
##_ty≥,Åy≥«mê
p5
##
	)
_type

209 
	#GMOCK_INTERNAL_DECL_TYPE_AND_7_VALUE_PARAMS
(
p0
, 
p1
, 
p2
, 
p3
, 
p4
, 
p5
, \

210 
p6
Ë, 
ty≥«me
 
p0
##
_ty≥
,Åy≥«mê
p1
##_ty≥,Åy≥«mê
p2
##_type, \

211 
ty≥«me
 
p3
##
_ty≥
,Åy≥«mê
p4
##_ty≥,Åy≥«mê
p5
##_type, \

212 
ty≥«me
 
p6
##
_ty≥


	)

213 
	#GMOCK_INTERNAL_DECL_TYPE_AND_8_VALUE_PARAMS
(
p0
, 
p1
, 
p2
, 
p3
, 
p4
, 
p5
, \

214 
p6
, 
p7
Ë, 
ty≥«me
 
p0
##
_ty≥
,Åy≥«mê
p1
##_ty≥,Åy≥«mê
p2
##_type, \

215 
ty≥«me
 
p3
##
_ty≥
,Åy≥«mê
p4
##_ty≥,Åy≥«mê
p5
##_type, \

216 
ty≥«me
 
p6
##
_ty≥
,Åy≥«mê
p7
##
	)
_type

217 
	#GMOCK_INTERNAL_DECL_TYPE_AND_9_VALUE_PARAMS
(
p0
, 
p1
, 
p2
, 
p3
, 
p4
, 
p5
, \

218 
p6
, 
p7
, 
p8
Ë, 
ty≥«me
 
p0
##
_ty≥
,Åy≥«mê
p1
##_ty≥,Åy≥«mê
p2
##_type, \

219 
ty≥«me
 
p3
##
_ty≥
,Åy≥«mê
p4
##_ty≥,Åy≥«mê
p5
##_type, \

220 
ty≥«me
 
p6
##
_ty≥
,Åy≥«mê
p7
##_ty≥,Åy≥«mê
p8
##
	)
_type

221 
	#GMOCK_INTERNAL_DECL_TYPE_AND_10_VALUE_PARAMS
(
p0
, 
p1
, 
p2
, 
p3
, 
p4
, 
p5
, \

222 
p6
, 
p7
, 
p8
, 
p9
Ë, 
ty≥«me
 
p0
##
_ty≥
,Åy≥«mê
p1
##_type, \

223 
ty≥«me
 
p2
##
_ty≥
,Åy≥«mê
p3
##_ty≥,Åy≥«mê
p4
##_type, \

224 
ty≥«me
 
p5
##
_ty≥
,Åy≥«mê
p6
##_ty≥,Åy≥«mê
p7
##_type, \

225 
ty≥«me
 
p8
##
_ty≥
,Åy≥«mê
p9
##
	)
_type

228 
	#GMOCK_INTERNAL_INIT_AND_0_VALUE_PARAMS
()\

229 ()

	)

230 
	#GMOCK_INTERNAL_INIT_AND_1_VALUE_PARAMS
(
p0
)\

231 (
p0
##
_ty≥
 
gmock_p0
Ë: 
	`p0
(::
°d
::
	`move
(gmock_p0))

	)

232 
	#GMOCK_INTERNAL_INIT_AND_2_VALUE_PARAMS
(
p0
, 
p1
)\

233 (
p0
##
_ty≥
 
gmock_p0
, 
p1
##_ty≥ 
gmock_p1
Ë: 
	`p0
(::
°d
::
	`move
(gmock_p0)), \

234 
	`p1
(::
°d
::
	`move
(
gmock_p1
))

	)

235 
	#GMOCK_INTERNAL_INIT_AND_3_VALUE_PARAMS
(
p0
, 
p1
, 
p2
)\

236 (
p0
##
_ty≥
 
gmock_p0
, 
p1
##_ty≥ 
gmock_p1
, \

237 
p2
##
_ty≥
 
gmock_p2
Ë: 
	`p0
(::
°d
::
	`move
(
gmock_p0
)), \

238 
	`p1
(::
°d
::
	`move
(
gmock_p1
)), 
	`p2
(::°d::move(
gmock_p2
))

	)

239 
	#GMOCK_INTERNAL_INIT_AND_4_VALUE_PARAMS
(
p0
, 
p1
, 
p2
, 
p3
)\

240 (
p0
##
_ty≥
 
gmock_p0
, 
p1
##_ty≥ 
gmock_p1
, 
p2
##_ty≥ 
gmock_p2
, \

241 
p3
##
_ty≥
 
gmock_p3
Ë: 
	`p0
(::
°d
::
	`move
(
gmock_p0
)), \

242 
	`p1
(::
°d
::
	`move
(
gmock_p1
)), 
	`p2
(::°d::move(
gmock_p2
)), \

243 
	`p3
(::
°d
::
	`move
(
gmock_p3
))

	)

244 
	#GMOCK_INTERNAL_INIT_AND_5_VALUE_PARAMS
(
p0
, 
p1
, 
p2
, 
p3
, 
p4
)\

245 (
p0
##
_ty≥
 
gmock_p0
, 
p1
##_ty≥ 
gmock_p1
, 
p2
##_ty≥ 
gmock_p2
, \

246 
p3
##
_ty≥
 
gmock_p3
, 
p4
##_ty≥ 
gmock_p4
Ë: 
	`p0
(::
°d
::
	`move
(
gmock_p0
)), \

247 
	`p1
(::
°d
::
	`move
(
gmock_p1
)), 
	`p2
(::°d::move(
gmock_p2
)), \

248 
	`p3
(::
°d
::
	`move
(
gmock_p3
)), 
	`p4
(::°d::move(
gmock_p4
))

	)

249 
	#GMOCK_INTERNAL_INIT_AND_6_VALUE_PARAMS
(
p0
, 
p1
, 
p2
, 
p3
, 
p4
, 
p5
)\

250 (
p0
##
_ty≥
 
gmock_p0
, 
p1
##_ty≥ 
gmock_p1
, 
p2
##_ty≥ 
gmock_p2
, \

251 
p3
##
_ty≥
 
gmock_p3
, 
p4
##_ty≥ 
gmock_p4
, \

252 
p5
##
_ty≥
 
gmock_p5
Ë: 
	`p0
(::
°d
::
	`move
(
gmock_p0
)), \

253 
	`p1
(::
°d
::
	`move
(
gmock_p1
)), 
	`p2
(::°d::move(
gmock_p2
)), \

254 
	`p3
(::
°d
::
	`move
(
gmock_p3
)), 
	`p4
(::°d::move(
gmock_p4
)), \

255 
	`p5
(::
°d
::
	`move
(
gmock_p5
))

	)

256 
	#GMOCK_INTERNAL_INIT_AND_7_VALUE_PARAMS
(
p0
, 
p1
, 
p2
, 
p3
, 
p4
, 
p5
, 
p6
)\

257 (
p0
##
_ty≥
 
gmock_p0
, 
p1
##_ty≥ 
gmock_p1
, 
p2
##_ty≥ 
gmock_p2
, \

258 
p3
##
_ty≥
 
gmock_p3
, 
p4
##_ty≥ 
gmock_p4
, 
p5
##_ty≥ 
gmock_p5
, \

259 
p6
##
_ty≥
 
gmock_p6
Ë: 
	`p0
(::
°d
::
	`move
(
gmock_p0
)), \

260 
	`p1
(::
°d
::
	`move
(
gmock_p1
)), 
	`p2
(::°d::move(
gmock_p2
)), \

261 
	`p3
(::
°d
::
	`move
(
gmock_p3
)), 
	`p4
(::°d::move(
gmock_p4
)), \

262 
	`p5
(::
°d
::
	`move
(
gmock_p5
)), 
	`p6
(::°d::move(
gmock_p6
))

	)

263 
	#GMOCK_INTERNAL_INIT_AND_8_VALUE_PARAMS
(
p0
, 
p1
, 
p2
, 
p3
, 
p4
, 
p5
, 
p6
, 
p7
)\

264 (
p0
##
_ty≥
 
gmock_p0
, 
p1
##_ty≥ 
gmock_p1
, 
p2
##_ty≥ 
gmock_p2
, \

265 
p3
##
_ty≥
 
gmock_p3
, 
p4
##_ty≥ 
gmock_p4
, 
p5
##_ty≥ 
gmock_p5
, \

266 
p6
##
_ty≥
 
gmock_p6
, 
p7
##_ty≥ 
gmock_p7
Ë: 
	`p0
(::
°d
::
	`move
(
gmock_p0
)), \

267 
	`p1
(::
°d
::
	`move
(
gmock_p1
)), 
	`p2
(::°d::move(
gmock_p2
)), \

268 
	`p3
(::
°d
::
	`move
(
gmock_p3
)), 
	`p4
(::°d::move(
gmock_p4
)), \

269 
	`p5
(::
°d
::
	`move
(
gmock_p5
)), 
	`p6
(::°d::move(
gmock_p6
)), \

270 
	`p7
(::
°d
::
	`move
(
gmock_p7
))

	)

271 
	#GMOCK_INTERNAL_INIT_AND_9_VALUE_PARAMS
(
p0
, 
p1
, 
p2
, 
p3
, 
p4
, 
p5
, 
p6
, \

272 
p7
, 
p8
)\

273 (
p0
##
_ty≥
 
gmock_p0
, 
p1
##_ty≥ 
gmock_p1
, 
p2
##_ty≥ 
gmock_p2
, \

274 
p3
##
_ty≥
 
gmock_p3
, 
p4
##_ty≥ 
gmock_p4
, 
p5
##_ty≥ 
gmock_p5
, \

275 
p6
##
_ty≥
 
gmock_p6
, 
p7
##_ty≥ 
gmock_p7
, \

276 
p8
##
_ty≥
 
gmock_p8
Ë: 
	`p0
(::
°d
::
	`move
(
gmock_p0
)), \

277 
	`p1
(::
°d
::
	`move
(
gmock_p1
)), 
	`p2
(::°d::move(
gmock_p2
)), \

278 
	`p3
(::
°d
::
	`move
(
gmock_p3
)), 
	`p4
(::°d::move(
gmock_p4
)), \

279 
	`p5
(::
°d
::
	`move
(
gmock_p5
)), 
	`p6
(::°d::move(
gmock_p6
)), \

280 
	`p7
(::
°d
::
	`move
(
gmock_p7
)), 
	`p8
(::°d::move(
gmock_p8
))

	)

281 
	#GMOCK_INTERNAL_INIT_AND_10_VALUE_PARAMS
(
p0
, 
p1
, 
p2
, 
p3
, 
p4
, 
p5
, 
p6
, \

282 
p7
, 
p8
, 
p9
)\

283 (
p0
##
_ty≥
 
gmock_p0
, 
p1
##_ty≥ 
gmock_p1
, 
p2
##_ty≥ 
gmock_p2
, \

284 
p3
##
_ty≥
 
gmock_p3
, 
p4
##_ty≥ 
gmock_p4
, 
p5
##_ty≥ 
gmock_p5
, \

285 
p6
##
_ty≥
 
gmock_p6
, 
p7
##_ty≥ 
gmock_p7
, 
p8
##_ty≥ 
gmock_p8
, \

286 
p9
##
_ty≥
 
gmock_p9
Ë: 
	`p0
(::
°d
::
	`move
(
gmock_p0
)), \

287 
	`p1
(::
°d
::
	`move
(
gmock_p1
)), 
	`p2
(::°d::move(
gmock_p2
)), \

288 
	`p3
(::
°d
::
	`move
(
gmock_p3
)), 
	`p4
(::°d::move(
gmock_p4
)), \

289 
	`p5
(::
°d
::
	`move
(
gmock_p5
)), 
	`p6
(::°d::move(
gmock_p6
)), \

290 
	`p7
(::
°d
::
	`move
(
gmock_p7
)), 
	`p8
(::°d::move(
gmock_p8
)), \

291 
	`p9
(::
°d
::
	`move
(
gmock_p9
))

	)

294 
	#GMOCK_INTERNAL_DEFN_COPY_AND_0_VALUE_PARAMS
() \

296 
	#GMOCK_INTERNAL_DEFN_COPY_AND_1_VALUE_PARAMS
(...Ë;

	)

297 
	#GMOCK_INTERNAL_DEFN_COPY_AND_2_VALUE_PARAMS
(...Ë;

	)

298 
	#GMOCK_INTERNAL_DEFN_COPY_AND_3_VALUE_PARAMS
(...Ë;

	)

299 
	#GMOCK_INTERNAL_DEFN_COPY_AND_4_VALUE_PARAMS
(...Ë;

	)

300 
	#GMOCK_INTERNAL_DEFN_COPY_AND_5_VALUE_PARAMS
(...Ë;

	)

301 
	#GMOCK_INTERNAL_DEFN_COPY_AND_6_VALUE_PARAMS
(...Ë;

	)

302 
	#GMOCK_INTERNAL_DEFN_COPY_AND_7_VALUE_PARAMS
(...Ë;

	)

303 
	#GMOCK_INTERNAL_DEFN_COPY_AND_8_VALUE_PARAMS
(...Ë;

	)

304 
	#GMOCK_INTERNAL_DEFN_COPY_AND_9_VALUE_PARAMS
(...Ë;

	)

305 
	#GMOCK_INTERNAL_DEFN_COPY_AND_10_VALUE_PARAMS
(...Ë;

	)

308 
	#GMOCK_INTERNAL_DEFN_AND_0_VALUE_PARAMS
()

	)

309 
	#GMOCK_INTERNAL_DEFN_AND_1_VALUE_PARAMS
(
p0
Ëp0##
_ty≥
Ö0;

	)

310 
	#GMOCK_INTERNAL_DEFN_AND_2_VALUE_PARAMS
(
p0
, 
p1
Ëp0##
_ty≥
Ö0; \

311 
p1
##
_ty≥
Ö1;

	)

312 
	#GMOCK_INTERNAL_DEFN_AND_3_VALUE_PARAMS
(
p0
, 
p1
, 
p2
Ëp0##
_ty≥
Ö0; \

313 
p1
##
_ty≥
Ö1; 
p2
##_ty≥Ö2;

	)

314 
	#GMOCK_INTERNAL_DEFN_AND_4_VALUE_PARAMS
(
p0
, 
p1
, 
p2
, 
p3
Ëp0##
_ty≥
Ö0; \

315 
p1
##
_ty≥
Ö1; 
p2
##_ty≥Ö2; 
p3
##_ty≥Ö3;

	)

316 
	#GMOCK_INTERNAL_DEFN_AND_5_VALUE_PARAMS
(
p0
, 
p1
, 
p2
, 
p3
, \

317 
p4
Ë
p0
##
_ty≥
Ö0; 
p1
##_ty≥Ö1; 
p2
##_ty≥Ö2; 
p3
##_ty≥Ö3;Ö4##_ty≥Ö4;

	)

318 
	#GMOCK_INTERNAL_DEFN_AND_6_VALUE_PARAMS
(
p0
, 
p1
, 
p2
, 
p3
, 
p4
, \

319 
p5
Ë
p0
##
_ty≥
Ö0; 
p1
##_ty≥Ö1; 
p2
##_ty≥Ö2; 
p3
##_ty≥Ö3; 
p4
##_typeÖ4; \

320 
p5
##
_ty≥
Ö5;

	)

321 
	#GMOCK_INTERNAL_DEFN_AND_7_VALUE_PARAMS
(
p0
, 
p1
, 
p2
, 
p3
, 
p4
, 
p5
, \

322 
p6
Ë
p0
##
_ty≥
Ö0; 
p1
##_ty≥Ö1; 
p2
##_ty≥Ö2; 
p3
##_ty≥Ö3; 
p4
##_typeÖ4; \

323 
p5
##
_ty≥
Ö5; 
p6
##_ty≥Ö6;

	)

324 
	#GMOCK_INTERNAL_DEFN_AND_8_VALUE_PARAMS
(
p0
, 
p1
, 
p2
, 
p3
, 
p4
, 
p5
, 
p6
, \

325 
p7
Ë
p0
##
_ty≥
Ö0; 
p1
##_ty≥Ö1; 
p2
##_ty≥Ö2; 
p3
##_ty≥Ö3; 
p4
##_typeÖ4; \

326 
p5
##
_ty≥
Ö5; 
p6
##_ty≥Ö6; 
p7
##_ty≥Ö7;

	)

327 
	#GMOCK_INTERNAL_DEFN_AND_9_VALUE_PARAMS
(
p0
, 
p1
, 
p2
, 
p3
, 
p4
, 
p5
, 
p6
, \

328 
p7
, 
p8
Ë
p0
##
_ty≥
Ö0; 
p1
##_ty≥Ö1; 
p2
##_ty≥Ö2; 
p3
##_typeÖ3; \

329 
p4
##
_ty≥
Ö4; 
p5
##_ty≥Ö5; 
p6
##_ty≥Ö6; 
p7
##_ty≥Ö7; 
p8
##_ty≥Ö8;

	)

330 
	#GMOCK_INTERNAL_DEFN_AND_10_VALUE_PARAMS
(
p0
, 
p1
, 
p2
, 
p3
, 
p4
, 
p5
, 
p6
, \

331 
p7
, 
p8
, 
p9
Ë
p0
##
_ty≥
Ö0; 
p1
##_ty≥Ö1; 
p2
##_ty≥Ö2; 
p3
##_typeÖ3; \

332 
p4
##
_ty≥
Ö4; 
p5
##_ty≥Ö5; 
p6
##_ty≥Ö6; 
p7
##_ty≥Ö7; 
p8
##_typeÖ8; \

333 
p9
##
_ty≥
Ö9;

	)

336 
	#GMOCK_INTERNAL_LIST_AND_0_VALUE_PARAMS
()

	)

337 
	#GMOCK_INTERNAL_LIST_AND_1_VALUE_PARAMS
(
p0
Ë
	)
p0

338 
	#GMOCK_INTERNAL_LIST_AND_2_VALUE_PARAMS
(
p0
, 
p1
Ëp0, 
	)
p1

339 
	#GMOCK_INTERNAL_LIST_AND_3_VALUE_PARAMS
(
p0
, 
p1
, 
p2
Ëp0,Ö1, 
	)
p2

340 
	#GMOCK_INTERNAL_LIST_AND_4_VALUE_PARAMS
(
p0
, 
p1
, 
p2
, 
p3
Ëp0,Ö1,Ö2, 
	)
p3

341 
	#GMOCK_INTERNAL_LIST_AND_5_VALUE_PARAMS
(
p0
, 
p1
, 
p2
, 
p3
, 
p4
)Ö0,Ö1, \

342 
p2
, 
p3
, 
p4


	)

343 
	#GMOCK_INTERNAL_LIST_AND_6_VALUE_PARAMS
(
p0
, 
p1
, 
p2
, 
p3
, 
p4
, 
p5
)Ö0, \

344 
p1
, 
p2
, 
p3
, 
p4
, 
p5


	)

345 
	#GMOCK_INTERNAL_LIST_AND_7_VALUE_PARAMS
(
p0
, 
p1
, 
p2
, 
p3
, 
p4
, 
p5
, \

346 
p6
Ë
p0
, 
p1
, 
p2
, 
p3
, 
p4
, 
p5
, 
	)
p6

347 
	#GMOCK_INTERNAL_LIST_AND_8_VALUE_PARAMS
(
p0
, 
p1
, 
p2
, 
p3
, 
p4
, 
p5
, 
p6
, \

348 
p7
Ë
p0
, 
p1
, 
p2
, 
p3
, 
p4
, 
p5
, 
p6
, 
	)
p7

349 
	#GMOCK_INTERNAL_LIST_AND_9_VALUE_PARAMS
(
p0
, 
p1
, 
p2
, 
p3
, 
p4
, 
p5
, 
p6
, \

350 
p7
, 
p8
Ë
p0
, 
p1
, 
p2
, 
p3
, 
p4
, 
p5
, 
p6
,Ö7, 
	)
p8

351 
	#GMOCK_INTERNAL_LIST_AND_10_VALUE_PARAMS
(
p0
, 
p1
, 
p2
, 
p3
, 
p4
, 
p5
, 
p6
, \

352 
p7
, 
p8
, 
p9
Ë
p0
, 
p1
, 
p2
, 
p3
, 
p4
, 
p5
, 
p6
,Ö7,Ö8, 
	)
p9

355 
	#GMOCK_INTERNAL_LIST_TYPE_AND_0_VALUE_PARAMS
()

	)

356 
	#GMOCK_INTERNAL_LIST_TYPE_AND_1_VALUE_PARAMS
(
p0
Ë,Ö0##
_ty≥


	)

357 
	#GMOCK_INTERNAL_LIST_TYPE_AND_2_VALUE_PARAMS
(
p0
, 
p1
Ë,Ö0##
_ty≥
, \

358 
p1
##
_ty≥


	)

359 
	#GMOCK_INTERNAL_LIST_TYPE_AND_3_VALUE_PARAMS
(
p0
, 
p1
, 
p2
Ë,Ö0##
_ty≥
, \

360 
p1
##
_ty≥
, 
p2
##
	)
_type

361 
	#GMOCK_INTERNAL_LIST_TYPE_AND_4_VALUE_PARAMS
(
p0
, 
p1
, 
p2
, 
p3
) , \

362 
p0
##
_ty≥
, 
p1
##_ty≥, 
p2
##_ty≥, 
p3
##
	)
_type

363 
	#GMOCK_INTERNAL_LIST_TYPE_AND_5_VALUE_PARAMS
(
p0
, 
p1
, 
p2
, 
p3
, 
p4
) , \

364 
p0
##
_ty≥
, 
p1
##_ty≥, 
p2
##_ty≥, 
p3
##_ty≥, 
p4
##
	)
_type

365 
	#GMOCK_INTERNAL_LIST_TYPE_AND_6_VALUE_PARAMS
(
p0
, 
p1
, 
p2
, 
p3
, 
p4
, 
p5
) , \

366 
p0
##
_ty≥
, 
p1
##_ty≥, 
p2
##_ty≥, 
p3
##_ty≥, 
p4
##_ty≥, 
p5
##
	)
_type

367 
	#GMOCK_INTERNAL_LIST_TYPE_AND_7_VALUE_PARAMS
(
p0
, 
p1
, 
p2
, 
p3
, 
p4
, 
p5
, \

368 
p6
Ë, 
p0
##
_ty≥
, 
p1
##_ty≥, 
p2
##_ty≥, 
p3
##_ty≥, 
p4
##_ty≥, 
p5
##_type, \

369 
p6
##
_ty≥


	)

370 
	#GMOCK_INTERNAL_LIST_TYPE_AND_8_VALUE_PARAMS
(
p0
, 
p1
, 
p2
, 
p3
, 
p4
, 
p5
, \

371 
p6
, 
p7
Ë, 
p0
##
_ty≥
, 
p1
##_ty≥, 
p2
##_ty≥, 
p3
##_ty≥, 
p4
##_type, \

372 
p5
##
_ty≥
, 
p6
##_ty≥, 
p7
##
	)
_type

373 
	#GMOCK_INTERNAL_LIST_TYPE_AND_9_VALUE_PARAMS
(
p0
, 
p1
, 
p2
, 
p3
, 
p4
, 
p5
, \

374 
p6
, 
p7
, 
p8
Ë, 
p0
##
_ty≥
, 
p1
##_ty≥, 
p2
##_ty≥, 
p3
##_ty≥, 
p4
##_type, \

375 
p5
##
_ty≥
, 
p6
##_ty≥, 
p7
##_ty≥, 
p8
##
	)
_type

376 
	#GMOCK_INTERNAL_LIST_TYPE_AND_10_VALUE_PARAMS
(
p0
, 
p1
, 
p2
, 
p3
, 
p4
, 
p5
, \

377 
p6
, 
p7
, 
p8
, 
p9
Ë, 
p0
##
_ty≥
, 
p1
##_ty≥, 
p2
##_ty≥, 
p3
##_ty≥, 
p4
##_type, \

378 
p5
##
_ty≥
, 
p6
##_ty≥, 
p7
##_ty≥, 
p8
##_ty≥, 
p9
##
	)
_type

381 
	#GMOCK_INTERNAL_DECL_AND_0_VALUE_PARAMS
()

	)

382 
	#GMOCK_INTERNAL_DECL_AND_1_VALUE_PARAMS
(
p0
Ëp0##
_ty≥
 
	)
p0

383 
	#GMOCK_INTERNAL_DECL_AND_2_VALUE_PARAMS
(
p0
, 
p1
Ëp0##
_ty≥
Ö0, \

384 
p1
##
_ty≥
 
	)
p1

385 
	#GMOCK_INTERNAL_DECL_AND_3_VALUE_PARAMS
(
p0
, 
p1
, 
p2
Ëp0##
_ty≥
Ö0, \

386 
p1
##
_ty≥
Ö1, 
p2
##_ty≥ 
	)
p2

387 
	#GMOCK_INTERNAL_DECL_AND_4_VALUE_PARAMS
(
p0
, 
p1
, 
p2
, 
p3
Ëp0##
_ty≥
Ö0, \

388 
p1
##
_ty≥
Ö1, 
p2
##_ty≥Ö2, 
p3
##_ty≥ 
	)
p3

389 
	#GMOCK_INTERNAL_DECL_AND_5_VALUE_PARAMS
(
p0
, 
p1
, 
p2
, 
p3
, \

390 
p4
Ë
p0
##
_ty≥
Ö0, 
p1
##_ty≥Ö1, 
p2
##_ty≥Ö2, 
p3
##_ty≥Ö3,Ö4##_ty≥ 
	)
p4

391 
	#GMOCK_INTERNAL_DECL_AND_6_VALUE_PARAMS
(
p0
, 
p1
, 
p2
, 
p3
, 
p4
, \

392 
p5
Ë
p0
##
_ty≥
Ö0, 
p1
##_ty≥Ö1, 
p2
##_ty≥Ö2, 
p3
##_ty≥Ö3, 
p4
##_typeÖ4, \

393 
p5
##
_ty≥
 
	)
p5

394 
	#GMOCK_INTERNAL_DECL_AND_7_VALUE_PARAMS
(
p0
, 
p1
, 
p2
, 
p3
, 
p4
, 
p5
, \

395 
p6
Ë
p0
##
_ty≥
Ö0, 
p1
##_ty≥Ö1, 
p2
##_ty≥Ö2, 
p3
##_ty≥Ö3, 
p4
##_typeÖ4, \

396 
p5
##
_ty≥
Ö5, 
p6
##_ty≥ 
	)
p6

397 
	#GMOCK_INTERNAL_DECL_AND_8_VALUE_PARAMS
(
p0
, 
p1
, 
p2
, 
p3
, 
p4
, 
p5
, 
p6
, \

398 
p7
Ë
p0
##
_ty≥
Ö0, 
p1
##_ty≥Ö1, 
p2
##_ty≥Ö2, 
p3
##_ty≥Ö3, 
p4
##_typeÖ4, \

399 
p5
##
_ty≥
Ö5, 
p6
##_ty≥Ö6, 
p7
##_ty≥ 
	)
p7

400 
	#GMOCK_INTERNAL_DECL_AND_9_VALUE_PARAMS
(
p0
, 
p1
, 
p2
, 
p3
, 
p4
, 
p5
, 
p6
, \

401 
p7
, 
p8
Ë
p0
##
_ty≥
Ö0, 
p1
##_ty≥Ö1, 
p2
##_ty≥Ö2, 
p3
##_typeÖ3, \

402 
p4
##
_ty≥
Ö4, 
p5
##_ty≥Ö5, 
p6
##_ty≥Ö6, 
p7
##_ty≥Ö7, 
p8
##_ty≥ 
	)
p8

403 
	#GMOCK_INTERNAL_DECL_AND_10_VALUE_PARAMS
(
p0
, 
p1
, 
p2
, 
p3
, 
p4
, 
p5
, 
p6
, \

404 
p7
, 
p8
, 
p9
Ë
p0
##
_ty≥
Ö0, 
p1
##_ty≥Ö1, 
p2
##_ty≥Ö2, 
p3
##_typeÖ3, \

405 
p4
##
_ty≥
Ö4, 
p5
##_ty≥Ö5, 
p6
##_ty≥Ö6, 
p7
##_ty≥Ö7, 
p8
##_typeÖ8, \

406 
p9
##
_ty≥
 
	)
p9

409 
	#GMOCK_INTERNAL_COUNT_AND_0_VALUE_PARAMS
()

	)

410 
	#GMOCK_INTERNAL_COUNT_AND_1_VALUE_PARAMS
(
p0
Ë
P


	)

411 
	#GMOCK_INTERNAL_COUNT_AND_2_VALUE_PARAMS
(
p0
, 
p1
Ë
P2


	)

412 
	#GMOCK_INTERNAL_COUNT_AND_3_VALUE_PARAMS
(
p0
, 
p1
, 
p2
Ë
P3


	)

413 
	#GMOCK_INTERNAL_COUNT_AND_4_VALUE_PARAMS
(
p0
, 
p1
, 
p2
, 
p3
Ë
P4


	)

414 
	#GMOCK_INTERNAL_COUNT_AND_5_VALUE_PARAMS
(
p0
, 
p1
, 
p2
, 
p3
, 
p4
Ë
P5


	)

415 
	#GMOCK_INTERNAL_COUNT_AND_6_VALUE_PARAMS
(
p0
, 
p1
, 
p2
, 
p3
, 
p4
, 
p5
Ë
P6


	)

416 
	#GMOCK_INTERNAL_COUNT_AND_7_VALUE_PARAMS
(
p0
, 
p1
, 
p2
, 
p3
, 
p4
, 
p5
, 
p6
Ë
P7


	)

417 
	#GMOCK_INTERNAL_COUNT_AND_8_VALUE_PARAMS
(
p0
, 
p1
, 
p2
, 
p3
, 
p4
, 
p5
, 
p6
, \

418 
p7
Ë
P8


	)

419 
	#GMOCK_INTERNAL_COUNT_AND_9_VALUE_PARAMS
(
p0
, 
p1
, 
p2
, 
p3
, 
p4
, 
p5
, 
p6
, \

420 
p7
, 
p8
Ë
P9


	)

421 
	#GMOCK_INTERNAL_COUNT_AND_10_VALUE_PARAMS
(
p0
, 
p1
, 
p2
, 
p3
, 
p4
, 
p5
, 
p6
, \

422 
p7
, 
p8
, 
p9
Ë
P10


	)

425 
	#GMOCK_ACTION_CLASS_
(
«me
, 
vÆue_∑øms
)\

426 
	`GTEST_CONCAT_TOKEN_
(
«me
##
A˘i⁄
, 
GMOCK_INTERNAL_COUNT_
##
vÆue_∑øms
)

	)

428 
	#ACTION_TEMPLATE
(
«me
, 
ãm∂©e_∑øms
, 
vÆue_∑øms
) \

429 
ãm∂©e
 <
GMOCK_INTERNAL_DECL_
##
ãm∂©e_∑øms
 \

430 
GMOCK_INTERNAL_DECL_TYPE_
##
vÆue_∑øms
> \

431 
˛ass
 
	`GMOCK_ACTION_CLASS_
(
«me
, 
vÆue_∑øms
) { \

432 
public
: \

433 
ex∂icô
 
	`GMOCK_ACTION_CLASS_
(
«me
, 
vÆue_∑øms
)( \

434 
GMOCK_INTERNAL_DECL_
##
vÆue_∑øms
) \

435 
	`GMOCK_PP_IF
(
	`GMOCK_PP_IS_EMPTY
(
GMOCK_INTERNAL_COUNT_
##
vÆue_∑øms
), \

437 : 
	`im∂_
(
°d
::
make_sh¨ed
<
gmock_Im∂
>( \

438 
GMOCK_INTERNAL_LIST_
##
vÆue_∑øms
)) { }) \

439 
	`GMOCK_ACTION_CLASS_
(
«me
, 
vÆue_∑øms
)( \

440 c⁄° 
	`GMOCK_ACTION_CLASS_
(
«me
, 
vÆue_∑øms
)&Ë
n€x˚±
 \

441 
GMOCK_INTERNAL_DEFN_COPY_
##
vÆue_∑øms
 \

442 
	`GMOCK_ACTION_CLASS_
(
«me
, 
vÆue_∑øms
)( \

443 
	`GMOCK_ACTION_CLASS_
(
«me
, 
vÆue_∑øms
)&&Ë
n€x˚±
 \

444 
GMOCK_INTERNAL_DEFN_COPY_
##
vÆue_∑øms
 \

445 
ãm∂©e
 <
ty≥«me
 
F
> \

446 
›î©‹
 ::
ã°ög
::
A˘i⁄
<
F
>() const { \

447  
	`GMOCK_PP_IF
( \

448 
	`GMOCK_PP_IS_EMPTY
(
GMOCK_INTERNAL_COUNT_
##
vÆue_∑øms
), \

449 (::
ã°ög
::
öã∫Æ
::
MakeA˘i⁄
<
F
, 
gmock_Im∂
>()), \

450 (::
ã°ög
::
öã∫Æ
::
MakeA˘i⁄
<
F
>(
im∂_
))); \

452 
¥iv©e
: \

453 ˛as†
	cgmock_Im∂
 { \

454 
public
: \

455 
ex∂icô
 
gmock_Im∂
 
GMOCK_INTERNAL_INIT_
##
vÆue_∑øms
 {} \

456 
ãm∂©e
 <
ty≥«me
 
fun˘i⁄_ty≥
,Åy≥«mê
ªtu∫_ty≥
, \

457 
ty≥«me
 
¨gs_ty≥
, 
GMOCK_ACTION_TEMPLATE_ARGS_NAMES_
> \

458 
ªtu∫_ty≥
 
	`gmock_Pîf‹mIm∂
(
GMOCK_ACTION_ARG_TYPES_AND_NAMES_
) const; \

459 
GMOCK_INTERNAL_DEFN_
##
vÆue_∑øms
 \

461 
	`GMOCK_PP_IF
(
	`GMOCK_PP_IS_EMPTY
(
GMOCK_INTERNAL_COUNT_
##
vÆue_∑øms
), \

462 , 
°d
::
sh¨ed_±r
<c⁄° 
gmock_Im∂
> 
im∂_
;) \

464 
ãm∂©e
 <
GMOCK_INTERNAL_DECL_
##
ãm∂©e_∑øms
 \

465 
GMOCK_INTERNAL_DECL_TYPE_
##
vÆue_∑øms
> \

466 
	`GMOCK_ACTION_CLASS_
(
«me
, 
vÆue_∑øms
)< \

467 
GMOCK_INTERNAL_LIST_
##
ãm∂©e_∑øms
 \

468 
GMOCK_INTERNAL_LIST_TYPE_
##
vÆue_∑øms
> 
	`«me
( \

469 
GMOCK_INTERNAL_DECL_
##
vÆue_∑øms
Ë
GTEST_MUST_USE_RESULT_
; \

470 
ãm∂©e
 <
GMOCK_INTERNAL_DECL_
##
ãm∂©e_∑øms
 \

471 
GMOCK_INTERNAL_DECL_TYPE_
##
vÆue_∑øms
> \

472 
ölöe
 
	`GMOCK_ACTION_CLASS_
(
«me
, 
vÆue_∑øms
)< \

473 
GMOCK_INTERNAL_LIST_
##
ãm∂©e_∑øms
 \

474 
GMOCK_INTERNAL_LIST_TYPE_
##
vÆue_∑øms
> 
	`«me
( \

475 
GMOCK_INTERNAL_DECL_
##
vÆue_∑øms
) { \

476  
	`GMOCK_ACTION_CLASS_
(
«me
, 
vÆue_∑øms
)< \

477 
GMOCK_INTERNAL_LIST_
##
ãm∂©e_∑øms
 \

478 
GMOCK_INTERNAL_LIST_TYPE_
##
vÆue_∑øms
>( \

479 
GMOCK_INTERNAL_LIST_
##
vÆue_∑øms
); \

481 
ãm∂©e
 <
GMOCK_INTERNAL_DECL_
##
ãm∂©e_∑øms
 \

482 
GMOCK_INTERNAL_DECL_TYPE_
##
vÆue_∑øms
> \

483 
ãm∂©e
 <
ty≥«me
 
fun˘i⁄_ty≥
,Åy≥«mê
ªtu∫_ty≥
,Åy≥«mê
¨gs_ty≥
, \

484 
GMOCK_ACTION_TEMPLATE_ARGS_NAMES_
> \

485 
ªtu∫_ty≥
 
	`GMOCK_ACTION_CLASS_
(
«me
, 
vÆue_∑øms
)< \

486 
GMOCK_INTERNAL_LIST_
##
ãm∂©e_∑øms
 \

487 
GMOCK_INTERNAL_LIST_TYPE_
##
vÆue_∑øms
>::
gmock_Im∂
::
	`gmock_Pîf‹mIm∂
( \

488 
GMOCK_ACTION_ARG_TYPES_AND_NAMES_UNUSED_
Ëc⁄°

	)

490 
«me•a˚
 
	gã°ög
 {

497 #ifde‡
_MSC_VER


498 #¥agm®
w¨nög
(
push
)

499 #¥agm®
w¨nög
(
dißbÀ
:4100)

502 
«me•a˚
 
	göã∫Æ
 {

508 
	gãm∂©e
 <
ty≥«me
 
	gF
, 
	gty≥«me
... 
	gArgs
>

509 autÿ
InvokeArgumít
(
F
 
f
, 
Args
... 
¨gs
Ë-> 
de˛ty≥
(f(args...)) {

510  
f
(
¨gs
...);

513 
	gãm∂©e
 <
	g°d
::
size_t
 
ödex
, 
	gty≥«me
... 
	gP¨ams
>

514 
	sInvokeArgumítA˘i⁄
 {

515 
	gãm∂©e
 <
	gty≥«me
... 
	gArgs
>

516 autÿ
›î©‹
()(
	gArgs
&&... 
	g¨gs
Ëc⁄° -> 
de˛ty≥
(
öã∫Æ
::
InvokeArgumít
(

517 
°d
::
gë
<
ödex
>(°d::
f‹w¨d_as_tu∂e
(°d::
f‹w¨d
<
Args
>(
¨gs
)...)),

518 
°d
::
de˛vÆ
<c⁄° 
P¨ams
&>()...)) {

519 
öã∫Æ
::
FœtTu∂e
<
Args
&&...> 
¨gs_tu∂e
(
FœtTu∂eC⁄°ru˘Tag
{},

520 
°d
::
f‹w¨d
<
Args
>(
¨gs
)...);

521  
	g∑øms
.
Aµly
([&](c⁄° 
P¨ams
&... 
u≈acked_∑øms
) {

522 auto&& 
ˇŒabÀ
 = 
¨gs_tu∂e
.
ãm∂©e
 
Gë
<
ödex
>();

523  
öã∫Æ
::
InvokeArgumít
(

524 
°d
::
f‹w¨d
<
de˛ty≥
(
ˇŒabÀ
)>(ˇŒabÀ), 
u≈acked_∑øms
...);

528 
	göã∫Æ
::
FœtTu∂e
<
P¨ams
...> 
∑øms
;

560 
	gãm∂©e
 <
	g°d
::
size_t
 
ödex
, 
	gty≥«me
... 
	gP¨ams
>

561 
	göã∫Æ
::
InvokeArgumítA˘i⁄
<
ödex
, 
ty≥«me
 
	g°d
::
deˇy
<
P¨ams
>::
ty≥
...>

562 
InvokeArgumít
(
P¨ams
&&... 
∑øms
) {

563  {
öã∫Æ
::
FœtTu∂e
<
ty≥«me
 
°d
::
deˇy
<
P¨ams
>::
ty≥
...>(

564 
öã∫Æ
::
FœtTu∂eC⁄°ru˘Tag
{}, 
	g°d
::
f‹w¨d
<
P¨ams
>(
∑øms
)...)};

567 #ifde‡
_MSC_VER


568 #¥agm®
w¨nög
(
p›
)

	@/usr/include/gmock/gmock-more-matchers.h

40 #i‚de‡
GOOGLEMOCK_INCLUDE_GMOCK_GMOCK_MORE_MATCHERS_H_


41 
	#GOOGLEMOCK_INCLUDE_GMOCK_GMOCK_MORE_MATCHERS_H_


	)

43 
	~"gmock/gmock-m©chîs.h
"

45 
«me•a˚
 
	gã°ög
 {

49 #ifde‡
_MSC_VER


50 #¥agm®
w¨nög
(
push
)

51 #¥agm®
w¨nög
(
dißbÀ
:4100)

52 #i‡(
_MSC_VER
 == 1900)

55 #¥agm®
w¨nög
(
dißbÀ
:4800)

61 
MATCHER
(
IsEm±y
, 
√g©i⁄
 ? "isn'tÉmpty" : "isÉmpty") {

62 i‡(
¨g
.
em±y
()) {

63  
åue
;

65 *
	gªsu…_li°íî
 << "who£ sizêi†" << 
	g¨g
.
size
();

66  
	gÁl£
;

73 
MATCHER
(
IsTrue
, 
√g©i⁄
 ? "is false" : "isÅrue") {

74  
°©ic_ˇ°
<
boﬁ
>(
¨g
);

81 
MATCHER
(
IsFÆ£
, 
√g©i⁄
 ? "isÅrue" : "is false") {

82  !
°©ic_ˇ°
<
boﬁ
>(
¨g
);

85 #ifde‡
_MSC_VER


86 #¥agm®
w¨nög
(
p›
)

	@/usr/include/gmock/gmock-nice-strict.h

63 #i‚de‡
GOOGLEMOCK_INCLUDE_GMOCK_GMOCK_NICE_STRICT_H_


64 
	#GOOGLEMOCK_INCLUDE_GMOCK_GMOCK_NICE_STRICT_H_


	)

66 
	~<ty≥_åaôs
>

68 
	~"gmock/gmock-•ec-buûdîs.h
"

69 
	~"gmock/öã∫Æ/gmock-p‹t.h
"

71 
«me•a˚
 
	gã°ög
 {

72 
	gãm∂©e
 <
˛ass
 
	gMockCœss
>

73 
˛ass
 
	gNi˚Mock
;

74 
	gãm∂©e
 <
˛ass
 
	gMockCœss
>

75 
˛ass
 
	gNaggyMock
;

76 
	gãm∂©e
 <
˛ass
 
	gMockCœss
>

77 
˛ass
 
	gSåi˘Mock
;

79 
«me•a˚
 
	göã∫Æ
 {

80 
	gãm∂©e
 <
ty≥«me
 
	gT
>

81 
	g°d
::
åue_ty≥
 
Såi˘√ssModifõrProbe
(c⁄° 
Ni˚Mock
<
T
>&);

82 
	gãm∂©e
 <
ty≥«me
 
	gT
>

83 
	g°d
::
åue_ty≥
 
Såi˘√ssModifõrProbe
(c⁄° 
NaggyMock
<
T
>&);

84 
	gãm∂©e
 <
ty≥«me
 
	gT
>

85 
	g°d
::
åue_ty≥
 
Såi˘√ssModifõrProbe
(c⁄° 
Såi˘Mock
<
T
>&);

86 
	g°d
::
Ál£_ty≥
 
Såi˘√ssModifõrProbe
(...);

88 
	gãm∂©e
 <
ty≥«me
 
	gT
>

89 
c⁄°ex¥
 
boﬁ
 
HasSåi˘√ssModifõr
() {

90  
de˛ty≥
(
Såi˘√ssModifõrProbe
(
°d
::
de˛vÆ
<c⁄° 
T
&>()))::
vÆue
;

100 #i‡
GTEST_OS_WINDOWS
 && !
GTEST_OS_WINDOWS_MINGW
 && \

101 (
deföed
(
_MSC_VER
Ë|| deföed(
__˛™g__
))

104 
	#GTEST_INTERNAL_EMPTY_BASE_CLASS
 
	`__de˛•ec
(
em±y_ba£s
)

	)

106 
	#GTEST_INTERNAL_EMPTY_BASE_CLASS


	)

109 
	gãm∂©e
 <
ty≥«me
 
	gBa£
>

110 ˛as†
	cNi˚MockIm∂
 {

111 
	gpublic
:

112 
Ni˚MockIm∂
(Ë{ ::
ã°ög
::
Mock
::
AŒowUnöãª°ögCÆls
(
this
); }

114 ~
Ni˚MockIm∂
(Ë{ ::
ã°ög
::
Mock
::
Uƒegi°îCÆlRó˘i⁄
(
this
); }

117 
	gãm∂©e
 <
ty≥«me
 
	gBa£
>

118 ˛as†
	cNaggyMockIm∂
 {

119 
	gpublic
:

120 
NaggyMockIm∂
(Ë{ ::
ã°ög
::
Mock
::
W¨nUnöãª°ögCÆls
(
this
); }

122 ~
NaggyMockIm∂
(Ë{ ::
ã°ög
::
Mock
::
Uƒegi°îCÆlRó˘i⁄
(
this
); }

125 
	gãm∂©e
 <
ty≥«me
 
	gBa£
>

126 ˛as†
	cSåi˘MockIm∂
 {

127 
	gpublic
:

128 
Såi˘MockIm∂
(Ë{ ::
ã°ög
::
Mock
::
FaûUnöãª°ögCÆls
(
this
); }

130 ~
Såi˘MockIm∂
(Ë{ ::
ã°ög
::
Mock
::
Uƒegi°îCÆlRó˘i⁄
(
this
); }

135 
	gãm∂©e
 <
˛ass
 
	gMockCœss
>

136 
˛ass
 
GTEST_INTERNAL_EMPTY_BASE_CLASS
 
	gNi˚Mock


137 : 
¥iv©e
 
öã∫Æ
::
Ni˚MockIm∂
<
MockCœss
>,

138 
public
 
	gMockCœss
 {

139 
	gpublic
:

140 
°©ic_as£π
(!
öã∫Æ
::
HasSåi˘√ssModifõr
<
MockCœss
>(),

145 
Ni˚Mock
(Ë: 
MockCœss
() {

146 
°©ic_as£π
((*
this
Ë=(
MockCœss
),

157 
	gãm∂©e
 <
ty≥«me
 
	gA
>

158 
ex∂icô
 
Ni˚Mock
(
A
&& 
¨g
Ë: 
MockCœss
(
°d
::
f‹w¨d
<A>(arg)) {

159 
°©ic_as£π
((*
this
Ë=(
MockCœss
),

163 
	gãm∂©e
 <
ty≥«me
 
	gTArg1
,Åy≥«mê
	gTArg2
, 
	gty≥«me
... 
	gAn
>

164 
Ni˚Mock
(
TArg1
&& 
¨g1
, 
TArg2
&& 
¨g2
, 
An
&&... 
¨gs
)

165 : 
MockCœss
(
°d
::
f‹w¨d
<
TArg1
>(
¨g1
), std::f‹w¨d<
TArg2
>(
¨g2
),

166 
°d
::
f‹w¨d
<
An
>(
¨gs
)...) {

167 
°©ic_as£π
((*
this
Ë=(
MockCœss
),

171 
	g¥iv©e
:

172 
GTEST_DISALLOW_COPY_AND_ASSIGN_
(
Ni˚Mock
);

175 
	gãm∂©e
 <
˛ass
 
	gMockCœss
>

176 
˛ass
 
GTEST_INTERNAL_EMPTY_BASE_CLASS
 
	gNaggyMock


177 : 
¥iv©e
 
öã∫Æ
::
NaggyMockIm∂
<
MockCœss
>,

178 
public
 
	gMockCœss
 {

179 
°©ic_as£π
(!
öã∫Æ
::
HasSåi˘√ssModifõr
<
MockCœss
>(),

185 
	gpublic
:

186 
NaggyMock
(Ë: 
MockCœss
() {

187 
°©ic_as£π
((*
this
Ë=(
MockCœss
),

198 
	gãm∂©e
 <
ty≥«me
 
	gA
>

199 
ex∂icô
 
NaggyMock
(
A
&& 
¨g
Ë: 
MockCœss
(
°d
::
f‹w¨d
<A>(arg)) {

200 
°©ic_as£π
((*
this
Ë=(
MockCœss
),

204 
	gãm∂©e
 <
ty≥«me
 
	gTArg1
,Åy≥«mê
	gTArg2
, 
	gty≥«me
... 
	gAn
>

205 
NaggyMock
(
TArg1
&& 
¨g1
, 
TArg2
&& 
¨g2
, 
An
&&... 
¨gs
)

206 : 
MockCœss
(
°d
::
f‹w¨d
<
TArg1
>(
¨g1
), std::f‹w¨d<
TArg2
>(
¨g2
),

207 
°d
::
f‹w¨d
<
An
>(
¨gs
)...) {

208 
°©ic_as£π
((*
this
Ë=(
MockCœss
),

212 
	g¥iv©e
:

213 
GTEST_DISALLOW_COPY_AND_ASSIGN_
(
NaggyMock
);

216 
	gãm∂©e
 <
˛ass
 
	gMockCœss
>

217 
˛ass
 
GTEST_INTERNAL_EMPTY_BASE_CLASS
 
	gSåi˘Mock


218 : 
¥iv©e
 
öã∫Æ
::
Såi˘MockIm∂
<
MockCœss
>,

219 
public
 
	gMockCœss
 {

220 
	gpublic
:

221 
°©ic_as£π
(

222 !
öã∫Æ
::
HasSåi˘√ssModifõr
<
MockCœss
>(),

227 
Såi˘Mock
(Ë: 
MockCœss
() {

228 
°©ic_as£π
((*
this
Ë=(
MockCœss
),

239 
	gãm∂©e
 <
ty≥«me
 
	gA
>

240 
ex∂icô
 
Såi˘Mock
(
A
&& 
¨g
Ë: 
MockCœss
(
°d
::
f‹w¨d
<A>(arg)) {

241 
°©ic_as£π
((*
this
Ë=(
MockCœss
),

245 
	gãm∂©e
 <
ty≥«me
 
	gTArg1
,Åy≥«mê
	gTArg2
, 
	gty≥«me
... 
	gAn
>

246 
Såi˘Mock
(
TArg1
&& 
¨g1
, 
TArg2
&& 
¨g2
, 
An
&&... 
¨gs
)

247 : 
MockCœss
(
°d
::
f‹w¨d
<
TArg1
>(
¨g1
), std::f‹w¨d<
TArg2
>(
¨g2
),

248 
°d
::
f‹w¨d
<
An
>(
¨gs
)...) {

249 
°©ic_as£π
((*
this
Ë=(
MockCœss
),

253 
	g¥iv©e
:

254 
GTEST_DISALLOW_COPY_AND_ASSIGN_
(
Såi˘Mock
);

257 #unde‡
GTEST_INTERNAL_EMPTY_BASE_CLASS


	@/usr/include/gmock/internal/gmock-internal-utils.h

39 #i‚de‡
GOOGLEMOCK_INCLUDE_GMOCK_INTERNAL_GMOCK_INTERNAL_UTILS_H_


40 
	#GOOGLEMOCK_INCLUDE_GMOCK_INTERNAL_GMOCK_INTERNAL_UTILS_H_


	)

42 
	~<°dio.h
>

43 
	~<o°ªam
>

44 
	~<°rög
>

45 
	~<ty≥_åaôs
>

46 
	~"gmock/öã∫Æ/gmock-p‹t.h
"

47 
	~"gã°/gã°.h
"

49 
«me•a˚
 
	gã°ög
 {

51 
	gãm∂©e
 <
	gty≥«me
>

52 
˛ass
 
	gM©chî
;

54 
«me•a˚
 
	göã∫Æ
 {

58 #ifde‡
_MSC_VER


59 #¥agm®
w¨nög
(
push
)

60 #¥agm®
w¨nög
(
dißbÀ
:4100)

61 #¥agm®
w¨nög
(
dißbÀ
:4805)

66 
GTEST_API_
 
	g°d
::
°rög
 
JoöAsTu∂e
(c⁄° 
Såögs
& 
fõlds
);

72 
GTEST_API_
 
	g°d
::
°rög
 
C⁄vîtIdítifõrNameToW‹ds
(c⁄° * 
id_«me
);

77 
	gãm∂©e
 <
ty≥«me
 
	gPoöãr
>

78 
ölöe
 c⁄° 
ty≥«me
 
	gPoöãr
::
ñemít_ty≥
* 
GëRawPoöãr
(c⁄° 
Poöãr
& 
p
) {

79  
p
.
gë
();

82 
	gãm∂©e
 <
ty≥«me
 
	gEÀmít
>

83 
ölöe
 
EÀmít
* 
GëRawPoöãr
(EÀmít* 
p
Ë{  
	gp
; }

89 #i‡
deföed
(
_MSC_VER
Ë&& !deföed(
_NATIVE_WCHAR_T_DEFINED
)

92 
	#GMOCK_WCHAR_T_IS_NATIVE_
 1

	)

100 
	eTy≥Köd
 {

101 
	gkBoﬁ
, 
	gkI¡egî
, 
	gkFlﬂtögPoöt
, 
	gkOthî


105 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
	sKödOf
 {

106 íum { 
	gvÆue
 = 
kOthî
 };

110 
	#GMOCK_DECLARE_KIND_
(
ty≥
, 
köd
) \

111 
ãm∂©e
 <> 
KödOf
<
ty≥
> {Énum { 
vÆue
 = 
köd
 }; }

	)

113 
GMOCK_DECLARE_KIND_
(
boﬁ
, 
kBoﬁ
);

116 
GMOCK_DECLARE_KIND_
(, 
kI¡egî
);

117 
GMOCK_DECLARE_KIND_
(sig√d , 
kI¡egî
);

118 
GMOCK_DECLARE_KIND_
(, 
kI¡egî
);

119 
GMOCK_DECLARE_KIND_
(, 
kI¡egî
);

120 
GMOCK_DECLARE_KIND_
(, 
kI¡egî
);

121 
GMOCK_DECLARE_KIND_
(, 
kI¡egî
);

122 
GMOCK_DECLARE_KIND_
(, 
kI¡egî
);

123 
GMOCK_DECLARE_KIND_
(, 
kI¡egî
);

124 
GMOCK_DECLARE_KIND_
(, 
kI¡egî
);

125 
GMOCK_DECLARE_KIND_
(, 
kI¡egî
);

126 
GMOCK_DECLARE_KIND_
(, 
kI¡egî
);

128 #i‡
GMOCK_WCHAR_T_IS_NATIVE_


129 
GMOCK_DECLARE_KIND_
(
wch¨_t
, 
kI¡egî
);

133 
GMOCK_DECLARE_KIND_
(, 
kFlﬂtögPoöt
);

134 
GMOCK_DECLARE_KIND_
(, 
kFlﬂtögPoöt
);

135 
GMOCK_DECLARE_KIND_
(, 
kFlﬂtögPoöt
);

137 #unde‡
GMOCK_DECLARE_KIND_


140 
	#GMOCK_KIND_OF_
(
ty≥
) \

141 
°©ic_ˇ°
< ::
ã°ög
::
öã∫Æ
::
Ty≥Köd
>( \

142 ::
ã°ög
::
öã∫Æ
::
KödOf
<
ty≥
>::
vÆue
)

	)

153 
	gãm∂©e
 <
Ty≥Köd
 
	gkFromKöd
, 
ty≥«me
 
	gFrom
, Ty≥Köd 
	gkToKöd
,Åy≥«mê
	gTo
>

154 
usög
 
	gLos¶essArôhmëicC⁄vîtibÀIm∂
 = 
°d
::
öãgøl_c⁄°™t
<

155 
boﬁ
,

158 (
	gkFromKöd
 =
kBoﬁ
Ë? 
åue


161 : (
kFromKöd
 !
kToKöd
Ë? 
Ál£


162 : (
kFromKöd
 =
kI¡egî
 &&

165 ((((
From
Ë< (
To
)) &&

166 !(
°d
::
is_sig√d
<
From
>::
vÆue
 && !°d::is_sig√d<
To
>::value)) ||

169 (((
From
Ë=(
To
)) &&

170 (
°d
::
is_sig√d
<
From
>::
vÆue
 =°d::is_sig√d<
To
>::value)))

171 Ë? 
åue


174 : (
kFromKöd
 =
kFlﬂtögPoöt
 && ((
From
Ë<(
To
))Ë? 
åue


175 : 
Ál£


186 
	gãm∂©e
 <
ty≥«me
 
	gFrom
,Åy≥«mê
	gTo
>

187 
usög
 
	gLos¶essArôhmëicC⁄vîtibÀ
 =

188 
Los¶essArôhmëicC⁄vîtibÀIm∂
<
GMOCK_KIND_OF_
(
From
), 
	gFrom
,

189 
GMOCK_KIND_OF_
(
To
), 
	gTo
>;

193 ˛as†
	cFaûuªRï‹ãrI¡îÁ˚
 {

194 
	gpublic
:

196 
	eFaûuªTy≥
 {

197 
kN⁄Áèl
, 
	gkF©Æ


200 
	gvútuÆ
 ~
FaûuªRï‹ãrI¡îÁ˚
() {}

203 
vútuÆ
 
Rï‹tFaûuª
(
FaûuªTy≥
 
ty≥
, c⁄° * 
fûe
, 
löe
,

204 c⁄° 
°d
::
°rög
& 
mesßge
) = 0;

208 
GTEST_API_
 
FaûuªRï‹ãrI¡îÁ˚
* 
GëFaûuªRï‹ãr
();

215 
ölöe
 
As£π
(
boﬁ
 
c⁄dôi⁄
, c⁄° * 
fûe
, 
löe
,

216 c⁄° 
°d
::
°rög
& 
msg
) {

217 i‡(!
c⁄dôi⁄
) {

218 
GëFaûuªRï‹ãr
()->
Rï‹tFaûuª
(
FaûuªRï‹ãrI¡îÁ˚
::
kF©Æ
,

219 
fûe
, 
löe
, 
msg
);

222 
ölöe
 
As£π
(
boﬁ
 
c⁄dôi⁄
, c⁄° * 
fûe
, 
löe
) {

223 
As£π
(
c⁄dôi⁄
, 
fûe
, 
löe
, "Assertion failed.");

228 
ölöe
 
Ex≥˘
(
boﬁ
 
c⁄dôi⁄
, c⁄° * 
fûe
, 
löe
,

229 c⁄° 
°d
::
°rög
& 
msg
) {

230 i‡(!
c⁄dôi⁄
) {

231 
GëFaûuªRï‹ãr
()->
Rï‹tFaûuª
(
FaûuªRï‹ãrI¡îÁ˚
::
kN⁄Áèl
,

232 
fûe
, 
löe
, 
msg
);

235 
ölöe
 
Ex≥˘
(
boﬁ
 
c⁄dôi⁄
, c⁄° * 
fûe
, 
löe
) {

236 
Ex≥˘
(
c⁄dôi⁄
, 
fûe
, 
löe
, "Expectation failed.");

240 
	eLogSevîôy
 {

241 
	gkInfo
 = 0,

242 
	gkW¨nög
 = 1

248 c⁄° 
	gkInfoVîbosôy
[] = "info";

250 c⁄° 
	gkW¨nögVîbosôy
[] = "warning";

252 c⁄° 
	gkEº‹Vîbosôy
[] = "error";

256 
GTEST_API_
 
boﬁ
 
LogIsVisibÀ
(
LogSevîôy
 
£vîôy
);

265 
GTEST_API_
 
Log
(
LogSevîôy
 
£vîôy
, c⁄° 
°d
::
°rög
& 
mesßge
,

266 
°ack_‰ames_to_skù
);

274 ˛as†
	cWôhoutM©chîs
 {

275 
	g¥iv©e
:

276 
WôhoutM©chîs
() {}

277 
‰õnd
 
GTEST_API_
 
WôhoutM©chîs
 
GëWôhoutM©chîs
();

281 
GTEST_API_
 
WôhoutM©chîs
 
GëWôhoutM©chîs
();

285 #ifde‡
_MSC_VER


286 #¥agm®
w¨nög
(
push
)

287 #¥agm®
w¨nög
(
dißbÀ
:4717)

295 
	gãm∂©e
 <
ty≥«me
 
	gT
>

296 
ölöe
 
T
 
InvÆid
() {

297 
As£π
(
Ál£
, "", -1, "InternalÉrror:áttemptÅoÑeturn invalid value");

301  
	gInvÆid
<
	gT
>();

304 #ifde‡
_MSC_VER


305 #¥agm®
w¨nög
(
p›
)

324 
	gãm∂©e
 <
˛ass
 
	gRawC⁄èöî
>

325 ˛as†
	cSéC⁄èöîVõw
 {

326 
	gpublic
:

327 
RawC⁄èöî
 
	tty≥
;

328 c⁄° 
	tty≥
& 
	tc⁄°_ª„ªn˚
;

330 
c⁄°_ª„ªn˚
 
C⁄°Re„ªn˚
(c⁄° 
RawC⁄èöî
& 
c⁄èöî
) {

331 
°©ic_as£π
(!
°d
::
is_c⁄°
<
RawC⁄èöî
>::
vÆue
,

333  
	gc⁄èöî
;

335 
ty≥
 
C›y
(c⁄° 
RawC⁄èöî
& 
c⁄èöî
Ë{  
	gc⁄èöî
; }

339 
	gãm∂©e
 <
ty≥«me
 
	gEÀmít
, 
size_t
 
	gN
>

340 
˛ass
 
	gSéC⁄èöîVõw
<
	gEÀmít
[
N
]> {

341 
	gpublic
:

342 
ty≥«me
 
	t°d
::
	tªmove_c⁄°
<
	tEÀmít
>::
	tty≥
 
	tRawEÀmít
;

343 
	göã∫Æ
::
	tN©iveAºay
<
	tRawEÀmít
> 
	tty≥
;

349 c⁄° 
	tty≥
 
	tc⁄°_ª„ªn˚
;

351 
c⁄°_ª„ªn˚
 
C⁄°Re„ªn˚
(c⁄° 
EÀmít
 (&
¨øy
)[
N
]) {

352 
°©ic_as£π
(
°d
::
is_ßme
<
EÀmít
, 
RawEÀmít
>::
vÆue
,

354  
ty≥
(
¨øy
, 
N
, 
Rñ©i⁄ToSour˚Re„ªn˚
());

356 
ty≥
 
C›y
(c⁄° 
EÀmít
 (&
¨øy
)[
N
]) {

357  
ty≥
(
¨øy
, 
N
, 
Rñ©i⁄ToSour˚C›y
());

363 
	gãm∂©e
 <
ty≥«me
 
	gEÀmítPoöãr
,Åy≥«mê
	gSize
>

364 
˛ass
 
	gSéC⁄èöîVõw
< ::
°d
::
tu∂e
<
EÀmítPoöãr
, 
	gSize
> > {

365 
	gpublic
:

366 
ty≥«me
 
	t°d
::
	tªmove_c⁄°
<

367 
	tty≥«me
 
	t°d
::
	tpoöãr_åaôs
<
	tEÀmítPoöãr
>::
	tñemít_ty≥
>::
	tty≥


368 
	tRawEÀmít
;

369 
	göã∫Æ
::
	tN©iveAºay
<
	tRawEÀmít
> 
	tty≥
;

370 c⁄° 
	tty≥
 
	tc⁄°_ª„ªn˚
;

372 
c⁄°_ª„ªn˚
 
C⁄°Re„ªn˚
(

373 c⁄° ::
°d
::
tu∂e
<
EÀmítPoöãr
, 
Size
>& 
¨øy
) {

374  
ty≥
(
°d
::
gë
<0>(
¨øy
), std::get<1>(array),

375 
Rñ©i⁄ToSour˚Re„ªn˚
());

377 
ty≥
 
C›y
(c⁄° ::
°d
::
tu∂e
<
EÀmítPoöãr
, 
Size
>& 
¨øy
) {

378  
ty≥
(
°d
::
gë
<0>(
¨øy
), std::gë<1>◊ºay), 
Rñ©i⁄ToSour˚C›y
());

384 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
˛ass
 
	gSéC⁄èöîVõw
<T&>;

389 
	gãm∂©e
 <
ty≥«me
 
	gT
>

390 
	sRemoveC⁄°FromKey
 {

391 
T
 
	tty≥
;

395 
	gãm∂©e
 <
ty≥«me
 
	gK
,Åy≥«mê
	gV
>

396 
	gRemoveC⁄°FromKey
<
	g°d
::
∑ú
<c⁄° 
K
, 
	gV
> > {

397 
	g°d
::
	t∑ú
<
	tK
, 
	tV
> 
	tty≥
;

402 
GTEST_API_
 
IŒegÆDoDeÁu…
(c⁄° * 
fûe
, 
löe
);

404 
	gãm∂©e
 <
ty≥«me
 
	gF
,Åy≥«mê
	gTu∂e
, 
	gsize_t
... 
	gIdx
>

405 autÿ
AµlyIm∂
(
F
&& 
f
, 
Tu∂e
&& 
¨gs
, 
IndexSequí˚
<
Idx
...>Ë-> 
de˛ty≥
(

406 
°d
::
f‹w¨d
<
F
>(
f
)(°d::
gë
<
Idx
>(°d::f‹w¨d<
Tu∂e
>(
¨gs
))...)) {

407  
°d
::
f‹w¨d
<
F
>(
f
)(°d::
gë
<
Idx
>(°d::f‹w¨d<
Tu∂e
>(
¨gs
))...);

411 
	gãm∂©e
 <
ty≥«me
 
	gF
,Åy≥«mê
	gTu∂e
>

412 autÿ
Aµly
(
F
&& 
f
, 
Tu∂e
&& 
¨gs
Ë-> 
de˛ty≥
(

413 
AµlyIm∂
(
°d
::
f‹w¨d
<
F
>(
f
), std::f‹w¨d<
Tu∂e
>(
¨gs
),

414 
MakeIndexSequí˚
<
°d
::
tu∂e_size
<

415 
ty≥«me
 
°d
::
ªmove_ª„ªn˚
<
Tu∂e
>::
ty≥
>::
vÆue
>())) {

416  
AµlyIm∂
(
°d
::
f‹w¨d
<
F
>(
f
), std::f‹w¨d<
Tu∂e
>(
¨gs
),

417 
MakeIndexSequí˚
<
°d
::
tu∂e_size
<

418 
ty≥«me
 
°d
::
ªmove_ª„ªn˚
<
Tu∂e
>::
ty≥
>::
vÆue
>());

434 
	gãm∂©e
 <
ty≥«me
 
	gT
>

435 
	gFun˘i⁄
;

437 
	gãm∂©e
 <
ty≥«me
 
	gR
, 
	gty≥«me
... 
	gArgs
>

438 
	gFun˘i⁄
<
R
(
Args
...)> {

439 
usög
 
	gResu…
 = 
R
;

440 
c⁄°ex¥
 
size_t
 
	gArgumítCou¡
 = ...(
Args
);

441 
	gãm∂©e
 <
size_t
 
	gI
>

442 
usög
 
	gArg
 = 
EÀmFromLi°
<
I
, 
	gArgs
...>;

443 
usög
 
	gArgumítTu∂e
 = 
°d
::
tu∂e
<
Args
...>;

444 
usög
 
	gArgumítM©chîTu∂e
 = 
°d
::
tu∂e
<
M©chî
<
Args
>...>;

445 
usög
 
	gMakeResu…Void
 = (
Args
...);

446 
usög
 
	gMakeResu…Ign‹edVÆue
 = 
Ign‹edVÆue
(
Args
...);

449 
	gãm∂©e
 <
ty≥«me
 
	gR
, 
	gty≥«me
... 
	gArgs
>

450 
c⁄°ex¥
 
size_t
 
	gFun˘i⁄
<
R
(
Args
...)>::
ArgumítCou¡
;

452 #ifde‡
_MSC_VER


453 #¥agm®
w¨nög
(
p›
)

	@/usr/include/gtest/gtest-death-test.h

38 #i‚de‡
GOOGLETEST_INCLUDE_GTEST_GTEST_DEATH_TEST_H_


39 
	#GOOGLETEST_INCLUDE_GTEST_GTEST_DEATH_TEST_H_


	)

41 
	~"gã°/öã∫Æ/gã°-dóth-ã°-öã∫Æ.h
"

43 
«me•a˚
 
	gã°ög
 {

50 
GTEST_DECLARE_°rög_
(
dóth_ã°_°yÀ
);

52 #i‡
GTEST_HAS_DEATH_TEST


54 
«me•a˚
 
	göã∫Æ
 {

61 
GTEST_API_
 
boﬁ
 
InDóthTe°Chûd
();

172 
	#ASSERT_EXIT
(
°©emít
, 
¥ediˇã
, 
m©chî
) \

173 
	`GTEST_DEATH_TEST_
(
°©emít
, 
¥ediˇã
, 
m©chî
, 
GTEST_FATAL_FAILURE_
)

	)

177 
	#EXPECT_EXIT
(
°©emít
, 
¥ediˇã
, 
m©chî
) \

178 
	`GTEST_DEATH_TEST_
(
°©emít
, 
¥ediˇã
, 
m©chî
, 
GTEST_NONFATAL_FAILURE_
)

	)

183 
	#ASSERT_DEATH
(
°©emít
, 
m©chî
) \

184 
	`ASSERT_EXIT
(
°©emít
, ::
ã°ög
::
öã∫Æ
::
ExôedUnsuc˚ssfuŒy
, 
m©chî
)

	)

188 
	#EXPECT_DEATH
(
°©emít
, 
m©chî
) \

189 
	`EXPECT_EXIT
(
°©emít
, ::
ã°ög
::
öã∫Æ
::
ExôedUnsuc˚ssfuŒy
, 
m©chî
)

	)

194 ˛as†
	cGTEST_API_
 
	gExôedWôhCode
 {

195 
	gpublic
:

196 
ex∂icô
 
ExôedWôhCode
(
exô_code
);

197 
ExôedWôhCode
(const ExitedWithCode&) = ;

198 
	g›î©‹
=(c⁄° 
ExôedWôhCode
& 
Ÿhî
Ë
dñëe
;

199 
boﬁ
 
›î©‹
()(
	gexô_°©us
) const;

200 
	g¥iv©e
:

201 c⁄° 
exô_code_
;

204 #i‡!
GTEST_OS_WINDOWS
 && !
GTEST_OS_FUCHSIA


208 ˛as†
	cGTEST_API_
 
	gKûÀdBySig«l
 {

209 
	gpublic
:

210 
ex∂icô
 
KûÀdBySig«l
(
signum
);

211 
boﬁ
 
›î©‹
()(
	gexô_°©us
) const;

212 
	g¥iv©e
:

213 c⁄° 
signum_
;

260 #ifde‡
NDEBUG


262 
	#EXPECT_DEBUG_DEATH
(
°©emít
, 
ªgex
) \

263 
	$GTEST_EXECUTE_STATEMENT_
(
°©emít
, 
ªgex
)

	)

265 
	#ASSERT_DEBUG_DEATH
(
°©emít
, 
ªgex
) \

266 
	$GTEST_EXECUTE_STATEMENT_
(
°©emít
, 
ªgex
)

	)

270 
	#EXPECT_DEBUG_DEATH
(
°©emít
, 
ªgex
) \

271 
	$EXPECT_DEATH
(
°©emít
, 
ªgex
)

	)

273 
	#ASSERT_DEBUG_DEATH
(
°©emít
, 
ªgex
) \

274 
	$ASSERT_DEATH
(
°©emít
, 
ªgex
)

	)

314 
	#GTEST_UNSUPPORTED_DEATH_TEST
(
°©emít
, 
ªgex
, 
ãrmö©‹
) \

315 
GTEST_AMBIGUOUS_ELSE_BLOCKER_
 \

316 i‡(::
ã°ög
::
öã∫Æ
::
	$AlwaysTrue
()) { \

317 
	`GTEST_LOG_
(
WARNING
) \

320 
	}
} i‡(::
ã°ög
::
öã∫Æ
::
	$AlwaysFÆ£
()) { \

321 ::
ã°ög
::
öã∫Æ
::
RE
::
	`P¨tülM©ch
(".*", (
ªgex
)); \

322 
	`GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_
(
°©emít
); \

323 
ãrmö©‹
; \

324 
	}
} \

325 ::
ã°ög
::
	$Mesßge
()

	)

332 #i‡
GTEST_HAS_DEATH_TEST


333 
	#EXPECT_DEATH_IF_SUPPORTED
(
°©emít
, 
ªgex
) \

334 
	$EXPECT_DEATH
(
°©emít
, 
ªgex
)

	)

335 
	#ASSERT_DEATH_IF_SUPPORTED
(
°©emít
, 
ªgex
) \

336 
	$ASSERT_DEATH
(
°©emít
, 
ªgex
)

	)

338 
	#EXPECT_DEATH_IF_SUPPORTED
(
°©emít
, 
ªgex
) \

339 
	$GTEST_UNSUPPORTED_DEATH_TEST
(
°©emít
, 
ªgex
, )

	)

340 
	#ASSERT_DEATH_IF_SUPPORTED
(
°©emít
, 
ªgex
) \

341 
	$GTEST_UNSUPPORTED_DEATH_TEST
(
°©emít
, 
ªgex
, )

	)

344 
	}
}

	@/usr/include/gtest/gtest-matchers.h

35 #i‚de‡
GOOGLETEST_INCLUDE_GTEST_GTEST_MATCHERS_H_


36 
	#GOOGLETEST_INCLUDE_GTEST_GTEST_MATCHERS_H_


	)

38 
	~<©omic
>

39 
	~<mem‹y
>

40 
	~<o°ªam
>

41 
	~<°rög
>

42 
	~<ty≥_åaôs
>

44 
	~"gã°/gã°-¥öãrs.h
"

45 
	~"gã°/öã∫Æ/gã°-öã∫Æ.h
"

46 
	~"gã°/öã∫Æ/gã°-p‹t.h
"

49 #i‡
deföed
(
_MSC_VER
) && _MSC_VER >= 1915

50 
	#GTEST_MAYBE_5046_
 5046

	)

52 
	#GTEST_MAYBE_5046_


	)

55 
	$GTEST_DISABLE_MSC_WARNINGS_PUSH_
(

56 4251 
GTEST_MAYBE_5046_


60 
«me•a˚
 
ã°ög
 {

73 ˛as†
	cM©chResu…Li°íî
 {

74 
public
:

78 
ex∂icô
 
	`M©chResu…Li°íî
(::
°d
::
o°ªam
* 
os
Ë: 
	`°ªam_
(os) {}

79 
vútuÆ
 ~
	`M©chResu…Li°íî
() = 0;

83 
ãm∂©e
 <
ty≥«me
 
T
>

84 
M©chResu…Li°íî
& 
›î©‹
<<(c⁄° 
T
& 
x
) {

85 i‡(
°ªam_
 !
nuŒ±r
Ë*°ªam_ << 
x
;

86  *
this
;

90 ::
°d
::
o°ªam
* 
	`°ªam
(Ë{  
°ªam_
; }

96 
boﬁ
 
	`IsI¡îe°ed
(Ëc⁄° {  
°ªam_
 !
nuŒ±r
; }

98 
¥iv©e
:

99 ::
°d
::
o°ªam
* c⁄° 
°ªam_
;

101 
	`GTEST_DISALLOW_COPY_AND_ASSIGN_
(
M©chResu…Li°íî
);

102 
	}
};

104 
ölöe
 
	gM©chResu…Li°íî
::~
	$M©chResu…Li°íî
() {

105 
	}
}

109 ˛as†
	cGTEST_API_
 
M©chîDes¸ibîI¡îÁ˚
 {

110 
public
:

111 
vútuÆ
 ~
M©chîDes¸ibîI¡îÁ˚
() {}

118 
vútuÆ
 
Des¸ibeTo
(::
°d
::
o°ªam
* 
os
) const = 0;

126 
vútuÆ
 
Des¸ibeNeg©i⁄To
(::
°d
::
o°ªam
* 
os
) const {

127 *
os
 << "not (";

128 
Des¸ibeTo
(
os
);

129 *
	gos
 << ")";

134 
	gãm∂©e
 <
ty≥«me
 
	gT
>

135 ˛as†
	cM©chîI¡îÁ˚
 : 
public
 
M©chîDes¸ibîI¡îÁ˚
 {

136 
public
:

168 
vútuÆ
 
boﬁ
 
M©chAndEx∂aö
(
T
 
x
, 
M©chResu…Li°íî
* 
li°íî
) const = 0;

175 
«me•a˚
 
	göã∫Æ
 {

177 
	sAnyEq
 {

178 
	gãm∂©e
 <
ty≥«me
 
	gA
,Åy≥«mê
	gB
>

179 
boﬁ
 
›î©‹
()(c⁄° 
	gA
& 
	ga
, c⁄° 
	gB
& 
	gb
Ëc⁄° { á =
b
; }

181 
	sAnyNe
 {

182 
	gãm∂©e
 <
ty≥«me
 
	gA
,Åy≥«mê
	gB
>

183 
boﬁ
 
›î©‹
()(c⁄° 
	gA
& 
	ga
, c⁄° 
	gB
& 
	gb
Ëc⁄° { á !
b
; }

185 
	sAnyLt
 {

186 
	gãm∂©e
 <
ty≥«me
 
	gA
,Åy≥«mê
	gB
>

187 
boﬁ
 
›î©‹
()(c⁄° 
	gA
& 
	ga
, c⁄° 
	gB
& 
	gb
) const { á < b; }

189 
	sAnyGt
 {

190 
	gãm∂©e
 <
ty≥«me
 
	gA
,Åy≥«mê
	gB
>

191 
boﬁ
 
›î©‹
()(c⁄° 
	gA
& 
	ga
, c⁄° 
	gB
& 
	gb
) const { á > b; }

193 
	sAnyLe
 {

194 
	gãm∂©e
 <
ty≥«me
 
	gA
,Åy≥«mê
	gB
>

195 
boﬁ
 
›î©‹
()(c⁄° 
	gA
& 
	ga
, c⁄° 
	gB
& 
	gb
Ëc⁄° { á <
b
; }

197 
	sAnyGe
 {

198 
	gãm∂©e
 <
ty≥«me
 
	gA
,Åy≥«mê
	gB
>

199 
boﬁ
 
›î©‹
()(c⁄° 
	gA
& 
	ga
, c⁄° 
	gB
& 
	gb
Ëc⁄° { á >
b
; }

203 ˛as†
	cDummyM©chResu…Li°íî
 : 
public
 
M©chResu…Li°íî
 {

204 
public
:

205 
DummyM©chResu…Li°íî
(Ë: 
M©chResu…Li°íî
(
nuŒ±r
) {}

207 
¥iv©e
:

208 
GTEST_DISALLOW_COPY_AND_ASSIGN_
(
DummyM©chResu…Li°íî
);

214 ˛as†
	cSåómM©chResu…Li°íî
 : 
public
 
M©chResu…Li°íî
 {

215 
public
:

216 
ex∂icô
 
SåómM©chResu…Li°íî
(::
°d
::
o°ªam
* 
os
)

217 : 
M©chResu…Li°íî
(
os
) {}

219 
¥iv©e
:

220 
GTEST_DISALLOW_COPY_AND_ASSIGN_
(
SåómM©chResu…Li°íî
);

223 
	sSh¨edPaylﬂdBa£
 {

224 
	g°d
::
©omic
<> 
ªf
{1};

225 
Ref
(Ë{ 
	gªf
.
„tch_add
(1, 
°d
::
mem‹y_‹dî_ªœxed
); }

226 
boﬁ
 
Uƒef
(Ë{  
	gªf
.
„tch_sub
(1, 
°d
::
mem‹y_‹dî_acq_ªl
) == 1; }

229 
	gãm∂©e
 <
ty≥«me
 
	gT
>

230 
	gSh¨edPaylﬂd
 : 
Sh¨edPaylﬂdBa£
 {

231 
ex∂icô
 
Sh¨edPaylﬂd
(c⁄° 
T
& 
v
Ë: 
vÆue
(v) {}

232 
ex∂icô
 
Sh¨edPaylﬂd
(
T
&& 
v
Ë: 
vÆue
(
°d
::
move
(v)) {}

234 
De°roy
(
Sh¨edPaylﬂdBa£
* 
sh¨ed
) {

235 
dñëe
 
°©ic_ˇ°
<
Sh¨edPaylﬂd
*>(
sh¨ed
);

238 
T
 
	gvÆue
;

244 
	gãm∂©e
 <
ty≥«me
 
	gT
>

245 ˛as†
	cM©chîBa£
 : 
¥iv©e
 
M©chîDes¸ibîI¡îÁ˚
 {

246 
public
:

249 
boﬁ
 
M©chAndEx∂aö
(c⁄° 
T
& 
x
, 
M©chResu…Li°íî
* 
li°íî
) const {

250 
GTEST_CHECK_
(
vèbÀ_
 !
nuŒ±r
);

251  
	gvèbÀ_
->
m©ch_™d_ex∂aö
(*
this
, 
x
, 
li°íî
);

255 
boﬁ
 
M©ches
(c⁄° 
T
& 
x
) const {

256 
DummyM©chResu…Li°íî
 
	gdummy
;

257  
M©chAndEx∂aö
(
x
, &
dummy
);

261 
Des¸ibeTo
(::
°d
::
o°ªam
* 
os
Ëc⁄° 
föÆ
 {

262 
GTEST_CHECK_
(
vèbÀ_
 !
nuŒ±r
);

263 
	gvèbÀ_
->
des¸ibe
(*
this
, 
os
, 
Ál£
);

267 
Des¸ibeNeg©i⁄To
(::
°d
::
o°ªam
* 
os
Ëc⁄° 
föÆ
 {

268 
GTEST_CHECK_
(
vèbÀ_
 !
nuŒ±r
);

269 
	gvèbÀ_
->
des¸ibe
(*
this
, 
os
, 
åue
);

273 
Ex∂aöM©chResu…To
(c⁄° 
T
& 
x
, ::
°d
::
o°ªam
* 
os
) const {

274 
SåómM©chResu…Li°íî
 
li°íî
(
os
);

275 
M©chAndEx∂aö
(
x
, &
li°íî
);

281 c⁄° 
M©chîDes¸ibîI¡îÁ˚
* 
GëDes¸ibî
() const {

282 i‡(
	gvèbÀ_
 =
nuŒ±r
) Çullptr;

283  
	gvèbÀ_
->
gë_des¸ibî
(*
this
);

286 
	g¥Ÿe˘ed
:

287 
M©chîBa£
(Ë: 
vèbÀ_
(
nuŒ±r
) {}

290 
ãm∂©e
 <
ty≥«me
 
U
>

291 
ex∂icô
 
M©chîBa£
(c⁄° 
M©chîI¡îÁ˚
<
U
>* 
im∂
) {

292 
Inô
(
im∂
);

295 
	gãm∂©e
 <
ty≥«me
 
	gM
, 
	gty≥«me
 =Åy≥«mê
°d
::
ªmove_ª„ªn˚
<

296 
M
>::
ty≥
::
is_gã°_m©chî
>

297 
M©chîBa£
(
M
&& 
m
) {

298 
Inô
(
°d
::
f‹w¨d
<
M
>(
m
));

301 
M©chîBa£
(c⁄° M©chîBa£& 
Ÿhî
)

302 : 
vèbÀ_
(
Ÿhî
.vèbÀ_), 
buf„r_
(other.buffer_) {

303 i‡(
IsSh¨ed
()Ë
	gbuf„r_
.
	gsh¨ed
->
Ref
();

306 
	gM©chîBa£
& 
	g›î©‹
=(c⁄° 
M©chîBa£
& 
Ÿhî
) {

307 i‡(
this
 =&
Ÿhî
)  *this;

308 
De°roy
();

309 
	gvèbÀ_
 = 
Ÿhî
.
vèbÀ_
;

310 
	gbuf„r_
 = 
Ÿhî
.
buf„r_
;

311 i‡(
IsSh¨ed
()Ë
	gbuf„r_
.
	gsh¨ed
->
Ref
();

312  *
	gthis
;

315 
M©chîBa£
(M©chîBa£&& 
Ÿhî
)

316 : 
vèbÀ_
(
Ÿhî
.vèbÀ_), 
buf„r_
(other.buffer_) {

317 
	gŸhî
.
	gvèbÀ_
 = 
nuŒ±r
;

320 
	gM©chîBa£
& 
	g›î©‹
=(
M©chîBa£
&& 
Ÿhî
) {

321 i‡(
this
 =&
Ÿhî
)  *this;

322 
De°roy
();

323 
	gvèbÀ_
 = 
Ÿhî
.
vèbÀ_
;

324 
	gbuf„r_
 = 
Ÿhî
.
buf„r_
;

325 
	gŸhî
.
	gvèbÀ_
 = 
nuŒ±r
;

326  *
	gthis
;

329 ~
M©chîBa£
(Ë
	govîride
 { 
De°roy
(); }

331 
	g¥iv©e
:

332 
	sVTabÀ
 {

333 
boﬁ
 (*
m©ch_™d_ex∂aö
)(c⁄° 
M©chîBa£
&, c⁄° 
	gT
&,

334 
	gM©chResu…Li°íî
*);

335 (*
	gdes¸ibe
)(c⁄° 
	gM©chîBa£
&, 
	g°d
::
o°ªam
*, 
boﬁ
 
	g√g©i⁄
);

338 c⁄° 
	gM©chîDes¸ibîI¡îÁ˚
* (*
	ggë_des¸ibî
)(c⁄° 
	gM©chîBa£
&);

340 (*
	gsh¨ed_de°roy
)(
	gSh¨edPaylﬂdBa£
*);

343 
boﬁ
 
IsSh¨ed
() const {

344  
	gvèbÀ_
 !
nuŒ±r
 && 
vèbÀ_
->
sh¨ed_de°roy
 !=Çullptr;

348 
	gãm∂©e
 <
ty≥«me
 
	gP
>

349 autÿ
M©chAndEx∂aöIm∂
(c⁄° 
M©chîBa£
& 
m
, c⁄° 
T
& 
vÆue
,

350 
M©chResu…Li°íî
* 
li°íî
)

351 -> 
de˛ty≥
(
P
::
Gë
(
m
).
M©chAndEx∂aö
(
vÆue
, 
li°íî
->
°ªam
())) {

352  
	gP
::
Gë
(
m
).
M©chAndEx∂aö
(
vÆue
, 
li°íî
->
°ªam
());

355 
	gãm∂©e
 <
ty≥«me
 
	gP
>

356 autÿ
M©chAndEx∂aöIm∂
(c⁄° 
M©chîBa£
& 
m
, c⁄° 
T
& 
vÆue
,

357 
M©chResu…Li°íî
* 
li°íî
)

358 -> 
de˛ty≥
(
P
::
Gë
(
m
).
M©chAndEx∂aö
(
vÆue
, 
li°íî
)) {

359  
	gP
::
Gë
(
m
).
M©chAndEx∂aö
(
vÆue
, 
li°íî
);

362 
	gãm∂©e
 <
ty≥«me
 
	gP
>

363 
Des¸ibeIm∂
(c⁄° 
M©chîBa£
& 
m
, 
°d
::
o°ªam
* 
os
,

364 
boﬁ
 
√g©i⁄
) {

365 i‡(
	g√g©i⁄
) {

366 
	gP
::
Gë
(
m
).
Des¸ibeNeg©i⁄To
(
os
);

368 
	gP
::
Gë
(
m
).
Des¸ibeTo
(
os
);

372 
	gãm∂©e
 <
ty≥«me
 
	gP
>

373 c⁄° 
M©chîDes¸ibîI¡îÁ˚
* 
GëDes¸ibîIm∂
(

374 c⁄° 
M©chîBa£
& 
m
) {

381  
	g°d
::
gë
<(

382 
°d
::
is_c⁄vîtibÀ
<
de˛ty≥
(&
P
::
Gë
(
m
)),

383 c⁄° 
	gM©chîDes¸ibîI¡îÁ˚
*>::
vÆue


385 : 0)>(
°d
::
make_tu∂e
(&
m
, &
P
::
Gë
(m)));

388 
	gãm∂©e
 <
ty≥«me
 
	gP
>

389 c⁄° 
VTabÀ
* 
GëVTabÀ
() {

390 
c⁄°ex¥
 
VTabÀ
 
	gkVTabÀ
 = {&
M©chAndEx∂aöIm∂
<
P
>,

391 &
Des¸ibeIm∂
<
P
>, &
GëDes¸ibîIm∂
<P>,

392 
P
::
sh¨ed_de°roy
};

393  &
	gkVTabÀ
;

396 
	uBuf„r
 {

398 * 
	g±r
;

399 
	gd
;

400 
öt64_t
 
	gi
;

402 
Sh¨edPaylﬂdBa£
* 
	gsh¨ed
;

405 
De°roy
() {

406 i‡(
IsSh¨ed
(Ë&& 
	gbuf„r_
.
	gsh¨ed
->
Uƒef
()) {

407 
	gvèbÀ_
->
sh¨ed_de°roy
(
buf„r_
.
sh¨ed
);

411 
	gãm∂©e
 <
ty≥«me
 
	gM
>

412 
c⁄°ex¥
 
boﬁ
 
IsI∆öed
() {

413  (
	gM
Ë<(
Buf„r
Ë&& 
Æignof
(
M
) <=álignof(Buffer) &&

414 
°d
::
is_åivüŒy_c›y_c⁄°ru˘ibÀ
<
M
>::
vÆue
 &&

415 
°d
::
is_åivüŒy_de°ru˘ibÀ
<
M
>::
vÆue
;

418 
	gãm∂©e
 <
ty≥«me
 
	gM
, 
	gboﬁ
 = 
M©chîBa£
::
IsI∆öed
<
M
>()>

419 
	sVÆuePﬁicy
 {

420 c⁄° 
M
& 
Gë
(c⁄° 
M©chîBa£
& 
m
) {

423 c⁄° 
M
 *
±r
 = 
°©ic_ˇ°
<const M*>(

424 
°©ic_ˇ°
<c⁄° *>(&
m
.
buf„r_
));

425  *
	g±r
;

427 
Inô
(
M©chîBa£
& 
m
, 
M
 
im∂
) {

428 ::
√w
 (
°©ic_ˇ°
<*>(&
m
.
buf„r_
)Ë
M
(
im∂
);

430 
c⁄°ex¥
áutÿ
	gsh¨ed_de°roy
 = 
nuŒ±r
;

433 
	gãm∂©e
 <
ty≥«me
 
	gM
>

434 
	gVÆuePﬁicy
<
	gM
, 
	gÁl£
> {

435 
usög
 
	gSh¨ed
 = 
Sh¨edPaylﬂd
<
M
>;

436 c⁄° 
	gM
& 
Gë
(c⁄° 
M©chîBa£
& 
m
) {

437  
	g°©ic_ˇ°
<
	gSh¨ed
*>(
	gm
.
	gbuf„r_
.
	gsh¨ed
)->
	gvÆue
;

439 
	gãm∂©e
 <
ty≥«me
 
	gArg
>

440 
Inô
(
M©chîBa£
& 
m
, 
Arg
&& 
¨g
) {

441 
	gm
.
	gbuf„r_
.
	gsh¨ed
 = 
√w
 
Sh¨ed
(
°d
::
f‹w¨d
<
Arg
>(
¨g
));

443 
c⁄°ex¥
áutÿ
	gsh¨ed_de°roy
 = &
Sh¨ed
::
De°roy
;

446 
	gãm∂©e
 <
ty≥«me
 
	gU
, 
boﬁ
 
	gB
>

447 
	gVÆuePﬁicy
<c⁄° 
	gM©chîI¡îÁ˚
<
	gU
>*, 
	gB
> {

448 
usög
 
	gM
 = c⁄° 
M©chîI¡îÁ˚
<
U
>;

449 
usög
 
	gSh¨ed
 = 
Sh¨edPaylﬂd
<
°d
::
unique_±r
<
M
>>;

450 c⁄° 
	gM
& 
Gë
(c⁄° 
M©chîBa£
& 
m
) {

451  *
	g°©ic_ˇ°
<
	gSh¨ed
*>(
	gm
.
	gbuf„r_
.
	gsh¨ed
)->
	gvÆue
;

453 
Inô
(
M©chîBa£
& 
m
, 
M
* 
im∂
) {

454 
	gm
.
	gbuf„r_
.
	gsh¨ed
 = 
√w
 
Sh¨ed
(
°d
::
unique_±r
<
M
>(
im∂
));

457 
c⁄°ex¥
áutÿ
	gsh¨ed_de°roy
 = &
Sh¨ed
::
De°roy
;

460 
	gãm∂©e
 <
ty≥«me
 
	gM
>

461 
Inô
(
M
&& 
m
) {

462 
usög
 
	gMM
 = 
ty≥«me
 
°d
::
deˇy
<
M
>::
ty≥
;

463 
usög
 
	gPﬁicy
 = 
VÆuePﬁicy
<
MM
>;

464 
	gvèbÀ_
 = 
GëVTabÀ
<
Pﬁicy
>();

465 
	gPﬁicy
::
Inô
(*
this
, 
°d
::
f‹w¨d
<
M
>(
m
));

468 c⁄° 
VTabÀ
* 
	gvèbÀ_
;

469 
Buf„r
 
	gbuf„r_
;

478 
	gãm∂©e
 <
ty≥«me
 
	gT
>

479 
˛ass
 
	gM©chî
 : 
public
 
öã∫Æ
::
M©chîBa£
<
T
> {

480 
public
:

484 
ex∂icô
 
M©chî
() {}

487 
ex∂icô
 
M©chî
(c⁄° 
M©chîI¡îÁ˚
<c⁄° 
T
&>* 
im∂
)

488 : 
öã∫Æ
::
M©chîBa£
<
T
>(
im∂
) {}

490 
ãm∂©e
 <
ty≥«me
 
U
>

491 
ex∂icô
 
M©chî
(

492 c⁄° 
M©chîI¡îÁ˚
<
U
>* 
im∂
,

493 
ty≥«me
 
°d
::
íabÀ_if
<!°d::
is_ßme
<
U
, c⁄° U&>::
vÆue
>::
ty≥
* =

494 
nuŒ±r
)

495 : 
öã∫Æ
::
M©chîBa£
<
T
>(
im∂
) {}

497 
ãm∂©e
 <
ty≥«me
 
M
, 
	gty≥«me
 =Åy≥«mê
°d
::
ªmove_ª„ªn˚
<

498 
M
>::
ty≥
::
is_gã°_m©chî
>

499 
M©chî
(
M
&& 
m
Ë: 
öã∫Æ
::
M©chîBa£
<
T
>(
°d
::
f‹w¨d
<M>(m)) {}

503 
M©chî
(
T
 
vÆue
);

509 
	gãm∂©e
 <>

510 
˛ass
 
GTEST_API_
 
	gM©chî
<c⁄° 
	g°d
::
°rög
&>

511 : 
public
 
öã∫Æ
::
M©chîBa£
<c⁄° 
°d
::
°rög
&> {

512 
public
:

513 
M©chî
() {}

515 
ex∂icô
 
M©chî
(c⁄° 
M©chîI¡îÁ˚
<c⁄° 
°d
::
°rög
&>* 
im∂
)

516 : 
öã∫Æ
::
M©chîBa£
<c⁄° 
°d
::
°rög
&>(
im∂
) {}

518 
ãm∂©e
 <
ty≥«me
 
M
, 
	gty≥«me
 =Åy≥«mê
°d
::
ªmove_ª„ªn˚
<

519 
M
>::
ty≥
::
is_gã°_m©chî
>

520 
M©chî
(
M
&& 
m
)

521 : 
öã∫Æ
::
M©chîBa£
<c⁄° 
°d
::
°rög
&>(°d::
f‹w¨d
<
M
>(
m
)) {}

525 
M©chî
(c⁄° 
°d
::
°rög
& 
s
);

528 
M©chî
(c⁄° * 
s
);

531 
	gãm∂©e
 <>

532 
˛ass
 
GTEST_API_
 
	gM©chî
<
	g°d
::
°rög
>

533 : 
public
 
öã∫Æ
::
M©chîBa£
<
°d
::
°rög
> {

534 
public
:

535 
M©chî
() {}

537 
ex∂icô
 
M©chî
(c⁄° 
M©chîI¡îÁ˚
<c⁄° 
°d
::
°rög
&>* 
im∂
)

538 : 
öã∫Æ
::
M©chîBa£
<
°d
::
°rög
>(
im∂
) {}

539 
ex∂icô
 
M©chî
(c⁄° 
M©chîI¡îÁ˚
<
°d
::
°rög
>* 
im∂
)

540 : 
öã∫Æ
::
M©chîBa£
<
°d
::
°rög
>(
im∂
) {}

542 
ãm∂©e
 <
ty≥«me
 
M
, 
	gty≥«me
 =Åy≥«mê
°d
::
ªmove_ª„ªn˚
<

543 
M
>::
ty≥
::
is_gã°_m©chî
>

544 
M©chî
(
M
&& 
m
)

545 : 
öã∫Æ
::
M©chîBa£
<
°d
::
°rög
>(°d::
f‹w¨d
<
M
>(
m
)) {}

549 
M©chî
(c⁄° 
°d
::
°rög
& 
s
);

552 
M©chî
(c⁄° * 
s
);

555 #i‡
GTEST_INTERNAL_HAS_STRING_VIEW


559 
	gãm∂©e
 <>

560 
˛ass
 
GTEST_API_
 
	gM©chî
<c⁄° 
	göã∫Æ
::
SåögVõw
&>

561 : 
public
 
öã∫Æ
::
M©chîBa£
<c⁄° i¡î«l::
SåögVõw
&> {

562 
public
:

563 
M©chî
() {}

565 
ex∂icô
 
M©chî
(c⁄° 
M©chîI¡îÁ˚
<c⁄° 
öã∫Æ
::
SåögVõw
&>* 
im∂
)

566 : 
öã∫Æ
::
M©chîBa£
<c⁄° i¡î«l::
SåögVõw
&>(
im∂
) {}

568 
ãm∂©e
 <
ty≥«me
 
M
, 
	gty≥«me
 =Åy≥«mê
°d
::
ªmove_ª„ªn˚
<

569 
M
>::
ty≥
::
is_gã°_m©chî
>

570 
M©chî
(
M
&& 
m
)

571 : 
öã∫Æ
::
M©chîBa£
<c⁄° i¡î«l::
SåögVõw
&>(
°d
::
f‹w¨d
<
M
>(
m
)) {

576 
M©chî
(c⁄° 
°d
::
°rög
& 
s
);

579 
M©chî
(c⁄° * 
s
);

582 
M©chî
(
öã∫Æ
::
SåögVõw
 
s
);

585 
	gãm∂©e
 <>

586 
˛ass
 
GTEST_API_
 
	gM©chî
<
	göã∫Æ
::
SåögVõw
>

587 : 
public
 
öã∫Æ
::
M©chîBa£
<öã∫Æ::
SåögVõw
> {

588 
public
:

589 
M©chî
() {}

591 
ex∂icô
 
M©chî
(c⁄° 
M©chîI¡îÁ˚
<c⁄° 
öã∫Æ
::
SåögVõw
&>* 
im∂
)

592 : 
öã∫Æ
::
M©chîBa£
<öã∫Æ::
SåögVõw
>(
im∂
) {}

593 
ex∂icô
 
M©chî
(c⁄° 
M©chîI¡îÁ˚
<
öã∫Æ
::
SåögVõw
>* 
im∂
)

594 : 
öã∫Æ
::
M©chîBa£
<öã∫Æ::
SåögVõw
>(
im∂
) {}

596 
ãm∂©e
 <
ty≥«me
 
M
, 
	gty≥«me
 =Åy≥«mê
°d
::
ªmove_ª„ªn˚
<

597 
M
>::
ty≥
::
is_gã°_m©chî
>

598 
M©chî
(
M
&& 
m
)

599 : 
öã∫Æ
::
M©chîBa£
<öã∫Æ::
SåögVõw
>(
°d
::
f‹w¨d
<
M
>(
m
)) {}

603 
M©chî
(c⁄° 
°d
::
°rög
& 
s
);

606 
M©chî
(c⁄° * 
s
);

609 
M©chî
(
öã∫Æ
::
SåögVõw
 
s
);

614 
	gãm∂©e
 <
ty≥«me
 
	gT
>

615 
	g°d
::
o°ªam
& 
›î©‹
<<(
°d
::o°ªam& 
os
, c⁄° 
	gM©chî
<
	gT
>& 
	gm©chî
) {

616 
	gm©chî
.
Des¸ibeTo
(&
os
);

617  
	gos
;

632 
	gãm∂©e
 <
˛ass
 
	gIm∂
>

633 ˛as†
	cPﬁym‹phicM©chî
 {

634 
	gpublic
:

635 
ex∂icô
 
Pﬁym‹phicM©chî
(c⁄° 
Im∂
& 
™_im∂
Ë: 
im∂_
(an_impl) {}

639 
Im∂
& 
muèbÀ_im∂
(Ë{  
im∂_
; }

643 c⁄° 
	gIm∂
& 
im∂
(Ëc⁄° {  
	gim∂_
; }

645 
	gãm∂©e
 <
ty≥«me
 
	gT
>

646 
›î©‹
 
	gM©chî
<
	gT
>() const {

647  
	gM©chî
<
	gT
>(
√w
 
	gM⁄om‹phicIm∂
<c⁄° T&>(
	gim∂_
));

650 
	g¥iv©e
:

651 
ãm∂©e
 <
ty≥«me
 
T
>

652 
˛ass
 
M⁄om‹phicIm∂
 : 
public
 
M©chîI¡îÁ˚
<
T
> {

653 
public
:

654 
ex∂icô
 
M⁄om‹phicIm∂
(c⁄° 
Im∂
& 
im∂
Ë: 
im∂_
(impl) {}

656 
Des¸ibeTo
(::
°d
::
o°ªam
* 
os
Ëc⁄° 
ovîride
 { 
im∂_
.DescribeTo(os); }

658 
Des¸ibeNeg©i⁄To
(::
°d
::
o°ªam
* 
os
Ëc⁄° 
ovîride
 {

659 
im∂_
.
Des¸ibeNeg©i⁄To
(
os
);

662 
boﬁ
 
M©chAndEx∂aö
(
T
 
x
, 
M©chResu…Li°íî
* 
li°íî
Ëc⁄° 
	govîride
 {

663  
	gim∂_
.
M©chAndEx∂aö
(
x
, 
li°íî
);

666 
	g¥iv©e
:

667 c⁄° 
Im∂
 
im∂_
;

670 
Im∂
 
	gim∂_
;

679 
	gãm∂©e
 <
ty≥«me
 
	gT
>

680 
ölöe
 
	gM©chî
<
	gT
> 
MakeM©chî
(c⁄° 
M©chîI¡îÁ˚
<
T
>* 
im∂
) {

681  
	gM©chî
<
	gT
>(
	gim∂
);

691 
	gãm∂©e
 <
˛ass
 
	gIm∂
>

692 
ölöe
 
	gPﬁym‹phicM©chî
<
	gIm∂
> 
	$MakePﬁym‹phicM©chî
(c⁄° 
Im∂
& 
im∂
) {

693  
Pﬁym‹phicM©chî
<
Im∂
>(
im∂
);

694 
	}
}

696 
«me•a˚
 
	göã∫Æ
 {

707 
	gãm∂©e
 <
ty≥«me
 
	gD
,Åy≥«mê
	gRhs
,Åy≥«mê
	gOp
>

708 ˛as†
	cCom∑ris⁄Ba£
 {

709 
	gpublic
:

710 
ex∂icô
 
Com∑ris⁄Ba£
(c⁄° 
Rhs
& 
rhs
Ë: 
rhs_
(rhs) {}

712 
usög
 
is_gã°_m©chî
 = ;

714 
	gãm∂©e
 <
ty≥«me
 
	gLhs
>

715 
boﬁ
 
M©chAndEx∂aö
(c⁄° 
Lhs
& 
lhs
, 
°d
::
o°ªam
*) const {

716  
Op
()(
lhs
, 
Unwøp
(
rhs_
));

718 
Des¸ibeTo
(
°d
::
o°ªam
* 
os
) const {

719 *
os
 << 
D
::
Desc
() << " ";

720 
UnivîßlPröt
(
Unwøp
(
rhs_
), 
os
);

722 
Des¸ibeNeg©i⁄To
(
°d
::
o°ªam
* 
os
) const {

723 *
os
 << 
D
::
Neg©edDesc
() << " ";

724 
UnivîßlPröt
(
Unwøp
(
rhs_
), 
os
);

727 
	g¥iv©e
:

728 
ãm∂©e
 <
ty≥«me
 
T
>

729 c⁄° 
T
& 
Unwøp
(c⁄° T& 
v
) {

730  
v
;

732 
	gãm∂©e
 <
ty≥«me
 
	gT
>

733 c⁄° 
	gT
& 
Unwøp
(
°d
::
ª„ªn˚_wøµî
<
T
> 
v
) {

734  
v
;

737 
Rhs
 
	grhs_
;

740 
	gãm∂©e
 <
ty≥«me
 
	gRhs
>

741 
˛ass
 
	gEqM©chî
 : 
public
 
Com∑ris⁄Ba£
<
EqM©chî
<
Rhs
>, 
	gRhs
, 
	gAnyEq
> {

742 
	gpublic
:

743 
ex∂icô
 
EqM©chî
(c⁄° 
Rhs
& 
rhs
)

744 : 
Com∑ris⁄Ba£
<
EqM©chî
<
Rhs
>, 
	gRhs
, 
	gAnyEq
>(
	grhs
) { }

745 c⁄° * 
Desc
() {  "isÉqualÅo"; }

746 c⁄° * 
Neg©edDesc
() {  "isn'tÉqualÅo"; }

748 
	gãm∂©e
 <
ty≥«me
 
	gRhs
>

749 
˛ass
 
	gNeM©chî
 : 
public
 
Com∑ris⁄Ba£
<
NeM©chî
<
Rhs
>, 
	gRhs
, 
	gAnyNe
> {

750 
	gpublic
:

751 
ex∂icô
 
NeM©chî
(c⁄° 
Rhs
& 
rhs
)

752 : 
Com∑ris⁄Ba£
<
NeM©chî
<
Rhs
>, 
	gRhs
, 
	gAnyNe
>(
	grhs
) { }

753 c⁄° * 
Desc
() {  "isn'tÉqualÅo"; }

754 c⁄° * 
Neg©edDesc
() {  "isÉqualÅo"; }

756 
	gãm∂©e
 <
ty≥«me
 
	gRhs
>

757 
˛ass
 
	gLtM©chî
 : 
public
 
Com∑ris⁄Ba£
<
LtM©chî
<
Rhs
>, 
	gRhs
, 
	gAnyLt
> {

758 
	gpublic
:

759 
ex∂icô
 
LtM©chî
(c⁄° 
Rhs
& 
rhs
)

760 : 
Com∑ris⁄Ba£
<
LtM©chî
<
Rhs
>, 
	gRhs
, 
	gAnyLt
>(
	grhs
) { }

761 c⁄° * 
Desc
() {  "is <"; }

762 c⁄° * 
Neg©edDesc
() {  "isn't <"; }

764 
	gãm∂©e
 <
ty≥«me
 
	gRhs
>

765 
˛ass
 
	gGtM©chî
 : 
public
 
Com∑ris⁄Ba£
<
GtM©chî
<
Rhs
>, 
	gRhs
, 
	gAnyGt
> {

766 
	gpublic
:

767 
ex∂icô
 
GtM©chî
(c⁄° 
Rhs
& 
rhs
)

768 : 
Com∑ris⁄Ba£
<
GtM©chî
<
Rhs
>, 
	gRhs
, 
	gAnyGt
>(
	grhs
) { }

769 c⁄° * 
Desc
() {  "is >"; }

770 c⁄° * 
Neg©edDesc
() {  "isn't >"; }

772 
	gãm∂©e
 <
ty≥«me
 
	gRhs
>

773 
˛ass
 
	gLeM©chî
 : 
public
 
Com∑ris⁄Ba£
<
LeM©chî
<
Rhs
>, 
	gRhs
, 
	gAnyLe
> {

774 
	gpublic
:

775 
ex∂icô
 
LeM©chî
(c⁄° 
Rhs
& 
rhs
)

776 : 
Com∑ris⁄Ba£
<
LeM©chî
<
Rhs
>, 
	gRhs
, 
	gAnyLe
>(
	grhs
) { }

777 c⁄° * 
Desc
() {  "is <="; }

778 c⁄° * 
Neg©edDesc
() {  "isn't <="; }

780 
	gãm∂©e
 <
ty≥«me
 
	gRhs
>

781 
˛ass
 
	gGeM©chî
 : 
public
 
Com∑ris⁄Ba£
<
GeM©chî
<
Rhs
>, 
	gRhs
, 
	gAnyGe
> {

782 
	gpublic
:

783 
ex∂icô
 
GeM©chî
(c⁄° 
Rhs
& 
rhs
)

784 : 
Com∑ris⁄Ba£
<
GeM©chî
<
Rhs
>, 
	gRhs
, 
	gAnyGe
>(
	grhs
) { }

785 c⁄° * 
Desc
() {  "is >="; }

786 c⁄° * 
Neg©edDesc
() {  "isn't >="; }

789 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	gty≥«me
 =Åy≥«mê
°d
::
íabÀ_if
<

790 
°d
::
is_c⁄°ru˘ibÀ
<°d::
°rög
, 
	gT
>::
vÆue
>::
ty≥
>

791 
usög
 
SåögLike
 = 
T
;

796 ˛as†
	cM©chesRegexM©chî
 {

797 
	gpublic
:

798 
M©chesRegexM©chî
(c⁄° 
RE
* 
ªgex
, 
boﬁ
 
fuŒ_m©ch
)

799 : 
ªgex_
(
ªgex
), 
fuŒ_m©ch_
(
fuŒ_m©ch
) {}

801 #i‡
GTEST_INTERNAL_HAS_STRING_VIEW


802 
boﬁ
 
M©chAndEx∂aö
(c⁄° 
öã∫Æ
::
SåögVõw
& 
s
,

803 
M©chResu…Li°íî
* 
li°íî
) const {

804  
M©chAndEx∂aö
(
°d
::
°rög
(
s
), 
li°íî
);

813 
	gãm∂©e
 <
ty≥«me
 
	gCh¨Ty≥
>

814 
boﬁ
 
M©chAndEx∂aö
(
Ch¨Ty≥
* 
s
, 
M©chResu…Li°íî
* 
li°íî
) const {

815  
	gs
 !
nuŒ±r
 && 
M©chAndEx∂aö
(
°d
::
°rög
(
s
), 
li°íî
);

822 
	gãm∂©e
 <
˛ass
 
	gM©chìSåögTy≥
>

823 
boﬁ
 
M©chAndEx∂aö
(c⁄° 
M©chìSåögTy≥
& 
s
,

824 
M©chResu…Li°íî
* ) const {

825 c⁄° 
	g°d
::
°rög
& 
s2
(
s
);

826  
	gfuŒ_m©ch_
 ? 
	gRE
::
FuŒM©ch
(
s2
, *
ªgex_
)

827 : 
RE
::
P¨tülM©ch
(
s2
, *
ªgex_
);

830 
Des¸ibeTo
(::
°d
::
o°ªam
* 
os
) const {

831 *
os
 << (
fuŒ_m©ch_
 ? "matches" : "contains") << "ÑegularÉxpression ";

832 
	gUnivîßlPröãr
<
	g°d
::
°rög
>::
Pröt
(
ªgex_
->
∑âîn
(), 
os
);

835 
Des¸ibeNeg©i⁄To
(::
°d
::
o°ªam
* 
os
) const {

836 *
os
 << "d€¢'à" << (
fuŒ_m©ch_
 ? "match" : "contain")

838 
	gUnivîßlPröãr
<
	g°d
::
°rög
>::
Pröt
(
ªgex_
->
∑âîn
(), 
os
);

841 
	g¥iv©e
:

842 c⁄° 
°d
::
sh¨ed_±r
<c⁄° 
RE
> 
ªgex_
;

843 c⁄° 
boﬁ
 
	gfuŒ_m©ch_
;

849 
ölöe
 
	gPﬁym‹phicM©chî
<
	göã∫Æ
::
M©chesRegexM©chî
> 
	$M©chesRegex
(

850 c⁄° 
öã∫Æ
::
RE
* 
ªgex
) {

851  
	`MakePﬁym‹phicM©chî
(
öã∫Æ
::
	`M©chesRegexM©chî
(
ªgex
, 
åue
));

852 
	}
}

853 
	gãm∂©e
 <
ty≥«me
 
	gT
 = 
°d
::
°rög
>

854 
Pﬁym‹phicM©chî
<
öã∫Æ
::
M©chesRegexM©chî
> 
M©chesRegex
(

855 c⁄° 
öã∫Æ
::
SåögLike
<
T
>& 
ªgex
) {

856  
M©chesRegex
(
√w
 
öã∫Æ
::
RE
(
°d
::
°rög
(
ªgex
)));

861 
ölöe
 
	gPﬁym‹phicM©chî
<
	göã∫Æ
::
M©chesRegexM©chî
> 
	$C⁄èösRegex
(

862 c⁄° 
öã∫Æ
::
RE
* 
ªgex
) {

863  
	`MakePﬁym‹phicM©chî
(
öã∫Æ
::
	`M©chesRegexM©chî
(
ªgex
, 
Ál£
));

864 
	}
}

865 
	gãm∂©e
 <
ty≥«me
 
	gT
 = 
°d
::
°rög
>

866 
Pﬁym‹phicM©chî
<
öã∫Æ
::
M©chesRegexM©chî
> 
C⁄èösRegex
(

867 c⁄° 
öã∫Æ
::
SåögLike
<
T
>& 
ªgex
) {

868  
C⁄èösRegex
(
√w
 
öã∫Æ
::
RE
(
°d
::
°rög
(
ªgex
)));

874 
	gãm∂©e
 <
ty≥«me
 
	gT
>

875 
ölöe
 
	göã∫Æ
::
EqM©chî
<
T
> 
	$Eq
(
T
 
x
Ë{  
öã∫Æ
::
EqM©chî
<T>(x); 
	}
}

879 
	gãm∂©e
 <
ty≥«me
 
	gT
>

880 
	gM©chî
<
	gT
>::
	$M©chî
(
T
 
vÆue
Ë{ *
this
 = 
	`Eq
(vÆue); 
	}
}

894 
	gãm∂©e
 <
ty≥«me
 
	gLhs
,Åy≥«mê
	gRhs
>

895 
ölöe
 
	gM©chî
<
	gLhs
> 
	$Ty≥dEq
(c⁄° 
Rhs
& 
rhs
Ë{  
	`Eq
‘hs); 
	}
}

898 
	gãm∂©e
 <
ty≥«me
 
	gRhs
>

899 
ölöe
 
	göã∫Æ
::
GeM©chî
<
Rhs
> 
	$Ge
(
Rhs
 
x
) {

900  
öã∫Æ
::
GeM©chî
<
Rhs
>(
x
);

901 
	}
}

904 
	gãm∂©e
 <
ty≥«me
 
	gRhs
>

905 
ölöe
 
	göã∫Æ
::
GtM©chî
<
Rhs
> 
	$Gt
(
Rhs
 
x
) {

906  
öã∫Æ
::
GtM©chî
<
Rhs
>(
x
);

907 
	}
}

910 
	gãm∂©e
 <
ty≥«me
 
	gRhs
>

911 
ölöe
 
	göã∫Æ
::
LeM©chî
<
Rhs
> 
	$Le
(
Rhs
 
x
) {

912  
öã∫Æ
::
LeM©chî
<
Rhs
>(
x
);

913 
	}
}

916 
	gãm∂©e
 <
ty≥«me
 
	gRhs
>

917 
ölöe
 
	göã∫Æ
::
LtM©chî
<
Rhs
> 
	$Lt
(
Rhs
 
x
) {

918  
öã∫Æ
::
LtM©chî
<
Rhs
>(
x
);

919 
	}
}

922 
	gãm∂©e
 <
ty≥«me
 
	gRhs
>

923 
ölöe
 
	göã∫Æ
::
NeM©chî
<
Rhs
> 
	$Ne
(
Rhs
 
x
) {

924  
öã∫Æ
::
NeM©chî
<
Rhs
>(
x
);

925 
	}
}

928 
	$GTEST_DISABLE_MSC_WARNINGS_POP_
()

	@/usr/include/gtest/gtest-message.h

47 #i‚de‡
GOOGLETEST_INCLUDE_GTEST_GTEST_MESSAGE_H_


48 
	#GOOGLETEST_INCLUDE_GTEST_GTEST_MESSAGE_H_


	)

50 
	~<limôs
>

51 
	~<mem‹y
>

52 
	~<s°ªam
>

54 
	~"gã°/öã∫Æ/gã°-p‹t.h
"

56 
GTEST_DISABLE_MSC_WARNINGS_PUSH_
(4251 \

61 
	g›î©‹
<<(c⁄° 
	gã°ög
::
öã∫Æ
::
Se¸ë
&, );

63 
«me•a˚
 
	gã°ög
 {

91 ˛as†
	cGTEST_API_
 
	gMesßge
 {

92 
	g¥iv©e
:

95 
°d
::
	to°ªam
& (*
	tBasicN¨rowIoM™ù
)(
	t°d
::ostream&);

97 
	gpublic
:

99 
Mesßge
();

102 
Mesßge
(c⁄° Mesßge& 
msg
Ë: 
ss_
(
√w
 ::
°d
::
°rög°ªam
) {

103 *
ss_
 << 
msg
.
GëSåög
();

107 
ex∂icô
 
Mesßge
(c⁄° * 
°r
Ë: 
ss_
(
√w
 ::
°d
::
°rög°ªam
) {

108 *
ss_
 << 
°r
;

112 
	gãm∂©e
 <
ty≥«me
 
	gT
>

113 
ölöe
 
	gMesßge
& 
	g›î©‹
 <<(c⁄° 
	gT
& 
	gvÆ
) {

128 
	gusög
 ::
›î©‹
 <<;

129 *
	gss_
 << 
	gvÆ
;

130  *
	gthis
;

146 
	gãm∂©e
 <
ty≥«me
 
	gT
>

147 
ölöe
 
	gMesßge
& 
	g›î©‹
 <<(
T
* c⁄°& 
	gpoöãr
) {

148 i‡(
	gpoöãr
 =
nuŒ±r
) {

149 *
ss_
 << "(null)";

151 *
	gss_
 << 
	gpoöãr
;

153  *
	gthis
;

162 
	gMesßge
& 
	g›î©‹
 <<(
BasicN¨rowIoM™ù
 
	gvÆ
) {

163 *
	gss_
 << 
	gvÆ
;

164  *
	gthis
;

168 
	gMesßge
& 
	g›î©‹
 <<(
boﬁ
 
	gb
) {

169  *
	gthis
 << (
	gb
 ? "true" : "false");

174 
	gMesßge
& 
	g›î©‹
 <<(c⁄° 
wch¨_t
* 
	gwide_c_°r
);

175 
	gMesßge
& 
	g›î©‹
 <<(
wch¨_t
* 
	gwide_c_°r
);

177 #i‡
GTEST_HAS_STD_WSTRING


180 
	gMesßge
& 
	g›î©‹
 <<(c⁄° ::
°d
::
w°rög
& 
w°r
);

187 
	g°d
::
°rög
 
GëSåög
() const;

189 
	g¥iv©e
:

191 c⁄° 
°d
::
unique_±r
< ::°d::
°rög°ªam
> 
ss_
;

195 
	g›î©‹
=(c⁄° 
Mesßge
&);

199 
ölöe
 
	g°d
::
o°ªam
& 
›î©‹
 <<(
°d
::o°ªam& 
os
, c⁄° 
	gMesßge
& 
	gsb
) {

200  
	gos
 << 
	gsb
.
GëSåög
();

203 
«me•a˚
 
	göã∫Æ
 {

209 
	gãm∂©e
 <
ty≥«me
 
	gT
>

210 
	g°d
::
°rög
 
SåómabÀToSåög
(c⁄° 
T
& 
°ªamabÀ
) {

211  (
Mesßge
(Ë<< 
°ªamabÀ
).
GëSåög
();

217 
	$GTEST_DISABLE_MSC_WARNINGS_POP_
()

	@/usr/include/gtest/gtest-param-test.h

34 #i‚de‡
GOOGLETEST_INCLUDE_GTEST_GTEST_PARAM_TEST_H_


35 
	#GOOGLETEST_INCLUDE_GTEST_GTEST_PARAM_TEST_H_


	)

52 
˛ass
 
	gFooTe°
 : 
public
 ::
ã°ög
::
Te°WôhP¨am
<const *> {

60 
	$TEST_P
(
FooTe°
, 
D€sBœh
) {

63 
	`EXPECT_TRUE
(
foo
.
	`Bœh
(
	`GëP¨am
()));

65 
	}
}

67 
	$TEST_P
(
FooTe°
, 
HasBœhBœh
) {

69 
	}
}

95 
INSTANTIATE_TEST_SUITE_P
(
In°™tüti⁄Name
,

96 
FooTe°
,

97 
VÆues
("meeny", "miny", "moe"));

118 c⁄° * 
	g≥ts
[] = {"cat", "dog"};

119 
INSTANTIATE_TEST_SUITE_P
(
AnŸhîIn°™tüti⁄Name
, 
FooTe°
, 
VÆuesIn
(
≥ts
));

154 ˛as†
	cBa£Te°
 : 
public
 ::
ã°ög
::
Te°
 {

159 
˛ass
 
	gDîivedTe°
 : 
public
 
Ba£Te°
, 
	gpublic
 ::
ã°ög
::
WôhP¨amI¡îÁ˚
<> {

163 
	$TEST_F
(
Ba£Te°
, 
HasFoo
) {

165 
	}
}

167 
	$TEST_P
(
DîivedTe°
, 
D€sBœh
) {

169 
	`EXPECT_TRUE
(
foo
.
	`Bœh
(
	`GëP¨am
()));

170 
	}
}

174 
	~<ôî©‹
>

175 
	~<utûôy
>

177 
	~"gã°/öã∫Æ/gã°-öã∫Æ.h
"

178 
	~"gã°/öã∫Æ/gã°-∑øm-utû.h
"

179 
	~"gã°/öã∫Æ/gã°-p‹t.h
"

181 
«me•a˚
 
	gã°ög
 {

225 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gIn¸emítT
>

226 
	göã∫Æ
::
P¨amGíî©‹
<
T
> 
R™ge
(T 
°¨t
, T 
íd
, 
In¸emítT
 
°ï
) {

227  
	göã∫Æ
::
P¨amGíî©‹
<
T
>(

228 
√w
 
öã∫Æ
::
R™geGíî©‹
<
T
, 
	gIn¸emítT
>(
	g°¨t
, 
	gíd
, 
	g°ï
));

231 
	gãm∂©e
 <
ty≥«me
 
	gT
>

232 
	göã∫Æ
::
P¨amGíî©‹
<
T
> 
R™ge
(T 
°¨t
, T 
íd
) {

233  
R™ge
(
°¨t
, 
íd
, 1);

291 
	gãm∂©e
 <
ty≥«me
 
	gF‹w¨dIãøt‹
>

292 
	göã∫Æ
::
P¨amGíî©‹
<

293 
ty≥«me
 
°d
::
ôî©‹_åaôs
<
F‹w¨dIãøt‹
>::
vÆue_ty≥
>

294 
VÆuesIn
(
F‹w¨dIãøt‹
 
begö
, F‹w¨dIãøt‹ 
íd
) {

295 
ty≥«me
 
	t°d
::
	tôî©‹_åaôs
<
	tF‹w¨dIãøt‹
>::
	tvÆue_ty≥
 
	tP¨amTy≥
;

296  
	göã∫Æ
::
P¨amGíî©‹
<
P¨amTy≥
>(

297 
√w
 
öã∫Æ
::
VÆuesInIãøt‹R™geGíî©‹
<
P¨amTy≥
>(
begö
, 
	gíd
));

300 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
size_t
 
	gN
>

301 
	göã∫Æ
::
P¨amGíî©‹
<
T
> 
VÆuesIn
(c⁄° T (&
¨øy
)[
N
]) {

302  
VÆuesIn
(
¨øy
,áºay + 
N
);

305 
	gãm∂©e
 <
˛ass
 
	gC⁄èöî
>

306 
	göã∫Æ
::
P¨amGíî©‹
<
ty≥«me
 
C⁄èöî
::
vÆue_ty≥
> 
VÆuesIn
(

307 c⁄° 
C⁄èöî
& 
c⁄èöî
) {

308  
VÆuesIn
(
c⁄èöî
.
begö
(), c⁄èöî.
íd
());

331 
	gãm∂©e
 <
	gty≥«me
... 
	gT
>

332 
	göã∫Æ
::
VÆueAºay
<
T
...> 
VÆues
(T... 
v
) {

333  
öã∫Æ
::
VÆueAºay
<
T
...>(
°d
::
move
(
v
)...);

356 
ölöe
 
	göã∫Æ
::
P¨amGíî©‹
<
boﬁ
> 
Boﬁ
() {

357  
VÆues
(
Ál£
, 
åue
);

404 
	gãm∂©e
 <
	gty≥«me
... 
	gGíî©‹
>

405 
	göã∫Æ
::
C¨ãsünProdu˘Hﬁdî
<
Gíî©‹
...> 
Comböe
(c⁄° Gíî©‹&... 
g
) {

406  
öã∫Æ
::
C¨ãsünProdu˘Hﬁdî
<
Gíî©‹
...>(
g
...);

409 
	#TEST_P
(
ã°_suôe_«me
, 
ã°_«me
) \

410 
˛ass
 
	`GTEST_TEST_CLASS_NAME_
(
ã°_suôe_«me
, 
ã°_«me
) \

411 : 
public
 
ã°_suôe_«me
 { \

412 
public
: \

413 
	`GTEST_TEST_CLASS_NAME_
(
ã°_suôe_«me
, 
ã°_«me
)() {} \

414 
	`Te°Body
(Ë
ovîride
; \

416 
¥iv©e
: \

417 
	`AddToRegi°ry
() { \

418 ::
ã°ög
::
UnôTe°
::
	`GëIn°™˚
() \

419 ->
	`∑ømëîized_ã°_ªgi°ry
() \

420 .
GëTe°SuôeP©ã∫Hﬁdî
<
ã°_suôe_«me
>( \

421 
	`GTEST_STRINGIFY_
(
ã°_suôe_«me
), \

422 ::
ã°ög
::
öã∫Æ
::
	`CodeLoˇti⁄
(
__FILE__
, 
__LINE__
)) \

423 ->
	`AddTe°P©ã∫
( \

424 
	`GTEST_STRINGIFY_
(
ã°_suôe_«me
), GTEST_STRINGIFY_(
ã°_«me
), \

425 
√w
 ::
ã°ög
::
öã∫Æ
::
Te°MëaFa˘‹y
<
	`GTEST_TEST_CLASS_NAME_
( \

426 
ã°_suôe_«me
, 
ã°_«me
)>(), \

427 ::
ã°ög
::
öã∫Æ
::
	`CodeLoˇti⁄
(
__FILE__
, 
__LINE__
)); \

430 
gã°_ªgi°îög_dummy_
 
GTEST_ATTRIBUTE_UNUSED_
; \

431 
	`GTEST_DISALLOW_COPY_AND_ASSIGN_
(
	`GTEST_TEST_CLASS_NAME_
(
ã°_suôe_«me
, \

432 
ã°_«me
)); \

434 
	`GTEST_TEST_CLASS_NAME_
(
ã°_suôe_«me
, \

435 
ã°_«me
)::
gã°_ªgi°îög_dummy_
 = \

436 
	`GTEST_TEST_CLASS_NAME_
(
ã°_suôe_«me
, 
ã°_«me
)::
	`AddToRegi°ry
(); \

437 
	`GTEST_TEST_CLASS_NAME_
(
ã°_suôe_«me
, 
ã°_«me
)::
	`Te°Body
()

	)

452 
	#GTEST_EXPAND_
(
¨g
Ë
	)
arg

453 
	#GTEST_GET_FIRST_
(
fú°
, ...Ë
	)
first

454 
	#GTEST_GET_SECOND_
(
fú°
, 
£c⁄d
, ...Ë
	)
second

456 
	#INSTANTIATE_TEST_SUITE_P
(
¥efix
, 
ã°_suôe_«me
, ...) \

457 ::
ã°ög
::
öã∫Æ
::
P¨amGíî©‹
<
ã°_suôe_«me
::
P¨amTy≥
> \

458 
gã°_
##
¥efix
##
ã°_suôe_«me
##
	`_EvÆGíî©‹_
() { \

459  
	`GTEST_EXPAND_
(
	`GTEST_GET_FIRST_
(
__VA_ARGS__
, 
DUMMY_PARAM_
)); \

461 ::
°d
::
°rög
 
gã°_
##
¥efix
##
ã°_suôe_«me
##
	`_EvÆGíî©eName_
( \

462 c⁄° ::
ã°ög
::
Te°P¨amInfo
<
ã°_suôe_«me
::
P¨amTy≥
>& 
öfo
) { \

463 i‡(::
ã°ög
::
öã∫Æ
::
	`AlwaysFÆ£
()) { \

464 ::
ã°ög
::
öã∫Æ
::
	`Te°NŸEm±y
(
	`GTEST_EXPAND_
(
	`GTEST_GET_SECOND_
( \

465 
__VA_ARGS__
, \

466 ::
ã°ög
::
öã∫Æ
::
DeÁu…P¨amName
<
ã°_suôe_«me
::
P¨amTy≥
>, \

467 
DUMMY_PARAM_
))); \

468 autÿ
t
 = 
°d
::
	`make_tu∂e
(
__VA_ARGS__
); \

469 
	`°©ic_as£π
(
°d
::
tu∂e_size
<
	`de˛ty≥
(
t
)>::
vÆue
 <= 2, \

472  ((
	`GTEST_EXPAND_
(
	`GTEST_GET_SECOND_
( \

473 
__VA_ARGS__
, \

474 ::
ã°ög
::
öã∫Æ
::
DeÁu…P¨amName
<
ã°_suôe_«me
::
P¨amTy≥
>, \

475 
DUMMY_PARAM_
))))(
öfo
); \

477 
gã°_
##
¥efix
##
ã°_suôe_«me
##
_dummy_
 \

478 
GTEST_ATTRIBUTE_UNUSED_
 = \

479 ::
ã°ög
::
UnôTe°
::
	`GëIn°™˚
() \

480 ->
	`∑ømëîized_ã°_ªgi°ry
() \

481 .
GëTe°SuôeP©ã∫Hﬁdî
<
ã°_suôe_«me
>( \

482 
	`GTEST_STRINGIFY_
(
ã°_suôe_«me
), \

483 ::
ã°ög
::
öã∫Æ
::
	`CodeLoˇti⁄
(
__FILE__
, 
__LINE__
)) \

484 ->
	`AddTe°SuôeIn°™tüti⁄
( \

485 
	`GTEST_STRINGIFY_
(
¥efix
), \

486 &
gã°_
##
¥efix
##
ã°_suôe_«me
##
_EvÆGíî©‹_
, \

487 &
gã°_
##
¥efix
##
ã°_suôe_«me
##
_EvÆGíî©eName_
, \

488 
__FILE__
, 
__LINE__
)

	)

492 
	#GTEST_ALLOW_UNINSTANTIATED_PARAMETERIZED_TEST
(
T
) \

493 
«me•a˚
 
gã°_do_nŸ_u£_outside_«me•a˚_sc›e
 {} \

494 c⁄° ::
ã°ög
::
öã∫Æ
::
M¨kAsIgn‹ed
 
gã°_Ælow_ign‹e_
##
	`T
( \

495 
	`GTEST_STRINGIFY_
(
T
))

	)

498 #i‚de‡
GTEST_REMOVE_LEGACY_TEST_CASEAPI_


499 
	#INSTANTIATE_TEST_CASE_P
 \

500 
	`°©ic_as£π
(::
ã°ög
::
öã∫Æ
::
	`In°™tüãTe°Ca£_P_IsDïªˇãd
(), \

502 
INSTANTIATE_TEST_SUITE_P


	)

	@/usr/include/gtest/gtest-printers.h

100 #i‚de‡
GOOGLETEST_INCLUDE_GTEST_GTEST_PRINTERS_H_


101 
	#GOOGLETEST_INCLUDE_GTEST_GTEST_PRINTERS_H_


	)

103 
	~<fun˘i⁄Æ
>

104 
	~<mem‹y
>

105 
	~<o°ªam
>

106 
	~<s°ªam
>

107 
	~<°rög
>

108 
	~<tu∂e
>

109 
	~<ty≥_åaôs
>

110 
	~<utûôy
>

111 
	~<ve˘‹
>

113 
	~"gã°/öã∫Æ/gã°-öã∫Æ.h
"

114 
	~"gã°/öã∫Æ/gã°-p‹t.h
"

116 
«me•a˚
 
	gã°ög
 {

120 
«me•a˚
 
	göã∫Æ
 {

122 
	gãm∂©e
 <
ty≥«me
 
	gT
>

123 
UnivîßlPröt
(c⁄° 
T
& 
vÆue
, ::
°d
::
o°ªam
* 
os
);

127 
	sC⁄èöîPröãr
 {

128 
	gãm∂©e
 <
ty≥«me
 
	gT
,

129 
	gty≥«me
 = 
ty≥«me
 
°d
::
íabÀ_if
<

130 ((
IsC⁄èöîTe°
<
T
>(0)Ë=(
IsC⁄èöî
)) &&

131 !
IsRecursiveC⁄èöî
<
T
>::
vÆue
>::
ty≥
>

132 
PrötVÆue
(c⁄° 
T
& 
c⁄èöî
, 
°d
::
o°ªam
* 
os
) {

133 c⁄° 
size_t
 
kMaxCou¡
 = 32;

134 *
	gos
 << '{';

135 
size_t
 
	gcou¡
 = 0;

136 auto&& 
	gñem
 : 
c⁄èöî
) {

137 i‡(
cou¡
 > 0) {

138 *
os
 << ',';

139 i‡(
	gcou¡
 =
kMaxCou¡
) {

140 *
os
 << " ...";

144 *
	gos
 << ' ';

147 
	göã∫Æ
::
UnivîßlPröt
(
ñem
, 
os
);

148 ++
	gcou¡
;

151 i‡(
	gcou¡
 > 0) {

152 *
	gos
 << ' ';

154 *
	gos
 << '}';

164 
	sFun˘i⁄PoöãrPröãr
 {

165 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	gty≥«me
 =Åy≥«mê
°d
::
íabÀ_if
<

166 
°d
::
is_fun˘i⁄
<
T
>::
vÆue
>::
ty≥
>

167 
PrötVÆue
(
T
* 
p
, ::
°d
::
o°ªam
* 
os
) {

168 i‡(
p
 =
nuŒ±r
) {

169 *
os
 << "NULL";

174 *
	gos
 << 
	gªöãΩªt_ˇ°
<c⁄° *>(
	gp
);

179 
	sPoöãrPröãr
 {

180 
	gãm∂©e
 <
ty≥«me
 
	gT
>

181 
PrötVÆue
(
T
* 
p
, ::
°d
::
o°ªam
* 
os
) {

182 i‡(
p
 =
nuŒ±r
) {

183 *
os
 << "NULL";

188 *
	gos
 << 
	gp
;

193 
«me•a˚
 
	göã∫Æ_°ªam_›î©‹_wôhout_Àxiˇl_«me_lookup
 {

199 
	sLookupBlockî
 {};

200 
	g›î©‹
<<(
	gLookupBlockî
, LookupBlocker);

202 
	sSåómPröãr
 {

203 
	gãm∂©e
 <
ty≥«me
 
	gT
,

206 
	gty≥«me
 = 
ty≥«me
 
°d
::
íabÀ_if
<

207 !
°d
::
is_membî_poöãr
<
T
>::
vÆue
>::
ty≥
,

210 
	gty≥«me
 = 
de˛ty≥
(
°d
::
de˛vÆ
<°d::
o°ªam
&>()

211 << 
°d
::
de˛vÆ
<c⁄° 
T
&>())>

212 
PrötVÆue
(c⁄° 
T
& 
vÆue
, ::
°d
::
o°ªam
* 
os
) {

215 *
os
 << 
vÆue
;

221 
	sPrŸobufPröãr
 {

225 c⁄° 
size_t
 
	gkPrŸobufO√LöîMaxLígth
 = 50;

227 
	gãm∂©e
 <
ty≥«me
 
	gT
,

228 
	gty≥«me
 = 
ty≥«me
 
°d
::
íabÀ_if
<

229 
öã∫Æ
::
HasDebugSåögAndSh‹tDebugSåög
<
T
>::
vÆue
>::
ty≥
>

230 
PrötVÆue
(c⁄° 
T
& 
vÆue
, ::
°d
::
o°ªam
* 
os
) {

231 
°d
::
°rög
 
¥ëty_°r
 = 
vÆue
.
Sh‹tDebugSåög
();

232 i‡(
	g¥ëty_°r
.
Àngth
(Ë> 
	gkPrŸobufO√LöîMaxLígth
) {

233 
	g¥ëty_°r
 = "\n" + 
vÆue
.
DebugSåög
();

235 *
	gos
 << ("<" + 
	g¥ëty_°r
 + ">");

239 
	sC⁄vîtibÀToI¡egîPröãr
 {

247 
PrötVÆue
(
öã∫Æ
::
Bigge°I¡
 
vÆue
, ::
°d
::
o°ªam
* 
os
) {

248 *
os
 << 
vÆue
;

252 
	sC⁄vîtibÀToSåögVõwPröãr
 {

253 #i‡
GTEST_INTERNAL_HAS_STRING_VIEW


254 
PrötVÆue
(
öã∫Æ
::
SåögVõw
 
vÆue
, ::
°d
::
o°ªam
* 
os
) {

255 
öã∫Æ
::
UnivîßlPröt
(
vÆue
, 
os
);

263 
GTEST_API_
 
PrötByãsInObje˘To
(c⁄° * 
obj_byãs
,

264 
size_t
 
cou¡
,

265 ::
°d
::
o°ªam
* 
os
);

266 
	sRawByãsPröãr
 {

268 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	gsize_t
 = (
T
)>

269 
PrötVÆue
(c⁄° 
T
& 
vÆue
, ::
°d
::
o°ªam
* 
os
) {

270 
PrötByãsInObje˘To
(

271 
°©ic_ˇ°
<const *>(

273 
ªöãΩªt_ˇ°
<c⁄° *>(
°d
::
addªssof
(
vÆue
))),

274 (
vÆue
), 
os
);

278 
	sFÆlbackPröãr
 {

279 
	gãm∂©e
 <
ty≥«me
 
	gT
>

280 
PrötVÆue
(c⁄° 
T
&, ::
°d
::
o°ªam
* 
os
) {

281 *
os
 << "(incompleteÅype)";

286 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gE
,Åy≥«mê
	gPröãr
, 
	gty≥«me
... 
	gPröãrs
>

287 
	gFödFú°Pröãr
 : 
FödFú°Pröãr
<
T
, 
	gE
, 
	gPröãrs
...> {};

289 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gPröãr
, 
	gty≥«me
... 
	gPröãrs
>

290 
	gFödFú°Pröãr
<

291 
	gT
, 
de˛ty≥
(
Pröãr
::
PrötVÆue
(
°d
::
de˛vÆ
<c⁄° 
T
&>(), 
nuŒ±r
)),

292 
	gPröãr
, 
	gPröãrs
...> {

293 
usög
 
	gty≥
 = 
Pröãr
;

305 
	gãm∂©e
 <
ty≥«me
 
	gT
>

306 
PrötWôhFÆlback
(c⁄° 
T
& 
vÆue
, ::
°d
::
o°ªam
* 
os
) {

307 
usög
 
Pröãr
 = 
ty≥«me
 
FödFú°Pröãr
<

308 
T
, , 
	gC⁄èöîPröãr
, 
	gFun˘i⁄PoöãrPröãr
, 
	gPoöãrPröãr
,

309 
	göã∫Æ_°ªam_›î©‹_wôhout_Àxiˇl_«me_lookup
::
SåómPröãr
,

310 
	gPrŸobufPröãr
, 
	gC⁄vîtibÀToI¡egîPröãr
,

311 
	gC⁄vîtibÀToSåögVõwPröãr
, 
	gRawByãsPröãr
, 
	gFÆlbackPröãr
>::
ty≥
;

312 
	gPröãr
::
PrötVÆue
(
vÆue
, 
os
);

330 
	gãm∂©e
 <
ty≥«me
 
	gToPröt
,Åy≥«mê
	gOthîO≥ønd
>

331 ˛as†
	cF‹m©F‹Com∑ris⁄
 {

332 
	gpublic
:

333 ::
°d
::
°rög
 
F‹m©
(c⁄° 
ToPröt
& 
vÆue
) {

334  ::
ã°ög
::
PrötToSåög
(
vÆue
);

339 
	gãm∂©e
 <
ty≥«me
 
	gToPröt
, 
size_t
 
	gN
,Åy≥«mê
	gOthîO≥ønd
>

340 
˛ass
 
	gF‹m©F‹Com∑ris⁄
<
	gToPröt
[
N
], 
	gOthîO≥ønd
> {

341 
	gpublic
:

342 ::
°d
::
°rög
 
F‹m©
(c⁄° 
ToPröt
* 
vÆue
) {

343  
F‹m©F‹Com∑ris⁄
<c⁄° 
ToPröt
*, 
	gOthîO≥ønd
>::
F‹m©
(
vÆue
);

350 
	#GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_
(
Ch¨Ty≥
) \

351 
ãm∂©e
 <
ty≥«me
 
OthîO≥ønd
> \

352 
˛ass
 
F‹m©F‹Com∑ris⁄
<
Ch¨Ty≥
*, 
OthîO≥ønd
> { \

353 
public
: \

354 ::
°d
::
°rög
 
	`F‹m©
(
Ch¨Ty≥
* 
vÆue
) { \

355  ::
ã°ög
::
	`PrötToSåög
(
°©ic_ˇ°
<c⁄° *>(
vÆue
)); \

357 }

	)

359 
GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_
();

360 
GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_
(const );

361 
GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_
(
wch¨_t
);

362 
GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_
(c⁄° 
wch¨_t
);

363 #ifde‡
__˝p_ch¨8_t


364 
GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_
(
ch¨8_t
);

365 
GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_
(c⁄° 
ch¨8_t
);

367 
GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_
(
ch¨16_t
);

368 
GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_
(c⁄° 
ch¨16_t
);

369 
GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_
(
ch¨32_t
);

370 
GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_
(c⁄° 
ch¨32_t
);

372 #unde‡
GTEST_IMPL_FORMAT_C_STRING_AS_POINTER_


377 
	#GTEST_IMPL_FORMAT_C_STRING_AS_STRING_
(
Ch¨Ty≥
, 
OthîSåögTy≥
) \

378 
ãm∂©e
 <> \

379 
˛ass
 
F‹m©F‹Com∑ris⁄
<
Ch¨Ty≥
*, 
OthîSåögTy≥
> { \

380 
public
: \

381 ::
°d
::
°rög
 
	`F‹m©
(
Ch¨Ty≥
* 
vÆue
) { \

382  ::
ã°ög
::
	`PrötToSåög
(
vÆue
); \

384 }

	)

386 
GTEST_IMPL_FORMAT_C_STRING_AS_STRING_
(, ::
°d
::
°rög
);

387 
GTEST_IMPL_FORMAT_C_STRING_AS_STRING_
(c⁄° , ::
°d
::
°rög
);

388 #ifde‡
__˝p_ch¨8_t


389 
GTEST_IMPL_FORMAT_C_STRING_AS_STRING_
(
ch¨8_t
, ::
°d
::
u8°rög
);

390 
GTEST_IMPL_FORMAT_C_STRING_AS_STRING_
(c⁄° 
ch¨8_t
, ::
°d
::
u8°rög
);

392 
GTEST_IMPL_FORMAT_C_STRING_AS_STRING_
(
ch¨16_t
, ::
°d
::
u16°rög
);

393 
GTEST_IMPL_FORMAT_C_STRING_AS_STRING_
(c⁄° 
ch¨16_t
, ::
°d
::
u16°rög
);

394 
GTEST_IMPL_FORMAT_C_STRING_AS_STRING_
(
ch¨32_t
, ::
°d
::
u32°rög
);

395 
GTEST_IMPL_FORMAT_C_STRING_AS_STRING_
(c⁄° 
ch¨32_t
, ::
°d
::
u32°rög
);

397 #i‡
GTEST_HAS_STD_WSTRING


398 
GTEST_IMPL_FORMAT_C_STRING_AS_STRING_
(
wch¨_t
, ::
°d
::
w°rög
);

399 
GTEST_IMPL_FORMAT_C_STRING_AS_STRING_
(c⁄° 
wch¨_t
, ::
°d
::
w°rög
);

402 #unde‡
GTEST_IMPL_FORMAT_C_STRING_AS_STRING_


412 
	gãm∂©e
 <
ty≥«me
 
	gT1
,Åy≥«mê
	gT2
>

413 
	g°d
::
°rög
 
F‹m©F‹Com∑ris⁄FaûuªMesßge
(

414 c⁄° 
T1
& 
vÆue
, c⁄° 
T2
& ) {

415  
	gF‹m©F‹Com∑ris⁄
<
	gT1
, 
	gT2
>::
F‹m©
(
vÆue
);

425 
	gãm∂©e
 <
ty≥«me
 
	gT
>

426 
˛ass
 
	gUnivîßlPröãr
;

439 
	gãm∂©e
 <
ty≥«me
 
	gT
>

440 
PrötTo
(c⁄° 
T
& 
vÆue
, ::
°d
::
o°ªam
* 
os
) {

441 
öã∫Æ
::
PrötWôhFÆlback
(
vÆue
, 
os
);

449 
GTEST_API_
 
PrötTo
(
c
, ::
°d
::
o°ªam
* 
os
);

450 
GTEST_API_
 
PrötTo
(sig√d 
c
, ::
°d
::
o°ªam
* 
os
);

451 
ölöe
 
PrötTo
(
c
, ::
°d
::
o°ªam
* 
os
) {

455 
PrötTo
(
°©ic_ˇ°
<>(
c
), 
os
);

459 
ölöe
 
PrötTo
(
boﬁ
 
x
, ::
°d
::
o°ªam
* 
os
) {

460 *
os
 << (
x
 ? "true" : "false");

470 
GTEST_API_
 
PrötTo
(
wch¨_t
 
wc
, ::
°d
::
o°ªam
* 
os
);

472 
GTEST_API_
 
PrötTo
(
ch¨32_t
 
c
, ::
°d
::
o°ªam
* 
os
);

473 
ölöe
 
PrötTo
(
ch¨16_t
 
c
, ::
°d
::
o°ªam
* 
os
) {

474 
PrötTo
(
Im∂icôCa°_
<
ch¨32_t
>(
c
), 
os
);

476 #ifde‡
__˝p_ch¨8_t


477 
ölöe
 
PrötTo
(
ch¨8_t
 
c
, ::
°d
::
o°ªam
* 
os
) {

478 
PrötTo
(
Im∂icôCa°_
<
ch¨32_t
>(
c
), 
os
);

483 
GTEST_API_
 
PrötTo
(c⁄° * 
s
, ::
°d
::
o°ªam
* 
os
);

484 
ölöe
 
PrötTo
(* 
s
, ::
°d
::
o°ªam
* 
os
) {

485 
PrötTo
(
Im∂icôCa°_
<c⁄° *>(
s
), 
os
);

490 
ölöe
 
PrötTo
(c⁄° sig√d * 
s
, ::
°d
::
o°ªam
* 
os
) {

491 
PrötTo
(
Im∂icôCa°_
<c⁄° *>(
s
), 
os
);

493 
ölöe
 
PrötTo
(sig√d * 
s
, ::
°d
::
o°ªam
* 
os
) {

494 
PrötTo
(
Im∂icôCa°_
<c⁄° *>(
s
), 
os
);

496 
ölöe
 
PrötTo
(c⁄° * 
s
, ::
°d
::
o°ªam
* 
os
) {

497 
PrötTo
(
Im∂icôCa°_
<c⁄° *>(
s
), 
os
);

499 
ölöe
 
PrötTo
(* 
s
, ::
°d
::
o°ªam
* 
os
) {

500 
PrötTo
(
Im∂icôCa°_
<c⁄° *>(
s
), 
os
);

502 #ifde‡
__˝p_ch¨8_t


504 
GTEST_API_
 
PrötTo
(c⁄° 
ch¨8_t
* 
s
, ::
°d
::
o°ªam
* 
os
);

505 
ölöe
 
PrötTo
(
ch¨8_t
* 
s
, ::
°d
::
o°ªam
* 
os
) {

506 
PrötTo
(
Im∂icôCa°_
<c⁄° 
ch¨8_t
*>(
s
), 
os
);

510 
GTEST_API_
 
PrötTo
(c⁄° 
ch¨16_t
* 
s
, ::
°d
::
o°ªam
* 
os
);

511 
ölöe
 
PrötTo
(
ch¨16_t
* 
s
, ::
°d
::
o°ªam
* 
os
) {

512 
PrötTo
(
Im∂icôCa°_
<c⁄° 
ch¨16_t
*>(
s
), 
os
);

515 
GTEST_API_
 
PrötTo
(c⁄° 
ch¨32_t
* 
s
, ::
°d
::
o°ªam
* 
os
);

516 
ölöe
 
PrötTo
(
ch¨32_t
* 
s
, ::
°d
::
o°ªam
* 
os
) {

517 
PrötTo
(
Im∂icôCa°_
<c⁄° 
ch¨32_t
*>(
s
), 
os
);

525 #i‡!
deföed
(
_MSC_VER
Ë|| deföed(
_NATIVE_WCHAR_T_DEFINED
)

527 
GTEST_API_
 
PrötTo
(c⁄° 
wch¨_t
* 
s
, ::
°d
::
o°ªam
* 
os
);

528 
ölöe
 
PrötTo
(
wch¨_t
* 
s
, ::
°d
::
o°ªam
* 
os
) {

529 
PrötTo
(
Im∂icôCa°_
<c⁄° 
wch¨_t
*>(
s
), 
os
);

538 
	gãm∂©e
 <
ty≥«me
 
	gT
>

539 
PrötRawAºayTo
(c⁄° 
T
 
a
[], 
size_t
 
cou¡
, ::
°d
::
o°ªam
* 
os
) {

540 
UnivîßlPröt
(
a
[0], 
os
);

541 
size_t
 
	gi
 = 1; i !
cou¡
; i++) {

542 *
	gos
 << ", ";

543 
UnivîßlPröt
(
a
[
i
], 
os
);

548 
GTEST_API_
 
PrötSåögTo
(c⁄° ::
°d
::
°rög
&
s
, ::°d::
o°ªam
* 
os
);

549 
ölöe
 
PrötTo
(c⁄° ::
°d
::
°rög
& 
s
, ::°d::
o°ªam
* 
os
) {

550 
PrötSåögTo
(
s
, 
os
);

554 #ifde‡
__˝p_ch¨8_t


555 
GTEST_API_
 
PrötU8SåögTo
(c⁄° ::
°d
::
u8°rög
& 
s
, ::°d::
o°ªam
* 
os
);

556 
ölöe
 
PrötTo
(c⁄° ::
°d
::
u8°rög
& 
s
, ::°d::
o°ªam
* 
os
) {

557 
PrötU8SåögTo
(
s
, 
os
);

562 
GTEST_API_
 
PrötU16SåögTo
(c⁄° ::
°d
::
u16°rög
& 
s
, ::°d::
o°ªam
* 
os
);

563 
ölöe
 
PrötTo
(c⁄° ::
°d
::
u16°rög
& 
s
, ::°d::
o°ªam
* 
os
) {

564 
PrötU16SåögTo
(
s
, 
os
);

568 
GTEST_API_
 
PrötU32SåögTo
(c⁄° ::
°d
::
u32°rög
& 
s
, ::°d::
o°ªam
* 
os
);

569 
ölöe
 
PrötTo
(c⁄° ::
°d
::
u32°rög
& 
s
, ::°d::
o°ªam
* 
os
) {

570 
PrötU32SåögTo
(
s
, 
os
);

574 #i‡
GTEST_HAS_STD_WSTRING


575 
GTEST_API_
 
PrötWideSåögTo
(c⁄° ::
°d
::
w°rög
&
s
, ::°d::
o°ªam
* 
os
);

576 
ölöe
 
PrötTo
(c⁄° ::
°d
::
w°rög
& 
s
, ::°d::
o°ªam
* 
os
) {

577 
PrötWideSåögTo
(
s
, 
os
);

581 #i‡
GTEST_INTERNAL_HAS_STRING_VIEW


583 
ölöe
 
PrötTo
(
öã∫Æ
::
SåögVõw
 
•
, ::
°d
::
o°ªam
* 
os
) {

584 
PrötTo
(::
°d
::
°rög
(
•
), 
os
);

588 
ölöe
 
PrötTo
(
°d
::
nuŒ±r_t
, ::°d::
o°ªam
* 
os
) { *os << "(nullptr)"; }

590 
	gãm∂©e
 <
ty≥«me
 
	gT
>

591 
PrötTo
(
°d
::
ª„ªn˚_wøµî
<
T
> 
ªf
, ::°d::
o°ªam
* 
os
) {

592 
UnivîßlPröãr
<
T
&>::
Pröt
(
ªf
.
gë
(), 
os
);

595 
ölöe
 c⁄° * 
VoidifyPoöãr
(c⁄° * 
p
Ë{  
	gp
; }

596 
ölöe
 c⁄° * 
VoidifyPoöãr
(vﬁ©ûêc⁄° * 
p
) {

597  
	gc⁄°_ˇ°
<c⁄° *>(
	gp
);

600 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gPå
>

601 
PrötSm¨tPoöãr
(c⁄° 
På
& 
±r
, 
°d
::
o°ªam
* 
os
, ) {

602 i‡(
	g±r
 =
nuŒ±r
) {

603 *
os
 << "(nullptr)";

606 *
	gos
 << "(" << (
	gVoidifyPoöãr
)(
	g±r
.
gë
()) << ")";

609 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gPå
,

610 
	gty≥«me
 = 
ty≥«me
 
°d
::
íabÀ_if
<!°d::
is_void
<
T
>::
vÆue
 &&

611 !
°d
::
is_¨øy
<
T
>::
vÆue
>::
ty≥
>

612 
PrötSm¨tPoöãr
(c⁄° 
På
& 
±r
, 
°d
::
o°ªam
* 
os
, ) {

613 i‡(
	g±r
 =
nuŒ±r
) {

614 *
os
 << "(nullptr)";

616 *
	gos
 << "’å = " << (
	gVoidifyPoöãr
)(
	g±r
.
gë
()) << ", value = ";

617 
	gUnivîßlPröãr
<
	gT
>::
Pröt
(*
±r
, 
os
);

618 *
	gos
 << ")";

622 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gD
>

623 
PrötTo
(c⁄° 
°d
::
unique_±r
<
T
, 
D
>& 
±r
, std::
o°ªam
* 
os
) {

624 (
PrötSm¨tPoöãr
<
T
>)(
±r
, 
	gos
, 0);

627 
	gãm∂©e
 <
ty≥«me
 
	gT
>

628 
PrötTo
(c⁄° 
°d
::
sh¨ed_±r
<
T
>& 
±r
, std::
o°ªam
* 
os
) {

629 (
PrötSm¨tPoöãr
<
T
>)(
±r
, 
	gos
, 0);

634 
	gãm∂©e
 <
ty≥«me
 
	gT
>

635 
PrötTu∂eTo
(c⁄° 
T
&, 
°d
::
öãgøl_c⁄°™t
<
size_t
, 0>,

636 ::
°d
::
o°ªam
*) {}

638 
ãm∂©e
 <
ty≥«me
 
T
, 
size_t
 
	gI
>

639 
PrötTu∂eTo
(c⁄° 
T
& 
t
, 
°d
::
öãgøl_c⁄°™t
<
size_t
, 
I
>,

640 ::
°d
::
o°ªam
* 
os
) {

641 
PrötTu∂eTo
(
t
, 
°d
::
öãgøl_c⁄°™t
<
size_t
, 
I
 - 1>(), 
os
);

642 
GTEST_INTENTIONAL_CONST_COND_PUSH_
()

643 i‡(
	gI
 > 1) {

644 
GTEST_INTENTIONAL_CONST_COND_POP_
()

645 *
	gos
 << ", ";

647 
	gUnivîßlPröãr
<
ty≥«me
 
	g°d
::
tu∂e_ñemít
<
I
 - 1, 
	gT
>::
ty≥
>::
Pröt
(

648 
°d
::
gë
<
I
 - 1>(
t
), 
os
);

651 
	gãm∂©e
 <
	gty≥«me
... 
	gTy≥s
>

652 
PrötTo
(c⁄° ::
°d
::
tu∂e
<
Ty≥s
...>& 
t
, ::°d::
o°ªam
* 
os
) {

653 *
os
 << "(";

654 
PrötTu∂eTo
(
t
, 
°d
::
öãgøl_c⁄°™t
<
size_t
, ...(
Ty≥s
)>(), 
os
);

655 *
	gos
 << ")";

659 
	gãm∂©e
 <
ty≥«me
 
	gT1
,Åy≥«mê
	gT2
>

660 
PrötTo
(c⁄° ::
°d
::
∑ú
<
T1
, 
T2
>& 
vÆue
, ::°d::
o°ªam
* 
os
) {

661 *
os
 << '(';

664 
	gUnivîßlPröãr
<
	gT1
>::
Pröt
(
vÆue
.
fú°
, 
os
);

665 *
	gos
 << ", ";

666 
	gUnivîßlPröãr
<
	gT2
>::
Pröt
(
vÆue
.
£c⁄d
, 
os
);

667 *
	gos
 << ')';

672 
	gãm∂©e
 <
ty≥«me
 
	gT
>

673 ˛as†
	cUnivîßlPröãr
 {

674 
	gpublic
:

677 
GTEST_DISABLE_MSC_WARNINGS_PUSH_
(4180)

682 
Pröt
(c⁄° 
T
& 
vÆue
, ::
°d
::
o°ªam
* 
os
) {

691 
PrötTo
(
vÆue
, 
os
);

694 
GTEST_DISABLE_MSC_WARNINGS_POP_
()

698 
	gãm∂©e
 <
ty≥«me
 
	gT
>

699 
˛ass
 
	gUnivîßlPröãr
<c⁄° 
	gT
> : 
public
 
UnivîßlPröãr
<
T
> {};

701 #i‡
GTEST_INTERNAL_HAS_ANY


705 
	gãm∂©e
 <>

706 
˛ass
 
	gUnivîßlPröãr
<
	gAny
> {

707 
	gpublic
:

708 
Pröt
(c⁄° 
Any
& 
vÆue
, ::
°d
::
o°ªam
* 
os
) {

709 i‡(
vÆue
.
has_vÆue
()) {

710 *
os
 << "vÆuêo‡ty≥ " << 
GëTy≥Name
(
vÆue
);

712 *
	gos
 << "no value";

716 
	g¥iv©e
:

717 
°d
::
°rög
 
GëTy≥Name
(c⁄° 
Any
& 
vÆue
) {

718 #i‡
GTEST_HAS_RTTI


719  
öã∫Æ
::
GëTy≥Name
(
vÆue
.
ty≥
());

721 
	g°©ic_ˇ°
<>(
	gvÆue
);

729 #i‡
GTEST_INTERNAL_HAS_OPTIONAL


733 
	gãm∂©e
 <
ty≥«me
 
	gT
>

734 
˛ass
 
	gUnivîßlPröãr
<
	gO±i⁄Æ
<
	gT
>> {

735 
	gpublic
:

736 
Pröt
(c⁄° 
O±i⁄Æ
<
T
>& 
vÆue
, ::
°d
::
o°ªam
* 
os
) {

737 *
os
 << '(';

738 i‡(!
	gvÆue
) {

739 *
	gos
 << "nullopt";

741 
UnivîßlPröt
(*
vÆue
, 
os
);

743 *
	gos
 << ')';

749 #i‡
GTEST_INTERNAL_HAS_VARIANT


753 
	gãm∂©e
 <
	gty≥«me
... 
	gT
>

754 
˛ass
 
	gUnivîßlPröãr
<
	gV¨ü¡
<
	gT
...>> {

755 
	gpublic
:

756 
Pröt
(c⁄° 
V¨ü¡
<
T
...>& 
vÆue
, ::
°d
::
o°ªam
* 
os
) {

757 *
os
 << '(';

758 #i‡
GTEST_HAS_ABSL


759 
	gab¶
::
visô
(
Visô‹
{
os
, 
vÆue
.
ödex
()}, value);

761 
	g°d
::
visô
(
Visô‹
{
os
, 
vÆue
.
ödex
()}, value);

763 *
	gos
 << ')';

766 
	g¥iv©e
:

767 
	sVisô‹
 {

768 
ãm∂©e
 <
ty≥«me
 
U
>

769 
›î©‹
()(c⁄° 
U
& 
u
) const {

770 *
os
 << "'" << 
GëTy≥Name
<
U
>(Ë<< "(ödex = " << 
ödex


772 
UnivîßlPröt
(
u
, 
os
);

774 ::
°d
::
o°ªam
* 
os
;

775 
	g°d
::
size_t
 
ödex
;

783 
	gãm∂©e
 <
ty≥«me
 
	gT
>

784 
UnivîßlPrötAºay
(c⁄° 
T
* 
begö
, 
size_t
 
Àn
, ::
°d
::
o°ªam
* 
os
) {

785 i‡(
Àn
 == 0) {

786 *
os
 << "{}";

788 *
	gos
 << "{ ";

789 c⁄° 
size_t
 
	gkThªshﬁd
 = 18;

790 c⁄° 
size_t
 
	gkChunkSize
 = 8;

794 i‡(
	gÀn
 <
kThªshﬁd
) {

795 
PrötRawAºayTo
(
begö
, 
Àn
, 
os
);

797 
PrötRawAºayTo
(
begö
, 
kChunkSize
, 
os
);

798 *
	gos
 << ", ..., ";

799 
PrötRawAºayTo
(
begö
 + 
Àn
 - 
kChunkSize
, kChunkSize, 
os
);

801 *
	gos
 << " }";

805 
GTEST_API_
 
UnivîßlPrötAºay
(

806 c⁄° * 
begö
, 
size_t
 
Àn
, ::
°d
::
o°ªam
* 
os
);

808 #ifde‡
__˝p_ch¨8_t


810 
GTEST_API_
 
UnivîßlPrötAºay
(c⁄° 
ch¨8_t
* 
begö
, 
size_t
 
Àn
,

811 ::
°d
::
o°ªam
* 
os
);

815 
GTEST_API_
 
UnivîßlPrötAºay
(c⁄° 
ch¨16_t
* 
begö
, 
size_t
 
Àn
,

816 ::
°d
::
o°ªam
* 
os
);

819 
GTEST_API_
 
UnivîßlPrötAºay
(c⁄° 
ch¨32_t
* 
begö
, 
size_t
 
Àn
,

820 ::
°d
::
o°ªam
* 
os
);

823 
GTEST_API_
 
UnivîßlPrötAºay
(

824 c⁄° 
wch¨_t
* 
begö
, 
size_t
 
Àn
, ::
°d
::
o°ªam
* 
os
);

827 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
size_t
 
	gN
>

828 
˛ass
 
	gUnivîßlPröãr
<
	gT
[
N
]> {

829 
	gpublic
:

832 
Pröt
(c⁄° 
T
 (&
a
)[
N
], ::
°d
::
o°ªam
* 
os
) {

833 
UnivîßlPrötAºay
(
a
, 
N
, 
os
);

838 
	gãm∂©e
 <
ty≥«me
 
	gT
>

839 
˛ass
 
	gUnivîßlPröãr
<
	gT
&> {

840 
	gpublic
:

843 
GTEST_DISABLE_MSC_WARNINGS_PUSH_
(4180)

845 
Pröt
(c⁄° 
T
& 
vÆue
, ::
°d
::
o°ªam
* 
os
) {

848 *
os
 << "@" << 
ªöãΩªt_ˇ°
<c⁄° *>(&
vÆue
) << " ";

851 
UnivîßlPröt
(
vÆue
, 
os
);

854 
GTEST_DISABLE_MSC_WARNINGS_POP_
()

861 
	gãm∂©e
 <
ty≥«me
 
	gT
>

862 ˛as†
	cUnivîßlTî£Pröãr
 {

863 
	gpublic
:

864 
Pröt
(c⁄° 
T
& 
vÆue
, ::
°d
::
o°ªam
* 
os
) {

865 
UnivîßlPröt
(
vÆue
, 
os
);

868 
	gãm∂©e
 <
ty≥«me
 
	gT
>

869 
˛ass
 
	gUnivîßlTî£Pröãr
<
	gT
&> {

870 
	gpublic
:

871 
Pröt
(c⁄° 
T
& 
vÆue
, ::
°d
::
o°ªam
* 
os
) {

872 
UnivîßlPröt
(
vÆue
, 
os
);

875 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
size_t
 
	gN
>

876 
˛ass
 
	gUnivîßlTî£Pröãr
<
	gT
[
N
]> {

877 
	gpublic
:

878 
Pröt
(c⁄° 
T
 (&
vÆue
)[
N
], ::
°d
::
o°ªam
* 
os
) {

879 
UnivîßlPröãr
<
T
[
N
]>::
Pröt
(
vÆue
, 
os
);

882 
	gãm∂©e
 <>

883 
˛ass
 
	gUnivîßlTî£Pröãr
<const *> {

884 
	gpublic
:

885 
Pröt
(c⁄° * 
°r
, ::
°d
::
o°ªam
* 
os
) {

886 i‡(
°r
 =
nuŒ±r
) {

887 *
os
 << "NULL";

889 
UnivîßlPröt
(
°d
::
°rög
(
°r
), 
os
);

893 
	gãm∂©e
 <>

894 
˛ass
 
	gUnivîßlTî£Pröãr
<*> : 
public
 
UnivîßlTî£Pröãr
<const *> {

897 #ifde‡
__˝p_ch¨8_t


898 
	gãm∂©e
 <>

899 
˛ass
 
	gUnivîßlTî£Pröãr
<c⁄° 
	gch¨8_t
*> {

900 
	gpublic
:

901 
Pröt
(c⁄° 
ch¨8_t
* 
°r
, ::
°d
::
o°ªam
* 
os
) {

902 i‡(
°r
 =
nuŒ±r
) {

903 *
os
 << "NULL";

905 
UnivîßlPröt
(::
°d
::
u8°rög
(
°r
), 
os
);

909 
	gãm∂©e
 <>

910 
˛ass
 
	gUnivîßlTî£Pröãr
<
	gch¨8_t
*>

911 : 
public
 
UnivîßlTî£Pröãr
<c⁄° 
ch¨8_t
*> {};

914 
	gãm∂©e
 <>

915 
˛ass
 
	gUnivîßlTî£Pröãr
<c⁄° 
	gch¨16_t
*> {

916 
	gpublic
:

917 
Pröt
(c⁄° 
ch¨16_t
* 
°r
, ::
°d
::
o°ªam
* 
os
) {

918 i‡(
°r
 =
nuŒ±r
) {

919 *
os
 << "NULL";

921 
UnivîßlPröt
(::
°d
::
u16°rög
(
°r
), 
os
);

925 
	gãm∂©e
 <>

926 
˛ass
 
	gUnivîßlTî£Pröãr
<
	gch¨16_t
*>

927 : 
public
 
UnivîßlTî£Pröãr
<c⁄° 
ch¨16_t
*> {};

929 
	gãm∂©e
 <>

930 
˛ass
 
	gUnivîßlTî£Pröãr
<c⁄° 
	gch¨32_t
*> {

931 
	gpublic
:

932 
Pröt
(c⁄° 
ch¨32_t
* 
°r
, ::
°d
::
o°ªam
* 
os
) {

933 i‡(
°r
 =
nuŒ±r
) {

934 *
os
 << "NULL";

936 
UnivîßlPröt
(::
°d
::
u32°rög
(
°r
), 
os
);

940 
	gãm∂©e
 <>

941 
˛ass
 
	gUnivîßlTî£Pröãr
<
	gch¨32_t
*>

942 : 
public
 
UnivîßlTî£Pröãr
<c⁄° 
ch¨32_t
*> {};

944 #i‡
GTEST_HAS_STD_WSTRING


945 
	gãm∂©e
 <>

946 
˛ass
 
	gUnivîßlTî£Pröãr
<c⁄° 
	gwch¨_t
*> {

947 
	gpublic
:

948 
Pröt
(c⁄° 
wch¨_t
* 
°r
, ::
°d
::
o°ªam
* 
os
) {

949 i‡(
°r
 =
nuŒ±r
) {

950 *
os
 << "NULL";

952 
UnivîßlPröt
(::
°d
::
w°rög
(
°r
), 
os
);

958 
	gãm∂©e
 <>

959 
˛ass
 
	gUnivîßlTî£Pröãr
<
	gwch¨_t
*> {

960 
	gpublic
:

961 
Pröt
(
wch¨_t
* 
°r
, ::
°d
::
o°ªam
* 
os
) {

962 
UnivîßlTî£Pröãr
<c⁄° 
wch¨_t
*>::
Pröt
(
°r
, 
os
);

966 
	gãm∂©e
 <
ty≥«me
 
	gT
>

967 
UnivîßlTî£Pröt
(c⁄° 
T
& 
vÆue
, ::
°d
::
o°ªam
* 
os
) {

968 
UnivîßlTî£Pröãr
<
T
>::
Pröt
(
vÆue
, 
os
);

975 
	gãm∂©e
 <
ty≥«me
 
	gT
>

976 
UnivîßlPröt
(c⁄° 
T
& 
vÆue
, ::
°d
::
o°ªam
* 
os
) {

979 
T
 
	tT1
;

980 
	gUnivîßlPröãr
<
	gT1
>::
Pröt
(
vÆue
, 
os
);

983 ::
°d
::
	tve˘‹
< ::
	t°d
::
	t°rög
> 
	tSåögs
;

987 
	gãm∂©e
 <
ty≥«me
 
	gTu∂e
>

988 
Tî£PrötPªfixToSåögs
(c⁄° 
Tu∂e
&, 
°d
::
öãgøl_c⁄°™t
<
size_t
, 0>,

989 
Såögs
*) {}

990 
	gãm∂©e
 <
ty≥«me
 
	gTu∂e
, 
size_t
 
	gI
>

991 
Tî£PrötPªfixToSåögs
(c⁄° 
Tu∂e
& 
t
,

992 
°d
::
öãgøl_c⁄°™t
<
size_t
, 
I
>,

993 
Såögs
* 
°rögs
) {

994 
Tî£PrötPªfixToSåögs
(
t
, 
°d
::
öãgøl_c⁄°™t
<
size_t
, 
I
 - 1>(),

995 
°rögs
);

996 ::
°d
::
°rög°ªam
 
ss
;

997 
UnivîßlTî£Pröt
(
°d
::
gë
<
I
 - 1>(
t
), &
ss
);

998 
	g°rögs
->
push_back
(
ss
.
°r
());

1004 
	gãm∂©e
 <
ty≥«me
 
	gTu∂e
>

1005 
Såögs
 
UnivîßlTî£PrötTu∂eFõldsToSåögs
(c⁄° 
Tu∂e
& 
vÆue
) {

1006 
Såögs
 
	gªsu…
;

1007 
Tî£PrötPªfixToSåögs
(

1008 
vÆue
, 
°d
::
öãgøl_c⁄°™t
<
size_t
, std::
tu∂e_size
<
Tu∂e
>::value>(),

1009 &
ªsu…
);

1010  
	gªsu…
;

1015 
	gãm∂©e
 <
ty≥«me
 
	gT
>

1016 ::
°d
::
°rög
 
	$PrötToSåög
(c⁄° 
T
& 
vÆue
) {

1017 ::
°d
::
°rög°ªam
 
ss
;

1018 
öã∫Æ
::
UnivîßlTî£Pröãr
<
T
>::
	`Pröt
(
vÆue
, &
ss
);

1019  
ss
.
	`°r
();

1020 
	}
}

1027 
	~"gã°/öã∫Æ/cu°om/gã°-¥öãrs.h
"

	@/usr/include/gtest/gtest-test-part.h

32 #i‚de‡
GOOGLETEST_INCLUDE_GTEST_GTEST_TEST_PART_H_


33 
	#GOOGLETEST_INCLUDE_GTEST_GTEST_TEST_PART_H_


	)

35 
	~<iosfwd
>

36 
	~<ve˘‹
>

37 
	~"gã°/öã∫Æ/gã°-öã∫Æ.h
"

38 
	~"gã°/öã∫Æ/gã°-°rög.h
"

40 
GTEST_DISABLE_MSC_WARNINGS_PUSH_
(4251 \

43 
«me•a˚
 
	gã°ög
 {

49 ˛as†
	cGTEST_API_
 
	gTe°P¨tResu…
 {

50 
	gpublic
:

53 
	eTy≥
 {

54 
kSuc˚ss
,

55 
	gkN⁄F©ÆFaûuª
,

56 
	gkF©ÆFaûuª
,

57 
	gkSkù


63 
Te°P¨tResu…
(
Ty≥
 
a_ty≥
, c⁄° * 
a_fûe_«me
, 
a_löe_numbî
,

64 c⁄° * 
a_mesßge
)

65 : 
ty≥_
(
a_ty≥
),

66 
fûe_«me_
(
a_fûe_«me
 =
nuŒ±r
 ? "" :á_file_name),

67 
löe_numbî_
(
a_löe_numbî
),

68 
summ¨y_
(
Exåa˘Summ¨y
(
a_mesßge
)),

69 
mesßge_
(
a_mesßge
) {}

72 
Ty≥
 
ty≥
(Ëc⁄° {  
	gty≥_
; }

76 c⁄° * 
fûe_«me
() const {

77  
	gfûe_«me_
.
em±y
(Ë? 
	gnuŒ±r
 : 
fûe_«me_
.
c_°r
();

82 
löe_numbî
(Ëc⁄° {  
	glöe_numbî_
; }

85 c⁄° * 
summ¨y
(Ëc⁄° {  
	gsumm¨y_
.
c_°r
(); }

88 c⁄° * 
mesßge
(Ëc⁄° {  
	gmesßge_
.
c_°r
(); }

91 
boﬁ
 
skù≥d
(Ëc⁄° {  
	gty≥_
 =
kSkù
; }

94 
boﬁ
 
∑s£d
(Ëc⁄° {  
	gty≥_
 =
kSuc˚ss
; }

97 
boﬁ
 
n⁄ÁèŒy_Áûed
(Ëc⁄° {  
	gty≥_
 =
kN⁄F©ÆFaûuª
; }

100 
boﬁ
 
ÁèŒy_Áûed
(Ëc⁄° {  
	gty≥_
 =
kF©ÆFaûuª
; }

103 
boﬁ
 
Áûed
(Ëc⁄° {  
ÁèŒy_Áûed
(Ë|| 
n⁄ÁèŒy_Áûed
(); }

105 
	g¥iv©e
:

106 
Ty≥
 
ty≥_
;

110 
	g°d
::
°rög
 
Exåa˘Summ¨y
(c⁄° * 
mesßge
);

114 
	g°d
::
°rög
 
fûe_«me_
;

117 
	glöe_numbî_
;

118 
	g°d
::
°rög
 
summ¨y_
;

119 
	g°d
::
°rög
 
mesßge_
;

123 
	g°d
::
o°ªam
& 
›î©‹
<<(
°d
::o°ªam& 
os
, c⁄° 
	gTe°P¨tResu…
& 
	gªsu…
);

129 ˛as†
	cGTEST_API_
 
	gTe°P¨tResu…Aºay
 {

130 
	gpublic
:

131 
Te°P¨tResu…Aºay
() {}

134 
Aµíd
(c⁄° 
Te°P¨tResu…
& 
ªsu…
);

137 c⁄° 
	gTe°P¨tResu…
& 
GëTe°P¨tResu…
(
ödex
) const;

140 
size
() const;

142 
	g¥iv©e
:

143 
°d
::
ve˘‹
<
Te°P¨tResu…
> 
¨øy_
;

145 
GTEST_DISALLOW_COPY_AND_ASSIGN_
(
Te°P¨tResu…Aºay
);

149 ˛as†
	cGTEST_API_
 
	gTe°P¨tResu…Rï‹ãrI¡îÁ˚
 {

150 
	gpublic
:

151 
vútuÆ
 ~
Te°P¨tResu…Rï‹ãrI¡îÁ˚
() {}

153 
vútuÆ
 
Rï‹tTe°P¨tResu…
(c⁄° 
Te°P¨tResu…
& 
ªsu…
) = 0;

156 
«me•a˚
 
	göã∫Æ
 {

164 ˛as†
	cGTEST_API_
 
	gHasNewF©ÆFaûuªHñ≥r


165 : 
public
 
Te°P¨tResu…Rï‹ãrI¡îÁ˚
 {

166 
public
:

167 
HasNewF©ÆFaûuªHñ≥r
();

168 ~
HasNewF©ÆFaûuªHñ≥r
(Ë
	govîride
;

169 
Rï‹tTe°P¨tResu…
(c⁄° 
Te°P¨tResu…
& 
ªsu…
Ë
	govîride
;

170 
boﬁ
 
has_√w_Áèl_Áûuª
(Ëc⁄° {  
	ghas_√w_Áèl_Áûuª_
; }

171 
	g¥iv©e
:

172 
boﬁ
 
has_√w_Áèl_Áûuª_
;

173 
Te°P¨tResu…Rï‹ãrI¡îÁ˚
* 
	g‹igöÆ_ªp‹ãr_
;

175 
GTEST_DISALLOW_COPY_AND_ASSIGN_
(
HasNewF©ÆFaûuªHñ≥r
);

182 
	$GTEST_DISABLE_MSC_WARNINGS_POP_
()

	@/usr/include/gtest/gtest-typed-test.h

32 #i‚de‡
GOOGLETEST_INCLUDE_GTEST_GTEST_TYPED_TEST_H_


33 
	#GOOGLETEST_INCLUDE_GTEST_GTEST_TYPED_TEST_H_


	)

45 
	gãm∂©e
 <
ty≥«me
 
	gT
>

46 ˛as†
	cFooTe°
 : 
public
 
ã°ög
::
Te°
 {

47 
public
:

49 
°d
::
	tli°
<
	tT
> 
	tLi°
;

50 
T
 
	msh¨ed_
;

51 
T
 
	mvÆue_
;

57 
	gã°ög
::
	tTy≥s
<, , > 
	tMyTy≥s
;

58 
TYPED_TEST_SUITE
(
FooTe°
, 
MyTy≥s
);

66 
	$TYPED_TEST
(
FooTe°
, 
D€sBœh
) {

70 
Ty≥P¨am
 
n
 = 
this
->
vÆue_
;

74 
n
 +
Te°Fixtuª
::
sh¨ed_
;

78 
ty≥«me
 
Te°Fixtuª
::
Li°
 
vÆues
;

79 
vÆues
.
	`push_back
(
n
);

81 
	}
}

83 
	$TYPED_TEST
(
FooTe°
, 
HasPr›îtyA
Ë{ ... 
	}
}

123 
	gãm∂©e
 <
ty≥«me
 
	gT
>

124 ˛as†
	cFooTe°
 : 
public
 
ã°ög
::
Te°
 {

131 
TYPED_TEST_SUITE_P
(
FooTe°
);

135 
	$TYPED_TEST_P
(
FooTe°
, 
D€sBœh
) {

137 
Ty≥P¨am
 
n
 = 0;

139 
	}
}

141 
	$TYPED_TEST_P
(
FooTe°
, 
HasPr›îtyA
Ë{ ... 
	}
}

147 
REGISTER_TYPED_TEST_SUITE_P
(
FooTe°
,

148 
D€sBœh
, 
HasPr›îtyA
);

158 
	gã°ög
::
	tTy≥s
<, , > 
	tMyTy≥s
;

159 
INSTANTIATE_TYPED_TEST_SUITE_P
(
My
, 
FooTe°
, 
MyTy≥s
);

172 
	~"gã°/öã∫Æ/gã°-öã∫Æ.h
"

173 
	~"gã°/öã∫Æ/gã°-p‹t.h
"

174 
	~"gã°/öã∫Æ/gã°-ty≥-utû.h
"

182 
	#GTEST_TYPE_PARAMS_
(
Te°SuôeName
Ë
gã°_ty≥_∑øms_
##Te°SuôeName##
_


	)

186 
	#GTEST_NAME_GENERATOR_
(
Te°SuôeName
) \

187 
gã°_ty≥_∑øms_
##
Te°SuôeName
##
_NameGíî©‹


	)

189 
	#TYPED_TEST_SUITE
(
Ca£Name
, 
Ty≥s
, ...) \

190 ::
ã°ög
::
	töã∫Æ
::
	tGíî©eTy≥Li°
<
	tTy≥s
>::
	tty≥
 \

191 
	tGTEST_TYPE_PARAMS_
(
	tCa£Name
); \

192 ::
ã°ög
::
	töã∫Æ
::
	tNameGíî©‹Sñe˘‹
<
	t__VA_ARGS__
>::
	tty≥
 \

193 
	tGTEST_NAME_GENERATOR_
(
	tCa£Name
)

	)

195 
	tTYPED_TEST
(
	tCa£Name
, 
	tTe°Name
) \

196 
	t°©ic_as£π
((
	tGTEST_STRINGIFY_
(
	tTe°Name
)) > 1, \

198 
ãm∂©e
 <
ty≥«me
 
gã°_Ty≥P¨am_
> \

199 
˛ass
 
	`GTEST_TEST_CLASS_NAME_
(
Ca£Name
, 
Te°Name
) \

200 : 
public
 
Ca£Name
<
gã°_Ty≥P¨am_
> { \

201 
¥iv©e
: \

202 
Ca£Name
<
	tgã°_Ty≥P¨am_
> 
	tTe°Fixtuª
; \

203 
gã°_Ty≥P¨am_
 
	tTy≥P¨am
; \

204 
	`Te°Body
(Ë
ovîride
; \

206 
boﬁ
 
gã°_
##
Ca£Name
##
_
##
Te°Name
##
_ªgi°îed_
 \

207 
GTEST_ATTRIBUTE_UNUSED_
 = ::
ã°ög
::
öã∫Æ
::
Ty≥P¨amëîizedTe°
< \

208 
Ca£Name
, \

209 ::
ã°ög
::
öã∫Æ
::
Tem∂©eSñ
<
	`GTEST_TEST_CLASS_NAME_
(
Ca£Name
, \

210 
Te°Name
)>, \

211 
	`GTEST_TYPE_PARAMS_
( \

212 
Ca£Name
)>::
	`Regi°î
("", \

213 ::
ã°ög
::
öã∫Æ
::
	`CodeLoˇti⁄
( \

214 
__FILE__
, 
__LINE__
), \

215 
	`GTEST_STRINGIFY_
(
Ca£Name
), \

216 
	`GTEST_STRINGIFY_
(
Te°Name
), 0, \

217 ::
ã°ög
::
öã∫Æ
::
Gíî©eNames
< \

218 
	`GTEST_NAME_GENERATOR_
(
Ca£Name
), \

219 
	`GTEST_TYPE_PARAMS_
(
Ca£Name
)>()); \

220 
ãm∂©e
 <
ty≥«me
 
gã°_Ty≥P¨am_
> \

221 
	`GTEST_TEST_CLASS_NAME_
(
Ca£Name
, \

222 
Te°Name
)<
gã°_Ty≥P¨am_
>::
	`Te°Body
()

	)

225 #i‚de‡
GTEST_REMOVE_LEGACY_TEST_CASEAPI_


226 
	#TYPED_TEST_CASE
 \

227 
	`°©ic_as£π
(::
ã°ög
::
öã∫Æ
::
	`Ty≥dTe°Ca£IsDïªˇãd
(), ""); \

228 
TYPED_TEST_SUITE


	)

238 
	#GTEST_SUITE_NAMESPACE_
(
Te°SuôeName
Ë
gã°_suôe_
##Te°SuôeName##
_


	)

244 
	#GTEST_TYPED_TEST_SUITE_P_STATE_
(
Te°SuôeName
) \

245 
gã°_ty≥d_ã°_suôe_p_°©e_
##
Te°SuôeName
##
_


	)

251 
	#GTEST_REGISTERED_TEST_NAMES_
(
Te°SuôeName
) \

252 
gã°_ªgi°îed_ã°_«mes_
##
Te°SuôeName
##
_


	)

257 
	#TYPED_TEST_SUITE_P
(
SuôeName
) \

258 ::
ã°ög
::
öã∫Æ
::
Ty≥dTe°SuôePSèã
 \

259 
	`GTEST_TYPED_TEST_SUITE_P_STATE_
(
SuôeName
)

	)

262 #i‚de‡
GTEST_REMOVE_LEGACY_TEST_CASEAPI_


263 
	#TYPED_TEST_CASE_P
 \

264 
	`°©ic_as£π
(::
ã°ög
::
öã∫Æ
::
	`Ty≥dTe°Ca£_P_IsDïªˇãd
(), ""); \

265 
TYPED_TEST_SUITE_P


	)

268 
	#TYPED_TEST_P
(
SuôeName
, 
Te°Name
) \

269 
«me•a˚
 
	`GTEST_SUITE_NAMESPACE_
(
SuôeName
) { \

270 
ãm∂©e
 <
ty≥«me
 
gã°_Ty≥P¨am_
> \

271 
˛ass
 
Te°Name
 : 
public
 
SuôeName
<
gã°_Ty≥P¨am_
> { \

272 
¥iv©e
: \

273 
SuôeName
<
	tgã°_Ty≥P¨am_
> 
	tTe°Fixtuª
; \

274 
gã°_Ty≥P¨am_
 
	tTy≥P¨am
; \

275 
	`Te°Body
(Ë
ovîride
; \

277 
boﬁ
 
gã°_
##
Te°Name
##
_deföed_
 
GTEST_ATTRIBUTE_UNUSED_
 = \

278 
	`GTEST_TYPED_TEST_SUITE_P_STATE_
(
SuôeName
).
	`AddTe°Name
( \

279 
__FILE__
, 
__LINE__
, 
	`GTEST_STRINGIFY_
(
SuôeName
), \

280 
	`GTEST_STRINGIFY_
(
Te°Name
)); \

282 
ãm∂©e
 <
ty≥«me
 
gã°_Ty≥P¨am_
> \

283 
	`GTEST_SUITE_NAMESPACE_
( \

284 
SuôeName
)::
Te°Name
<
gã°_Ty≥P¨am_
>::
	`Te°Body
()

	)

287 
	#REGISTER_TYPED_TEST_SUITE_P
(
SuôeName
, ...) \

288 
«me•a˚
 
	`GTEST_SUITE_NAMESPACE_
(
SuôeName
) { \

289 ::
ã°ög
::
	töã∫Æ
::
	tTem∂©es
<
	t__VA_ARGS__
> 
	tgã°_AŒTe°s_
; \

291 c⁄° * c⁄° 
	`GTEST_REGISTERED_TEST_NAMES_
( \

292 
SuôeName
Ë
GTEST_ATTRIBUTE_UNUSED_
 = \

293 
	`GTEST_TYPED_TEST_SUITE_P_STATE_
(
SuôeName
).
	`VîifyRegi°îedTe°Names
( \

294 
	`GTEST_STRINGIFY_
(
SuôeName
), 
__FILE__
, 
__LINE__
, #__VA_ARGS__)

	)

297 #i‚de‡
GTEST_REMOVE_LEGACY_TEST_CASEAPI_


298 
	#REGISTER_TYPED_TEST_CASE_P
 \

299 
	`°©ic_as£π
(::
ã°ög
::
öã∫Æ
::
	`Regi°îTy≥dTe°Ca£_P_IsDïªˇãd
(), \

301 
REGISTER_TYPED_TEST_SUITE_P


	)

304 
	#INSTANTIATE_TYPED_TEST_SUITE_P
(
Pªfix
, 
SuôeName
, 
Ty≥s
, ...) \

305 
	`°©ic_as£π
((
	`GTEST_STRINGIFY_
(
Pªfix
)) > 1, \

307 
boﬁ
 
gã°_
##
Pªfix
##
_
##
SuôeName
 
GTEST_ATTRIBUTE_UNUSED_
 = \

308 ::
ã°ög
::
öã∫Æ
::
Ty≥P¨amëîizedTe°Suôe
< \

309 
SuôeName
, 
	`GTEST_SUITE_NAMESPACE_
(SuôeName)::
gã°_AŒTe°s_
, \

310 ::
ã°ög
::
öã∫Æ
::
Gíî©eTy≥Li°
<
Ty≥s
>::
ty≥
>:: \

311 
	`Regi°î
(
	`GTEST_STRINGIFY_
(
Pªfix
), \

312 ::
ã°ög
::
öã∫Æ
::
	`CodeLoˇti⁄
(
__FILE__
, 
__LINE__
), \

313 &
	`GTEST_TYPED_TEST_SUITE_P_STATE_
(
SuôeName
), \

314 
	`GTEST_STRINGIFY_
(
SuôeName
), \

315 
	`GTEST_REGISTERED_TEST_NAMES_
(
SuôeName
), \

316 ::
ã°ög
::
öã∫Æ
::
Gíî©eNames
< \

317 ::
ã°ög
::
öã∫Æ
::
NameGíî©‹Sñe˘‹
< \

318 
__VA_ARGS__
>::
ty≥
, \

319 ::
ã°ög
::
öã∫Æ
::
Gíî©eTy≥Li°
<
Ty≥s
>::
ty≥
>())

	)

322 #i‚de‡
GTEST_REMOVE_LEGACY_TEST_CASEAPI_


323 
	#INSTANTIATE_TYPED_TEST_CASE_P
 \

324 
	`°©ic_as£π
( \

325 ::
ã°ög
::
öã∫Æ
::
	`In°™tüãTy≥dTe°Ca£_P_IsDïªˇãd
(), ""); \

326 
INSTANTIATE_TYPED_TEST_SUITE_P


	)

	@/usr/include/gtest/gtest_pred_impl.h

36 #i‚de‡
GOOGLETEST_INCLUDE_GTEST_GTEST_PRED_IMPL_H_


37 
	#GOOGLETEST_INCLUDE_GTEST_GTEST_PRED_IMPL_H_


	)

39 
	~"gã°/gã°.h
"

41 
«me•a˚
 
	gã°ög
 {

75 
	#GTEST_ASSERT_
(
ex¥essi⁄
, 
⁄_Áûuª
) \

76 
GTEST_AMBIGUOUS_ELSE_BLOCKER_
 \

77 i‡(c⁄° ::
ã°ög
::
As£πi⁄Resu…
 
gã°_¨
 = (
ex¥essi⁄
)) \

80 
	`⁄_Áûuª
(
gã°_¨
.
	`Áûuª_mesßge
())

	)

85 
	gãm∂©e
 <
ty≥«me
 
	gPªd
,

86 
ty≥«me
 
	gT1
>

87 
As£πi⁄Resu…
 
As£πPªd1Hñ≥r
(c⁄° * 
¥ed_ãxt
,

88 c⁄° * 
e1
,

89 
Pªd
 
¥ed
,

90 c⁄° 
T1
& 
v1
) {

91 i‡(
¥ed
(
v1
)Ë 
As£πi⁄Suc˚ss
();

93  
As£πi⁄Faûuª
()

94 << 
	g¥ed_ãxt
 << "(" << 
	ge1
 << ")ÉvaluatesÅo false, where"

96 << 
	ge1
 << "ÉvÆu©e†tÿ" << ::
ã°ög
::
PrötToSåög
(
v1
);

101 
	#GTEST_PRED_FORMAT1_
(
¥ed_f‹m©
, 
v1
, 
⁄_Áûuª
)\

102 
	`GTEST_ASSERT_
(
	`¥ed_f‹m©
(#v1, 
v1
), \

103 
⁄_Áûuª
)

	)

107 
	#GTEST_PRED1_
(
¥ed
, 
v1
, 
⁄_Áûuª
)\

108 
	`GTEST_ASSERT_
(::
ã°ög
::
	`As£πPªd1Hñ≥r
(#pred, \

110 
¥ed
, \

111 
v1
), 
⁄_Áûuª
)

	)

114 
	#EXPECT_PRED_FORMAT1
(
¥ed_f‹m©
, 
v1
) \

115 
	`GTEST_PRED_FORMAT1_
(
¥ed_f‹m©
, 
v1
, 
GTEST_NONFATAL_FAILURE_
)

	)

116 
	#EXPECT_PRED1
(
¥ed
, 
v1
) \

117 
	`GTEST_PRED1_
(
¥ed
, 
v1
, 
GTEST_NONFATAL_FAILURE_
)

	)

118 
	#ASSERT_PRED_FORMAT1
(
¥ed_f‹m©
, 
v1
) \

119 
	`GTEST_PRED_FORMAT1_
(
¥ed_f‹m©
, 
v1
, 
GTEST_FATAL_FAILURE_
)

	)

120 
	#ASSERT_PRED1
(
¥ed
, 
v1
) \

121 
	`GTEST_PRED1_
(
¥ed
, 
v1
, 
GTEST_FATAL_FAILURE_
)

	)

127 
	gãm∂©e
 <
ty≥«me
 
	gPªd
,

128 
ty≥«me
 
	gT1
,

129 
ty≥«me
 
	gT2
>

130 
As£πi⁄Resu…
 
As£πPªd2Hñ≥r
(c⁄° * 
¥ed_ãxt
,

131 c⁄° * 
e1
,

132 c⁄° * 
e2
,

133 
Pªd
 
¥ed
,

134 c⁄° 
T1
& 
v1
,

135 c⁄° 
T2
& 
v2
) {

136 i‡(
¥ed
(
v1
, 
v2
)Ë 
As£πi⁄Suc˚ss
();

138  
As£πi⁄Faûuª
()

139 << 
	g¥ed_ãxt
 << "(" << 
	ge1
 << ", " << 
	ge2


142 << 
	ge1
 << "ÉvÆu©e†tÿ" << ::
ã°ög
::
PrötToSåög
(
v1
) << "\n"

143 << 
e2
 << "ÉvÆu©e†tÿ" << ::
ã°ög
::
PrötToSåög
(
v2
);

148 
	#GTEST_PRED_FORMAT2_
(
¥ed_f‹m©
, 
v1
, 
v2
, 
⁄_Áûuª
)\

149 
	`GTEST_ASSERT_
(
	`¥ed_f‹m©
(#v1, #v2, 
v1
, 
v2
), \

150 
⁄_Áûuª
)

	)

154 
	#GTEST_PRED2_
(
¥ed
, 
v1
, 
v2
, 
⁄_Áûuª
)\

155 
	`GTEST_ASSERT_
(::
ã°ög
::
	`As£πPªd2Hñ≥r
(#pred, \

158 
¥ed
, \

159 
v1
, \

160 
v2
), 
⁄_Áûuª
)

	)

163 
	#EXPECT_PRED_FORMAT2
(
¥ed_f‹m©
, 
v1
, 
v2
) \

164 
	`GTEST_PRED_FORMAT2_
(
¥ed_f‹m©
, 
v1
, 
v2
, 
GTEST_NONFATAL_FAILURE_
)

	)

165 
	#EXPECT_PRED2
(
¥ed
, 
v1
, 
v2
) \

166 
	`GTEST_PRED2_
(
¥ed
, 
v1
, 
v2
, 
GTEST_NONFATAL_FAILURE_
)

	)

167 
	#ASSERT_PRED_FORMAT2
(
¥ed_f‹m©
, 
v1
, 
v2
) \

168 
	`GTEST_PRED_FORMAT2_
(
¥ed_f‹m©
, 
v1
, 
v2
, 
GTEST_FATAL_FAILURE_
)

	)

169 
	#ASSERT_PRED2
(
¥ed
, 
v1
, 
v2
) \

170 
	`GTEST_PRED2_
(
¥ed
, 
v1
, 
v2
, 
GTEST_FATAL_FAILURE_
)

	)

176 
	gãm∂©e
 <
ty≥«me
 
	gPªd
,

177 
ty≥«me
 
	gT1
,

178 
ty≥«me
 
	gT2
,

179 
ty≥«me
 
	gT3
>

180 
As£πi⁄Resu…
 
As£πPªd3Hñ≥r
(c⁄° * 
¥ed_ãxt
,

181 c⁄° * 
e1
,

182 c⁄° * 
e2
,

183 c⁄° * 
e3
,

184 
Pªd
 
¥ed
,

185 c⁄° 
T1
& 
v1
,

186 c⁄° 
T2
& 
v2
,

187 c⁄° 
T3
& 
v3
) {

188 i‡(
¥ed
(
v1
, 
v2
, 
v3
)Ë 
As£πi⁄Suc˚ss
();

190  
As£πi⁄Faûuª
()

191 << 
	g¥ed_ãxt
 << "(" << 
	ge1
 << ", " << 
	ge2
 << ", " << 
	ge3


194 << 
	ge1
 << "ÉvÆu©e†tÿ" << ::
ã°ög
::
PrötToSåög
(
v1
) << "\n"

195 << 
e2
 << "ÉvÆu©e†tÿ" << ::
ã°ög
::
PrötToSåög
(
v2
) << "\n"

196 << 
e3
 << "ÉvÆu©e†tÿ" << ::
ã°ög
::
PrötToSåög
(
v3
);

201 
	#GTEST_PRED_FORMAT3_
(
¥ed_f‹m©
, 
v1
, 
v2
, 
v3
, 
⁄_Áûuª
)\

202 
	`GTEST_ASSERT_
(
	`¥ed_f‹m©
(#v1, #v2, #v3, 
v1
, 
v2
, 
v3
), \

203 
⁄_Áûuª
)

	)

207 
	#GTEST_PRED3_
(
¥ed
, 
v1
, 
v2
, 
v3
, 
⁄_Áûuª
)\

208 
	`GTEST_ASSERT_
(::
ã°ög
::
	`As£πPªd3Hñ≥r
(#pred, \

212 
¥ed
, \

213 
v1
, \

214 
v2
, \

215 
v3
), 
⁄_Áûuª
)

	)

218 
	#EXPECT_PRED_FORMAT3
(
¥ed_f‹m©
, 
v1
, 
v2
, 
v3
) \

219 
	`GTEST_PRED_FORMAT3_
(
¥ed_f‹m©
, 
v1
, 
v2
, 
v3
, 
GTEST_NONFATAL_FAILURE_
)

	)

220 
	#EXPECT_PRED3
(
¥ed
, 
v1
, 
v2
, 
v3
) \

221 
	`GTEST_PRED3_
(
¥ed
, 
v1
, 
v2
, 
v3
, 
GTEST_NONFATAL_FAILURE_
)

	)

222 
	#ASSERT_PRED_FORMAT3
(
¥ed_f‹m©
, 
v1
, 
v2
, 
v3
) \

223 
	`GTEST_PRED_FORMAT3_
(
¥ed_f‹m©
, 
v1
, 
v2
, 
v3
, 
GTEST_FATAL_FAILURE_
)

	)

224 
	#ASSERT_PRED3
(
¥ed
, 
v1
, 
v2
, 
v3
) \

225 
	`GTEST_PRED3_
(
¥ed
, 
v1
, 
v2
, 
v3
, 
GTEST_FATAL_FAILURE_
)

	)

231 
	gãm∂©e
 <
ty≥«me
 
	gPªd
,

232 
ty≥«me
 
	gT1
,

233 
ty≥«me
 
	gT2
,

234 
ty≥«me
 
	gT3
,

235 
ty≥«me
 
	gT4
>

236 
As£πi⁄Resu…
 
As£πPªd4Hñ≥r
(c⁄° * 
¥ed_ãxt
,

237 c⁄° * 
e1
,

238 c⁄° * 
e2
,

239 c⁄° * 
e3
,

240 c⁄° * 
e4
,

241 
Pªd
 
¥ed
,

242 c⁄° 
T1
& 
v1
,

243 c⁄° 
T2
& 
v2
,

244 c⁄° 
T3
& 
v3
,

245 c⁄° 
T4
& 
v4
) {

246 i‡(
¥ed
(
v1
, 
v2
, 
v3
, 
v4
)Ë 
As£πi⁄Suc˚ss
();

248  
As£πi⁄Faûuª
()

249 << 
	g¥ed_ãxt
 << "(" << 
	ge1
 << ", " << 
	ge2
 << ", " << 
	ge3
 << ", " << 
	ge4


252 << 
	ge1
 << "ÉvÆu©e†tÿ" << ::
ã°ög
::
PrötToSåög
(
v1
) << "\n"

253 << 
e2
 << "ÉvÆu©e†tÿ" << ::
ã°ög
::
PrötToSåög
(
v2
) << "\n"

254 << 
e3
 << "ÉvÆu©e†tÿ" << ::
ã°ög
::
PrötToSåög
(
v3
) << "\n"

255 << 
e4
 << "ÉvÆu©e†tÿ" << ::
ã°ög
::
PrötToSåög
(
v4
);

260 
	#GTEST_PRED_FORMAT4_
(
¥ed_f‹m©
, 
v1
, 
v2
, 
v3
, 
v4
, 
⁄_Áûuª
)\

261 
	`GTEST_ASSERT_
(
	`¥ed_f‹m©
(#v1, #v2, #v3, #v4, 
v1
, 
v2
, 
v3
, 
v4
), \

262 
⁄_Áûuª
)

	)

266 
	#GTEST_PRED4_
(
¥ed
, 
v1
, 
v2
, 
v3
, 
v4
, 
⁄_Áûuª
)\

267 
	`GTEST_ASSERT_
(::
ã°ög
::
	`As£πPªd4Hñ≥r
(#pred, \

272 
¥ed
, \

273 
v1
, \

274 
v2
, \

275 
v3
, \

276 
v4
), 
⁄_Áûuª
)

	)

279 
	#EXPECT_PRED_FORMAT4
(
¥ed_f‹m©
, 
v1
, 
v2
, 
v3
, 
v4
) \

280 
	`GTEST_PRED_FORMAT4_
(
¥ed_f‹m©
, 
v1
, 
v2
, 
v3
, 
v4
, 
GTEST_NONFATAL_FAILURE_
)

	)

281 
	#EXPECT_PRED4
(
¥ed
, 
v1
, 
v2
, 
v3
, 
v4
) \

282 
	`GTEST_PRED4_
(
¥ed
, 
v1
, 
v2
, 
v3
, 
v4
, 
GTEST_NONFATAL_FAILURE_
)

	)

283 
	#ASSERT_PRED_FORMAT4
(
¥ed_f‹m©
, 
v1
, 
v2
, 
v3
, 
v4
) \

284 
	`GTEST_PRED_FORMAT4_
(
¥ed_f‹m©
, 
v1
, 
v2
, 
v3
, 
v4
, 
GTEST_FATAL_FAILURE_
)

	)

285 
	#ASSERT_PRED4
(
¥ed
, 
v1
, 
v2
, 
v3
, 
v4
) \

286 
	`GTEST_PRED4_
(
¥ed
, 
v1
, 
v2
, 
v3
, 
v4
, 
GTEST_FATAL_FAILURE_
)

	)

292 
	gãm∂©e
 <
ty≥«me
 
	gPªd
,

293 
ty≥«me
 
	gT1
,

294 
ty≥«me
 
	gT2
,

295 
ty≥«me
 
	gT3
,

296 
ty≥«me
 
	gT4
,

297 
ty≥«me
 
	gT5
>

298 
As£πi⁄Resu…
 
As£πPªd5Hñ≥r
(c⁄° * 
¥ed_ãxt
,

299 c⁄° * 
e1
,

300 c⁄° * 
e2
,

301 c⁄° * 
e3
,

302 c⁄° * 
e4
,

303 c⁄° * 
e5
,

304 
Pªd
 
¥ed
,

305 c⁄° 
T1
& 
v1
,

306 c⁄° 
T2
& 
v2
,

307 c⁄° 
T3
& 
v3
,

308 c⁄° 
T4
& 
v4
,

309 c⁄° 
T5
& 
v5
) {

310 i‡(
¥ed
(
v1
, 
v2
, 
v3
, 
v4
, 
v5
)Ë 
As£πi⁄Suc˚ss
();

312  
As£πi⁄Faûuª
()

313 << 
	g¥ed_ãxt
 << "(" << 
	ge1
 << ", " << 
	ge2
 << ", " << 
	ge3
 << ", " << 
	ge4


314 << ", " << 
	ge5
 << ")ÉvaluatesÅo false, where"

316 << 
	ge1
 << "ÉvÆu©e†tÿ" << ::
ã°ög
::
PrötToSåög
(
v1
) << "\n"

317 << 
e2
 << "ÉvÆu©e†tÿ" << ::
ã°ög
::
PrötToSåög
(
v2
) << "\n"

318 << 
e3
 << "ÉvÆu©e†tÿ" << ::
ã°ög
::
PrötToSåög
(
v3
) << "\n"

319 << 
e4
 << "ÉvÆu©e†tÿ" << ::
ã°ög
::
PrötToSåög
(
v4
) << "\n"

320 << 
e5
 << "ÉvÆu©e†tÿ" << ::
ã°ög
::
PrötToSåög
(
v5
);

325 
	#GTEST_PRED_FORMAT5_
(
¥ed_f‹m©
, 
v1
, 
v2
, 
v3
, 
v4
, 
v5
, 
⁄_Áûuª
)\

326 
	`GTEST_ASSERT_
(
	`¥ed_f‹m©
(#v1, #v2, #v3, #v4, #v5, 
v1
, 
v2
, 
v3
, 
v4
, 
v5
), \

327 
⁄_Áûuª
)

	)

331 
	#GTEST_PRED5_
(
¥ed
, 
v1
, 
v2
, 
v3
, 
v4
, 
v5
, 
⁄_Áûuª
)\

332 
	`GTEST_ASSERT_
(::
ã°ög
::
	`As£πPªd5Hñ≥r
(#pred, \

338 
¥ed
, \

339 
v1
, \

340 
v2
, \

341 
v3
, \

342 
v4
, \

343 
v5
), 
⁄_Áûuª
)

	)

346 
	#EXPECT_PRED_FORMAT5
(
¥ed_f‹m©
, 
v1
, 
v2
, 
v3
, 
v4
, 
v5
) \

347 
	`GTEST_PRED_FORMAT5_
(
¥ed_f‹m©
, 
v1
, 
v2
, 
v3
, 
v4
, 
v5
, 
GTEST_NONFATAL_FAILURE_
)

	)

348 
	#EXPECT_PRED5
(
¥ed
, 
v1
, 
v2
, 
v3
, 
v4
, 
v5
) \

349 
	`GTEST_PRED5_
(
¥ed
, 
v1
, 
v2
, 
v3
, 
v4
, 
v5
, 
GTEST_NONFATAL_FAILURE_
)

	)

350 
	#ASSERT_PRED_FORMAT5
(
¥ed_f‹m©
, 
v1
, 
v2
, 
v3
, 
v4
, 
v5
) \

351 
	`GTEST_PRED_FORMAT5_
(
¥ed_f‹m©
, 
v1
, 
v2
, 
v3
, 
v4
, 
v5
, 
GTEST_FATAL_FAILURE_
)

	)

352 
	#ASSERT_PRED5
(
¥ed
, 
v1
, 
v2
, 
v3
, 
v4
, 
v5
) \

353 
	`GTEST_PRED5_
(
¥ed
, 
v1
, 
v2
, 
v3
, 
v4
, 
v5
, 
GTEST_FATAL_FAILURE_
)

	)

	@/usr/include/gtest/gtest_prod.h

34 #i‚de‡
GOOGLETEST_INCLUDE_GTEST_GTEST_PROD_H_


35 
	#GOOGLETEST_INCLUDE_GTEST_GTEST_PROD_H_


	)

58 
	#FRIEND_TEST
(
ã°_ˇ£_«me
, 
ã°_«me
)\

59 
‰õnd
 
˛ass
 
ã°_ˇ£_«me
##
_
##
ã°_«me
##
_Te°


	)

	@/usr/include/gtest/internal/gtest-internal.h

37 #i‚de‡
GOOGLETEST_INCLUDE_GTEST_INTERNAL_GTEST_INTERNAL_H_


38 
	#GOOGLETEST_INCLUDE_GTEST_INTERNAL_GTEST_INTERNAL_H_


	)

40 
	~"gã°/öã∫Æ/gã°-p‹t.h
"

42 #i‡
GTEST_OS_LINUX


43 
	~<°dlib.h
>

44 
	~<sys/ty≥s.h
>

45 
	~<sys/waô.h
>

46 
	~<uni°d.h
>

49 #i‡
GTEST_HAS_EXCEPTIONS


50 
	~<°dex˚±
>

53 
	~<˘y≥.h
>

54 
	~<Êﬂt.h
>

55 
	~<°rög.h
>

56 
	~<c°döt
>

57 
	~<iom™ù
>

58 
	~<limôs
>

59 
	~<m≠
>

60 
	~<£t
>

61 
	~<°rög
>

62 
	~<ty≥_åaôs
>

63 
	~<ve˘‹
>

65 
	~"gã°/gã°-mesßge.h
"

66 
	~"gã°/öã∫Æ/gã°-fûï©h.h
"

67 
	~"gã°/öã∫Æ/gã°-°rög.h
"

68 
	~"gã°/öã∫Æ/gã°-ty≥-utû.h
"

78 
	#GTEST_CONCAT_TOKEN_
(
foo
, 
b¨
Ë
	`GTEST_CONCAT_TOKEN_IMPL_
(foo, b¨)

	)

79 
	#GTEST_CONCAT_TOKEN_IMPL_
(
foo
, 
b¨
Ëfoÿ## 
	)
bar

90 
	#GTEST_STRINGIFY_HELPER_
(
«me
, ...Ë#«me

	)

91 
	#GTEST_STRINGIFY_
(...Ë
	`GTEST_STRINGIFY_HELPER_
(
__VA_ARGS__
, )

	)

93 
«me•a˚
 
	g¥Ÿo2
 {

94 
˛ass
 
	gMesßgeLôe
;

97 
«me•a˚
 
	gã°ög
 {

101 
˛ass
 
	gAs£πi⁄Resu…
;

102 
˛ass
 
	gMesßge
;

103 
˛ass
 
	gTe°
;

104 
˛ass
 
	gTe°Info
;

105 
˛ass
 
	gTe°P¨tResu…
;

106 
˛ass
 
	gUnôTe°
;

108 
	gãm∂©e
 <
ty≥«me
 
	gT
>

109 ::
°d
::
°rög
 
PrötToSåög
(c⁄° 
T
& 
vÆue
);

111 
«me•a˚
 
	göã∫Æ
 {

113 
	gTø˚Info
;

114 
˛ass
 
	gTe°InfoIm∂
;

115 
˛ass
 
	gUnôTe°Im∂
;

119 
GTEST_API_
 c⁄° 
kSèckTø˚M¨kî
[];

122 ˛as†
	cIgn‹edVÆue
 {

123 
	sSök
 {};

124 
	gpublic
:

132 
ãm∂©e
 <
ty≥«me
 
T
,

133 
ty≥«me
 
	g°d
::
íabÀ_if
<!
°d
::
is_c⁄vîtibÀ
<
T
, 
	gSök
>::
vÆue
,

134 >::
ty≥
 = 0>

135 
Ign‹edVÆue
(c⁄° 
T
& ) {}

139 
GTEST_API_
 
	g°d
::
°rög
 
AµídU£rMesßge
(

140 c⁄° 
°d
::
°rög
& 
gã°_msg
, c⁄° 
Mesßge
& 
u£r_msg
);

142 #i‡
GTEST_HAS_EXCEPTIONS


144 
GTEST_DISABLE_MSC_WARNINGS_PUSH_
(4275 \

153 ˛as†
	cGTEST_API_
 
	gGoogÀTe°FaûuªEx˚±i⁄
 : 
public
 ::
°d
::
ru¡ime_îr‹
 {

154 
public
:

155 
ex∂icô
 
GoogÀTe°FaûuªEx˚±i⁄
(c⁄° 
Te°P¨tResu…
& 
Áûuª
);

158 
GTEST_DISABLE_MSC_WARNINGS_POP_
()

162 
«me•a˚
 
	gedô_di°™˚
 {

168 
	eEdôTy≥
 { 
	gkM©ch
, 
	gkAdd
, 
	gkRemove
, 
	gkRïœ˚
 };

169 
GTEST_API_
 
	g°d
::
ve˘‹
<
EdôTy≥
> 
CÆcuœãO±imÆEdôs
(

170 c⁄° 
°d
::
ve˘‹
<
size_t
>& 
À·
, c⁄° std::ve˘‹<size_t>& 
right
);

173 
GTEST_API_
 
	g°d
::
ve˘‹
<
EdôTy≥
> 
CÆcuœãO±imÆEdôs
(

174 c⁄° 
°d
::
ve˘‹
<°d::
°rög
>& 
À·
,

175 c⁄° 
°d
::
ve˘‹
<°d::
°rög
>& 
right
);

178 
GTEST_API_
 
	g°d
::
°rög
 
Cª©eUnifõdDiff
(c⁄° 
°d
::
ve˘‹
<°d::°rög>& 
À·
,

179 c⁄° 
°d
::
ve˘‹
<°d::
°rög
>& 
right
,

180 
size_t
 
c⁄ãxt
 = 2);

188 
GTEST_API_
 
	g°d
::
°rög
 
DiffSåögs
(c⁄° 
°d
::°rög& 
À·
,

189 c⁄° 
°d
::
°rög
& 
right
,

190 
size_t
* 
tŸÆ_löe_cou¡
);

207 
GTEST_API_
 
As£πi⁄Resu…
 
EqFaûuª
(c⁄° * 
ex≥˘ed_ex¥essi⁄
,

208 c⁄° * 
a˘uÆ_ex¥essi⁄
,

209 c⁄° 
°d
::
°rög
& 
ex≥˘ed_vÆue
,

210 c⁄° 
°d
::
°rög
& 
a˘uÆ_vÆue
,

211 
boﬁ
 
ign‹ög_ˇ£
);

214 
GTEST_API_
 
	g°d
::
°rög
 
GëBoﬁAs£πi⁄FaûuªMesßge
(

215 c⁄° 
As£πi⁄Resu…
& 
as£πi⁄_ªsu…
,

216 c⁄° * 
ex¥essi⁄_ãxt
,

217 c⁄° * 
a˘uÆ_¥ediˇã_vÆue
,

218 c⁄° * 
ex≥˘ed_¥ediˇã_vÆue
);

249 
	gãm∂©e
 <
ty≥«me
 
	gRawTy≥
>

250 ˛as†
	cFlﬂtögPoöt
 {

251 
	gpublic
:

254 
ty≥«me
 
	tTy≥WôhSize
<(
	tRawTy≥
)>::
	tUI¡
 
	tBôs
;

259 c⁄° 
size_t
 
	gkBôCou¡
 = 8*(
RawTy≥
);

262 c⁄° 
size_t
 
	gkFø˘i⁄BôCou¡
 =

263 
°d
::
numîic_limôs
<
RawTy≥
>::
digôs
 - 1;

266 c⁄° 
size_t
 
	gkExp⁄ítBôCou¡
 = 
kBôCou¡
 - 1 - 
kFø˘i⁄BôCou¡
;

269 c⁄° 
Bôs
 
	gkSignBôMask
 = 
°©ic_ˇ°
<Bôs>(1Ë<< (
kBôCou¡
 - 1);

272 c⁄° 
Bôs
 
	gkFø˘i⁄BôMask
 =

273 ~
°©ic_ˇ°
<
Bôs
>(0Ë>> (
kExp⁄ítBôCou¡
 + 1);

276 c⁄° 
Bôs
 
	gkExp⁄ítBôMask
 = ~(
kSignBôMask
 | 
kFø˘i⁄BôMask
);

290 c⁄° 
uöt32_t
 
	gkMaxUÕs
 = 4;

298 
ex∂icô
 
FlﬂtögPoöt
(c⁄° 
RawTy≥
& 
x
Ë{ 
	gu_
.
	gvÆue_
 = x; }

305 
RawTy≥
 
ReöãΩªtBôs
(c⁄° 
Bôs
 
bôs
) {

306 
FlﬂtögPoöt
 
Â
(0);

307 
	gÂ
.
	gu_
.
	gbôs_
 = 
bôs
;

308  
	gÂ
.
	gu_
.
	gvÆue_
;

312 
RawTy≥
 
Inföôy
() {

313  
ReöãΩªtBôs
(
kExp⁄ítBôMask
);

317 
RawTy≥
 
Max
();

322 c⁄° 
	gBôs
 &
bôs
(Ëc⁄° {  
	gu_
.
	gbôs_
; }

325 
Bôs
 
exp⁄ít_bôs
(Ëc⁄° {  
	gkExp⁄ítBôMask
 & 
	gu_
.
	gbôs_
; }

328 
Bôs
 
‰a˘i⁄_bôs
(Ëc⁄° {  
	gkFø˘i⁄BôMask
 & 
	gu_
.
	gbôs_
; }

331 
Bôs
 
sign_bô
(Ëc⁄° {  
	gkSignBôMask
 & 
	gu_
.
	gbôs_
; }

334 
boﬁ
 
is_«n
() const {

337  (
exp⁄ít_bôs
(Ë=
kExp⁄ítBôMask
Ë&& (
‰a˘i⁄_bôs
() != 0);

346 
boﬁ
 
Almo°EquÆs
(c⁄° 
FlﬂtögPoöt
& 
rhs
) const {

349 i‡(
is_«n
(Ë|| 
	grhs
.is_«n()Ë 
	gÁl£
;

351  
Di°™˚BëwìnSignAndMagnôudeNumbîs
(
u_
.
bôs_
, 
rhs
.u_.bits_)

352 <
kMaxUÕs
;

355 
	g¥iv©e
:

357 
	uFlﬂtögPoötUni⁄
 {

358 
RawTy≥
 
vÆue_
;

359 
Bôs
 
	gbôs_
;

377 
Bôs
 
SignAndMagnôudeToBü£d
(c⁄° Bô†&
ßm
) {

378 i‡(
	gkSignBôMask
 & 
	gßm
) {

380  ~
	gßm
 + 1;

383  
	gkSignBôMask
 | 
	gßm
;

389 
Bôs
 
Di°™˚BëwìnSignAndMagnôudeNumbîs
(c⁄° Bô†&
ßm1
,

390 c⁄° 
Bôs
 &
ßm2
) {

391 c⁄° 
Bôs
 
	gbü£d1
 = 
SignAndMagnôudeToBü£d
(
ßm1
);

392 c⁄° 
Bôs
 
	gbü£d2
 = 
SignAndMagnôudeToBü£d
(
ßm2
);

393  (
	gbü£d1
 >
bü£d2
Ë? (
bü£d1
 - biased2) : (biased2 - biased1);

396 
FlﬂtögPoötUni⁄
 
	gu_
;

401 
	gãm∂©e
 <>

402 
ölöe
 
	gFlﬂtögPoöt
<>::
Max
(Ë{  
FLT_MAX
; }

403 
	gãm∂©e
 <>

404 
ölöe
 
	gFlﬂtögPoöt
<>::
Max
(Ë{  
DBL_MAX
; }

408 
	gFlﬂtögPoöt
<> 
	tFlﬂt
;

409 
	gFlﬂtögPoöt
<> 
	tDoubÀ
;

417 c⁄° * 
	tTy≥Id
;

419 
	gãm∂©e
 <
ty≥«me
 
	gT
>

420 ˛as†
	cTy≥IdHñ≥r
 {

421 
	gpublic
:

425 
boﬁ
 
dummy_
;

428 
	gãm∂©e
 <
ty≥«me
 
	gT
>

429 
boﬁ
 
	gTy≥IdHñ≥r
<
	gT
>::
dummy_
 = 
Ál£
;

434 
	gãm∂©e
 <
ty≥«me
 
	gT
>

435 
Ty≥Id
 
GëTy≥Id
() {

440  &(
	gTy≥IdHñ≥r
<
	gT
>::
dummy_
);

448 
GTEST_API_
 
Ty≥Id
 
GëTe°Ty≥Id
();

452 ˛as†
	cTe°Fa˘‹yBa£
 {

453 
	gpublic
:

454 
vútuÆ
 ~
Te°Fa˘‹yBa£
() {}

458 
vútuÆ
 
Te°
* 
Cª©eTe°
() = 0;

460 
	g¥Ÿe˘ed
:

461 
Te°Fa˘‹yBa£
() {}

463 
¥iv©e
:

464 
GTEST_DISALLOW_COPY_AND_ASSIGN_
(
Te°Fa˘‹yBa£
);

469 
	gãm∂©e
 <
˛ass
 
	gTe°Cœss
>

470 ˛as†
	cTe°Fa˘‹yIm∂
 : 
public
 
Te°Fa˘‹yBa£
 {

471 
public
:

472 
Te°
* 
Cª©eTe°
(Ë
ovîride
 {  
√w
 
Te°Cœss
; }

475 #i‡
GTEST_OS_WINDOWS


481 
GTEST_API_
 
As£πi⁄Resu…
 
IsHRESULTSuc˚ss
(c⁄° * 
ex¥
,

482 
hr
);

483 
GTEST_API_
 
As£πi⁄Resu…
 
IsHRESULTFaûuª
(c⁄° * 
ex¥
,

484 
hr
);

489 
usög
 
	gSëUpTe°SuôeFunc
 = (*)();

490 
usög
 
	gTórDownTe°SuôeFunc
 = (*)();

492 
	sCodeLoˇti⁄
 {

493 
CodeLoˇti⁄
(c⁄° 
°d
::
°rög
& 
a_fûe
, 
a_löe
)

494 : 
fûe
(
a_fûe
), 
löe
(
a_löe
) {}

496 
	g°d
::
°rög
 
fûe
;

497 
	glöe
;

504 
usög
 
	gSëUpTórDownSuôeFuncTy≥
 = (*)();

506 
ölöe
 
SëUpTórDownSuôeFuncTy≥
 
GëNŸDeÁu…OrNuŒ
(

507 
SëUpTórDownSuôeFuncTy≥
 
a
, SëUpTórDownSuôeFuncTy≥ 
def
) {

508  
	ga
 =
def
 ? 
nuŒ±r
 : 
a
;

511 
	gãm∂©e
 <
ty≥«me
 
	gT
>

515 
	gSuôeApiResﬁvî
 : 
T
 {

518 
usög
 
Te°
 =

519 
ty≥«me
 
°d
::
c⁄dôi⁄Æ
<(
T
Ë!0, ::
ã°ög
::
Te°
, >::
ty≥
;

521 
SëUpTórDownSuôeFuncTy≥
 
GëSëUpCa£OrSuôe
(c⁄° * 
fûíame
,

522 
löe_num
) {

523 #i‚de‡
GTEST_REMOVE_LEGACY_TEST_CASEAPI_


524 
SëUpTórDownSuôeFuncTy≥
 
	gã°_ˇ£_Â
 =

525 
GëNŸDeÁu…OrNuŒ
(&
T
::
SëUpTe°Ca£
, &
Te°
::SetUpTestCase);

526 
SëUpTórDownSuôeFuncTy≥
 
	gã°_suôe_Â
 =

527 
GëNŸDeÁu…OrNuŒ
(&
T
::
SëUpTe°Suôe
, &
Te°
::SetUpTestSuite);

529 
GTEST_CHECK_
(!
ã°_ˇ£_Â
 || !
ã°_suôe_Â
)

532 << 
	gfûíame
 << ":" << 
	glöe_num
;

534  
	gã°_ˇ£_Â
 !
nuŒ±r
 ? 
ã°_ˇ£_Â
 : 
ã°_suôe_Â
;

536 ()(
	gfûíame
);

537 ()(
	glöe_num
);

538  &
	gT
::
SëUpTe°Suôe
;

542 
SëUpTórDownSuôeFuncTy≥
 
GëTórDownCa£OrSuôe
(c⁄° * 
fûíame
,

543 
löe_num
) {

544 #i‚de‡
GTEST_REMOVE_LEGACY_TEST_CASEAPI_


545 
SëUpTórDownSuôeFuncTy≥
 
	gã°_ˇ£_Â
 =

546 
GëNŸDeÁu…OrNuŒ
(&
T
::
TórDownTe°Ca£
, &
Te°
::TearDownTestCase);

547 
SëUpTórDownSuôeFuncTy≥
 
	gã°_suôe_Â
 =

548 
GëNŸDeÁu…OrNuŒ
(&
T
::
TórDownTe°Suôe
, &
Te°
::TearDownTestSuite);

550 
GTEST_CHECK_
(!
ã°_ˇ£_Â
 || !
ã°_suôe_Â
)

553 << 
	gfûíame
 << ":" << 
	glöe_num
;

555  
	gã°_ˇ£_Â
 !
nuŒ±r
 ? 
ã°_ˇ£_Â
 : 
ã°_suôe_Â
;

557 ()(
	gfûíame
);

558 ()(
	glöe_num
);

559  &
	gT
::
TórDownTe°Suôe
;

582 
GTEST_API_
 
Te°Info
* 
MakeAndRegi°îTe°Info
(

583 c⁄° * 
ã°_suôe_«me
, c⁄° * 
«me
, c⁄° * 
ty≥_∑øm
,

584 c⁄° * 
vÆue_∑øm
, 
CodeLoˇti⁄
 
code_loˇti⁄
,

585 
Ty≥Id
 
fixtuª_˛ass_id
, 
SëUpTe°SuôeFunc
 
£t_up_tc
,

586 
TórDownTe°SuôeFunc
 
ã¨_down_tc
, 
Te°Fa˘‹yBa£
* 
Á˘‹y
);

591 
GTEST_API_
 
boﬁ
 
SkùPªfix
(c⁄° * 
¥efix
, c⁄° ** 
p°r
);

593 
GTEST_DISABLE_MSC_WARNINGS_PUSH_
(4251 \

597 ˛as†
	cGTEST_API_
 
	gTy≥dTe°SuôePSèã
 {

598 
	gpublic
:

599 
Ty≥dTe°SuôePSèã
(Ë: 
ªgi°îed_
(
Ál£
) {}

604 
boﬁ
 
AddTe°Name
(c⁄° * 
fûe
, 
löe
, c⁄° * 
ˇ£_«me
,

605 c⁄° * 
ã°_«me
) {

606 i‡(
	gªgi°îed_
) {

607 
Ârötf
(
°dîr
,

610 
F‹m©FûeLoˇti⁄
(
fûe
, 
löe
).
c_°r
(), 
ã°_«me
, 
ˇ£_«me
);

611 
fÊush
(
°dîr
);

612 
	gposix
::
Ab‹t
();

614 
	gªgi°îed_ã°s_
.
ö£π
(

615 ::
°d
::
make_∑ú
(
ã°_«me
, 
CodeLoˇti⁄
(
fûe
, 
löe
)));

616  
	gåue
;

619 
boﬁ
 
Te°Exi°s
(c⁄° 
°d
::
°rög
& 
ã°_«me
) const {

620  
ªgi°îed_ã°s_
.
cou¡
(
ã°_«me
) > 0;

623 c⁄° 
	gCodeLoˇti⁄
& 
GëCodeLoˇti⁄
(c⁄° 
°d
::
°rög
& 
ã°_«me
) const {

624 
Regi°îedTe°sM≠
::
c⁄°_ôî©‹
 
ô
 = 
ªgi°îed_ã°s_
.
föd
(
ã°_«me
);

625 
GTEST_CHECK_
(
ô
 !
ªgi°îed_ã°s_
.
íd
());

626  
	gô
->
	g£c⁄d
;

632 c⁄° * 
VîifyRegi°îedTe°Names
(c⁄° * 
ã°_suôe_«me
,

633 c⁄° * 
fûe
, 
löe
,

634 c⁄° * 
ªgi°îed_ã°s
);

636 
	g¥iv©e
:

637 ::
°d
::
	tm≠
<
	t°d
::
	t°rög
, 
	tCodeLoˇti⁄
> 
	tRegi°îedTe°sM≠
;

639 
boﬁ
 
	gªgi°îed_
;

640 
Regi°îedTe°sM≠
 
	gªgi°îed_ã°s_
;

644 #i‚de‡
GTEST_REMOVE_LEGACY_TEST_CASEAPI_


645 
usög
 
	gTy≥dTe°Ca£PSèã
 = 
Ty≥dTe°SuôePSèã
;

648 
GTEST_DISABLE_MSC_WARNINGS_POP_
()

652 
ölöe
 c⁄° * 
SkùComma
(c⁄° * 
°r
) {

653 c⁄° * 
	gcomma
 = 
°rchr
(
°r
, ',');

654 i‡(
	gcomma
 =
nuŒ±r
) {

655  
nuŒ±r
;

657 
IsS∑˚
(*(++
comma
))) {}

658  
	gcomma
;

663 
ölöe
 
	g°d
::
°rög
 
GëPªfixU¡ûComma
(c⁄° * 
°r
) {

664 c⁄° * 
comma
 = 
°rchr
(
°r
, ',');

665  
	gcomma
 =
nuŒ±r
 ? 
°r
 : 
°d
::
°rög
(°r, 
comma
);

670 
S∂ôSåög
(c⁄° ::
°d
::
°rög
& 
°r
, 
dñimôî
,

671 ::
°d
::
ve˘‹
< ::°d::
°rög
>* 
de°
);

675 
	sDeÁu…NameGíî©‹
 {

676 
	gãm∂©e
 <
ty≥«me
 
	gT
>

677 
	g°d
::
°rög
 
GëName
(
i
) {

678  
SåómabÀToSåög
(
i
);

682 
	gãm∂©e
 <
ty≥«me
 
	gProvided
 = 
DeÁu…NameGíî©‹
>

683 
	sNameGíî©‹Sñe˘‹
 {

684 
Provided
 
	tty≥
;

687 
	gãm∂©e
 <
ty≥«me
 
	gNameGíî©‹
>

688 
Gíî©eNamesRecursivñy
(
öã∫Æ
::
N⁄e
, 
°d
::
ve˘‹
<°d::
°rög
>*, ) {}

690 
	gãm∂©e
 <
ty≥«me
 
	gNameGíî©‹
,Åy≥«mê
	gTy≥s
>

691 
Gíî©eNamesRecursivñy
(
Ty≥s
, 
°d
::
ve˘‹
<°d::
°rög
>* 
ªsu…
, 
i
) {

692 
	gªsu…
->
push_back
(
NameGíî©‹
::
ãm∂©e
 
GëName
<
ty≥«me
 
Ty≥s
::
Hód
>(
i
));

693 
	gGíî©eNamesRecursivñy
<
	gNameGíî©‹
>(
ty≥«me
 
	gTy≥s
::
Taû
(), 
	gªsu…
,

694 
	gi
 + 1);

697 
	gãm∂©e
 <
ty≥«me
 
	gNameGíî©‹
,Åy≥«mê
	gTy≥s
>

698 
	g°d
::
ve˘‹
<
°d
::
°rög
> 
Gíî©eNames
() {

699 
°d
::
ve˘‹
<°d::
°rög
> 
ªsu…
;

700 
	gGíî©eNamesRecursivñy
<
	gNameGíî©‹
>(
Ty≥s
(), &
	gªsu…
, 0);

701  
	gªsu…
;

711 
	gãm∂©e
 <
GTEST_TEMPLATE_
 
	gFixtuª
, 
˛ass
 
	gTe°Sñ
, 
ty≥«me
 
	gTy≥s
>

712 ˛as†
	cTy≥P¨amëîizedTe°
 {

713 
	gpublic
:

718 
boﬁ
 
Regi°î
(c⁄° * 
¥efix
, c⁄° 
CodeLoˇti⁄
& 
code_loˇti⁄
,

719 c⁄° * 
ˇ£_«me
, c⁄° * 
ã°_«mes
, 
ödex
,

720 c⁄° 
°d
::
ve˘‹
<°d::
°rög
>& 
ty≥_«mes
 =

721 
Gíî©eNames
<
DeÁu…NameGíî©‹
, 
Ty≥s
>()) {

722 
ty≥«me
 
	tTy≥s
::
	tHód
 
	tTy≥
;

723 
	gFixtuª
<
	tTy≥
> 
	tFixtuªCœss
;

724 
ty≥«me
 
	tGTEST_BIND_
(
	tTe°Sñ
, 
	tTy≥
Ë
	tTe°Cœss
;

728 
MakeAndRegi°îTe°Info
(

729 (
°d
::
°rög
(
¥efix
Ë+ (¥efix[0] ='\0' ? "" : "/"Ë+ 
ˇ£_«me
 +

730 "/" + 
ty≥_«mes
[
°©ic_ˇ°
<
size_t
>(
ödex
)])

731 .
c_°r
(),

732 
SåùTøûögS∑˚s
(
GëPªfixU¡ûComma
(
ã°_«mes
)).
c_°r
(),

733 
GëTy≥Name
<
Ty≥
>().
c_°r
(),

734 
nuŒ±r
,

735 
code_loˇti⁄
, 
GëTy≥Id
<
FixtuªCœss
>(),

736 
SuôeApiResﬁvî
<
Te°Cœss
>::
GëSëUpCa£OrSuôe
(

737 
code_loˇti⁄
.
fûe
.
c_°r
(), code_loˇti⁄.
löe
),

738 
SuôeApiResﬁvî
<
Te°Cœss
>::
GëTórDownCa£OrSuôe
(

739 
code_loˇti⁄
.
fûe
.
c_°r
(), code_loˇti⁄.
löe
),

740 
√w
 
Te°Fa˘‹yIm∂
<
Te°Cœss
>);

743  
	gTy≥P¨amëîizedTe°
<
	gFixtuª
, 
	gTe°Sñ
,

744 
ty≥«me
 
	gTy≥s
::
Taû
>::
Regi°î
(
¥efix
,

745 
code_loˇti⁄
,

746 
ˇ£_«me
,

747 
ã°_«mes
,

748 
ödex
 + 1,

749 
ty≥_«mes
);

754 
	gãm∂©e
 <
GTEST_TEMPLATE_
 
	gFixtuª
, 
˛ass
 
	gTe°Sñ
>

755 
˛ass
 
	gTy≥P¨amëîizedTe°
<
	gFixtuª
, 
	gTe°Sñ
, 
	göã∫Æ
::
N⁄e
> {

756 
public
:

757 
boﬁ
 
Regi°î
(c⁄° * , c⁄° 
CodeLoˇti⁄
&,

760 c⁄° 
°d
::
ve˘‹
<°d::
°rög
>& =

761 
°d
::
ve˘‹
<°d::
°rög
>() ) {

762  
åue
;

766 
GTEST_API_
 
Regi°îTy≥P¨amëîizedTe°Suôe
(c⁄° * 
ã°_suôe_«me
,

767 
CodeLoˇti⁄
 
code_loˇti⁄
);

768 
GTEST_API_
 
Regi°îTy≥P¨amëîizedTe°SuôeIn°™tüti⁄
(

769 c⁄° * 
ˇ£_«me
);

775 
	gãm∂©e
 <
GTEST_TEMPLATE_
 
	gFixtuª
, 
ty≥«me
 
	gTe°s
,Åy≥«mê
	gTy≥s
>

776 ˛as†
	cTy≥P¨amëîizedTe°Suôe
 {

777 
	gpublic
:

778 
boﬁ
 
Regi°î
(c⁄° * 
¥efix
, 
CodeLoˇti⁄
 
code_loˇti⁄
,

779 c⁄° 
Ty≥dTe°SuôePSèã
* 
°©e
, c⁄° * 
ˇ£_«me
,

780 c⁄° * 
ã°_«mes
,

781 c⁄° 
°d
::
ve˘‹
<°d::
°rög
>& 
ty≥_«mes
 =

782 
Gíî©eNames
<
DeÁu…NameGíî©‹
, 
Ty≥s
>()) {

783 
Regi°îTy≥P¨amëîizedTe°SuôeIn°™tüti⁄
(
ˇ£_«me
);

784 
	g°d
::
°rög
 
ã°_«me
 = 
SåùTøûögS∑˚s
(

785 
GëPªfixU¡ûComma
(
ã°_«mes
));

786 i‡(!
	g°©e
->
Te°Exi°s
(
ã°_«me
)) {

787 
Ârötf
(
°dîr
, "FailedÅo get codeÜocation forÅest %s.%sát %s.",

788 
ˇ£_«me
, 
ã°_«me
.
c_°r
(),

789 
F‹m©FûeLoˇti⁄
(
code_loˇti⁄
.
fûe
.
c_°r
(),

790 
code_loˇti⁄
.
löe
).
c_°r
());

791 
fÊush
(
°dîr
);

792 
	gposix
::
Ab‹t
();

794 c⁄° 
	gCodeLoˇti⁄
& 
	gã°_loˇti⁄
 = 
°©e
->
GëCodeLoˇti⁄
(
ã°_«me
);

796 
ty≥«me
 
	tTe°s
::
	tHód
 Head;

799 
	gTy≥P¨amëîizedTe°
<
	gFixtuª
, 
	gHód
, 
	gTy≥s
>::
Regi°î
(

800 
¥efix
, 
ã°_loˇti⁄
, 
ˇ£_«me
, 
ã°_«mes
, 0, 
ty≥_«mes
);

803  
	gTy≥P¨amëîizedTe°Suôe
<
	gFixtuª
, 
ty≥«me
 
	gTe°s
::
Taû
,

804 
	gTy≥s
>::
Regi°î
(
¥efix
, 
code_loˇti⁄
,

805 
°©e
, 
ˇ£_«me
,

806 
SkùComma
(
ã°_«mes
),

807 
ty≥_«mes
);

812 
	gãm∂©e
 <
GTEST_TEMPLATE_
 
	gFixtuª
, 
ty≥«me
 
	gTy≥s
>

813 
˛ass
 
	gTy≥P¨amëîizedTe°Suôe
<
	gFixtuª
, 
	göã∫Æ
::
N⁄e
, 
	gTy≥s
> {

814 
	gpublic
:

815 
boﬁ
 
Regi°î
(c⁄° * , c⁄° 
CodeLoˇti⁄
&,

816 c⁄° 
Ty≥dTe°SuôePSèã
* ,

818 c⁄° 
°d
::
ve˘‹
<°d::
°rög
>& =

819 
°d
::
ve˘‹
<°d::
°rög
>() ) {

820  
åue
;

834 
GTEST_API_
 
	g°d
::
°rög
 
GëCuºítOsSèckTø˚Ex˚±T›
(

835 
UnôTe°
* 
unô_ã°
, 
skù_cou¡
);

841 
GTEST_API_
 
boﬁ
 
AlwaysTrue
();

844 
ölöe
 
boﬁ
 
AlwaysFÆ£
(Ë{  !
AlwaysTrue
(); }

849 
GTEST_API_
 
	gC⁄°Ch¨På
 {

850 
C⁄°Ch¨På
(c⁄° * 
°r
Ë: 
vÆue
(str) {}

851 
›î©‹
 
boﬁ
(Ëc⁄° {  
åue
; }

852 c⁄° * 
	gvÆue
;

857 
	sTrueWôhSåög
 {

858 
TrueWôhSåög
() = ;

859 
ex∂icô
 
TrueWôhSåög
(c⁄° * 
°r
Ë: 
vÆue
(str) {}

860 
ex∂icô
 
TrueWôhSåög
(c⁄° 
°d
::
°rög
& 
°r
Ë: 
vÆue
(str) {}

861 
ex∂icô
 
›î©‹
 
boﬁ
(Ëc⁄° {  
åue
; }

862 
	g°d
::
°rög
 
vÆue
;

870 ˛as†
	cGTEST_API_
 
	gR™dom
 {

871 
	gpublic
:

872 c⁄° 
uöt32_t
 
kMaxR™ge
 = 1u << 31;

874 
ex∂icô
 
R™dom
(
uöt32_t
 
£ed
Ë: 
°©e_
(seed) {}

876 
Re£ed
(
uöt32_t
 
£ed
Ë{ 
°©e_
 = seed; }

880 
uöt32_t
 
Gíî©e
(uöt32_à
ønge
);

882 
	g¥iv©e
:

883 
uöt32_t
 
°©e_
;

884 
GTEST_DISALLOW_COPY_AND_ASSIGN_
(
R™dom
);

888 
	#GTEST_REMOVE_REFERENCE_AND_CONST_
(
T
) \

889 
ty≥«me
 
°d
::
ªmove_c⁄°
<ty≥«mê°d::
ªmove_ª„ªn˚
<
T
>::
ty≥
>::
	)
type

894 
	gãm∂©e
 <
ty≥«me
 
	gT
>

895 ˛as†
	cHasDebugSåögAndSh‹tDebugSåög
 {

896 
	g¥iv©e
:

897 
ãm∂©e
 <
ty≥«me
 
C
>

898 autÿ
CheckDebugSåög
(
C
*Ë-> 
ty≥«me
 
°d
::
is_ßme
<

899 
°d
::
°rög
, 
de˛ty≥
(°d::
de˛vÆ
<c⁄° 
C
>().
DebugSåög
())>::
ty≥
;

900 
	gãm∂©e
 <
	gty≥«me
>

901 
	g°d
::
Ál£_ty≥
 
CheckDebugSåög
(...);

903 
	gãm∂©e
 <
ty≥«me
 
	gC
>

904 autÿ
CheckSh‹tDebugSåög
(
C
*Ë-> 
ty≥«me
 
	g°d
::
is_ßme
<

905 
°d
::
°rög
, 
de˛ty≥
(°d::
de˛vÆ
<c⁄° 
C
>().
Sh‹tDebugSåög
())>::
ty≥
;

906 
	gãm∂©e
 <
	gty≥«me
>

907 
	g°d
::
Ál£_ty≥
 
CheckSh‹tDebugSåög
(...);

909 
usög
 
	gHasDebugSåögTy≥
 = 
de˛ty≥
(
CheckDebugSåög
<
T
>(
nuŒ±r
));

910 
usög
 
	gHasSh‹tDebugSåögTy≥
 = 
de˛ty≥
(
CheckSh‹tDebugSåög
<
T
>(
nuŒ±r
));

912 
	gpublic
:

913 
c⁄°ex¥
 
boﬁ
 
vÆue
 =

914 
HasDebugSåögTy≥
::
vÆue
 && 
HasSh‹tDebugSåögTy≥
::value;

917 
	gãm∂©e
 <
ty≥«me
 
	gT
>

918 
c⁄°ex¥
 
boﬁ
 
	gHasDebugSåögAndSh‹tDebugSåög
<
	gT
>::
vÆue
;

944 
	tIsC⁄èöî
;

945 
	gãm∂©e
 <
˛ass
 
	gC
,

946 
˛ass
 
	gIãøt‹
 = 
de˛ty≥
(::
°d
::
de˛vÆ
<c⁄° 
C
&>().
begö
()),

947 
	g˛ass
 = 
de˛ty≥
(::
°d
::
de˛vÆ
<c⁄° 
C
&>().
íd
()),

948 
	g˛ass
 = 
de˛ty≥
(++::
°d
::
de˛vÆ
<
Iãøt‹
&>()),

949 
	g˛ass
 = 
de˛ty≥
(*::
°d
::
de˛vÆ
<
Iãøt‹
>()),

950 
	g˛ass
 = 
ty≥«me
 
C
::
c⁄°_ôî©‹
>

951 
IsC⁄èöî
 
IsC⁄èöîTe°
() {

955 
	tIsNŸC⁄èöî
;

956 
	gãm∂©e
 <
˛ass
 
	gC
>

957 
IsNŸC⁄èöî
 
IsC⁄èöîTe°
() {  '\0'; }

963 
	gãm∂©e
 <
ty≥«me
 
	gT
>

964 
	sIsHashTabÀ
 {

965 
	g¥iv©e
:

966 
ãm∂©e
 <
ty≥«me
 
U
>

967 
ã°
(
ty≥«me
 
U
::
hashî
*,Åy≥«mêU::
ªvî£_ôî©‹
*);

968 
	gãm∂©e
 <
ty≥«me
 
	gU
>

969 
ã°
(
ty≥«me
 
U
::
hashî
*, ...);

970 
	gãm∂©e
 <
ty≥«me
 
	gU
>

971 
ã°
(...);

973 
	gpublic
:

974 c⁄° 
boﬁ
 
vÆue
 = (
ã°
<
T
>(
nuŒ±r
, 
	gnuŒ±r
)) == ();

977 
	gãm∂©e
 <
ty≥«me
 
	gT
>

978 c⁄° 
boﬁ
 
	gIsHashTabÀ
<
	gT
>::
vÆue
;

980 
	gãm∂©e
 <
ty≥«me
 
	gC
,

981 
	gboﬁ
 = (
IsC⁄èöîTe°
<
C
>(0)Ë=(
IsC⁄èöî
)>

982 
IsRecursiveC⁄èöîIm∂
;

984 
	gãm∂©e
 <
ty≥«me
 
	gC
>

985 
	gIsRecursiveC⁄èöîIm∂
<
	gC
, 
	gÁl£
> : 
public
 
°d
::
Ál£_ty≥
 {};

991 
	gãm∂©e
 <
ty≥«me
 
	gC
>

992 
	gIsRecursiveC⁄èöîIm∂
<
	gC
, 
	gåue
> {

993 
usög
 
	gvÆue_ty≥
 = 
de˛ty≥
(*
°d
::
de˛vÆ
<
ty≥«me
 
C
::
c⁄°_ôî©‹
>());

994 
usög
 
	gty≥
 =

995 
°d
::
is_ßme
<
ty≥«me
 std::
ªmove_c⁄°
<

996 
ty≥«me
 
°d
::
ªmove_ª„ªn˚
<
vÆue_ty≥
>::
ty≥
>::type,

997 
	gC
>;

1006 
	gãm∂©e
 <
ty≥«me
 
	gC
>

1007 
	gIsRecursiveC⁄èöî
 : 
public
 
IsRecursiveC⁄èöîIm∂
<
C
>::
ty≥
 {};

1015 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gU
>

1016 
boﬁ
 
AºayEq
(c⁄° 
T
* 
lhs
, 
size_t
 
size
, c⁄° 
U
* 
rhs
);

1019 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gU
>

1020 
ölöe
 
boﬁ
 
AºayEq
(c⁄° 
T
& 
lhs
, c⁄° 
U
& 
rhs
Ë{  
	glhs
 ==Ñhs; }

1023 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gU
, 
size_t
 
	gN
>

1024 
ölöe
 
boﬁ
 
AºayEq
(c⁄° 
T
(&
lhs
)[
N
], c⁄° 
U
(&
rhs
)[N]) {

1025  
	göã∫Æ
::
AºayEq
(
lhs
, 
N
, 
rhs
);

1031 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gU
>

1032 
boﬁ
 
AºayEq
(c⁄° 
T
* 
lhs
, 
size_t
 
size
, c⁄° 
U
* 
rhs
) {

1033 
size_t
 
	gi
 = 0; i !
size
; i++) {

1034 i‡(!
	göã∫Æ
::
AºayEq
(
lhs
[
i
], 
rhs
[i]))

1035  
	gÁl£
;

1037  
	gåue
;

1042 
	gãm∂©e
 <
ty≥«me
 
	gIãr
,Åy≥«mê
	gEÀmít
>

1043 
Iãr
 
AºayAw¨eFöd
(Iã∏
begö
, Iã∏
íd
, c⁄° 
EÀmít
& 
ñem
) {

1044 
Iãr
 
	gô
 = 
begö
; ià!
íd
; ++it) {

1045 i‡(
	göã∫Æ
::
AºayEq
(*
ô
, 
ñem
))

1046  
	gô
;

1048  
	gíd
;

1055 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gU
>

1056 
C›yAºay
(c⁄° 
T
* 
‰om
, 
size_t
 
size
, 
U
* 
to
);

1059 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gU
>

1060 
ölöe
 
C›yAºay
(c⁄° 
T
& 
‰om
, 
U
* 
to
Ë{ *
	gto
 = from; }

1063 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gU
, 
size_t
 
	gN
>

1064 
ölöe
 
C›yAºay
(c⁄° 
T
(&
‰om
)[
N
], 
U
(*
to
)[N]) {

1065 
	göã∫Æ
::
C›yAºay
(
‰om
, 
N
, *
to
);

1071 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gU
>

1072 
C›yAºay
(c⁄° 
T
* 
‰om
, 
size_t
 
size
, 
U
* 
to
) {

1073 
size_t
 
	gi
 = 0; i !
size
; i++) {

1074 
	göã∫Æ
::
C›yAºay
(
‰om
[
i
], 
to
 + i);

1082 
	sRñ©i⁄ToSour˚Re„ªn˚
 {};

1083 
	sRñ©i⁄ToSour˚C›y
 {};

1093 
	gãm∂©e
 <
ty≥«me
 
	gEÀmít
>

1094 ˛as†
	cN©iveAºay
 {

1095 
	gpublic
:

1097 
EÀmít
 
	tvÆue_ty≥
;

1098 
EÀmít
* 
	tôî©‹
;

1099 c⁄° 
	tEÀmít
* 
	tc⁄°_ôî©‹
;

1102 
N©iveAºay
(c⁄° 
EÀmít
* 
¨øy
, 
size_t
 
cou¡
, 
Rñ©i⁄ToSour˚Re„ªn˚
) {

1103 
InôRef
(
¨øy
, 
cou¡
);

1107 
N©iveAºay
(c⁄° 
EÀmít
* 
¨øy
, 
size_t
 
cou¡
, 
Rñ©i⁄ToSour˚C›y
) {

1108 
InôC›y
(
¨øy
, 
cou¡
);

1112 
N©iveAºay
(c⁄° N©iveAºay& 
rhs
) {

1113 (
	gthis
->*
	grhs
.
	g˛⁄e_
)‘hs.
	g¨øy_
,Ñhs.
	gsize_
);

1116 ~
N©iveAºay
() {

1117 i‡(
	g˛⁄e_
 !&
N©iveAºay
::
InôRef
)

1118 
dñëe
[] 
¨øy_
;

1122 
size_t
 
size
(Ëc⁄° {  
	gsize_
; }

1123 
c⁄°_ôî©‹
 
begö
(Ëc⁄° {  
	g¨øy_
; }

1124 
c⁄°_ôî©‹
 
íd
(Ëc⁄° {  
	g¨øy_
 + 
	gsize_
; }

1125 
boﬁ
 
	g›î©‹
==(c⁄° 
N©iveAºay
& 
rhs
) const {

1126  
size
(Ë=
rhs
.size() &&

1127 
AºayEq
(
begö
(), 
size
(), 
rhs
.begin());

1130 
	g¥iv©e
:

1131 
°©ic_as£π
(!
°d
::
is_c⁄°
<
EÀmít
>::
vÆue
, "Type mustÇot be const");

1132 
°©ic_as£π
(!
°d
::
is_ª„ªn˚
<
EÀmít
>::
vÆue
,

1136 
InôC›y
(c⁄° 
EÀmít
* 
¨øy
, 
size_t
 
a_size
) {

1137 
EÀmít
* c⁄° 
	gc›y
 = 
√w
 EÀmít[
a_size
];

1138 
C›yAºay
(
¨øy
, 
a_size
, 
c›y
);

1139 
	g¨øy_
 = 
c›y
;

1140 
	gsize_
 = 
a_size
;

1141 
	g˛⁄e_
 = &
N©iveAºay
::
InôC›y
;

1145 
InôRef
(c⁄° 
EÀmít
* 
¨øy
, 
size_t
 
a_size
) {

1146 
	g¨øy_
 = 
¨øy
;

1147 
	gsize_
 = 
a_size
;

1148 
	g˛⁄e_
 = &
N©iveAºay
::
InôRef
;

1151 c⁄° 
EÀmít
* 
	g¨øy_
;

1152 
size_t
 
	gsize_
;

1153 (
	gN©iveAºay
::*
˛⁄e_
)(c⁄° 
EÀmít
*, 
	gsize_t
);

1157 
	gãm∂©e
 <
	gsize_t
... 
	gIs
>

1158 
	sIndexSequí˚
 {

1159 
usög
 
	gty≥
 = 
IndexSequí˚
;

1163 
	gãm∂©e
 <
boﬁ
 
	g∂us_⁄e
, 
ty≥«me
 
	gT
, 
size_t
 
	gsizeofT
>

1164 
	gDoubÀSequí˚
;

1165 
	gãm∂©e
 <
	gsize_t
... 
	gI
, 
size_t
 
	gsizeofT
>

1166 
	gDoubÀSequí˚
<
	gåue
, 
	gIndexSequí˚
<
	gI
...>, 
	gsizeofT
> {

1167 
usög
 
	gty≥
 = 
IndexSequí˚
<
I
..., (
	gsizeofT
 + 
	gI
)..., 2 * sizeofT>;

1169 
	gãm∂©e
 <
	gsize_t
... 
	gI
, 
size_t
 
	gsizeofT
>

1170 
	gDoubÀSequí˚
<
	gÁl£
, 
	gIndexSequí˚
<
	gI
...>, 
	gsizeofT
> {

1171 
usög
 
	gty≥
 = 
IndexSequí˚
<
I
..., (
	gsizeofT
 + 
	gI
)...>;

1176 
	gãm∂©e
 <
size_t
 
	gN
>

1177 
	gMakeIndexSequí˚Im∂


1178 : 
DoubÀSequí˚
<
N
 % 2 =1, 
ty≥«me
 
	gMakeIndexSequí˚Im∂
<
	gN
 / 2>::
ty≥
,

1179 
	gN
 / 2>::
ty≥
 {};

1181 
	gãm∂©e
 <>

1182 
	gMakeIndexSequí˚Im∂
<0> : 
IndexSequí˚
<> {};

1184 
	gãm∂©e
 <
size_t
 
	gN
>

1185 
usög
 
	gMakeIndexSequí˚
 = 
ty≥«me
 
MakeIndexSequí˚Im∂
<
N
>::
ty≥
;

1187 
	gãm∂©e
 <
	gty≥«me
... 
	gT
>

1188 
usög
 
	gIndexSequí˚F‹
 = 
ty≥«me
 
MakeIndexSequí˚
<...(
T
)>::
ty≥
;

1190 
	gãm∂©e
 <
	gsize_t
>

1191 
	sIgn‹e
 {

1192 
Ign‹e
(...);

1195 
	gãm∂©e
 <
	gty≥«me
>

1196 
	gEÀmFromLi°Im∂
;

1197 
	gãm∂©e
 <
	gsize_t
... 
	gI
>

1198 
	gEÀmFromLi°Im∂
<
	gIndexSequí˚
<
	gI
...>> {

1203 
	gãm∂©e
 <
ty≥«me
 
	gR
>

1204 
R
 
Aµly
(
Ign‹e
<0 * 
I
>..., R (*)(), ...);

1207 
	gãm∂©e
 <
size_t
 
	gN
, 
	gty≥«me
... 
	gT
>

1208 
	sEÀmFromLi°
 {

1209 
usög
 
	gty≥
 =

1210 
de˛ty≥
(
EÀmFromLi°Im∂
<
ty≥«me
 
MakeIndexSequí˚
<
N
>::
ty≥
>::
Aµly
(

1211 
°©ic_ˇ°
<
T
 (*)()>(
nuŒ±r
)...));

1214 
	sFœtTu∂eC⁄°ru˘Tag
 {};

1216 
	gãm∂©e
 <
	gty≥«me
... 
	gT
>

1217 
˛ass
 
	gFœtTu∂e
;

1219 
	gãm∂©e
 <
ty≥«me
 
	gDîived
, 
size_t
 
	gI
>

1220 
	gFœtTu∂eEÀmBa£
;

1222 
	gãm∂©e
 <
	gty≥«me
... 
	gT
, 
size_t
 
	gI
>

1223 
	gFœtTu∂eEÀmBa£
<
	gFœtTu∂e
<
	gT
...>, 
	gI
> {

1224 
usög
 
	gvÆue_ty≥
 = 
ty≥«me
 
EÀmFromLi°
<
I
, 
	gT
...>::
ty≥
;

1225 
FœtTu∂eEÀmBa£
() = ;

1226 
	gãm∂©e
 <
ty≥«me
 
	gArg
>

1227 
ex∂icô
 
FœtTu∂eEÀmBa£
(
FœtTu∂eC⁄°ru˘Tag
, 
Arg
&& 
t
)

1228 : 
vÆue
(
°d
::
f‹w¨d
<
Arg
>(
t
)) {}

1229 
vÆue_ty≥
 
vÆue
;

1232 
	gãm∂©e
 <
ty≥«me
 
	gDîived
,Åy≥«mê
	gIdx
>

1233 
	gFœtTu∂eBa£
;

1235 
	gãm∂©e
 <
	gsize_t
... 
	gIdx
, 
	gty≥«me
... 
	gT
>

1236 
	gFœtTu∂eBa£
<
	gFœtTu∂e
<
	gT
...>, 
	gIndexSequí˚
<
	gIdx
...>>

1237 : 
FœtTu∂eEÀmBa£
<
FœtTu∂e
<
T
...>, 
	gIdx
>... {

1238 
usög
 
	gIndi˚s
 = 
IndexSequí˚
<
Idx
...>;

1239 
FœtTu∂eBa£
() = ;

1240 
	gãm∂©e
 <
	gty≥«me
... 
	gArgs
>

1241 
ex∂icô
 
FœtTu∂eBa£
(
FœtTu∂eC⁄°ru˘Tag
, 
Args
&&... 
¨gs
)

1242 : 
FœtTu∂eEÀmBa£
<
FœtTu∂e
<
T
...>, 
	gIdx
>(
	gFœtTu∂eC⁄°ru˘Tag
{},

1243 
	g°d
::
f‹w¨d
<
Args
>(
¨gs
))... {}

1245 
ãm∂©e
 <
size_t
 
I
>

1246 c⁄° 
ty≥«me
 
EÀmFromLi°
<
I
, 
	gT
...>::
ty≥
& 
Gë
() const {

1247  
FœtTu∂eEÀmBa£
<
FœtTu∂e
<
T
...>, 
	gI
>::
vÆue
;

1250 
	gãm∂©e
 <
size_t
 
	gI
>

1251 
ty≥«me
 
	gEÀmFromLi°
<
	gI
, 
	gT
...>::
ty≥
& 
Gë
() {

1252  
FœtTu∂eEÀmBa£
<
FœtTu∂e
<
T
...>, 
	gI
>::
vÆue
;

1255 
	gãm∂©e
 <
ty≥«me
 
	gF
>

1256 autÿ
Aµly
(
F
&& 
f
Ë-> 
de˛ty≥
(
°d
::
f‹w¨d
<F>(f)(
this
->
Gë
<
Idx
>()...)) {

1257  
°d
::
f‹w¨d
<
F
>(
f
)(
Gë
<
Idx
>()...);

1260 
	gãm∂©e
 <
ty≥«me
 
	gF
>

1261 autÿ
Aµly
(
F
&& 
f
Ëc⁄° -> 
de˛ty≥
(
°d
::
f‹w¨d
<F>(f)(
this
->
Gë
<
Idx
>()...)) {

1262  
°d
::
f‹w¨d
<
F
>(
f
)(
Gë
<
Idx
>()...);

1275 
	gãm∂©e
 <
	gty≥«me
... 
	gT
>

1276 
˛ass
 
	gFœtTu∂e


1277 : 
¥iv©e
 
FœtTu∂eBa£
<
FœtTu∂e
<
T
...>,

1278 
ty≥«me
 
	gMakeIndexSequí˚
<...(
	gT
)>::
ty≥
> {

1279 
usög
 
Indi˚s
 = 
ty≥«me
 
FœtTu∂eBa£
<

1280 
FœtTu∂e
<
T
...>, 
ty≥«me
 
	gMakeIndexSequí˚
<...(
	gT
)>::
ty≥
>::
Indi˚s
;

1282 
	gpublic
:

1283 
FœtTu∂e
() = ;

1284 
	gãm∂©e
 <
	gty≥«me
... 
	gArgs
>

1285 
ex∂icô
 
FœtTu∂e
(
FœtTu∂eC⁄°ru˘Tag
 
èg
, 
Args
&&... 
¨gs
)

1286 : 
FœtTu∂e
::
FœtTu∂eBa£
(
èg
, 
°d
::
f‹w¨d
<
Args
>(
¨gs
)...) {}

1288 
usög
 
FœtTu∂e
::
FœtTu∂eBa£
::
Aµly
;

1289 
usög
 
	gFœtTu∂e
::
FœtTu∂eBa£
::
Gë
;

1294 
GTEST_INTERNAL_DEPRECATED
(

1297 
c⁄°ex¥
 
boﬁ
 
In°™tüãTe°Ca£_P_IsDïªˇãd
(Ë{  
	gåue
; }

1299 
GTEST_INTERNAL_DEPRECATED
(

1302 
c⁄°ex¥
 
boﬁ
 
Ty≥dTe°Ca£_P_IsDïªˇãd
(Ë{  
	gåue
; }

1304 
GTEST_INTERNAL_DEPRECATED
(

1307 
c⁄°ex¥
 
boﬁ
 
Ty≥dTe°Ca£IsDïªˇãd
(Ë{  
	gåue
; }

1309 
GTEST_INTERNAL_DEPRECATED
(

1312 
c⁄°ex¥
 
boﬁ
 
Regi°îTy≥dTe°Ca£_P_IsDïªˇãd
(Ë{  
	gåue
; }

1314 
GTEST_INTERNAL_DEPRECATED
(

1317 
c⁄°ex¥
 
boﬁ
 
In°™tüãTy≥dTe°Ca£_P_IsDïªˇãd
(Ë{  
	gåue
; }

1322 
«me•a˚
 
	g°d
 {

1326 #ifde‡
__˛™g__


1327 #¥agm®
˛™g
 
dügno°ic
 
push


1328 #¥agm®
˛™g
 
dügno°ic
 
ign‹ed
 "-Wmismatched-tags"

1330 
	gãm∂©e
 <
	gty≥«me
... 
	gTs
>

1331 
	gtu∂e_size
<
	gã°ög
::
öã∫Æ
::
FœtTu∂e
<
Ts
...>>

1332 : 
°d
::
öãgøl_c⁄°™t
<
size_t
, ...(
	gTs
)> {};

1333 #ifde‡
__˛™g__


1334 #¥agm®
˛™g
 
dügno°ic
 
p›


1338 
	#GTEST_MESSAGE_AT_
(
fûe
, 
löe
, 
mesßge
, 
ªsu…_ty≥
) \

1339 ::
ã°ög
::
öã∫Æ
::
	`As£πHñ≥r
(
ªsu…_ty≥
, 
fûe
, 
löe
, 
mesßge
) \

1340 ::
ã°ög
::
	`Mesßge
()

	)

1342 
	#GTEST_MESSAGE_
(
mesßge
, 
ªsu…_ty≥
) \

1343 
	`GTEST_MESSAGE_AT_
(
__FILE__
, 
__LINE__
, 
mesßge
, 
ªsu…_ty≥
)

	)

1345 
	#GTEST_FATAL_FAILURE_
(
mesßge
) \

1346  
	`GTEST_MESSAGE_
(
mesßge
, ::
ã°ög
::
Te°P¨tResu…
::
kF©ÆFaûuª
)

	)

1348 
	#GTEST_NONFATAL_FAILURE_
(
mesßge
) \

1349 
	`GTEST_MESSAGE_
(
mesßge
, ::
ã°ög
::
Te°P¨tResu…
::
kN⁄F©ÆFaûuª
)

	)

1351 
	#GTEST_SUCCESS_
(
mesßge
) \

1352 
	`GTEST_MESSAGE_
(
mesßge
, ::
ã°ög
::
Te°P¨tResu…
::
kSuc˚ss
)

	)

1354 
	#GTEST_SKIP_
(
mesßge
) \

1355  
	`GTEST_MESSAGE_
(
mesßge
, ::
ã°ög
::
Te°P¨tResu…
::
kSkù
)

	)

1362 
	#GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_
(
°©emít
) \

1363 i‡(::
ã°ög
::
öã∫Æ
::
	`AlwaysTrue
()) { \

1364 
°©emít
; \

1366 
	`°©ic_as£π
(
åue
, "")

1367 

	)

1368 #i‡
GTEST_HAS_EXCEPTIONS


1370 
«me•a˚
 
	gã°ög
 {

1371 
«me•a˚
 
	göã∫Æ
 {

1373 ˛as†
	cNevîThrown
 {

1374 
	gpublic
:

1375 c⁄° * 
wh©
(Ëc⁄° 
n€x˚±
 {

1383 #i‡
GTEST_HAS_RTTI


1385 
	#GTEST_EXCEPTION_TYPE_
(
e
Ë::
ã°ög
::
öã∫Æ
::
	`GëTy≥Name
(
	`ty≥id
”))

	)

1389 
	#GTEST_EXCEPTION_TYPE_
(
e
) \

1390 
°d
::
°rög
 { "™ std::ex˚±i⁄-dîivedÉº‹" }

	)

1394 
	#GTEST_TEST_THROW_CATCH_STD_EXCEPTION_
(
°©emít
, 
ex≥˘ed_ex˚±i⁄
) \

1395 
	`ˇtch
 (
ty≥«me
 
°d
::
c⁄dôi⁄Æ
< \

1396 
°d
::
is_ßme
<
ty≥«me
 std::
ªmove_cv
<ty≥«mê°d::
ªmove_ª„ªn˚
< \

1397 
ex≥˘ed_ex˚±i⁄
>::
ty≥
>::type, \

1398 
°d
::
ex˚±i⁄
>::
vÆue
, \

1399 c⁄° ::
ã°ög
::
öã∫Æ
::
NevîThrown
&, c⁄° 
°d
::
ex˚±i⁄
&>::
ty≥
 \

1400 
e
) { \

1401 
gã°_msg
.
vÆue
 = "Expected: " #statement \

1404 
gã°_msg
.
vÆue
 +
	`GTEST_EXCEPTION_TYPE_
(
e
); \

1405 
gã°_msg
.
vÆue
 += " with description \""; \

1406 
gã°_msg
.
vÆue
 +
e
.
	`wh©
(); \

1407 
gã°_msg
.
vÆue
 += "\"."; \

1408 
	`GTEST_CONCAT_TOKEN_
(
gã°_œbñ_ã°throw_
, 
__LINE__
); \

1409 }

	)

1413 
	#GTEST_TEST_THROW_CATCH_STD_EXCEPTION_
(
°©emít
, 
ex≥˘ed_ex˚±i⁄
)

	)

1417 
	#GTEST_TEST_THROW_
(
°©emít
, 
ex≥˘ed_ex˚±i⁄
, 
Áû
) \

1418 
GTEST_AMBIGUOUS_ELSE_BLOCKER_
 \

1419 i‡(::
ã°ög
::
öã∫Æ
::
TrueWôhSåög
 
gã°_msg
{}) { \

1420 
boﬁ
 
gã°_ˇught_ex≥˘ed
 = 
Ál£
; \

1421 
åy
 { \

1422 
	`GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_
(
°©emít
); \

1423 } 
	`ˇtch
 (
ex≥˘ed_ex˚±i⁄
 const&) { \

1424 
gã°_ˇught_ex≥˘ed
 = 
åue
; \

1426 
	`GTEST_TEST_THROW_CATCH_STD_EXCEPTION_
(
°©emít
, 
ex≥˘ed_ex˚±i⁄
) \

1427 
	`ˇtch
 (...) { \

1428 
gã°_msg
.
vÆue
 = "Expected: " #statement \

1431 
	`GTEST_CONCAT_TOKEN_
(
gã°_œbñ_ã°throw_
, 
__LINE__
); \

1433 i‡(!
gã°_ˇught_ex≥˘ed
) { \

1434 
gã°_msg
.
vÆue
 = "Expected: " #statement \

1437 
	`GTEST_CONCAT_TOKEN_
(
gã°_œbñ_ã°throw_
, 
__LINE__
); \

1440 
	`GTEST_CONCAT_TOKEN_
(
gã°_œbñ_ã°throw_
, 
__LINE__
) \

1441 : 
	`Áû
(
gã°_msg
.
vÆue
.
	`c_°r
())

	)

1443 #i‡
GTEST_HAS_EXCEPTIONS


1445 
	#GTEST_TEST_NO_THROW_CATCH_STD_EXCEPTION_
() \

1446 
	`ˇtch
 (
°d
::
ex˚±i⁄
 c⁄°& 
e
) { \

1447 
gã°_msg
.
vÆue
 = "itÅhrows "; \

1448 
gã°_msg
.
vÆue
 +
	`GTEST_EXCEPTION_TYPE_
(
e
); \

1449 
gã°_msg
.
vÆue
 += " with description \""; \

1450 
gã°_msg
.
vÆue
 +
e
.
	`wh©
(); \

1451 
gã°_msg
.
vÆue
 += "\"."; \

1452 
	`GTEST_CONCAT_TOKEN_
(
gã°_œbñ_ã°nŸhrow_
, 
__LINE__
); \

1453 }

	)

1457 
	#GTEST_TEST_NO_THROW_CATCH_STD_EXCEPTION_
()

	)

1461 
	#GTEST_TEST_NO_THROW_
(
°©emít
, 
Áû
) \

1462 
GTEST_AMBIGUOUS_ELSE_BLOCKER_
 \

1463 i‡(::
ã°ög
::
öã∫Æ
::
TrueWôhSåög
 
gã°_msg
{}) { \

1464 
åy
 { \

1465 
	`GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_
(
°©emít
); \

1467 
	`GTEST_TEST_NO_THROW_CATCH_STD_EXCEPTION_
() \

1468 
	`ˇtch
 (...) { \

1469 
gã°_msg
.
vÆue
 = "itÅhrows."; \

1470 
	`GTEST_CONCAT_TOKEN_
(
gã°_œbñ_ã°nŸhrow_
, 
__LINE__
); \

1473 
	`GTEST_CONCAT_TOKEN_
(
gã°_œbñ_ã°nŸhrow_
, 
__LINE__
): \

1474 
	`Áû
(("Expected: " #statement " doesn'tÅhrowánÉxception.\n" \

1475 " A˘uÆ: " + 
gã°_msg
.
vÆue
).
	`c_°r
())

	)

1477 
	#GTEST_TEST_ANY_THROW_
(
°©emít
, 
Áû
) \

1478 
GTEST_AMBIGUOUS_ELSE_BLOCKER_
 \

1479 i‡(::
ã°ög
::
öã∫Æ
::
	`AlwaysTrue
()) { \

1480 
boﬁ
 
gã°_ˇught_™y
 = 
Ál£
; \

1481 
åy
 { \

1482 
	`GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_
(
°©emít
); \

1484 
	`ˇtch
 (...) { \

1485 
gã°_ˇught_™y
 = 
åue
; \

1487 i‡(!
gã°_ˇught_™y
) { \

1488 
	`GTEST_CONCAT_TOKEN_
(
gã°_œbñ_ã°™ythrow_
, 
__LINE__
); \

1491 
	`GTEST_CONCAT_TOKEN_
(
gã°_œbñ_ã°™ythrow_
, 
__LINE__
): \

1492 
	`Áû
("Expected: " #statement "ÅhrowsánÉxception.\n" \

1493 " A˘uÆ: iàd€¢'t.")

	)

1499 
	#GTEST_TEST_BOOLEAN_
(
ex¥essi⁄
, 
ãxt
, 
a˘uÆ
, 
ex≥˘ed
, 
Áû
) \

1500 
GTEST_AMBIGUOUS_ELSE_BLOCKER_
 \

1501 i‡(c⁄° ::
ã°ög
::
As£πi⁄Resu…
 
gã°_¨_
 = \

1502 ::
ã°ög
::
	`As£πi⁄Resu…
(
ex¥essi⁄
)) \

1505 
	`Áû
(::
ã°ög
::
öã∫Æ
::
	`GëBoﬁAs£πi⁄FaûuªMesßge
(\

1506 
gã°_¨_
, 
ãxt
, #a˘uÆ, #ex≥˘ed).
	`c_°r
())

	)

1508 
	#GTEST_TEST_NO_FATAL_FAILURE_
(
°©emít
, 
Áû
) \

1509 
GTEST_AMBIGUOUS_ELSE_BLOCKER_
 \

1510 i‡(::
ã°ög
::
öã∫Æ
::
	`AlwaysTrue
()) { \

1511 ::
ã°ög
::
öã∫Æ
::
HasNewF©ÆFaûuªHñ≥r
 
gã°_Áèl_Áûuª_checkî
; \

1512 
	`GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_
(
°©emít
); \

1513 i‡(
gã°_Áèl_Áûuª_checkî
.
	`has_√w_Áèl_Áûuª
()) { \

1514 
	`GTEST_CONCAT_TOKEN_
(
gã°_œbñ_ã°noÁèl_
, 
__LINE__
); \

1517 
	`GTEST_CONCAT_TOKEN_
(
gã°_œbñ_ã°noÁèl_
, 
__LINE__
): \

1518 
	`Áû
("Expected: " #statement " doesn't generateÇew fatal " \

1520 " A˘uÆ: iàd€s.")

	)

1523 
	#GTEST_TEST_CLASS_NAME_
(
ã°_suôe_«me
, 
ã°_«me
) \

1524 
ã°_suôe_«me
##
_
##
ã°_«me
##
_Te°


	)

1527 
	#GTEST_TEST_
(
ã°_suôe_«me
, 
ã°_«me
, 
∑ª¡_˛ass
, 
∑ª¡_id
) \

1528 
	`°©ic_as£π
((
	`GTEST_STRINGIFY_
(
ã°_suôe_«me
)) > 1, \

1530 
	`°©ic_as£π
((
	`GTEST_STRINGIFY_
(
ã°_«me
)) > 1, \

1532 
˛ass
 
	`GTEST_TEST_CLASS_NAME_
(
ã°_suôe_«me
, 
ã°_«me
) \

1533 : 
public
 
∑ª¡_˛ass
 { \

1534 
public
: \

1535 
	`GTEST_TEST_CLASS_NAME_
(
ã°_suôe_«me
, 
ã°_«me
)() = ; \

1536 ~
	`GTEST_TEST_CLASS_NAME_
(
ã°_suôe_«me
, 
ã°_«me
)(Ë
ovîride
 = ; \

1537 
	`GTEST_DISALLOW_COPY_AND_ASSIGN_
(
	`GTEST_TEST_CLASS_NAME_
(
ã°_suôe_«me
, \

1538 
ã°_«me
)); \

1539 
	`GTEST_DISALLOW_MOVE_AND_ASSIGN_
(
	`GTEST_TEST_CLASS_NAME_
(
ã°_suôe_«me
, \

1540 
ã°_«me
)); \

1542 
¥iv©e
: \

1543 
	`Te°Body
(Ë
ovîride
; \

1544 ::
ã°ög
::
Te°Info
* c⁄° 
ã°_öfo_
 
GTEST_ATTRIBUTE_UNUSED_
; \

1547 ::
ã°ög
::
Te°Info
* c⁄° 
	`GTEST_TEST_CLASS_NAME_
(
ã°_suôe_«me
, \

1548 
ã°_«me
)::
ã°_öfo_
 = \

1549 ::
ã°ög
::
öã∫Æ
::
	`MakeAndRegi°îTe°Info
( \

1550 #ã°_suôe_«me, #ã°_«me, 
nuŒ±r
,Çullptr, \

1551 ::
ã°ög
::
öã∫Æ
::
	`CodeLoˇti⁄
(
__FILE__
, 
__LINE__
), (
∑ª¡_id
), \

1552 ::
ã°ög
::
öã∫Æ
::
SuôeApiResﬁvî
< \

1553 
∑ª¡_˛ass
>::
	`GëSëUpCa£OrSuôe
(
__FILE__
, 
__LINE__
), \

1554 ::
ã°ög
::
öã∫Æ
::
SuôeApiResﬁvî
< \

1555 
∑ª¡_˛ass
>::
	`GëTórDownCa£OrSuôe
(
__FILE__
, 
__LINE__
), \

1556 
√w
 ::
ã°ög
::
öã∫Æ
::
Te°Fa˘‹yIm∂
<
	`GTEST_TEST_CLASS_NAME_
( \

1557 
ã°_suôe_«me
, 
ã°_«me
)>); \

1558 
	`GTEST_TEST_CLASS_NAME_
(
ã°_suôe_«me
, 
ã°_«me
)::
	`Te°Body
()

	)

	@/usr/include/gtest/internal/gtest-string.h

41 #i‚de‡
GOOGLETEST_INCLUDE_GTEST_INTERNAL_GTEST_STRING_H_


42 
	#GOOGLETEST_INCLUDE_GTEST_INTERNAL_GTEST_STRING_H_


	)

44 #ifde‡
__BORLANDC__


46 
	~<mem.h
>

49 
	~<°rög.h
>

50 
	~<c°döt
>

51 
	~<°rög
>

53 
	~"gã°/öã∫Æ/gã°-p‹t.h
"

55 
«me•a˚
 
	gã°ög
 {

56 
«me•a˚
 
	göã∫Æ
 {

59 ˛as†
	cGTEST_API_
 
	gSåög
 {

60 
	gpublic
:

70 c⁄° * 
Cl⁄eCSåög
(c⁄° * 
c_°r
);

72 #i‡
GTEST_OS_WINDOWS_MOBILE


85 
LPCWSTR
 
AnsiToUtf16
(c⁄° * 
c_°r
);

95 c⁄° * 
Utf16ToAnsi
(
LPCWSTR
 
utf16_°r
);

104 
boﬁ
 
CSåögEquÆs
(c⁄° * 
lhs
, c⁄° * 
rhs
);

110 
	g°d
::
°rög
 
ShowWideCSåög
(c⁄° 
wch¨_t
* 
wide_c_°r
);

118 
boﬁ
 
WideCSåögEquÆs
(c⁄° 
wch¨_t
* 
lhs
, c⁄° wch¨_t* 
rhs
);

126 
boﬁ
 
Ca£In£nsôiveCSåögEquÆs
(c⁄° * 
lhs
,

127 c⁄° * 
rhs
);

141 
boﬁ
 
Ca£In£nsôiveWideCSåögEquÆs
(c⁄° 
wch¨_t
* 
lhs
,

142 c⁄° 
wch¨_t
* 
rhs
);

146 
boﬁ
 
EndsWôhCa£In£nsôive
(

147 c⁄° 
°d
::
°rög
& 
°r
, c⁄° std::°rög& 
suffix
);

150 
	g°d
::
°rög
 
F‹m©I¡Width2
(
vÆue
);

153 
	g°d
::
°rög
 
F‹m©I¡WidthN
(
vÆue
, 
width
);

156 
	g°d
::
°rög
 
F‹m©HexI¡
(
vÆue
);

159 
	g°d
::
°rög
 
F‹m©HexUI¡32
(
uöt32_t
 
vÆue
);

162 
	g°d
::
°rög
 
F‹m©Byã
(
vÆue
);

164 
	g¥iv©e
:

165 
Såög
();

170 
GTEST_API_
 
	g°d
::
°rög
 
SåögSåómToSåög
(::
°d
::
°rög°ªam
* 
°ªam
);

	@/usr/include/sched.h

19 #i‚def 
_SCHED_H


20 
	#_SCHED_H
 1

	)

22 
	~<„©uªs.h
>

25 
	~<bôs/ty≥s.h
>

27 
	#__√ed_size_t


	)

28 
	#__√ed_NULL


	)

29 
	~<°ddef.h
>

31 
	~<bôs/ty≥s/time_t.h
>

32 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

33 #i‚de‡
__USE_XOPEN2K


34 
	~<time.h
>

37 #i‚de‡
__pid_t_deföed


38 
__pid_t
 
	tpid_t
;

39 
	#__pid_t_deföed


	)

43 
	~<bôs/sched.h
>

44 
	~<bôs/˝u-£t.h
>

47 
	#sched_¥i‹ôy
 
sched_¥i‹ôy


	)

48 
	#__sched_¥i‹ôy
 
sched_¥i‹ôy


	)

51 
__BEGIN_DECLS


54 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, c⁄° 
sched_∑øm
 *
__∑øm
)

55 
__THROW
;

58 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

61 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

62 c⁄° 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

65 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

68 
	$sched_yõld
 (Ë
__THROW
;

71 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

74 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

77 #i‚de‡
__USE_TIME_BITS64


78 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

80 #ifde‡
__REDIRECT_NTH


81 
	`__REDIRECT_NTH
 (
sched_º_gë_öãrvÆ
,

82 (
__pid_t
 
__pid
, 
time•ec
 *
__t
),

83 
__sched_º_gë_öãrvÆ64
);

85 
	#sched_º_gë_öãrvÆ
 
__sched_º_gë_öãrvÆ64


	)

89 #ifde‡
__USE_GNU


91 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

92 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

93 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

94 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

95 
˝u£ç
)

	)

96 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

97 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

99 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

100 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

101 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

102 
˝u£ç
)

	)

103 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

104 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

106 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

107 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

108 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

109 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

111 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

112 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

113 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

114 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

115 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

116 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

117 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

118 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

119 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

120 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

121 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

122 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

124 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

125 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

126 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

130 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

131 c⁄° 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

134 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

135 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

138 
__END_DECLS


	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

27 
	~<bôs/ty≥s.h
>

28 
	~<bôs/wch¨.h
>

29 
	~<bôs/w‹dsize.h
>

34 
	~<bôs/°döt-öä.h
>

37 
	~<bôs/°döt-uöä.h
>

43 
__öt_Àa°8_t
 
	töt_Àa°8_t
;

44 
__öt_Àa°16_t
 
	töt_Àa°16_t
;

45 
__öt_Àa°32_t
 
	töt_Àa°32_t
;

46 
__öt_Àa°64_t
 
	töt_Àa°64_t
;

49 
__uöt_Àa°8_t
 
	tuöt_Àa°8_t
;

50 
__uöt_Àa°16_t
 
	tuöt_Àa°16_t
;

51 
__uöt_Àa°32_t
 
	tuöt_Àa°32_t
;

52 
__uöt_Àa°64_t
 
	tuöt_Àa°64_t
;

58 sig√d 
	töt_Á°8_t
;

59 #i‡
__WORDSIZE
 == 64

60 
	töt_Á°16_t
;

61 
	töt_Á°32_t
;

62 
	töt_Á°64_t
;

64 
	töt_Á°16_t
;

65 
	töt_Á°32_t
;

66 
__exãnsi⁄__


67 
	töt_Á°64_t
;

71 
	tuöt_Á°8_t
;

72 #i‡
__WORDSIZE
 == 64

73 
	tuöt_Á°16_t
;

74 
	tuöt_Á°32_t
;

75 
	tuöt_Á°64_t
;

77 
	tuöt_Á°16_t
;

78 
	tuöt_Á°32_t
;

79 
__exãnsi⁄__


80 
	tuöt_Á°64_t
;

85 #i‡
__WORDSIZE
 == 64

86 #i‚de‡
__öçå_t_deföed


87 
	töçå_t
;

88 
	#__öçå_t_deföed


	)

90 
	tuöçå_t
;

92 #i‚de‡
__öçå_t_deföed


93 
	töçå_t
;

94 
	#__öçå_t_deföed


	)

96 
	tuöçå_t
;

101 
__ötmax_t
 
	tötmax_t
;

102 
__uötmax_t
 
	tuötmax_t
;

105 #i‡
__WORDSIZE
 == 64

106 
	#__INT64_C
(
c
Ë¯## 
L


	)

107 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

109 
	#__INT64_C
(
c
Ë¯## 
LL


	)

110 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

116 
	#INT8_MIN
 (-128)

	)

117 
	#INT16_MIN
 (-32767-1)

	)

118 
	#INT32_MIN
 (-2147483647-1)

	)

119 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

121 
	#INT8_MAX
 (127)

	)

122 
	#INT16_MAX
 (32767)

	)

123 
	#INT32_MAX
 (2147483647)

	)

124 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

127 
	#UINT8_MAX
 (255)

	)

128 
	#UINT16_MAX
 (65535)

	)

129 
	#UINT32_MAX
 (4294967295U)

	)

130 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

134 
	#INT_LEAST8_MIN
 (-128)

	)

135 
	#INT_LEAST16_MIN
 (-32767-1)

	)

136 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

137 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

139 
	#INT_LEAST8_MAX
 (127)

	)

140 
	#INT_LEAST16_MAX
 (32767)

	)

141 
	#INT_LEAST32_MAX
 (2147483647)

	)

142 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

145 
	#UINT_LEAST8_MAX
 (255)

	)

146 
	#UINT_LEAST16_MAX
 (65535)

	)

147 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

148 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

152 
	#INT_FAST8_MIN
 (-128)

	)

153 #i‡
__WORDSIZE
 == 64

154 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

155 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

157 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

158 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

160 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

162 
	#INT_FAST8_MAX
 (127)

	)

163 #i‡
__WORDSIZE
 == 64

164 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

165 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

167 
	#INT_FAST16_MAX
 (2147483647)

	)

168 
	#INT_FAST32_MAX
 (2147483647)

	)

170 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

173 
	#UINT_FAST8_MAX
 (255)

	)

174 #i‡
__WORDSIZE
 == 64

175 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

176 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

178 
	#UINT_FAST16_MAX
 (4294967295U)

	)

179 
	#UINT_FAST32_MAX
 (4294967295U)

	)

181 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

185 #i‡
__WORDSIZE
 == 64

186 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

187 
	#INTPTR_MAX
 (9223372036854775807L)

	)

188 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

190 
	#INTPTR_MIN
 (-2147483647-1)

	)

191 
	#INTPTR_MAX
 (2147483647)

	)

192 
	#UINTPTR_MAX
 (4294967295U)

	)

197 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

199 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

202 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

208 #i‡
__WORDSIZE
 == 64

209 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

210 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

212 #i‡
__WORDSIZE32_PTRDIFF_LONG


213 
	#PTRDIFF_MIN
 (-2147483647L-1)

	)

214 
	#PTRDIFF_MAX
 (2147483647L)

	)

216 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

217 
	#PTRDIFF_MAX
 (2147483647)

	)

222 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

223 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

226 #i‡
__WORDSIZE
 == 64

227 
	#SIZE_MAX
 (18446744073709551615UL)

	)

229 #i‡
__WORDSIZE32_SIZE_ULONG


230 
	#SIZE_MAX
 (4294967295UL)

	)

232 
	#SIZE_MAX
 (4294967295U)

	)

237 #i‚de‡
WCHAR_MIN


239 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

240 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

244 
	#WINT_MIN
 (0u)

	)

245 
	#WINT_MAX
 (4294967295u)

	)

248 
	#INT8_C
(
c
Ë
	)
c

249 
	#INT16_C
(
c
Ë
	)
c

250 
	#INT32_C
(
c
Ë
	)
c

251 #i‡
__WORDSIZE
 == 64

252 
	#INT64_C
(
c
Ë¯## 
L


	)

254 
	#INT64_C
(
c
Ë¯## 
LL


	)

258 
	#UINT8_C
(
c
Ë
	)
c

259 
	#UINT16_C
(
c
Ë
	)
c

260 
	#UINT32_C
(
c
Ë¯## 
U


	)

261 #i‡
__WORDSIZE
 == 64

262 
	#UINT64_C
(
c
Ë¯## 
UL


	)

264 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

268 #i‡
__WORDSIZE
 == 64

269 
	#INTMAX_C
(
c
Ë¯## 
L


	)

270 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

272 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

273 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

276 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

278 
	#INT8_WIDTH
 8

	)

279 
	#UINT8_WIDTH
 8

	)

280 
	#INT16_WIDTH
 16

	)

281 
	#UINT16_WIDTH
 16

	)

282 
	#INT32_WIDTH
 32

	)

283 
	#UINT32_WIDTH
 32

	)

284 
	#INT64_WIDTH
 64

	)

285 
	#UINT64_WIDTH
 64

	)

287 
	#INT_LEAST8_WIDTH
 8

	)

288 
	#UINT_LEAST8_WIDTH
 8

	)

289 
	#INT_LEAST16_WIDTH
 16

	)

290 
	#UINT_LEAST16_WIDTH
 16

	)

291 
	#INT_LEAST32_WIDTH
 32

	)

292 
	#UINT_LEAST32_WIDTH
 32

	)

293 
	#INT_LEAST64_WIDTH
 64

	)

294 
	#UINT_LEAST64_WIDTH
 64

	)

296 
	#INT_FAST8_WIDTH
 8

	)

297 
	#UINT_FAST8_WIDTH
 8

	)

298 
	#INT_FAST16_WIDTH
 
__WORDSIZE


	)

299 
	#UINT_FAST16_WIDTH
 
__WORDSIZE


	)

300 
	#INT_FAST32_WIDTH
 
__WORDSIZE


	)

301 
	#UINT_FAST32_WIDTH
 
__WORDSIZE


	)

302 
	#INT_FAST64_WIDTH
 64

	)

303 
	#UINT_FAST64_WIDTH
 64

	)

305 
	#INTPTR_WIDTH
 
__WORDSIZE


	)

306 
	#UINTPTR_WIDTH
 
__WORDSIZE


	)

308 
	#INTMAX_WIDTH
 64

	)

309 
	#UINTMAX_WIDTH
 64

	)

311 
	#PTRDIFF_WIDTH
 
__WORDSIZE


	)

312 
	#SIG_ATOMIC_WIDTH
 32

	)

313 
	#SIZE_WIDTH
 
__WORDSIZE


	)

314 
	#WCHAR_WIDTH
 32

	)

315 
	#WINT_WIDTH
 32

	)

	@/usr/include/errno.h

22 #i‚def 
_ERRNO_H


23 
	#_ERRNO_H
 1

	)

25 
	~<„©uªs.h
>

28 
	~<bôs/î∫o.h
>

32 #i‚de‡
__ASSEMBLER__


34 
__BEGIN_DECLS


37 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
__©åibuã_c⁄°__
;

38 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

40 #ifde‡
__USE_GNU


45 *
¥ogøm_övoˇti⁄_«me
;

46 *
¥ogøm_övoˇti⁄_sh‹t_«me
;

48 
	~<bôs/ty≥s/îr‹_t.h
>

52 
__END_DECLS


	@/usr/include/features-time64.h

20 
	~<bôs/w‹dsize.h
>

21 
	~<bôs/timesize.h
>

23 #i‡
deföed
 
_TIME_BITS


24 #i‡
_TIME_BITS
 == 64

25 #i‡! 
deföed
 (
_FILE_OFFSET_BITS
) || _FILE_OFFSET_BITS != 64

27 #ñi‡
__TIMESIZE
 == 32

28 
	#__USE_TIME_BITS64
 1

	)

30 #ñi‡
_TIME_BITS
 == 32

31 #i‡
__TIMESIZE
 > 32

35 #îr‹ 
InvÆid
 
_TIME_BITS
 
vÆue
 (
ˇn
 
⁄ly
 
be
 32 
‹
 64-
bô
)

	@/usr/include/gmock/gmock-spec-builders.h

61 #i‚de‡
GOOGLEMOCK_INCLUDE_GMOCK_GMOCK_SPEC_BUILDERS_H_


62 
	#GOOGLEMOCK_INCLUDE_GMOCK_GMOCK_SPEC_BUILDERS_H_


	)

64 
	~<fun˘i⁄Æ
>

65 
	~<m≠
>

66 
	~<mem‹y
>

67 
	~<£t
>

68 
	~<s°ªam
>

69 
	~<°rög
>

70 
	~<ty≥_åaôs
>

71 
	~<utûôy
>

72 
	~<ve˘‹
>

73 
	~"gmock/gmock-a˘i⁄s.h
"

74 
	~"gmock/gmock-ˇrdöÆôõs.h
"

75 
	~"gmock/gmock-m©chîs.h
"

76 
	~"gmock/öã∫Æ/gmock-öã∫Æ-utûs.h
"

77 
	~"gmock/öã∫Æ/gmock-p‹t.h
"

78 
	~"gã°/gã°.h
"

80 #i‡
GTEST_HAS_EXCEPTIONS


81 
	~<°dex˚±
>

84 
GTEST_DISABLE_MSC_WARNINGS_PUSH_
(4251 \

87 
«me•a˚
 
	gã°ög
 {

90 
˛ass
 
	gEx≥˘©i⁄
;

93 
˛ass
 
	gEx≥˘©i⁄Së
;

97 
«me•a˚
 
	göã∫Æ
 {

100 
	gãm∂©e
 <
ty≥«me
 
	gF
> 
˛ass
 
	gFun˘i⁄Mockî
;

103 
˛ass
 
	gEx≥˘©i⁄Ba£
;

106 
	gãm∂©e
 <
ty≥«me
 
	gF
> 
˛ass
 
	gTy≥dEx≥˘©i⁄
;

109 
˛ass
 
	gEx≥˘©i⁄Te°î
;

112 
	gãm∂©e
 <
ty≥«me
 
	gMockCœss
>

113 
˛ass
 
	gNi˚MockIm∂
;

114 
	gãm∂©e
 <
ty≥«me
 
	gMockCœss
>

115 
˛ass
 
	gSåi˘MockIm∂
;

116 
	gãm∂©e
 <
ty≥«me
 
	gMockCœss
>

117 
˛ass
 
	gNaggyMockIm∂
;

130 
GTEST_API_
 
GTEST_DECLARE_STATIC_MUTEX_
(
g_gmock_muãx
);

133 
˛ass
 
	gU¡y≥dA˘i⁄Resu…HﬁdîBa£
;

138 ˛as†
	cGTEST_API_
 
	gU¡y≥dFun˘i⁄MockîBa£
 {

139 
	gpublic
:

140 
U¡y≥dFun˘i⁄MockîBa£
();

141 
	gvútuÆ
 ~
U¡y≥dFun˘i⁄MockîBa£
();

146 
boﬁ
 
VîifyAndCÀ¨Ex≥˘©i⁄sLocked
()

147 
GTEST_EXCLUSIVE_LOCK_REQUIRED_
(
g_gmock_muãx
);

150 
vútuÆ
 
CÀ¨DeÁu…A˘i⁄sLocked
()

151 
GTEST_EXCLUSIVE_LOCK_REQUIRED_
(
g_gmock_muãx
) = 0;

162 
vútuÆ
 
U¡y≥dA˘i⁄Resu…HﬁdîBa£
* 
U¡y≥dPîf‹mDeÁu…A˘i⁄
(

163 * 
u¡y≥d_¨gs
, c⁄° 
°d
::
°rög
& 
ˇŒ_des¸ùti⁄
) const = 0;

168 
vútuÆ
 
U¡y≥dA˘i⁄Resu…HﬁdîBa£
* 
U¡y≥dPîf‹mA˘i⁄
(

169 c⁄° * 
u¡y≥d_a˘i⁄
, * 
u¡y≥d_¨gs
) const = 0;

174 
vútuÆ
 
U¡y≥dDes¸ibeUnöãª°ögCÆl
(

175 c⁄° * 
u¡y≥d_¨gs
,

176 ::
°d
::
o°ªam
* 
os
) const

177 
GTEST_LOCK_EXCLUDED_
(
g_gmock_muãx
) = 0;

185 
vútuÆ
 c⁄° 
Ex≥˘©i⁄Ba£
* 
U¡y≥dFödM©chögEx≥˘©i⁄
(

186 c⁄° * 
u¡y≥d_¨gs
,

187 c⁄° ** 
u¡y≥d_a˘i⁄
, 
boﬁ
* 
is_ex˚ssive
,

188 ::
°d
::
o°ªam
* 
wh©
, ::°d::o°ªam* 
why
)

189 
GTEST_LOCK_EXCLUDED_
(
g_gmock_muãx
) = 0;

192 
vútuÆ
 
U¡y≥dPrötArgs
(c⁄° * 
u¡y≥d_¨gs
,

193 ::
°d
::
o°ªam
* 
os
) const = 0;

199 
Regi°îOw√r
(c⁄° * 
mock_obj
)

200 
GTEST_LOCK_EXCLUDED_
(
g_gmock_muãx
);

205 
SëOw√rAndName
(c⁄° * 
mock_obj
, c⁄° * 
«me
)

206 
GTEST_LOCK_EXCLUDED_
(
g_gmock_muãx
);

211 c⁄° * 
MockObje˘
() const

212 
GTEST_LOCK_EXCLUDED_
(
g_gmock_muãx
);

216 c⁄° * 
Name
() const

217 
GTEST_LOCK_EXCLUDED_
(
g_gmock_muãx
);

223 
U¡y≥dA˘i⁄Resu…HﬁdîBa£
* 
U¡y≥dInvokeWôh
(* 
u¡y≥d_¨gs
)

224 
GTEST_LOCK_EXCLUDED_
(
g_gmock_muãx
);

226 
	g¥Ÿe˘ed
:

227 
°d
::
	tve˘‹
<c⁄° *> 
	tU¡y≥dOnCÆlS≥cs
;

229 
usög
 
	gU¡y≥dEx≥˘©i⁄s
 = 
°d
::
ve˘‹
<°d::
sh¨ed_±r
<
Ex≥˘©i⁄Ba£
>>;

233 
Ex≥˘©i⁄
 
GëH™dÀOf
(
Ex≥˘©i⁄Ba£
* 
exp
);

238 c⁄° * 
	gmock_obj_
;

242 c⁄° * 
	g«me_
;

245 
U¡y≥dOnCÆlS≥cs
 
	gu¡y≥d_⁄_ˇŒ_•ecs_
;

256 
U¡y≥dEx≥˘©i⁄s
 
	gu¡y≥d_ex≥˘©i⁄s_
;

260 ˛as†
	cU¡y≥dOnCÆlS≥cBa£
 {

261 
	gpublic
:

263 
U¡y≥dOnCÆlS≥cBa£
(c⁄° * 
a_fûe
, 
a_löe
)

264 : 
fûe_
(
a_fûe
), 
löe_
(
a_löe
), 
œ°_˛au£_
(
kN⁄e
) {}

267 c⁄° * 
fûe
(Ëc⁄° {  
	gfûe_
; }

268 
löe
(Ëc⁄° {  
	glöe_
; }

270 
	g¥Ÿe˘ed
:

272 
	eCœu£
 {

275 
kN⁄e
,

276 
	gkWôh
,

277 
	gkWûlByDeÁu…


281 
As£πS≥cPr›îty
(
boﬁ
 
¥›îty
,

282 c⁄° 
°d
::
°rög
& 
Áûuª_mesßge
) const {

283 
As£π
(
¥›îty
, 
fûe_
, 
löe_
, 
Áûuª_mesßge
);

287 
Ex≥˘S≥cPr›îty
(
boﬁ
 
¥›îty
,

288 c⁄° 
°d
::
°rög
& 
Áûuª_mesßge
) const {

289 
Ex≥˘
(
¥›îty
, 
fûe_
, 
löe_
, 
Áûuª_mesßge
);

292 c⁄° * 
	gfûe_
;

293 
	glöe_
;

297 
Cœu£
 
	gœ°_˛au£_
;

301 
	gãm∂©e
 <
ty≥«me
 
	gF
>

302 ˛as†
	cOnCÆlS≥c
 : 
public
 
U¡y≥dOnCÆlS≥cBa£
 {

303 
public
:

304 
ty≥«me
 
	tFun˘i⁄
<
	tF
>::
	tArgumítTu∂e
 ArgumentTuple;

305 
ty≥«me
 
	tFun˘i⁄
<
	tF
>::
	tArgumítM©chîTu∂e
 ArgumentMatcherTuple;

309 
OnCÆlS≥c
(c⁄° * 
a_fûe
, 
a_löe
,

310 c⁄° 
ArgumítM©chîTu∂e
& 
m©chîs
)

311 : 
U¡y≥dOnCÆlS≥cBa£
(
a_fûe
, 
a_löe
),

312 
m©chîs_
(
m©chîs
),

316 
exåa_m©chî_
(
A
<c⁄° 
ArgumítTu∂e
&>()) {}

319 
	gOnCÆlS≥c
& 
Wôh
(c⁄° 
M©chî
<c⁄° 
ArgumítTu∂e
&>& 
m
) {

321 
Ex≥˘S≥cPr›îty
(
œ°_˛au£_
 < 
kWôh
,

324 
	gœ°_˛au£_
 = 
kWôh
;

326 
	gexåa_m©chî_
 = 
m
;

327  *
	gthis
;

331 
	gOnCÆlS≥c
& 
WûlByDeÁu…
(c⁄° 
A˘i⁄
<
F
>& 
a˘i⁄
) {

332 
Ex≥˘S≥cPr›îty
(
œ°_˛au£_
 < 
kWûlByDeÁu…
,

335 
	gœ°_˛au£_
 = 
kWûlByDeÁu…
;

337 
Ex≥˘S≥cPr›îty
(!
a˘i⁄
.
IsDoDeÁu…
(),

339 
	ga˘i⁄_
 = 
a˘i⁄
;

340  *
	gthis
;

344 
boﬁ
 
M©ches
(c⁄° 
ArgumítTu∂e
& 
¨gs
) const {

345  
Tu∂eM©ches
(
m©chîs_
, 
¨gs
Ë&& 
	gexåa_m©chî_
.
M©ches
(args);

349 c⁄° 
	gA˘i⁄
<
	gF
>& 
GëA˘i⁄
() const {

350 
As£πS≥cPr›îty
(
œ°_˛au£_
 =
kWûlByDeÁu…
,

353  
	ga˘i⁄_
;

356 
	g¥iv©e
:

370 
ArgumítM©chîTu∂e
 
m©chîs_
;

371 
	gM©chî
<c⁄° 
	gArgumítTu∂e
&> 
	gexåa_m©chî_
;

372 
	gA˘i⁄
<
	gF
> 
	ga˘i⁄_
;

376 
	eCÆlRó˘i⁄
 {

377 
	gkAŒow
,

378 
	gkW¨n
,

379 
	gkFaû
,

385 ˛as†
	cGTEST_API_
 
	gMock
 {

386 
	gpublic
:

391 
AŒowLók
(c⁄° * 
mock_obj
)

392 
GTEST_LOCK_EXCLUDED_
(
öã∫Æ
::
g_gmock_muãx
);

397 
boﬁ
 
VîifyAndCÀ¨Ex≥˘©i⁄s
(* 
mock_obj
)

398 
GTEST_LOCK_EXCLUDED_
(
öã∫Æ
::
g_gmock_muãx
);

403 
boﬁ
 
VîifyAndCÀ¨
(* 
mock_obj
)

404 
GTEST_LOCK_EXCLUDED_
(
öã∫Æ
::
g_gmock_muãx
);

407 
boﬁ
 
IsNaggy
(* 
mock_obj
)

408 
GTEST_LOCK_EXCLUDED_
(
öã∫Æ
::
g_gmock_muãx
);

410 
boﬁ
 
IsNi˚
(* 
mock_obj
)

411 
GTEST_LOCK_EXCLUDED_
(
öã∫Æ
::
g_gmock_muãx
);

413 
boﬁ
 
IsSåi˘
(* 
mock_obj
)

414 
GTEST_LOCK_EXCLUDED_
(
öã∫Æ
::
g_gmock_muãx
);

416 
	g¥iv©e
:

417 
‰õnd
 
˛ass
 
öã∫Æ
::
U¡y≥dFun˘i⁄MockîBa£
;

421 
	gãm∂©e
 <
ty≥«me
 
	gF
>

422 
‰õnd
 
˛ass
 
	göã∫Æ
::
Fun˘i⁄Mockî
;

424 
	gãm∂©e
 <
ty≥«me
 
	gMockCœss
>

425 
‰õnd
 
˛ass
 
	göã∫Æ
::
Ni˚MockIm∂
;

426 
	gãm∂©e
 <
ty≥«me
 
	gMockCœss
>

427 
‰õnd
 
˛ass
 
	göã∫Æ
::
NaggyMockIm∂
;

428 
	gãm∂©e
 <
ty≥«me
 
	gMockCœss
>

429 
‰õnd
 
˛ass
 
	göã∫Æ
::
Såi˘MockIm∂
;

433 
AŒowUnöãª°ögCÆls
(c⁄° * 
mock_obj
)

434 
GTEST_LOCK_EXCLUDED_
(
öã∫Æ
::
g_gmock_muãx
);

438 
W¨nUnöãª°ögCÆls
(c⁄° * 
mock_obj
)

439 
GTEST_LOCK_EXCLUDED_
(
öã∫Æ
::
g_gmock_muãx
);

443 
FaûUnöãª°ögCÆls
(c⁄° * 
mock_obj
)

444 
GTEST_LOCK_EXCLUDED_
(
öã∫Æ
::
g_gmock_muãx
);

448 
Uƒegi°îCÆlRó˘i⁄
(c⁄° * 
mock_obj
)

449 
GTEST_LOCK_EXCLUDED_
(
öã∫Æ
::
g_gmock_muãx
);

453 
	göã∫Æ
::
CÆlRó˘i⁄
 
GëRó˘i⁄OnUnöãª°ögCÆls
(

454 c⁄° * 
mock_obj
)

455 
GTEST_LOCK_EXCLUDED_
(
öã∫Æ
::
g_gmock_muãx
);

460 
boﬁ
 
VîifyAndCÀ¨Ex≥˘©i⁄sLocked
(* 
mock_obj
)

461 
GTEST_EXCLUSIVE_LOCK_REQUIRED_
(
öã∫Æ
::
g_gmock_muãx
);

464 
CÀ¨DeÁu…A˘i⁄sLocked
(* 
mock_obj
)

465 
GTEST_EXCLUSIVE_LOCK_REQUIRED_
(
öã∫Æ
::
g_gmock_muãx
);

468 
Regi°î
(

469 c⁄° * 
mock_obj
,

470 
öã∫Æ
::
U¡y≥dFun˘i⁄MockîBa£
* 
mockî
)

471 
GTEST_LOCK_EXCLUDED_
(
öã∫Æ
::
g_gmock_muãx
);

476 
Regi°îU£ByOnCÆlOrEx≥˘CÆl
(

477 c⁄° * 
mock_obj
, c⁄° * 
fûe
, 
löe
)

478 
GTEST_LOCK_EXCLUDED_
(
öã∫Æ
::
g_gmock_muãx
);

484 
Uƒegi°îLocked
(
öã∫Æ
::
U¡y≥dFun˘i⁄MockîBa£
* 
mockî
)

485 
GTEST_EXCLUSIVE_LOCK_REQUIRED_
(
öã∫Æ
::
g_gmock_muãx
);

504 ˛as†
	cGTEST_API_
 
	gEx≥˘©i⁄
 {

505 
	gpublic
:

507 
Ex≥˘©i⁄
();

508 
Ex≥˘©i⁄
(Expectation&&) = ;

509 
Ex≥˘©i⁄
(const Expectation&) = ;

510 
	gEx≥˘©i⁄
& 
	g›î©‹
=(
Ex≥˘©i⁄
&&) = ;

511 
	gEx≥˘©i⁄
& 
	g›î©‹
=(c⁄° 
Ex≥˘©i⁄
&) = ;

512 ~
Ex≥˘©i⁄
();

523 
Ex≥˘©i⁄
(
öã∫Æ
::
Ex≥˘©i⁄Ba£
& 
exp
);

530 
boﬁ
 
	g›î©‹
==(c⁄° 
Ex≥˘©i⁄
& 
rhs
) const {

531  
ex≥˘©i⁄_ba£_
 =
rhs
.expectation_base_;

534 
boﬁ
 
	g›î©‹
!=(c⁄° 
Ex≥˘©i⁄
& 
rhs
Ëc⁄° {  !(*
this
 ==Ñhs); }

536 
	g¥iv©e
:

537 
‰õnd
 
˛ass
 
Ex≥˘©i⁄Së
;

538 
‰õnd
 
˛ass
 
	gSequí˚
;

539 
‰õnd
 
	g˛ass
 ::
ã°ög
::
öã∫Æ
::
Ex≥˘©i⁄Ba£
;

540 
‰õnd
 
	g˛ass
 ::
ã°ög
::
öã∫Æ
::
U¡y≥dFun˘i⁄MockîBa£
;

542 
	gãm∂©e
 <
ty≥«me
 
	gF
>

543 
‰õnd
 
	g˛ass
 ::
ã°ög
::
öã∫Æ
::
Fun˘i⁄Mockî
;

545 
	gãm∂©e
 <
ty≥«me
 
	gF
>

546 
‰õnd
 
	g˛ass
 ::
ã°ög
::
öã∫Æ
::
Ty≥dEx≥˘©i⁄
;

549 ˛as†
	cLess
 {

550 
	gpublic
:

551 
boﬁ
 
›î©‹
()(c⁄° 
Ex≥˘©i⁄
& 
lhs
, c⁄° 
	gEx≥˘©i⁄
& 
	grhs
) const {

552  
	glhs
.
	gex≥˘©i⁄_ba£_
.
gë
(Ë< 
	grhs
.expectation_base_.get();

556 ::
°d
::
	t£t
<
	tEx≥˘©i⁄
, 
	tLess
> 
	tSë
;

558 
Ex≥˘©i⁄
(

559 c⁄° 
°d
::
sh¨ed_±r
<
öã∫Æ
::
Ex≥˘©i⁄Ba£
>& 
ex≥˘©i⁄_ba£
);

562 c⁄° 
	g°d
::
sh¨ed_±r
<
öã∫Æ
::
Ex≥˘©i⁄Ba£
>& 
ex≥˘©i⁄_ba£
() const {

563  
ex≥˘©i⁄_ba£_
;

567 
	g°d
::
sh¨ed_±r
<
öã∫Æ
::
Ex≥˘©i⁄Ba£
> 
ex≥˘©i⁄_ba£_
;

583 ˛as†
	cEx≥˘©i⁄Së
 {

584 
	gpublic
:

586 
Ex≥˘©i⁄
::
	tSë
::
	tc⁄°_ôî©‹
 const_iterator;

589 
	gEx≥˘©i⁄
::
	tSë
::
	tvÆue_ty≥
 value_type;

592 
Ex≥˘©i⁄Së
() {}

597 
Ex≥˘©i⁄Së
(
öã∫Æ
::
Ex≥˘©i⁄Ba£
& 
exp
) {

598 *
this
 +
Ex≥˘©i⁄
(
exp
);

604 
Ex≥˘©i⁄Së
(c⁄° 
Ex≥˘©i⁄
& 
e
) {

605 *
	gthis
 +
e
;

613 
boﬁ
 
	g›î©‹
==(c⁄° 
Ex≥˘©i⁄Së
& 
rhs
) const {

614  
ex≥˘©i⁄s_
 =
rhs
.expectations_;

617 
boﬁ
 
	g›î©‹
!=(c⁄° 
Ex≥˘©i⁄Së
& 
rhs
Ëc⁄° {  !(*
this
 ==Ñhs); }

621 
	gEx≥˘©i⁄Së
& 
	g›î©‹
+=(c⁄° 
Ex≥˘©i⁄
& 
e
) {

622 
ex≥˘©i⁄s_
.
ö£π
(
e
);

623  *
	gthis
;

626 
size
(Ëc⁄° {  
	g°©ic_ˇ°
<>(
	gex≥˘©i⁄s_
.size()); }

628 
c⁄°_ôî©‹
 
begö
(Ëc⁄° {  
	gex≥˘©i⁄s_
.begin(); }

629 
c⁄°_ôî©‹
 
íd
(Ëc⁄° {  
	gex≥˘©i⁄s_
.end(); }

631 
	g¥iv©e
:

632 
Ex≥˘©i⁄
::
Së
 
ex≥˘©i⁄s_
;

639 ˛as†
	cGTEST_API_
 
	gSequí˚
 {

640 
	gpublic
:

642 
Sequí˚
(Ë: 
œ°_ex≥˘©i⁄_
(
√w
 
Ex≥˘©i⁄
) {}

646 
AddEx≥˘©i⁄
(c⁄° 
Ex≥˘©i⁄
& 
ex≥˘©i⁄
) const;

648 
	g¥iv©e
:

650 
°d
::
sh¨ed_±r
<
Ex≥˘©i⁄
> 
œ°_ex≥˘©i⁄_
;

677 ˛as†
	cGTEST_API_
 
	gInSequí˚
 {

678 
	gpublic
:

679 
InSequí˚
();

680 ~
InSequí˚
();

681 
	g¥iv©e
:

682 
boﬁ
 
£quí˚_¸óãd_
;

684 
GTEST_DISALLOW_COPY_AND_ASSIGN_
(
InSequí˚
);

685 } 
	gGTEST_ATTRIBUTE_UNUSED_
;

687 
«me•a˚
 
	göã∫Æ
 {

691 
GTEST_API_
 
ThªadLoˇl
<
Sequí˚
*> 
g_gmock_im∂icô_£quí˚
;

707 ˛as†
	cGTEST_API_
 
	gEx≥˘©i⁄Ba£
 {

708 
	gpublic
:

710 
Ex≥˘©i⁄Ba£
(c⁄° * 
fûe
, 
löe
, c⁄° 
°d
::
°rög
& 
sour˚_ãxt
);

712 
	gvútuÆ
 ~
Ex≥˘©i⁄Ba£
();

715 c⁄° * 
fûe
(Ëc⁄° {  
	gfûe_
; }

716 
löe
(Ëc⁄° {  
	glöe_
; }

717 c⁄° * 
sour˚_ãxt
(Ëc⁄° {  
	gsour˚_ãxt_
.
c_°r
(); }

719 c⁄° 
	gC¨döÆôy
& 
ˇrdöÆôy
(Ëc⁄° {  
	gˇrdöÆôy_
; }

722 
Des¸ibeLoˇti⁄To
(::
°d
::
o°ªam
* 
os
) const {

723 *
os
 << 
F‹m©FûeLoˇti⁄
(
fûe
(), 
löe
()) << " ";

728 
Des¸ibeCÆlCou¡To
(::
°d
::
o°ªam
* 
os
) const

729 
GTEST_EXCLUSIVE_LOCK_REQUIRED_
(
g_gmock_muãx
);

733 
vútuÆ
 
MaybeDes¸ibeExåaM©chîTo
(::
°d
::
o°ªam
* 
os
) = 0;

735 
	g¥Ÿe˘ed
:

736 
‰õnd
 
˛ass
 ::
ã°ög
::
Ex≥˘©i⁄
;

737 
‰õnd
 
˛ass
 
	gU¡y≥dFun˘i⁄MockîBa£
;

739 
	eCœu£
 {

741 
	gkN⁄e
,

742 
	gkWôh
,

743 
	gkTimes
,

744 
	gkInSequí˚
,

745 
	gkA·î
,

746 
	gkWûlOn˚
,

747 
	gkWûlRïóãdly
,

748 
	gkRëúesOnS©uøti⁄


751 
	g°d
::
	tve˘‹
<c⁄° *> 
	tU¡y≥dA˘i⁄s
;

755 
vútuÆ
 
Ex≥˘©i⁄
 
GëH™dÀ
() = 0;

758 
As£πS≥cPr›îty
(
boﬁ
 
¥›îty
,

759 c⁄° 
°d
::
°rög
& 
Áûuª_mesßge
) const {

760 
As£π
(
¥›îty
, 
fûe_
, 
löe_
, 
Áûuª_mesßge
);

764 
Ex≥˘S≥cPr›îty
(
boﬁ
 
¥›îty
,

765 c⁄° 
°d
::
°rög
& 
Áûuª_mesßge
) const {

766 
Ex≥˘
(
¥›îty
, 
fûe_
, 
löe_
, 
Áûuª_mesßge
);

771 
S≥cifyC¨döÆôy
(c⁄° 
C¨döÆôy
& 
ˇrdöÆôy
);

775 
boﬁ
 
ˇrdöÆôy_•ecifõd
(Ëc⁄° {  
	gˇrdöÆôy_•ecifõd_
; }

778 
£t_ˇrdöÆôy
(c⁄° 
C¨döÆôy
& 
a_ˇrdöÆôy
) {

779 
	gˇrdöÆôy_
 = 
a_ˇrdöÆôy
;

787 
RëúeAŒPªRequisôes
()

788 
GTEST_EXCLUSIVE_LOCK_REQUIRED_
(
g_gmock_muãx
);

791 
boﬁ
 
is_ªtúed
() const

792 
GTEST_EXCLUSIVE_LOCK_REQUIRED_
(
g_gmock_muãx
) {

793 
	gg_gmock_muãx
.
As£πHñd
();

794  
	gªtúed_
;

798 
Rëúe
()

799 
GTEST_EXCLUSIVE_LOCK_REQUIRED_
(
g_gmock_muãx
) {

800 
	gg_gmock_muãx
.
As£πHñd
();

801 
	gªtúed_
 = 
åue
;

805 
boﬁ
 
IsS©isfõd
() const

806 
GTEST_EXCLUSIVE_LOCK_REQUIRED_
(
g_gmock_muãx
) {

807 
	gg_gmock_muãx
.
As£πHñd
();

808  
ˇrdöÆôy
().
IsS©isfõdByCÆlCou¡
(
ˇŒ_cou¡_
);

812 
boﬁ
 
IsS©uøãd
() const

813 
GTEST_EXCLUSIVE_LOCK_REQUIRED_
(
g_gmock_muãx
) {

814 
	gg_gmock_muãx
.
As£πHñd
();

815  
ˇrdöÆôy
().
IsS©uøãdByCÆlCou¡
(
ˇŒ_cou¡_
);

819 
boﬁ
 
IsOvîS©uøãd
() const

820 
GTEST_EXCLUSIVE_LOCK_REQUIRED_
(
g_gmock_muãx
) {

821 
	gg_gmock_muãx
.
As£πHñd
();

822  
ˇrdöÆôy
().
IsOvîS©uøãdByCÆlCou¡
(
ˇŒ_cou¡_
);

827 
boﬁ
 
AŒPªªquisôesAªS©isfõd
() const

828 
GTEST_EXCLUSIVE_LOCK_REQUIRED_
(
g_gmock_muãx
);

831 
FödUnßtisfõdPªªquisôes
(
Ex≥˘©i⁄Së
* 
ªsu…
) const

832 
GTEST_EXCLUSIVE_LOCK_REQUIRED_
(
g_gmock_muãx
);

835 
ˇŒ_cou¡
() const

836 
GTEST_EXCLUSIVE_LOCK_REQUIRED_
(
g_gmock_muãx
) {

837 
	gg_gmock_muãx
.
As£πHñd
();

838  
	gˇŒ_cou¡_
;

842 
In¸emítCÆlCou¡
()

843 
GTEST_EXCLUSIVE_LOCK_REQUIRED_
(
g_gmock_muãx
) {

844 
	gg_gmock_muãx
.
As£πHñd
();

845 
	gˇŒ_cou¡_
++;

852 
CheckA˘i⁄Cou¡IfNŸD⁄e
() const

853 
GTEST_LOCK_EXCLUDED_
(
muãx_
);

855 
‰õnd
 
	g˛ass
 ::
ã°ög
::
Sequí˚
;

856 
‰õnd
 
	g˛ass
 ::
ã°ög
::
öã∫Æ
::
Ex≥˘©i⁄Te°î
;

858 
	gãm∂©e
 <
ty≥«me
 
	gFun˘i⁄
>

859 
‰õnd
 
˛ass
 
	gTy≥dEx≥˘©i⁄
;

862 
U¡y≥dTimes
(c⁄° 
C¨döÆôy
& 
a_ˇrdöÆôy
);

866 c⁄° * 
	gfûe_
;

867 
	glöe_
;

868 c⁄° 
	g°d
::
°rög
 
sour˚_ãxt_
;

870 
boﬁ
 
	gˇrdöÆôy_•ecifõd_
;

871 
C¨döÆôy
 
	gˇrdöÆôy_
;

878 
Ex≥˘©i⁄Së
 
	gimmedüã_¥îequisôes_
;

882 
	gˇŒ_cou¡_
;

883 
boﬁ
 
	gªtúed_
;

884 
U¡y≥dA˘i⁄s
 
	gu¡y≥d_a˘i⁄s_
;

885 
boﬁ
 
	gexåa_m©chî_•ecifõd_
;

886 
boﬁ
 
	gª≥©ed_a˘i⁄_•ecifõd_
;

887 
boﬁ
 
	gªtúes_⁄_ßtuøti⁄_
;

888 
Cœu£
 
	gœ°_˛au£_
;

889 
muèbÀ
 
boﬁ
 
	ga˘i⁄_cou¡_checked_
;

890 
muèbÀ
 
Muãx
 
	gmuãx_
;

894 
	gãm∂©e
 <
ty≥«me
 
	gF
>

895 ˛as†
	cTy≥dEx≥˘©i⁄
 : 
public
 
Ex≥˘©i⁄Ba£
 {

896 
public
:

897 
ty≥«me
 
	tFun˘i⁄
<
	tF
>::
	tArgumítTu∂e
 ArgumentTuple;

898 
ty≥«me
 
	tFun˘i⁄
<
	tF
>::
	tArgumítM©chîTu∂e
 ArgumentMatcherTuple;

899 
ty≥«me
 
	tFun˘i⁄
<
	tF
>::
	tResu…
 Result;

901 
Ty≥dEx≥˘©i⁄
(
Fun˘i⁄Mockî
<
F
>* 
ow√r
, c⁄° * 
a_fûe
, 
a_löe
,

902 c⁄° 
°d
::
°rög
& 
a_sour˚_ãxt
,

903 c⁄° 
ArgumítM©chîTu∂e
& 
m
)

904 : 
Ex≥˘©i⁄Ba£
(
a_fûe
, 
a_löe
, 
a_sour˚_ãxt
),

905 
ow√r_
(
ow√r
),

906 
m©chîs_
(
m
),

910 
exåa_m©chî_
(
A
<c⁄° 
ArgumítTu∂e
&>()),

911 
ª≥©ed_a˘i⁄_
(
DoDeÁu…
()) {}

913 ~
Ty≥dEx≥˘©i⁄
(Ë
	govîride
 {

916 
CheckA˘i⁄Cou¡IfNŸD⁄e
();

917 
	gU¡y≥dA˘i⁄s
::
c⁄°_ôî©‹
 
ô
 = 
u¡y≥d_a˘i⁄s_
.
begö
();

918 
	gô
 !
u¡y≥d_a˘i⁄s_
.
íd
(); ++it) {

919 
dñëe
 
	g°©ic_ˇ°
<c⁄° 
	gA˘i⁄
<
	gF
>*>(*
	gô
);

924 
	gTy≥dEx≥˘©i⁄
& 
Wôh
(c⁄° 
M©chî
<c⁄° 
ArgumítTu∂e
&>& 
m
) {

925 i‡(
	gœ°_˛au£_
 =
kWôh
) {

926 
Ex≥˘S≥cPr›îty
(
Ál£
,

930 
Ex≥˘S≥cPr›îty
(
œ°_˛au£_
 < 
kWôh
,

934 
	gœ°_˛au£_
 = 
kWôh
;

936 
	gexåa_m©chî_
 = 
m
;

937 
	gexåa_m©chî_•ecifõd_
 = 
åue
;

938  *
	gthis
;

942 
	gTy≥dEx≥˘©i⁄
& 
Times
(c⁄° 
C¨döÆôy
& 
a_ˇrdöÆôy
) {

943 
	gEx≥˘©i⁄Ba£
::
U¡y≥dTimes
(
a_ˇrdöÆôy
);

944  *
	gthis
;

948 
	gTy≥dEx≥˘©i⁄
& 
Times
(
n
) {

949  
Times
(
Exa˘ly
(
n
));

953 
	gTy≥dEx≥˘©i⁄
& 
InSequí˚
(c⁄° 
Sequí˚
& 
s
) {

954 
Ex≥˘S≥cPr›îty
(
œ°_˛au£_
 <
kInSequí˚
,

958 
	gœ°_˛au£_
 = 
kInSequí˚
;

960 
	gs
.
AddEx≥˘©i⁄
(
GëH™dÀ
());

961  *
	gthis
;

963 
	gTy≥dEx≥˘©i⁄
& 
InSequí˚
(c⁄° 
Sequí˚
& 
s1
, c⁄° Sequí˚& 
s2
) {

964  
InSequí˚
(
s1
).InSequí˚(
s2
);

966 
	gTy≥dEx≥˘©i⁄
& 
InSequí˚
(c⁄° 
Sequí˚
& 
s1
, c⁄° Sequí˚& 
s2
,

967 c⁄° 
Sequí˚
& 
s3
) {

968  
InSequí˚
(
s1
, 
s2
).InSequí˚(
s3
);

970 
	gTy≥dEx≥˘©i⁄
& 
InSequí˚
(c⁄° 
Sequí˚
& 
s1
, c⁄° Sequí˚& 
s2
,

971 c⁄° 
Sequí˚
& 
s3
, c⁄° Sequí˚& 
s4
) {

972  
InSequí˚
(
s1
, 
s2
, 
s3
).InSequí˚(
s4
);

974 
	gTy≥dEx≥˘©i⁄
& 
InSequí˚
(c⁄° 
Sequí˚
& 
s1
, c⁄° Sequí˚& 
s2
,

975 c⁄° 
Sequí˚
& 
s3
, c⁄° Sequí˚& 
s4
,

976 c⁄° 
Sequí˚
& 
s5
) {

977  
InSequí˚
(
s1
, 
s2
, 
s3
, 
s4
).InSequí˚(
s5
);

981 
	gTy≥dEx≥˘©i⁄
& 
A·î
(c⁄° 
Ex≥˘©i⁄Së
& 
s
) {

982 
Ex≥˘S≥cPr›îty
(
œ°_˛au£_
 <
kA·î
,

986 
	gœ°_˛au£_
 = 
kA·î
;

988 
	gEx≥˘©i⁄Së
::
c⁄°_ôî©‹
 
ô
 = 
s
.
begö
(); 
	gô
 !s.
íd
(); ++it) {

989 
	gimmedüã_¥îequisôes_
 +*
ô
;

991  *
	gthis
;

993 
	gTy≥dEx≥˘©i⁄
& 
A·î
(c⁄° 
Ex≥˘©i⁄Së
& 
s1
, c⁄° Ex≥˘©i⁄Së& 
s2
) {

994  
A·î
(
s1
).A·î(
s2
);

996 
	gTy≥dEx≥˘©i⁄
& 
A·î
(c⁄° 
Ex≥˘©i⁄Së
& 
s1
, c⁄° Ex≥˘©i⁄Së& 
s2
,

997 c⁄° 
Ex≥˘©i⁄Së
& 
s3
) {

998  
A·î
(
s1
, 
s2
).A·î(
s3
);

1000 
	gTy≥dEx≥˘©i⁄
& 
A·î
(c⁄° 
Ex≥˘©i⁄Së
& 
s1
, c⁄° Ex≥˘©i⁄Së& 
s2
,

1001 c⁄° 
Ex≥˘©i⁄Së
& 
s3
, c⁄° Ex≥˘©i⁄Së& 
s4
) {

1002  
A·î
(
s1
, 
s2
, 
s3
).A·î(
s4
);

1004 
	gTy≥dEx≥˘©i⁄
& 
A·î
(c⁄° 
Ex≥˘©i⁄Së
& 
s1
, c⁄° Ex≥˘©i⁄Së& 
s2
,

1005 c⁄° 
Ex≥˘©i⁄Së
& 
s3
, c⁄° Ex≥˘©i⁄Së& 
s4
,

1006 c⁄° 
Ex≥˘©i⁄Së
& 
s5
) {

1007  
A·î
(
s1
, 
s2
, 
s3
, 
s4
).A·î(
s5
);

1011 
	gTy≥dEx≥˘©i⁄
& 
WûlOn˚
(c⁄° 
A˘i⁄
<
F
>& 
a˘i⁄
) {

1012 
Ex≥˘S≥cPr›îty
(
œ°_˛au£_
 <
kWûlOn˚
,

1015 
	gœ°_˛au£_
 = 
kWûlOn˚
;

1017 
	gu¡y≥d_a˘i⁄s_
.
push_back
(
√w
 
A˘i⁄
<
F
>(
a˘i⁄
));

1018 i‡(!
ˇrdöÆôy_•ecifõd
()) {

1019 
£t_ˇrdöÆôy
(
Exa˘ly
(
°©ic_ˇ°
<>(
u¡y≥d_a˘i⁄s_
.
size
())));

1021  *
	gthis
;

1025 
	gTy≥dEx≥˘©i⁄
& 
WûlRïóãdly
(c⁄° 
A˘i⁄
<
F
>& 
a˘i⁄
) {

1026 i‡(
	gœ°_˛au£_
 =
kWûlRïóãdly
) {

1027 
Ex≥˘S≥cPr›îty
(
Ál£
,

1031 
Ex≥˘S≥cPr›îty
(
œ°_˛au£_
 < 
kWûlRïóãdly
,

1035 
	gœ°_˛au£_
 = 
kWûlRïóãdly
;

1036 
	gª≥©ed_a˘i⁄_•ecifõd_
 = 
åue
;

1038 
	gª≥©ed_a˘i⁄_
 = 
a˘i⁄
;

1039 i‡(!
ˇrdöÆôy_•ecifõd
()) {

1040 
£t_ˇrdöÆôy
(
AtLó°
(
°©ic_ˇ°
<>(
u¡y≥d_a˘i⁄s_
.
size
())));

1045 
CheckA˘i⁄Cou¡IfNŸD⁄e
();

1046  *
	gthis
;

1050 
	gTy≥dEx≥˘©i⁄
& 
RëúesOnS©uøti⁄
() {

1051 
Ex≥˘S≥cPr›îty
(
œ°_˛au£_
 < 
kRëúesOnS©uøti⁄
,

1054 
	gœ°_˛au£_
 = 
kRëúesOnS©uøti⁄
;

1055 
	gªtúes_⁄_ßtuøti⁄_
 = 
åue
;

1059 
CheckA˘i⁄Cou¡IfNŸD⁄e
();

1060  *
	gthis
;

1065 c⁄° 
	gArgumítM©chîTu∂e
& 
m©chîs
() const {

1066  
	gm©chîs_
;

1070 c⁄° 
	gM©chî
<c⁄° 
	gArgumítTu∂e
&>& 
exåa_m©chî
() const {

1071  
	gexåa_m©chî_
;

1075 c⁄° 
	gA˘i⁄
<
	gF
>& 
ª≥©ed_a˘i⁄
(Ëc⁄° {  
	gª≥©ed_a˘i⁄_
; }

1079 
MaybeDes¸ibeExåaM©chîTo
(::
°d
::
o°ªam
* 
os
Ë
ovîride
 {

1080 i‡(
exåa_m©chî_•ecifõd_
) {

1081 *
os
 << " Expectedárgs: ";

1082 
	gexåa_m©chî_
.
Des¸ibeTo
(
os
);

1083 *
	gos
 << "\n";

1087 
	g¥iv©e
:

1088 
ãm∂©e
 <
ty≥«me
 
Fun˘i⁄
>

1089 
‰õnd
 
˛ass
 
Fun˘i⁄Mockî
;

1093 
Ex≥˘©i⁄
 
GëH™dÀ
(Ë
	govîride
 {  
	gow√r_
->
GëH™dÀOf
(
this
); }

1100 
boﬁ
 
M©ches
(c⁄° 
ArgumítTu∂e
& 
¨gs
) const

1101 
GTEST_EXCLUSIVE_LOCK_REQUIRED_
(
g_gmock_muãx
) {

1102 
	gg_gmock_muãx
.
As£πHñd
();

1103  
Tu∂eM©ches
(
m©chîs_
, 
¨gs
Ë&& 
	gexåa_m©chî_
.
M©ches
(args);

1108 
boﬁ
 
ShouldH™dÀArgumíts
(c⁄° 
ArgumítTu∂e
& 
¨gs
) const

1109 
GTEST_EXCLUSIVE_LOCK_REQUIRED_
(
g_gmock_muãx
) {

1110 
	gg_gmock_muãx
.
As£πHñd
();

1116 
CheckA˘i⁄Cou¡IfNŸD⁄e
();

1117  !
is_ªtúed
(Ë&& 
AŒPªªquisôesAªS©isfõd
(Ë&& 
M©ches
(
¨gs
);

1122 
Ex∂aöM©chResu…To
(

1123 c⁄° 
ArgumítTu∂e
& 
¨gs
,

1124 ::
°d
::
o°ªam
* 
os
) const

1125 
GTEST_EXCLUSIVE_LOCK_REQUIRED_
(
g_gmock_muãx
) {

1126 
g_gmock_muãx
.
As£πHñd
();

1128 i‡(
is_ªtúed
()) {

1129 *
	gos
 << " Expected:ÅheÉxpectation isáctive\n"

1131 } i‡(!
M©ches
(
¨gs
)) {

1132 i‡(!
Tu∂eM©ches
(
m©chîs_
, 
¨gs
)) {

1133 
Ex∂aöM©chFaûuªTu∂eTo
(
m©chîs_
, 
¨gs
, 
os
);

1135 
SåögM©chResu…Li°íî
 
	gli°íî
;

1136 i‡(!
	gexåa_m©chî_
.
M©chAndEx∂aö
(
¨gs
, &
li°íî
)) {

1137 *
	gos
 << " Expectedárgs: ";

1138 
	gexåa_m©chî_
.
Des¸ibeTo
(
os
);

1139 *
	gos
 << "\n Actual: don't match";

1141 
	göã∫Æ
::
PrötIfNŸEm±y
(
li°íî
.
°r
(), 
os
);

1142 *
	gos
 << "\n";

1144 } i‡(!
AŒPªªquisôesAªS©isfõd
()) {

1145 *
	gos
 << " Expected:állÖre-requisitesáre satisfied\n"

1148 
Ex≥˘©i⁄Së
 
	gunßtisfõd_¥îeqs
;

1149 
FödUnßtisfõdPªªquisôes
(&
unßtisfõd_¥îeqs
);

1150 
	gi
 = 0;

1151 
	gEx≥˘©i⁄Së
::
c⁄°_ôî©‹
 
ô
 = 
unßtisfõd_¥îeqs
.
begö
();

1152 
	gô
 !
unßtisfõd_¥îeqs
.
íd
(); ++it) {

1153 
	gô
->
ex≥˘©i⁄_ba£
()->
Des¸ibeLoˇti⁄To
(
os
);

1154 *
	gos
 << "¥e-ªquisôê#" << 
	gi
++ << "\n";

1156 *
	gos
 << " (end ofÖre-requisites)\n";

1162 *
	gos
 << "The call matchesÅheÉxpectation.\n";

1167 c⁄° 
	gA˘i⁄
<
	gF
>& 
GëCuºítA˘i⁄
(c⁄° 
Fun˘i⁄Mockî
<
F
>* 
mockî
,

1168 c⁄° 
ArgumítTu∂e
& 
¨gs
) const

1169 
GTEST_EXCLUSIVE_LOCK_REQUIRED_
(
g_gmock_muãx
) {

1170 
	gg_gmock_muãx
.
As£πHñd
();

1171 c⁄° 
	gcou¡
 = 
ˇŒ_cou¡
();

1172 
As£π
(
cou¡
 >1, 
__FILE__
, 
__LINE__
,

1176 c⁄° 
	ga˘i⁄_cou¡
 = 
°©ic_ˇ°
<>(
u¡y≥d_a˘i⁄s_
.
size
());

1177 i‡(
	ga˘i⁄_cou¡
 > 0 && !
	gª≥©ed_a˘i⁄_•ecifõd_
 &&

1178 
	gcou¡
 > 
	ga˘i⁄_cou¡
) {

1181 ::
°d
::
°rög°ªam
 
ss
;

1182 
Des¸ibeLoˇti⁄To
(&
ss
);

1183 
	gss
 << "A˘i⁄†ø¿ouàö " << 
sour˚_ãxt
() << "...\n"

1184 << "CÆÀd " << 
	gcou¡
 << "Åimes, but only "

1185 << 
	ga˘i⁄_cou¡
 << " WillOnce()"

1186 << (
	ga˘i⁄_cou¡
 == 1 ? " is" : "sáre") << " specified - ";

1187 
	gmockî
->
Des¸ibeDeÁu…A˘i⁄To
(
¨gs
, &
ss
);

1188 
Log
(
kW¨nög
, 
ss
.
°r
(), 1);

1191  
	gcou¡
 <
a˘i⁄_cou¡


1192 ? *
°©ic_ˇ°
<c⁄° 
A˘i⁄
<
F
>*>(

1193 
u¡y≥d_a˘i⁄s_
[
°©ic_ˇ°
<
size_t
>(
cou¡
 - 1)])

1194 : 
ª≥©ed_a˘i⁄
();

1204 c⁄° 
	gA˘i⁄
<
	gF
>* 
GëA˘i⁄F‹Argumíts
(c⁄° 
Fun˘i⁄Mockî
<
F
>* 
mockî
,

1205 c⁄° 
ArgumítTu∂e
& 
¨gs
,

1206 ::
°d
::
o°ªam
* 
wh©
,

1207 ::
°d
::
o°ªam
* 
why
)

1208 
GTEST_EXCLUSIVE_LOCK_REQUIRED_
(
g_gmock_muãx
) {

1209 
g_gmock_muãx
.
As£πHñd
();

1210 i‡(
IsS©uøãd
()) {

1212 
In¸emítCÆlCou¡
();

1213 *
	gwh©
 << "Mock function called moreÅimesÅhanÉxpected - ";

1214 
	gmockî
->
Des¸ibeDeÁu…A˘i⁄To
(
¨gs
, 
wh©
);

1215 
Des¸ibeCÆlCou¡To
(
why
);

1217  
	gnuŒ±r
;

1220 
In¸emítCÆlCou¡
();

1221 
RëúeAŒPªRequisôes
();

1223 i‡(
	gªtúes_⁄_ßtuøti⁄_
 && 
IsS©uøãd
()) {

1224 
Rëúe
();

1228 *
	gwh©
 << "Mock fun˘i⁄ cÆ»m©che†" << 
sour˚_ãxt
() <<"...\n";

1229  &(
GëCuºítA˘i⁄
(
mockî
, 
¨gs
));

1234 
	gFun˘i⁄Mockî
<
	gF
>* c⁄° 
	gow√r_
;

1235 
ArgumítM©chîTu∂e
 
	gm©chîs_
;

1236 
	gM©chî
<c⁄° 
	gArgumítTu∂e
&> 
	gexåa_m©chî_
;

1237 
	gA˘i⁄
<
	gF
> 
	gª≥©ed_a˘i⁄_
;

1239 
GTEST_DISALLOW_COPY_AND_ASSIGN_
(
Ty≥dEx≥˘©i⁄
);

1253 
GTEST_API_
 
LogWôhLoˇti⁄
(
ã°ög
::
öã∫Æ
::
LogSevîôy
 
£vîôy
,

1254 c⁄° * 
fûe
, 
löe
,

1255 c⁄° 
°d
::
°rög
& 
mesßge
);

1257 
	gãm∂©e
 <
ty≥«me
 
	gF
>

1258 ˛as†
	cMockS≥c
 {

1259 
	gpublic
:

1260 
ty≥«me
 
	töã∫Æ
::
	tFun˘i⁄
<
	tF
>::
	tArgumítTu∂e
 ArgumentTuple;

1261 
ty≥«me
 
	töã∫Æ
::
	tFun˘i⁄
<
	tF
>::
	tArgumítM©chîTu∂e


1262 
	tArgumítM©chîTu∂e
;

1266 
MockS≥c
(
öã∫Æ
::
Fun˘i⁄Mockî
<
F
>* 
fun˘i⁄_mockî
,

1267 c⁄° 
ArgumítM©chîTu∂e
& 
m©chîs
)

1268 : 
fun˘i⁄_mockî_
(
fun˘i⁄_mockî
), 
m©chîs_
(
m©chîs
) {}

1272 
	göã∫Æ
::
OnCÆlS≥c
<
F
>& 
I¡î«lDeÁu…A˘i⁄SëAt
(

1273 c⁄° * 
fûe
, 
löe
, c⁄° * 
obj
, c⁄° * 
ˇŒ
) {

1274 
LogWôhLoˇti⁄
(
öã∫Æ
::
kInfo
, 
fûe
, 
löe
,

1275 
°d
::
°rög
("ON_CALL("Ë+ 
obj
 + ", " + 
ˇŒ
 + ") invoked");

1276  
	gfun˘i⁄_mockî_
->
AddNewOnCÆlS≥c
(
fûe
, 
löe
, 
m©chîs_
);

1281 
	göã∫Æ
::
Ty≥dEx≥˘©i⁄
<
F
>& 
I¡î«lEx≥˘edAt
(

1282 c⁄° * 
fûe
, 
löe
, c⁄° * 
obj
, c⁄° * 
ˇŒ
) {

1283 c⁄° 
	g°d
::
°rög
 
sour˚_ãxt
(
°d
::°rög("EXPECT_CALL("Ë+ 
obj
 + ", " +

1284 
ˇŒ
 + ")");

1285 
LogWôhLoˇti⁄
(
öã∫Æ
::
kInfo
, 
fûe
, 
löe
, 
sour˚_ãxt
 + " invoked");

1286  
	gfun˘i⁄_mockî_
->
AddNewEx≥˘©i⁄
(

1287 
fûe
, 
löe
, 
sour˚_ãxt
, 
m©chîs_
);

1293 
	gMockS≥c
<
	gF
>& 
›î©‹
()(c⁄° 
	göã∫Æ
::
WôhoutM©chîs
&, * const) {

1294  *
	gthis
;

1297 
	g¥iv©e
:

1298 
ãm∂©e
 <
ty≥«me
 
Fun˘i⁄
>

1299 
‰õnd
 
˛ass
 
öã∫Æ
::
Fun˘i⁄Mockî
;

1302 
	göã∫Æ
::
Fun˘i⁄Mockî
<
F
>* c⁄° 
fun˘i⁄_mockî_
;

1304 
ArgumítM©chîTu∂e
 
	gm©chîs_
;

1316 
	gãm∂©e
 <
ty≥«me
 
	gT
>

1317 ˛as†
	cRe„ªn˚OrVÆueWøµî
 {

1318 
	gpublic
:

1320 
ex∂icô
 
Re„ªn˚OrVÆueWøµî
(
T
 
vÆue
)

1321 : 
vÆue_
(
°d
::
move
(
vÆue
)) {

1327 
T
 
Unwøp
(Ë{  
°d
::
move
(
vÆue_
); }

1333 c⁄° 
	gT
& 
Pìk
() const {

1334  
	gvÆue_
;

1337 
	g¥iv©e
:

1338 
T
 
vÆue_
;

1343 
	gãm∂©e
 <
ty≥«me
 
	gT
>

1344 
˛ass
 
	gRe„ªn˚OrVÆueWøµî
<
	gT
&> {

1345 
	gpublic
:

1348 
T
& 
	tª„ªn˚
;

1349 
ex∂icô
 
Re„ªn˚OrVÆueWøµî
(
ª„ªn˚
 
ªf
)

1350 : 
vÆue_±r_
(&
ªf
) {}

1351 
T
& 
Unwøp
(Ë{  *
vÆue_±r_
; }

1352 c⁄° 
	gT
& 
Pìk
(Ëc⁄° {  *
	gvÆue_±r_
; }

1354 
	g¥iv©e
:

1355 
T
* 
vÆue_±r_
;

1367 ˛as†
	cU¡y≥dA˘i⁄Resu…HﬁdîBa£
 {

1368 
	gpublic
:

1369 
vútuÆ
 ~
U¡y≥dA˘i⁄Resu…HﬁdîBa£
() {}

1372 
vútuÆ
 
PrötAsA˘i⁄Resu…
(::
°d
::
o°ªam
* 
os
) const = 0;

1376 
	gãm∂©e
 <
ty≥«me
 
	gT
>

1377 ˛as†
	cA˘i⁄Resu…Hﬁdî
 : 
public
 
U¡y≥dA˘i⁄Resu…HﬁdîBa£
 {

1378 
public
:

1380 
T
 
Unwøp
() {

1381  
ªsu…_
.
Unwøp
();

1385 
PrötAsA˘i⁄Resu…
(::
°d
::
o°ªam
* 
os
Ëc⁄° 
ovîride
 {

1386 *
os
 << "\n Returns: ";

1388 
	gUnivîßlPröãr
<
	gT
>::
Pröt
(
ªsu…_
.
Pìk
(), 
os
);

1393 
	gãm∂©e
 <
ty≥«me
 
	gF
>

1394 
A˘i⁄Resu…Hﬁdî
* 
Pîf‹mDeÁu…A˘i⁄
(

1395 c⁄° 
Fun˘i⁄Mockî
<
F
>* 
func_mockî
,

1396 
ty≥«me
 
Fun˘i⁄
<
F
>::
ArgumítTu∂e
&& 
¨gs
,

1397 c⁄° 
°d
::
°rög
& 
ˇŒ_des¸ùti⁄
) {

1398  
√w
 
A˘i⁄Resu…Hﬁdî
(
Wøµî
(
func_mockî
->
Pîf‹mDeÁu…A˘i⁄
(

1399 
°d
::
move
(
¨gs
), 
ˇŒ_des¸ùti⁄
)));

1404 
	gãm∂©e
 <
ty≥«me
 
	gF
>

1405 
A˘i⁄Resu…Hﬁdî
* 
Pîf‹mA˘i⁄
(

1406 c⁄° 
A˘i⁄
<
F
>& 
a˘i⁄
, 
ty≥«me
 
Fun˘i⁄
<F>::
ArgumítTu∂e
&& 
¨gs
) {

1407  
√w
 
A˘i⁄Resu…Hﬁdî
(

1408 
Wøµî
(
a˘i⁄
.
Pîf‹m
(
°d
::
move
(
¨gs
))));

1411 
	g¥iv©e
:

1412 
Re„ªn˚OrVÆueWøµî
<
	tT
> 
	tWøµî
;

1414 
ex∂icô
 
A˘i⁄Resu…Hﬁdî
(
Wøµî
 
ªsu…
)

1415 : 
ªsu…_
(
°d
::
move
(
ªsu…
)) {

1418 
Wøµî
 
ªsu…_
;

1420 
GTEST_DISALLOW_COPY_AND_ASSIGN_
(
A˘i⁄Resu…Hﬁdî
);

1424 
	gãm∂©e
 <>

1425 
˛ass
 
	gA˘i⁄Resu…Hﬁdî
<> : 
public
 
U¡y≥dA˘i⁄Resu…HﬁdîBa£
 {

1426 
public
:

1427 
Unwøp
() { }

1429 
PrötAsA˘i⁄Resu…
(::
°d
::
o°ªam
* ) c⁄° 
ovîride
 {}

1433 
ãm∂©e
 <
ty≥«me
 
F
>

1434 
A˘i⁄Resu…Hﬁdî
* 
Pîf‹mDeÁu…A˘i⁄
(

1435 c⁄° 
Fun˘i⁄Mockî
<
F
>* 
func_mockî
,

1436 
ty≥«me
 
Fun˘i⁄
<
F
>::
ArgumítTu∂e
&& 
¨gs
,

1437 c⁄° 
°d
::
°rög
& 
ˇŒ_des¸ùti⁄
) {

1438 
func_mockî
->
Pîf‹mDeÁu…A˘i⁄
(
°d
::
move
(
¨gs
), 
ˇŒ_des¸ùti⁄
);

1439  
√w
 
	gA˘i⁄Resu…Hﬁdî
;

1444 
	gãm∂©e
 <
ty≥«me
 
	gF
>

1445 
A˘i⁄Resu…Hﬁdî
* 
Pîf‹mA˘i⁄
(

1446 c⁄° 
A˘i⁄
<
F
>& 
a˘i⁄
, 
ty≥«me
 
Fun˘i⁄
<F>::
ArgumítTu∂e
&& 
¨gs
) {

1447 
a˘i⁄
.
Pîf‹m
(
°d
::
move
(
¨gs
));

1448  
√w
 
	gA˘i⁄Resu…Hﬁdî
;

1451 
	g¥iv©e
:

1452 
A˘i⁄Resu…Hﬁdî
() {}

1453 
GTEST_DISALLOW_COPY_AND_ASSIGN_
(
A˘i⁄Resu…Hﬁdî
);

1456 
	gãm∂©e
 <
ty≥«me
 
	gF
>

1457 
˛ass
 
	gFun˘i⁄Mockî
;

1459 
	gãm∂©e
 <
ty≥«me
 
	gR
, 
	gty≥«me
... 
	gArgs
>

1460 
˛ass
 
	gFun˘i⁄Mockî
<
R
(
Args
...)> 
	gföÆ
 : 
public
 
U¡y≥dFun˘i⁄MockîBa£
 {

1461 
usög
 
F
 = 
R
(
Args
...);

1463 
	gpublic
:

1464 
usög
 
Resu…
 = 
R
;

1465 
usög
 
	gArgumítTu∂e
 = 
°d
::
tu∂e
<
Args
...>;

1466 
usög
 
	gArgumítM©chîTu∂e
 = 
°d
::
tu∂e
<
M©chî
<
Args
>...>;

1468 
Fun˘i⁄Mockî
() {}

1482 
Fun˘i⁄Mockî
(c⁄° Fun˘i⁄Mockî&Ë
dñëe
;

1483 
	gFun˘i⁄Mockî
& 
	g›î©‹
=(c⁄° 
Fun˘i⁄Mockî
&Ë
dñëe
;

1488 ~
Fun˘i⁄Mockî
(Ë
ovîride
 
GTEST_LOCK_EXCLUDED_
(
g_gmock_muãx
) {

1489 
MuãxLock
 
l
(&
g_gmock_muãx
);

1490 
VîifyAndCÀ¨Ex≥˘©i⁄sLocked
();

1491 
	gMock
::
Uƒegi°îLocked
(
this
);

1492 
CÀ¨DeÁu…A˘i⁄sLocked
();

1498 c⁄° 
	gOnCÆlS≥c
<
	gF
>* 
FödOnCÆlS≥c
(

1499 c⁄° 
ArgumítTu∂e
& 
¨gs
) const {

1500 
	gU¡y≥dOnCÆlS≥cs
::
c⁄°_ªvî£_ôî©‹
 
ô


1501 
u¡y≥d_⁄_ˇŒ_•ecs_
.
rbegö
();

1502 
	gô
 !
u¡y≥d_⁄_ˇŒ_•ecs_
.
ªnd
(); ++it) {

1503 c⁄° 
	gOnCÆlS≥c
<
	gF
>* 
	g•ec
 = 
°©ic_ˇ°
<c⁄° 
OnCÆlS≥c
<
F
>*>(*
ô
);

1504 i‡(
	g•ec
->
M©ches
(
¨gs
))

1505  
	g•ec
;

1508  
	gnuŒ±r
;

1518 
Resu…
 
Pîf‹mDeÁu…A˘i⁄
(
ArgumítTu∂e
&& 
¨gs
,

1519 c⁄° 
°d
::
°rög
& 
ˇŒ_des¸ùti⁄
) const {

1520 c⁄° 
OnCÆlS≥c
<
F
>* c⁄° 
•ec
 =

1521 
this
->
FödOnCÆlS≥c
(
¨gs
);

1522 i‡(
	g•ec
 !
nuŒ±r
) {

1523  
•ec
->
GëA˘i⁄
().
Pîf‹m
(
°d
::
move
(
¨gs
));

1525 c⁄° 
	g°d
::
°rög
 
mesßge
 =

1526 
ˇŒ_des¸ùti⁄
 +

1529 #i‡
GTEST_HAS_EXCEPTIONS


1530 i‡(!
	gDeÁu…VÆue
<
	gResu…
>::
Exi°s
()) {

1531 
throw
 
°d
::
ru¡ime_îr‹
(
mesßge
);

1534 
As£π
(
DeÁu…VÆue
<
Resu…
>::
Exi°s
(), "", -1, 
mesßge
);

1536  
	gDeÁu…VÆue
<
	gResu…
>::
Gë
();

1544 
U¡y≥dA˘i⁄Resu…HﬁdîBa£
* 
U¡y≥dPîf‹mDeÁu…A˘i⁄
(

1545 * 
u¡y≥d_¨gs
,

1546 c⁄° 
°d
::
°rög
& 
ˇŒ_des¸ùti⁄
Ëc⁄° 
ovîride
 {

1547 
ArgumítTu∂e
* 
¨gs
 = 
°©ic_ˇ°
<ArgumítTu∂e*>(
u¡y≥d_¨gs
);

1548  
	gResu…Hﬁdî
::
Pîf‹mDeÁu…A˘i⁄
(
this
, 
°d
::
move
(*
¨gs
),

1549 
ˇŒ_des¸ùti⁄
);

1556 
U¡y≥dA˘i⁄Resu…HﬁdîBa£
* 
U¡y≥dPîf‹mA˘i⁄
(

1557 c⁄° * 
u¡y≥d_a˘i⁄
, * 
u¡y≥d_¨gs
Ëc⁄° 
	govîride
 {

1560 c⁄° 
	gA˘i⁄
<
	gF
> 
	ga˘i⁄
 = *
°©ic_ˇ°
<c⁄° 
A˘i⁄
<
F
>*>(
u¡y≥d_a˘i⁄
);

1561 
ArgumítTu∂e
* 
	g¨gs
 = 
°©ic_ˇ°
<ArgumítTu∂e*>(
u¡y≥d_¨gs
);

1562  
	gResu…Hﬁdî
::
Pîf‹mA˘i⁄
(
a˘i⁄
, 
°d
::
move
(*
¨gs
));

1567 
CÀ¨DeÁu…A˘i⁄sLocked
(Ë
ovîride


1568 
GTEST_EXCLUSIVE_LOCK_REQUIRED_
(
g_gmock_muãx
) {

1569 
	gg_gmock_muãx
.
As£πHñd
();

1578 
U¡y≥dOnCÆlS≥cs
 
	g•ecs_to_dñëe
;

1579 
	gu¡y≥d_⁄_ˇŒ_•ecs_
.
sw≠
(
•ecs_to_dñëe
);

1581 
	gg_gmock_muãx
.
U∆ock
();

1582 
	gU¡y≥dOnCÆlS≥cs
::
c⁄°_ôî©‹
 
ô
 =

1583 
•ecs_to_dñëe
.
begö
();

1584 
	gô
 !
•ecs_to_dñëe
.
íd
(); ++it) {

1585 
dñëe
 
	g°©ic_ˇ°
<c⁄° 
	gOnCÆlS≥c
<
	gF
>*>(*
	gô
);

1590 
	gg_gmock_muãx
.
Lock
();

1596 
Resu…
 
Invoke
(
Args
... 
¨gs
Ë
GTEST_LOCK_EXCLUDED_
(
g_gmock_muãx
) {

1597 
ArgumítTu∂e
 
tu∂e
(
°d
::
f‹w¨d
<
Args
>(
¨gs
)...);

1598 
	g°d
::
unique_±r
<
Resu…Hﬁdî
> 
hﬁdî
(
DownCa°_
<ResultHolder*>(

1599 
this
->
U¡y≥dInvokeWôh
(
°©ic_ˇ°
<*>(&
tu∂e
))));

1600  
	ghﬁdî
->
Unwøp
();

1603 
	gMockS≥c
<
	gF
> 
Wôh
(
M©chî
<
Args
>... 
m
) {

1604  
	gMockS≥c
<
	gF
>(
	gthis
, ::
°d
::
make_tu∂e
(°d::
move
(
m
)...));

1607 
	g¥Ÿe˘ed
:

1608 
ãm∂©e
 <
ty≥«me
 
Fun˘i⁄
>

1609 
‰õnd
 
˛ass
 
MockS≥c
;

1611 
	gA˘i⁄Resu…Hﬁdî
<
	tResu…
> 
	tResu…Hﬁdî
;

1614 
	gOnCÆlS≥c
<
	gF
>& 
AddNewOnCÆlS≥c
(

1615 c⁄° * 
fûe
, 
löe
,

1616 c⁄° 
ArgumítM©chîTu∂e
& 
m
)

1617 
GTEST_LOCK_EXCLUDED_
(
g_gmock_muãx
) {

1618 
	gMock
::
Regi°îU£ByOnCÆlOrEx≥˘CÆl
(
MockObje˘
(), 
fûe
, 
löe
);

1619 
	gOnCÆlS≥c
<
	gF
>* c⁄° 
	g⁄_ˇŒ_•ec
 = 
√w
 
OnCÆlS≥c
<
F
>(
fûe
, 
	glöe
, 
	gm
);

1620 
	gu¡y≥d_⁄_ˇŒ_•ecs_
.
push_back
(
⁄_ˇŒ_•ec
);

1621  *
	g⁄_ˇŒ_•ec
;

1625 
	gTy≥dEx≥˘©i⁄
<
	gF
>& 
AddNewEx≥˘©i⁄
(c⁄° * 
fûe
, 
löe
,

1626 c⁄° 
°d
::
°rög
& 
sour˚_ãxt
,

1627 c⁄° 
ArgumítM©chîTu∂e
& 
m
)

1628 
GTEST_LOCK_EXCLUDED_
(
g_gmock_muãx
) {

1629 
	gMock
::
Regi°îU£ByOnCÆlOrEx≥˘CÆl
(
MockObje˘
(), 
fûe
, 
löe
);

1630 
	gTy≥dEx≥˘©i⁄
<
	gF
>* c⁄° 
	gex≥˘©i⁄
 =

1631 
√w
 
Ty≥dEx≥˘©i⁄
<
F
>(
this
, 
	gfûe
, 
	glöe
, 
	gsour˚_ãxt
, 
	gm
);

1632 c⁄° 
	g°d
::
sh¨ed_±r
<
Ex≥˘©i⁄Ba£
> 
u¡y≥d_ex≥˘©i⁄
(
ex≥˘©i⁄
);

1635 
	gu¡y≥d_ex≥˘©i⁄s_
.
push_back
(
u¡y≥d_ex≥˘©i⁄
);

1638 
Sequí˚
* c⁄° 
	gim∂icô_£quí˚
 = 
g_gmock_im∂icô_£quí˚
.
gë
();

1639 i‡(
	gim∂icô_£quí˚
 !
nuŒ±r
) {

1640 
im∂icô_£quí˚
->
AddEx≥˘©i⁄
(
Ex≥˘©i⁄
(
u¡y≥d_ex≥˘©i⁄
));

1643  *
	gex≥˘©i⁄
;

1646 
	g¥iv©e
:

1647 
ãm∂©e
 <
ty≥«me
 
Func
> 
‰õnd
 
˛ass
 
Ty≥dEx≥˘©i⁄
;

1654 
Des¸ibeDeÁu…A˘i⁄To
(c⁄° 
ArgumítTu∂e
& 
¨gs
,

1655 ::
°d
::
o°ªam
* 
os
) const {

1656 c⁄° 
OnCÆlS≥c
<
F
>* c⁄° 
•ec
 = 
FödOnCÆlS≥c
(
¨gs
);

1658 i‡(
	g•ec
 =
nuŒ±r
) {

1659 *
os
 << (
°d
::
is_void
<
Resu…
>::
vÆue
 ? "returning directly.\n"

1662 *
	gos
 << "taking defaultáction specifiedát:\n"

1663 << 
F‹m©FûeLoˇti⁄
(
•ec
->
fûe
(), s≥c->
löe
()) << "\n";

1670 
U¡y≥dDes¸ibeUnöãª°ögCÆl
(c⁄° * 
u¡y≥d_¨gs
,

1671 ::
°d
::
o°ªam
* 
os
Ëc⁄° 
ovîride


1672 
GTEST_LOCK_EXCLUDED_
(
g_gmock_muãx
) {

1673 c⁄° 
ArgumítTu∂e
& 
¨gs
 =

1674 *
°©ic_ˇ°
<c⁄° 
ArgumítTu∂e
*>(
u¡y≥d_¨gs
);

1675 *
	gos
 << "Uninteresting mock function call - ";

1676 
Des¸ibeDeÁu…A˘i⁄To
(
¨gs
, 
os
);

1677 *
	gos
 << " Fun˘i⁄ cÆl: " << 
Name
();

1678 
UnivîßlPröt
(
¨gs
, 
os
);

1697 c⁄° 
Ex≥˘©i⁄Ba£
* 
U¡y≥dFödM©chögEx≥˘©i⁄
(

1698 c⁄° * 
u¡y≥d_¨gs
, c⁄° ** 
u¡y≥d_a˘i⁄
, 
boﬁ
* 
is_ex˚ssive
,

1699 ::
°d
::
o°ªam
* 
wh©
, ::°d::o°ªam* 
why
Ë
ovîride


1700 
GTEST_LOCK_EXCLUDED_
(
g_gmock_muãx
) {

1701 c⁄° 
ArgumítTu∂e
& 
¨gs
 =

1702 *
°©ic_ˇ°
<c⁄° 
ArgumítTu∂e
*>(
u¡y≥d_¨gs
);

1703 
MuãxLock
 
l
(&
g_gmock_muãx
);

1704 
	gTy≥dEx≥˘©i⁄
<
	gF
>* 
	gexp
 = 
this
->
FödM©chögEx≥˘©i⁄Locked
(
¨gs
);

1705 i‡(
	gexp
 =
nuŒ±r
) {

1706 
this
->
F‹m©U√x≥˘edCÆlMesßgeLocked
(
¨gs
, 
wh©
, 
why
);

1707  
	gnuŒ±r
;

1713 *
	gis_ex˚ssive
 = 
exp
->
IsS©uøãd
();

1714 c⁄° 
	gA˘i⁄
<
	gF
>* 
	ga˘i⁄
 = 
exp
->
GëA˘i⁄F‹Argumíts
(
this
, 
¨gs
, 
wh©
, 
why
);

1715 i‡(
	ga˘i⁄
 !
nuŒ±r
 && 
a˘i⁄
->
IsDoDeÁu…
())

1716 
a˘i⁄
 = 
nuŒ±r
;

1717 *
	gu¡y≥d_a˘i⁄
 = 
a˘i⁄
;

1718  
	gexp
;

1722 
U¡y≥dPrötArgs
(c⁄° * 
u¡y≥d_¨gs
,

1723 ::
°d
::
o°ªam
* 
os
Ëc⁄° 
ovîride
 {

1724 c⁄° 
ArgumítTu∂e
& 
¨gs
 =

1725 *
°©ic_ˇ°
<c⁄° 
ArgumítTu∂e
*>(
u¡y≥d_¨gs
);

1726 
UnivîßlPröt
(
¨gs
, 
os
);

1731 
	gTy≥dEx≥˘©i⁄
<
	gF
>* 
FödM©chögEx≥˘©i⁄Locked
(

1732 c⁄° 
ArgumítTu∂e
& 
¨gs
) const

1733 
GTEST_EXCLUSIVE_LOCK_REQUIRED_
(
g_gmock_muãx
) {

1734 
	gg_gmock_muãx
.
As£πHñd
();

1737 
ty≥«me
 
	gU¡y≥dEx≥˘©i⁄s
::
c⁄°_ªvî£_ôî©‹
 
ô
 =

1738 
u¡y≥d_ex≥˘©i⁄s_
.
rbegö
();

1739 
	gô
 !
u¡y≥d_ex≥˘©i⁄s_
.
ªnd
(); ++it) {

1740 
	gTy≥dEx≥˘©i⁄
<
	gF
>* c⁄° 
	gexp
 =

1741 
°©ic_ˇ°
<
Ty≥dEx≥˘©i⁄
<
F
>*>(
ô
->
gë
());

1742 i‡(
	gexp
->
ShouldH™dÀArgumíts
(
¨gs
)) {

1743  
	gexp
;

1746  
	gnuŒ±r
;

1750 
F‹m©U√x≥˘edCÆlMesßgeLocked
(

1751 c⁄° 
ArgumítTu∂e
& 
¨gs
,

1752 ::
°d
::
o°ªam
* 
os
,

1753 ::
°d
::
o°ªam
* 
why
) const

1754 
GTEST_EXCLUSIVE_LOCK_REQUIRED_
(
g_gmock_muãx
) {

1755 
g_gmock_muãx
.
As£πHñd
();

1756 *
	gos
 << "\nUnexpected mock function call - ";

1757 
Des¸ibeDeÁu…A˘i⁄To
(
¨gs
, 
os
);

1758 
PrötTrõdEx≥˘©i⁄sLocked
(
¨gs
, 
why
);

1763 
PrötTrõdEx≥˘©i⁄sLocked
(

1764 c⁄° 
ArgumítTu∂e
& 
¨gs
,

1765 ::
°d
::
o°ªam
* 
why
) const

1766 
GTEST_EXCLUSIVE_LOCK_REQUIRED_
(
g_gmock_muãx
) {

1767 
g_gmock_muãx
.
As£πHñd
();

1768 c⁄° 
size_t
 
	gcou¡
 = 
u¡y≥d_ex≥˘©i⁄s_
.
size
();

1769 *
	gwhy
 << "GoogÀ MockÅrõdÅhêfﬁlowög " << 
	gcou¡
 << " "

1770 << (
	gcou¡
 == 1 ? "expectation, but it didn't match" :

1773 
size_t
 
	gi
 = 0; i < 
	gcou¡
; i++) {

1774 
	gTy≥dEx≥˘©i⁄
<
	gF
>* c⁄° 
	gex≥˘©i⁄
 =

1775 
°©ic_ˇ°
<
Ty≥dEx≥˘©i⁄
<
F
>*>(
u¡y≥d_ex≥˘©i⁄s_
[
i
].
gë
());

1776 *
	gwhy
 << "\n";

1777 
	gex≥˘©i⁄
->
Des¸ibeLoˇti⁄To
(
why
);

1778 i‡(
	gcou¡
 > 1) {

1779 *
	gwhy
 << "åõdÉx≥˘©i⁄ #" << 
	gi
 << ": ";

1781 *
	gwhy
 << 
	gex≥˘©i⁄
->
sour˚_ãxt
() << "...\n";

1782 
	gex≥˘©i⁄
->
Ex∂aöM©chResu…To
(
¨gs
, 
why
);

1783 
	gex≥˘©i⁄
->
Des¸ibeCÆlCou¡To
(
why
);

1790 
Rï‹tUnöãª°ögCÆl
(
CÆlRó˘i⁄
 
ªa˘i⁄
, c⁄° 
°d
::
°rög
& 
msg
);

1794 
«me•a˚
 
	göã∫Æ
 {

1796 
	gãm∂©e
 <
ty≥«me
 
	gF
>

1797 
˛ass
 
	gMockFun˘i⁄
;

1799 
	gãm∂©e
 <
ty≥«me
 
	gR
, 
	gty≥«me
... 
	gArgs
>

1800 
˛ass
 
	gMockFun˘i⁄
<
R
(
Args
...)> {

1801 
	gpublic
:

1802 
MockFun˘i⁄
(c⁄° MockFun˘i⁄&Ë
dñëe
;

1803 
	gMockFun˘i⁄
& 
	g›î©‹
=(c⁄° 
MockFun˘i⁄
&Ë
dñëe
;

1805 
	g°d
::
fun˘i⁄
<
R
(
Args
...)> 
AsStdFun˘i⁄
() {

1806  [
this
](
Args
... 
¨gs
Ë-> 
R
 {

1807  
this
->
CÆl
(
°d
::
f‹w¨d
<
Args
>(
¨gs
)...);

1812 
R
 
CÆl
(
Args
... 
¨gs
) {

1813 
	gmock_
.
SëOw√rAndName
(
this
, "Call");

1814  
	gmock_
.
Invoke
(
°d
::
f‹w¨d
<
Args
>(
¨gs
)...);

1817 
	gMockS≥c
<
R
(
Args
...)> 
gmock_CÆl
(
M©chî
<Args>... 
m
) {

1818 
	gmock_
.
Regi°îOw√r
(
this
);

1819  
	gmock_
.
Wôh
(
°d
::
move
(
m
)...);

1822 
	gMockS≥c
<
R
(
Args
...)> 
gmock_CÆl
(c⁄° 
WôhoutM©chîs
&, R (*)(Args...)) {

1823  
	gthis
->
gmock_CÆl
(::
ã°ög
::
A
<
Args
>()...);

1826 
	g¥Ÿe˘ed
:

1827 
MockFun˘i⁄
() = ;

1828 ~
MockFun˘i⁄
() = ;

1830 
	g¥iv©e
:

1831 
Fun˘i⁄Mockî
<
R
(
Args
...)> 
mock_
;

1846 
	gãm∂©e
 <
ty≥«me
 
	gF
, 
	gty≥«me
 = >

1847 
Sig«tuªOf
;

1849 
	gãm∂©e
 <
ty≥«me
 
	gR
, 
	gty≥«me
... 
	gArgs
>

1850 
	gSig«tuªOf
<
R
(
Args
...)> {

1851 
usög
 
	gty≥
 = 
R
(
Args
...);

1854 
	gãm∂©e
 <ãm∂©ê<
	gty≥«me
> 
˛ass
 
	gC
, 
ty≥«me
 
	gF
>

1855 
	gSig«tuªOf
<
	gC
<
	gF
>,

1856 
ty≥«me
 
	g°d
::
íabÀ_if
<
°d
::
is_fun˘i⁄
<
F
>::
vÆue
>::
ty≥
>

1857 : 
Sig«tuªOf
<
F
> {};

1859 
	gãm∂©e
 <
ty≥«me
 
	gF
>

1860 
usög
 
	gSig«tuªOfT
 = 
ty≥«me
 
Sig«tuªOf
<
F
>::
ty≥
;

1924 
	gãm∂©e
 <
ty≥«me
 
	gF
>

1925 
˛ass
 
	gMockFun˘i⁄
 : 
public
 
öã∫Æ
::
MockFun˘i⁄
<öã∫Æ::
Sig«tuªOfT
<
F
>> {

1926 
usög
 
Ba£
 = 
öã∫Æ
::
MockFun˘i⁄
<öã∫Æ::
Sig«tuªOfT
<
F
>>;

1928 
	gpublic
:

1929 
usög
 
Ba£
::Base;

1937 
usög
 
	göã∫Æ
::
MockS≥c
;

1954 
	gãm∂©e
 <
ty≥«me
 
	gT
>

1955 
ölöe
 c⁄° 
	gT
& 
	$C⁄°
(c⁄° 
T
& 
x
Ë{  x; 
	}
}

1958 
ölöe
 
	gEx≥˘©i⁄
::
	$Ex≥˘©i⁄
(
öã∫Æ
::
Ex≥˘©i⁄Ba£
& 
exp
)

1959 : 
	`ex≥˘©i⁄_ba£_
(
exp
.
	`GëH™dÀ
().
	$ex≥˘©i⁄_ba£
()Ë{
	}
}

1963 
	$GTEST_DISABLE_MSC_WARNINGS_POP_
()

2027 
	#GMOCK_ON_CALL_IMPL_
(
mock_ex¥
, 
Sëãr
, 
ˇŒ
) \

2028 ((
mock_ex¥
).
gmock_
##
ˇŒ
)(::
ã°ög
::
öã∫Æ
::
	`GëWôhoutM©chîs
(), \

2029 
nuŒ±r
) \

2030 .
	`Sëãr
(
__FILE__
, 
__LINE__
, #mock_ex¥, #ˇŒ)

	)

2032 
	#ON_CALL
(
obj
, 
ˇŒ
) \

2033 
	`GMOCK_ON_CALL_IMPL_
(
obj
, 
I¡î«lDeÁu…A˘i⁄SëAt
, 
ˇŒ
)

	)

2035 
	#EXPECT_CALL
(
obj
, 
ˇŒ
) \

2036 
	`GMOCK_ON_CALL_IMPL_
(
obj
, 
I¡î«lEx≥˘edAt
, 
ˇŒ
)

	)

	@/usr/include/gmock/internal/custom/gmock-generated-actions.h

3 #i‚de‡
GOOGLEMOCK_INCLUDE_GMOCK_INTERNAL_CUSTOM_GMOCK_GENERATED_ACTIONS_H_


4 
	#GOOGLEMOCK_INCLUDE_GMOCK_INTERNAL_CUSTOM_GMOCK_GENERATED_ACTIONS_H_


	)

	@/usr/include/gmock/internal/custom/gmock-matchers.h

34 #i‚de‡
GOOGLEMOCK_INCLUDE_GMOCK_INTERNAL_CUSTOM_GMOCK_MATCHERS_H_


35 
	#GOOGLEMOCK_INCLUDE_GMOCK_INTERNAL_CUSTOM_GMOCK_MATCHERS_H_


	)

	@/usr/include/gmock/internal/gmock-port.h

40 #i‚de‡
GOOGLEMOCK_INCLUDE_GMOCK_INTERNAL_GMOCK_PORT_H_


41 
	#GOOGLEMOCK_INCLUDE_GMOCK_INTERNAL_GMOCK_PORT_H_


	)

43 
	~<as£π.h
>

44 
	~<°dlib.h
>

45 
	~<c°döt
>

46 
	~<io°ªam
>

56 
	~"gã°/öã∫Æ/gã°-p‹t.h
"

57 
	~"gmock/öã∫Æ/cu°om/gmock-p‹t.h
"

61 #i‡
deföed
(
_MSC_VER
) && _MSC_VER < 1900

67 
	#GMOCK_FLAG
(
«me
Ë
FLAGS_gmock_
##
	)
name

69 #i‡!
deföed
(
GMOCK_DECLARE_boﬁ_
)

72 
	#GMOCK_DECLARE_boﬁ_
(
«me
Ë
GTEST_API_
 
boﬁ
 
	`GMOCK_FLAG
“ame)

	)

73 
	#GMOCK_DECLARE_öt32_
(
«me
Ë
GTEST_API_
 
öt32_t
 
	`GMOCK_FLAG
“ame)

	)

74 
	#GMOCK_DECLARE_°rög_
(
«me
) \

75 
GTEST_API_
 ::
°d
::
°rög
 
	`GMOCK_FLAG
(
«me
)

	)

78 
	#GMOCK_DEFINE_boﬁ_
(
«me
, 
deÁu…_vÆ
, 
doc
) \

79 
GTEST_API_
 
boﬁ
 
	`GMOCK_FLAG
(
«me
Ë(
deÁu…_vÆ
)

	)

80 
	#GMOCK_DEFINE_öt32_
(
«me
, 
deÁu…_vÆ
, 
doc
) \

81 
GTEST_API_
 
öt32_t
 
	`GMOCK_FLAG
(
«me
Ë(
deÁu…_vÆ
)

	)

82 
	#GMOCK_DEFINE_°rög_
(
«me
, 
deÁu…_vÆ
, 
doc
) \

83 
GTEST_API_
 ::
°d
::
°rög
 
	`GMOCK_FLAG
(
«me
Ë(
deÁu…_vÆ
)

	)

	@/usr/include/gmock/internal/gmock-pp.h

1 #i‚de‡
GOOGLEMOCK_INCLUDE_GMOCK_INTERNAL_GMOCK_PP_H_


2 
	#GOOGLEMOCK_INCLUDE_GMOCK_INTERNAL_GMOCK_PP_H_


	)

5 
	#GMOCK_PP_CAT
(
_1
, 
_2
Ë
	`GMOCK_PP_INTERNAL_CAT
(_1, _2)

	)

8 
	#GMOCK_PP_STRINGIZE
(...Ë
	`GMOCK_PP_INTERNAL_STRINGIZE
(
__VA_ARGS__
)

	)

11 
	#GMOCK_PP_EMPTY
(...)

	)

14 
	#GMOCK_PP_COMMA
(...Ë,

	)

17 
	#GMOCK_PP_IDENTITY
(
_1
Ë
	)
_1

29 
	#GMOCK_PP_NARG
(...) \

30 
	`GMOCK_PP_INTERNAL_16TH
( \

31 (
__VA_ARGS__
, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0))

	)

35 
	#GMOCK_PP_HAS_COMMA
(...) \

36 
	`GMOCK_PP_INTERNAL_16TH
( \

37 (
__VA_ARGS__
, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0))

	)

40 
	#GMOCK_PP_HEAD
(...Ë
	`GMOCK_PP_INTERNAL_HEAD
((
__VA_ARGS__
, 
unu£dArg
))

	)

44 
	#GMOCK_PP_TAIL
(...Ë
	`GMOCK_PP_INTERNAL_TAIL
((
__VA_ARGS__
))

	)

47 
	#GMOCK_PP_VARIADIC_CALL
(
_Ma¸o
, ...) \

48 
	`GMOCK_PP_IDENTITY
( \

49 
	`GMOCK_PP_CAT
(
_Ma¸o
, 
	`GMOCK_PP_NARG
(
__VA_ARGS__
))(__VA_ARGS__))

	)

79 
	#GMOCK_PP_IS_EMPTY
(...) \

80 
	`GMOCK_PP_INTERNAL_IS_EMPTY
(
	`GMOCK_PP_HAS_COMMA
(
__VA_ARGS__
), \

81 
	`GMOCK_PP_HAS_COMMA
(
GMOCK_PP_COMMA
 
__VA_ARGS__
), \

82 
	`GMOCK_PP_HAS_COMMA
(
	`__VA_ARGS__
()), \

83 
	`GMOCK_PP_HAS_COMMA
(
GMOCK_PP_COMMA
 
	`__VA_ARGS__
()))

	)

86 
	#GMOCK_PP_IF
(
_C⁄d
, 
_Thí
, 
_El£
) \

87 
	`GMOCK_PP_CAT
(
GMOCK_PP_INTERNAL_IF_
, 
_C⁄d
)(
_Thí
, 
_El£
)

	)

94 
	#GMOCK_PP_GENERIC_IF
(
_C⁄d
, 
_Thí
, 
_El£
) \

95 
	`GMOCK_PP_REMOVE_PARENS
(
	`GMOCK_PP_IF
(
_C⁄d
, 
_Thí
, 
_El£
))

	)

110 
	#GMOCK_PP_NARG0
(...) \

111 
	`GMOCK_PP_IF
(
	`GMOCK_PP_IS_EMPTY
(
__VA_ARGS__
), 0, 
	`GMOCK_PP_NARG
(__VA_ARGS__))

	)

115 
	#GMOCK_PP_IS_BEGIN_PARENS
(...) \

116 
	`GMOCK_PP_HEAD
(
	`GMOCK_PP_CAT
(
GMOCK_PP_INTERNAL_IBP_IS_VARIADIC_R_
, \

117 
GMOCK_PP_INTERNAL_IBP_IS_VARIADIC_C
 
__VA_ARGS__
))

	)

120 
	#GMOCK_PP_IS_ENCLOSED_PARENS
(...) \

121 
	`GMOCK_PP_IF
(
	`GMOCK_PP_IS_BEGIN_PARENS
(
__VA_ARGS__
), \

122 
	`GMOCK_PP_IS_EMPTY
(
GMOCK_PP_EMPTY
 
__VA_ARGS__
), 0)

	)

125 
	#GMOCK_PP_REMOVE_PARENS
(...Ë
GMOCK_PP_INTERNAL_REMOVE_PARENS
 
__VA_ARGS__


	)

131 
	#GMOCK_PP_FOR_EACH
(
_Ma¸o
, 
_D©a
, 
_Tu∂e
) \

132 
	`GMOCK_PP_CAT
(
GMOCK_PP_INTERNAL_FOR_EACH_IMPL_
, 
GMOCK_PP_NARG0
 
_Tu∂e
) \

133 (0, 
_Ma¸o
, 
_D©a
, 
_Tu∂e
)

	)

139 
	#GMOCK_PP_REPEAT
(
_Ma¸o
, 
_D©a
, 
_N
) \

140 
	`GMOCK_PP_CAT
(
GMOCK_PP_INTERNAL_FOR_EACH_IMPL_
, 
_N
) \

141 (0, 
_Ma¸o
, 
_D©a
, 
GMOCK_PP_INTENRAL_EMPTY_TUPLE
)

	)

144 
	#GMOCK_PP_INC
(
_i
Ë
	`GMOCK_PP_CAT
(
GMOCK_PP_INTERNAL_INC_
, _i)

	)

147 
	#GMOCK_PP_COMMA_IF
(
_i
Ë
	`GMOCK_PP_CAT
(
GMOCK_PP_INTERNAL_COMMA_IF_
, _i)

	)

151 
	#GMOCK_PP_INTENRAL_EMPTY_TUPLE
 (, , , , , , , , , , , , , , , )

	)

152 
	#GMOCK_PP_INTERNAL_CAT
(
_1
, 
_2
Ë_1##
	)
_2

153 
	#GMOCK_PP_INTERNAL_STRINGIZE
(...Ë#__VA_ARGS__

	)

154 
	#GMOCK_PP_INTERNAL_CAT_5
(
_1
, 
_2
, 
_3
, 
_4
, 
_5
Ë_1##_2##_3##_4##
	)
_5

155 
	#GMOCK_PP_INTERNAL_IS_EMPTY
(
_1
, 
_2
, 
_3
, 
_4
) \

156 
	`GMOCK_PP_HAS_COMMA
(
	`GMOCK_PP_INTERNAL_CAT_5
(
GMOCK_PP_INTERNAL_IS_EMPTY_CASE_
, \

157 
_1
, 
_2
, 
_3
, 
_4
))

	)

158 
	#GMOCK_PP_INTERNAL_IS_EMPTY_CASE_0001
 ,

	)

159 
	#GMOCK_PP_INTERNAL_IF_1
(
_Thí
, 
_El£
Ë
	)
_Then

160 
	#GMOCK_PP_INTERNAL_IF_0
(
_Thí
, 
_El£
Ë
	)
_Else

167 
	#GMOCK_PP_INTERNAL_INTERNAL_16TH
(
_1
, 
_2
, 
_3
, 
_4
, 
_5
, 
_6
, 
_7
, 
_8
, 
_9
, \

168 
_10
, 
_11
, 
_12
, 
_13
, 
_14
, 
_15
, 
_16
, \

170 
_16


	)

171 
	#GMOCK_PP_INTERNAL_16TH
(
_Args
) \

172 
	`GMOCK_PP_IDENTITY
(
GMOCK_PP_INTERNAL_INTERNAL_16TH
 
_Args
)

	)

173 
	#GMOCK_PP_INTERNAL_INTERNAL_HEAD
(
_1
, ...Ë
	)
_1

174 
	#GMOCK_PP_INTERNAL_HEAD
(
_Args
) \

175 
	`GMOCK_PP_IDENTITY
(
GMOCK_PP_INTERNAL_INTERNAL_HEAD
 
_Args
)

	)

176 
	#GMOCK_PP_INTERNAL_INTERNAL_TAIL
(
_1
, ...Ë
__VA_ARGS__


	)

177 
	#GMOCK_PP_INTERNAL_TAIL
(
_Args
) \

178 
	`GMOCK_PP_IDENTITY
(
GMOCK_PP_INTERNAL_INTERNAL_TAIL
 
_Args
)

	)

180 
	#GMOCK_PP_INTERNAL_IBP_IS_VARIADIC_C
(...Ë1 
_


	)

181 
	#GMOCK_PP_INTERNAL_IBP_IS_VARIADIC_R_1
 1,

	)

182 
	#GMOCK_PP_INTERNAL_IBP_IS_VARIADIC_R_GMOCK_PP_INTERNAL_IBP_IS_VARIADIC_C
 \

183 0,

	)

184 
	#GMOCK_PP_INTERNAL_REMOVE_PARENS
(...Ë
__VA_ARGS__


	)

185 
	#GMOCK_PP_INTERNAL_INC_0
 1

	)

186 
	#GMOCK_PP_INTERNAL_INC_1
 2

	)

187 
	#GMOCK_PP_INTERNAL_INC_2
 3

	)

188 
	#GMOCK_PP_INTERNAL_INC_3
 4

	)

189 
	#GMOCK_PP_INTERNAL_INC_4
 5

	)

190 
	#GMOCK_PP_INTERNAL_INC_5
 6

	)

191 
	#GMOCK_PP_INTERNAL_INC_6
 7

	)

192 
	#GMOCK_PP_INTERNAL_INC_7
 8

	)

193 
	#GMOCK_PP_INTERNAL_INC_8
 9

	)

194 
	#GMOCK_PP_INTERNAL_INC_9
 10

	)

195 
	#GMOCK_PP_INTERNAL_INC_10
 11

	)

196 
	#GMOCK_PP_INTERNAL_INC_11
 12

	)

197 
	#GMOCK_PP_INTERNAL_INC_12
 13

	)

198 
	#GMOCK_PP_INTERNAL_INC_13
 14

	)

199 
	#GMOCK_PP_INTERNAL_INC_14
 15

	)

200 
	#GMOCK_PP_INTERNAL_INC_15
 16

	)

201 
	#GMOCK_PP_INTERNAL_COMMA_IF_0


	)

202 
	#GMOCK_PP_INTERNAL_COMMA_IF_1
 ,

	)

203 
	#GMOCK_PP_INTERNAL_COMMA_IF_2
 ,

	)

204 
	#GMOCK_PP_INTERNAL_COMMA_IF_3
 ,

	)

205 
	#GMOCK_PP_INTERNAL_COMMA_IF_4
 ,

	)

206 
	#GMOCK_PP_INTERNAL_COMMA_IF_5
 ,

	)

207 
	#GMOCK_PP_INTERNAL_COMMA_IF_6
 ,

	)

208 
	#GMOCK_PP_INTERNAL_COMMA_IF_7
 ,

	)

209 
	#GMOCK_PP_INTERNAL_COMMA_IF_8
 ,

	)

210 
	#GMOCK_PP_INTERNAL_COMMA_IF_9
 ,

	)

211 
	#GMOCK_PP_INTERNAL_COMMA_IF_10
 ,

	)

212 
	#GMOCK_PP_INTERNAL_COMMA_IF_11
 ,

	)

213 
	#GMOCK_PP_INTERNAL_COMMA_IF_12
 ,

	)

214 
	#GMOCK_PP_INTERNAL_COMMA_IF_13
 ,

	)

215 
	#GMOCK_PP_INTERNAL_COMMA_IF_14
 ,

	)

216 
	#GMOCK_PP_INTERNAL_COMMA_IF_15
 ,

	)

217 
	#GMOCK_PP_INTERNAL_CALL_MACRO
(
_Ma¸o
, 
_i
, 
_D©a
, 
_ñemít
) \

218 
	`_Ma¸o
(
_i
, 
_D©a
, 
_ñemít
)

	)

219 
	#GMOCK_PP_INTERNAL_FOR_EACH_IMPL_0
(
_i
, 
_Ma¸o
, 
_D©a
, 
_Tu∂e
)

	)

220 
	#GMOCK_PP_INTERNAL_FOR_EACH_IMPL_1
(
_i
, 
_Ma¸o
, 
_D©a
, 
_Tu∂e
) \

221 
	`GMOCK_PP_INTERNAL_CALL_MACRO
(
_Ma¸o
, 
_i
, 
_D©a
, 
GMOCK_PP_HEAD
 
_Tu∂e
)

	)

222 
	#GMOCK_PP_INTERNAL_FOR_EACH_IMPL_2
(
_i
, 
_Ma¸o
, 
_D©a
, 
_Tu∂e
) \

223 
	`GMOCK_PP_INTERNAL_CALL_MACRO
(
_Ma¸o
, 
_i
, 
_D©a
, 
GMOCK_PP_HEAD
 
_Tu∂e
) \

224 
	`GMOCK_PP_INTERNAL_FOR_EACH_IMPL_1
(
	`GMOCK_PP_INC
(
_i
), 
_Ma¸o
, 
_D©a
, \

225 (
GMOCK_PP_TAIL
 
_Tu∂e
))

	)

226 
	#GMOCK_PP_INTERNAL_FOR_EACH_IMPL_3
(
_i
, 
_Ma¸o
, 
_D©a
, 
_Tu∂e
) \

227 
	`GMOCK_PP_INTERNAL_CALL_MACRO
(
_Ma¸o
, 
_i
, 
_D©a
, 
GMOCK_PP_HEAD
 
_Tu∂e
) \

228 
	`GMOCK_PP_INTERNAL_FOR_EACH_IMPL_2
(
	`GMOCK_PP_INC
(
_i
), 
_Ma¸o
, 
_D©a
, \

229 (
GMOCK_PP_TAIL
 
_Tu∂e
))

	)

230 
	#GMOCK_PP_INTERNAL_FOR_EACH_IMPL_4
(
_i
, 
_Ma¸o
, 
_D©a
, 
_Tu∂e
) \

231 
	`GMOCK_PP_INTERNAL_CALL_MACRO
(
_Ma¸o
, 
_i
, 
_D©a
, 
GMOCK_PP_HEAD
 
_Tu∂e
) \

232 
	`GMOCK_PP_INTERNAL_FOR_EACH_IMPL_3
(
	`GMOCK_PP_INC
(
_i
), 
_Ma¸o
, 
_D©a
, \

233 (
GMOCK_PP_TAIL
 
_Tu∂e
))

	)

234 
	#GMOCK_PP_INTERNAL_FOR_EACH_IMPL_5
(
_i
, 
_Ma¸o
, 
_D©a
, 
_Tu∂e
) \

235 
	`GMOCK_PP_INTERNAL_CALL_MACRO
(
_Ma¸o
, 
_i
, 
_D©a
, 
GMOCK_PP_HEAD
 
_Tu∂e
) \

236 
	`GMOCK_PP_INTERNAL_FOR_EACH_IMPL_4
(
	`GMOCK_PP_INC
(
_i
), 
_Ma¸o
, 
_D©a
, \

237 (
GMOCK_PP_TAIL
 
_Tu∂e
))

	)

238 
	#GMOCK_PP_INTERNAL_FOR_EACH_IMPL_6
(
_i
, 
_Ma¸o
, 
_D©a
, 
_Tu∂e
) \

239 
	`GMOCK_PP_INTERNAL_CALL_MACRO
(
_Ma¸o
, 
_i
, 
_D©a
, 
GMOCK_PP_HEAD
 
_Tu∂e
) \

240 
	`GMOCK_PP_INTERNAL_FOR_EACH_IMPL_5
(
	`GMOCK_PP_INC
(
_i
), 
_Ma¸o
, 
_D©a
, \

241 (
GMOCK_PP_TAIL
 
_Tu∂e
))

	)

242 
	#GMOCK_PP_INTERNAL_FOR_EACH_IMPL_7
(
_i
, 
_Ma¸o
, 
_D©a
, 
_Tu∂e
) \

243 
	`GMOCK_PP_INTERNAL_CALL_MACRO
(
_Ma¸o
, 
_i
, 
_D©a
, 
GMOCK_PP_HEAD
 
_Tu∂e
) \

244 
	`GMOCK_PP_INTERNAL_FOR_EACH_IMPL_6
(
	`GMOCK_PP_INC
(
_i
), 
_Ma¸o
, 
_D©a
, \

245 (
GMOCK_PP_TAIL
 
_Tu∂e
))

	)

246 
	#GMOCK_PP_INTERNAL_FOR_EACH_IMPL_8
(
_i
, 
_Ma¸o
, 
_D©a
, 
_Tu∂e
) \

247 
	`GMOCK_PP_INTERNAL_CALL_MACRO
(
_Ma¸o
, 
_i
, 
_D©a
, 
GMOCK_PP_HEAD
 
_Tu∂e
) \

248 
	`GMOCK_PP_INTERNAL_FOR_EACH_IMPL_7
(
	`GMOCK_PP_INC
(
_i
), 
_Ma¸o
, 
_D©a
, \

249 (
GMOCK_PP_TAIL
 
_Tu∂e
))

	)

250 
	#GMOCK_PP_INTERNAL_FOR_EACH_IMPL_9
(
_i
, 
_Ma¸o
, 
_D©a
, 
_Tu∂e
) \

251 
	`GMOCK_PP_INTERNAL_CALL_MACRO
(
_Ma¸o
, 
_i
, 
_D©a
, 
GMOCK_PP_HEAD
 
_Tu∂e
) \

252 
	`GMOCK_PP_INTERNAL_FOR_EACH_IMPL_8
(
	`GMOCK_PP_INC
(
_i
), 
_Ma¸o
, 
_D©a
, \

253 (
GMOCK_PP_TAIL
 
_Tu∂e
))

	)

254 
	#GMOCK_PP_INTERNAL_FOR_EACH_IMPL_10
(
_i
, 
_Ma¸o
, 
_D©a
, 
_Tu∂e
) \

255 
	`GMOCK_PP_INTERNAL_CALL_MACRO
(
_Ma¸o
, 
_i
, 
_D©a
, 
GMOCK_PP_HEAD
 
_Tu∂e
) \

256 
	`GMOCK_PP_INTERNAL_FOR_EACH_IMPL_9
(
	`GMOCK_PP_INC
(
_i
), 
_Ma¸o
, 
_D©a
, \

257 (
GMOCK_PP_TAIL
 
_Tu∂e
))

	)

258 
	#GMOCK_PP_INTERNAL_FOR_EACH_IMPL_11
(
_i
, 
_Ma¸o
, 
_D©a
, 
_Tu∂e
) \

259 
	`GMOCK_PP_INTERNAL_CALL_MACRO
(
_Ma¸o
, 
_i
, 
_D©a
, 
GMOCK_PP_HEAD
 
_Tu∂e
) \

260 
	`GMOCK_PP_INTERNAL_FOR_EACH_IMPL_10
(
	`GMOCK_PP_INC
(
_i
), 
_Ma¸o
, 
_D©a
, \

261 (
GMOCK_PP_TAIL
 
_Tu∂e
))

	)

262 
	#GMOCK_PP_INTERNAL_FOR_EACH_IMPL_12
(
_i
, 
_Ma¸o
, 
_D©a
, 
_Tu∂e
) \

263 
	`GMOCK_PP_INTERNAL_CALL_MACRO
(
_Ma¸o
, 
_i
, 
_D©a
, 
GMOCK_PP_HEAD
 
_Tu∂e
) \

264 
	`GMOCK_PP_INTERNAL_FOR_EACH_IMPL_11
(
	`GMOCK_PP_INC
(
_i
), 
_Ma¸o
, 
_D©a
, \

265 (
GMOCK_PP_TAIL
 
_Tu∂e
))

	)

266 
	#GMOCK_PP_INTERNAL_FOR_EACH_IMPL_13
(
_i
, 
_Ma¸o
, 
_D©a
, 
_Tu∂e
) \

267 
	`GMOCK_PP_INTERNAL_CALL_MACRO
(
_Ma¸o
, 
_i
, 
_D©a
, 
GMOCK_PP_HEAD
 
_Tu∂e
) \

268 
	`GMOCK_PP_INTERNAL_FOR_EACH_IMPL_12
(
	`GMOCK_PP_INC
(
_i
), 
_Ma¸o
, 
_D©a
, \

269 (
GMOCK_PP_TAIL
 
_Tu∂e
))

	)

270 
	#GMOCK_PP_INTERNAL_FOR_EACH_IMPL_14
(
_i
, 
_Ma¸o
, 
_D©a
, 
_Tu∂e
) \

271 
	`GMOCK_PP_INTERNAL_CALL_MACRO
(
_Ma¸o
, 
_i
, 
_D©a
, 
GMOCK_PP_HEAD
 
_Tu∂e
) \

272 
	`GMOCK_PP_INTERNAL_FOR_EACH_IMPL_13
(
	`GMOCK_PP_INC
(
_i
), 
_Ma¸o
, 
_D©a
, \

273 (
GMOCK_PP_TAIL
 
_Tu∂e
))

	)

274 
	#GMOCK_PP_INTERNAL_FOR_EACH_IMPL_15
(
_i
, 
_Ma¸o
, 
_D©a
, 
_Tu∂e
) \

275 
	`GMOCK_PP_INTERNAL_CALL_MACRO
(
_Ma¸o
, 
_i
, 
_D©a
, 
GMOCK_PP_HEAD
 
_Tu∂e
) \

276 
	`GMOCK_PP_INTERNAL_FOR_EACH_IMPL_14
(
	`GMOCK_PP_INC
(
_i
), 
_Ma¸o
, 
_D©a
, \

277 (
GMOCK_PP_TAIL
 
_Tu∂e
))

	)

	@/usr/include/gtest/internal/custom/gtest-printers.h

39 #i‚de‡
GOOGLETEST_INCLUDE_GTEST_INTERNAL_CUSTOM_GTEST_PRINTERS_H_


40 
	#GOOGLETEST_INCLUDE_GTEST_INTERNAL_CUSTOM_GTEST_PRINTERS_H_


	)

	@/usr/include/gtest/internal/gtest-death-test-internal.h

36 #i‚de‡
GOOGLETEST_INCLUDE_GTEST_INTERNAL_GTEST_DEATH_TEST_INTERNAL_H_


37 
	#GOOGLETEST_INCLUDE_GTEST_INTERNAL_GTEST_DEATH_TEST_INTERNAL_H_


	)

39 
	~"gã°/gã°-m©chîs.h
"

40 
	~"gã°/öã∫Æ/gã°-öã∫Æ.h
"

42 
	~<°dio.h
>

43 
	~<mem‹y
>

45 
«me•a˚
 
	gã°ög
 {

46 
«me•a˚
 
	göã∫Æ
 {

48 
GTEST_DECLARE_°rög_
(
öã∫Æ_run_dóth_ã°
);

51 c⁄° 
	gkDóthTe°StyÀFœg
[] = "death_test_style";

52 c⁄° 
	gkDóthTe°U£F‹k
[] = "death_test_use_fork";

53 c⁄° 
	gkI¡î«lRunDóthTe°Fœg
[] = "internal_run_death_test";

55 #i‡
GTEST_HAS_DEATH_TEST


57 
GTEST_DISABLE_MSC_WARNINGS_PUSH_
(4251 \

73 ˛as†
	cGTEST_API_
 
	gDóthTe°
 {

74 
	gpublic
:

83 
boﬁ
 
Cª©e
(c⁄° * 
°©emít
, 
M©chî
<c⁄° 
°d
::
°rög
&> 
m©chî
,

84 c⁄° * 
fûe
, 
löe
, 
DóthTe°
** 
ã°
);

85 
DóthTe°
();

86 
	gvútuÆ
 ~
DóthTe°
() { }

89 ˛as†
	cRëu∫Sítöñ
 {

90 
	gpublic
:

91 
ex∂icô
 
Rëu∫Sítöñ
(
DóthTe°
* 
ã°
Ë: 
ã°_
(test) { }

92 ~
Rëu∫Sítöñ
(Ë{ 
ã°_
->
Ab‹t
(
TEST_ENCOUNTERED_RETURN_STATEMENT
); }

93 
	g¥iv©e
:

94 
DóthTe°
* c⁄° 
ã°_
;

95 
GTEST_DISALLOW_COPY_AND_ASSIGN_
(
Rëu∫Sítöñ
);

96 } 
	gGTEST_ATTRIBUTE_UNUSED_
;

103 
	eTe°Rﬁe
 { 
	gOVERSEE_TEST
, 
	gEXECUTE_TEST
 };

106 
	eAb‹tRós⁄
 {

107 
	gTEST_ENCOUNTERED_RETURN_STATEMENT
,

108 
	gTEST_THREW_EXCEPTION
,

109 
	gTEST_DID_NOT_DIE


113 
vútuÆ
 
Te°Rﬁe
 
AssumeRﬁe
() = 0;

116 
vútuÆ
 
Waô
() = 0;

125 
vútuÆ
 
boﬁ
 
Pas£d
(boﬁ 
exô_°©us_ok
) = 0;

128 
vútuÆ
 
Ab‹t
(
Ab‹tRós⁄
 
ªas⁄
) = 0;

132 c⁄° * 
La°Mesßge
();

134 
£t_œ°_dóth_ã°_mesßge
(c⁄° 
°d
::
°rög
& 
mesßge
);

136 
	g¥iv©e
:

138 
°d
::
°rög
 
œ°_dóth_ã°_mesßge_
;

140 
GTEST_DISALLOW_COPY_AND_ASSIGN_
(
DóthTe°
);

143 
GTEST_DISABLE_MSC_WARNINGS_POP_
()

146 ˛as†
	cDóthTe°Fa˘‹y
 {

147 
	gpublic
:

148 
vútuÆ
 ~
DóthTe°Fa˘‹y
() { }

149 
vútuÆ
 
boﬁ
 
Cª©e
(c⁄° * 
°©emít
,

150 
M©chî
<c⁄° 
°d
::
°rög
&> 
m©chî
, c⁄° * 
fûe
,

151 
löe
, 
DóthTe°
** 
ã°
) = 0;

155 ˛as†
	cDeÁu…DóthTe°Fa˘‹y
 : 
public
 
DóthTe°Fa˘‹y
 {

156 
public
:

157 
boﬁ
 
Cª©e
(c⁄° * 
°©emít
, 
M©chî
<c⁄° 
°d
::
°rög
&> 
m©chî
,

158 c⁄° * 
fûe
, 
löe
, 
DóthTe°
** 
ã°
Ë
	govîride
;

163 
GTEST_API_
 
boﬁ
 
ExôedUnsuc˚ssfuŒy
(
exô_°©us
);

168 
ölöe
 
	gM©chî
<c⁄° ::
°d
::
°rög
&> 
MakeDóthTe°M©chî
(

169 ::
ã°ög
::
öã∫Æ
::
RE
 
ªgex
) {

170  
C⁄èösRegex
(
ªgex
.
∑âîn
());

172 
ölöe
 
	gM©chî
<c⁄° ::
°d
::
°rög
&> 
MakeDóthTe°M©chî
(c⁄° * 
ªgex
) {

173  
C⁄èösRegex
(
ªgex
);

175 
ölöe
 
	gM©chî
<c⁄° ::
°d
::
°rög
&> 
MakeDóthTe°M©chî
(

176 c⁄° ::
°d
::
°rög
& 
ªgex
) {

177  
C⁄èösRegex
(
ªgex
);

182 
ölöe
 
	gM©chî
<c⁄° ::
°d
::
°rög
&> 
MakeDóthTe°M©chî
(

183 
M©chî
<c⁄° ::
°d
::
°rög
&> 
m©chî
) {

184  
m©chî
;

189 #i‡
GTEST_HAS_EXCEPTIONS


190 
	#GTEST_EXECUTE_DEATH_TEST_STATEMENT_
(
°©emít
, 
dóth_ã°
) \

191 
åy
 { \

192 
	`GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_
(
°©emít
); \

193 } 
	`ˇtch
 (c⁄° ::
°d
::
ex˚±i⁄
& 
gã°_ex˚±i⁄
) { \

194 
	`Ârötf
(\

195 
°dîr
, \

198 ::
ã°ög
::
öã∫Æ
::
	`F‹m©FûeLoˇti⁄
(
__FILE__
, 
__LINE__
).
	`c_°r
(), \

199 
gã°_ex˚±i⁄
.
	`wh©
()); \

200 
	`fÊush
(
°dîr
); \

201 
dóth_ã°
->
	`Ab‹t
(::
ã°ög
::
öã∫Æ
::
DóthTe°
::
TEST_THREW_EXCEPTION
); \

202 } 
	`ˇtch
 (...) { \

203 
dóth_ã°
->
	`Ab‹t
(::
ã°ög
::
öã∫Æ
::
DóthTe°
::
TEST_THREW_EXCEPTION
); \

204 }

	)

207 
	#GTEST_EXECUTE_DEATH_TEST_STATEMENT_
(
°©emít
, 
dóth_ã°
) \

208 
	`GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_
(
°©emít
)

	)

214 
	#GTEST_DEATH_TEST_
(
°©emít
, 
¥ediˇã
, 
ªgex_‹_m©chî
, 
Áû
) \

215 
GTEST_AMBIGUOUS_ELSE_BLOCKER_
 \

216 i‡(::
ã°ög
::
öã∫Æ
::
	`AlwaysTrue
()) { \

217 ::
ã°ög
::
öã∫Æ
::
DóthTe°
* 
gã°_dt
; \

218 i‡(!::
ã°ög
::
öã∫Æ
::
DóthTe°
::
	`Cª©e
( \

220 ::
ã°ög
::
öã∫Æ
::
	`MakeDóthTe°M©chî
(
ªgex_‹_m©chî
), \

221 
__FILE__
, 
__LINE__
, &
gã°_dt
)) { \

222 
	`GTEST_CONCAT_TOKEN_
(
gã°_œbñ_
, 
__LINE__
); \

224 i‡(
gã°_dt
 !
nuŒ±r
) { \

225 
°d
::
unique_±r
< ::
ã°ög
::
öã∫Æ
::
DóthTe°
> 
	`gã°_dt_±r
(
gã°_dt
); \

226 
gã°_dt
->
	`AssumeRﬁe
()) { \

227 ::
ã°ög
::
öã∫Æ
::
DóthTe°
::
OVERSEE_TEST
: \

228 i‡(!
gã°_dt
->
	`Pas£d
(
	`¥ediˇã
(gã°_dt->
	`Waô
()))) { \

229 
	`GTEST_CONCAT_TOKEN_
(
gã°_œbñ_
, 
__LINE__
); \

232 ::
ã°ög
::
öã∫Æ
::
DóthTe°
::
EXECUTE_TEST
: { \

233 ::
ã°ög
::
öã∫Æ
::
DóthTe°
::
Rëu∫Sítöñ
 
	`gã°_£¡öñ
( \

234 
gã°_dt
); \

235 
	`GTEST_EXECUTE_DEATH_TEST_STATEMENT_
(
°©emít
, 
gã°_dt
); \

236 
gã°_dt
->
	`Ab‹t
(::
ã°ög
::
öã∫Æ
::
DóthTe°
::
TEST_DID_NOT_DIE
); \

244 
	`GTEST_CONCAT_TOKEN_
(
gã°_œbñ_
, 
__LINE__
) \

245 : 
	`Áû
(::
ã°ög
::
öã∫Æ
::
DóthTe°
::
	`La°Mesßge
())

	)

254 
	#GTEST_EXECUTE_STATEMENT_
(
°©emít
, 
ªgex_‹_m©chî
) \

255 
GTEST_AMBIGUOUS_ELSE_BLOCKER_
 \

256 i‡(::
ã°ög
::
öã∫Æ
::
	`AlwaysTrue
()) { \

257 
	`GTEST_SUPPRESS_UNREACHABLE_CODE_WARNING_BELOW_
(
°©emít
); \

258 } i‡(!::
ã°ög
::
öã∫Æ
::
	`AlwaysTrue
()) { \

259 ::
ã°ög
::
öã∫Æ
::
	`MakeDóthTe°M©chî
(
ªgex_‹_m©chî
); \

261 ::
ã°ög
::
	`Mesßge
()

	)

266 ˛as†
	cI¡î«lRunDóthTe°Fœg
 {

267 
	gpublic
:

268 
I¡î«lRunDóthTe°Fœg
(c⁄° 
°d
::
°rög
& 
a_fûe
,

269 
a_löe
,

270 
™_ödex
,

271 
a_wrôe_fd
)

272 : 
fûe_
(
a_fûe
), 
löe_
(
a_löe
), 
ödex_
(
™_ödex
),

273 
wrôe_fd_
(
a_wrôe_fd
) {}

275 ~
I¡î«lRunDóthTe°Fœg
() {

276 i‡(
	gwrôe_fd_
 >= 0)

277 
posix
::
Clo£
(
wrôe_fd_
);

280 c⁄° 
	g°d
::
°rög
& 
fûe
(Ëc⁄° {  
fûe_
; }

281 
löe
(Ëc⁄° {  
	glöe_
; }

282 
ödex
(Ëc⁄° {  
	gödex_
; }

283 
wrôe_fd
(Ëc⁄° {  
	gwrôe_fd_
; }

285 
	g¥iv©e
:

286 
°d
::
°rög
 
fûe_
;

287 
	glöe_
;

288 
	gödex_
;

289 
	gwrôe_fd_
;

291 
GTEST_DISALLOW_COPY_AND_ASSIGN_
(
I¡î«lRunDóthTe°Fœg
);

297 
I¡î«lRunDóthTe°Fœg
* 
P¨£I¡î«lRunDóthTe°Fœg
();

	@/usr/include/gtest/internal/gtest-filepath.h

40 #i‚de‡
GOOGLETEST_INCLUDE_GTEST_INTERNAL_GTEST_FILEPATH_H_


41 
	#GOOGLETEST_INCLUDE_GTEST_INTERNAL_GTEST_FILEPATH_H_


	)

43 
	~"gã°/öã∫Æ/gã°-°rög.h
"

45 
GTEST_DISABLE_MSC_WARNINGS_PUSH_
(4251 \

48 
«me•a˚
 
	gã°ög
 {

49 
«me•a˚
 
	göã∫Æ
 {

62 ˛as†
	cGTEST_API_
 
	gFûeP©h
 {

63 
	gpublic
:

64 
FûeP©h
(Ë: 
∑th«me_
("") { }

65 
FûeP©h
(c⁄° FûeP©h& 
rhs
Ë: 
∑th«me_
(rhs.pathname_) { }

67 
ex∂icô
 
FûeP©h
(c⁄° 
°d
::
°rög
& 
∑th«me
Ë: 
∑th«me_
(pathname) {

68 
N‹mÆize
();

71 
	gFûeP©h
& 
	g›î©‹
=(c⁄° 
FûeP©h
& 
rhs
) {

72 
Së
(
rhs
);

73  *
	gthis
;

76 
Së
(c⁄° 
FûeP©h
& 
rhs
) {

77 
	g∑th«me_
 = 
rhs
.
∑th«me_
;

80 c⁄° 
	g°d
::
°rög
& såög(Ëc⁄° {  
∑th«me_
; }

81 c⁄° * 
c_°r
(Ëc⁄° {  
	g∑th«me_
.c_str(); }

84 
FûeP©h
 
GëCuºítDú
();

90 
FûeP©h
 
MakeFûeName
(c⁄° FûeP©h& 
dúe˘‹y
,

91 c⁄° 
FûeP©h
& 
ba£_«me
,

92 
numbî
,

93 c⁄° * 
exãnsi⁄
);

98 
FûeP©h
 
C⁄ˇtP©hs
(c⁄° FûeP©h& 
dúe˘‹y
,

99 c⁄° 
FûeP©h
& 
ªœtive_∑th
);

109 
FûeP©h
 
Gíî©eUniqueFûeName
(c⁄° FûeP©h& 
dúe˘‹y
,

110 c⁄° 
FûeP©h
& 
ba£_«me
,

111 c⁄° * 
exãnsi⁄
);

114 
boﬁ
 
IsEm±y
(Ëc⁄° {  
	g∑th«me_
.
em±y
(); }

119 
FûeP©h
 
RemoveTøûögP©hSï¨©‹
() const;

127 
FûeP©h
 
RemoveDúe˘‹yName
() const;

135 
FûeP©h
 
RemoveFûeName
() const;

141 
FûeP©h
 
RemoveExãnsi⁄
(c⁄° * 
exãnsi⁄
) const;

147 
boﬁ
 
Cª©eDúe˘‹õsRecursivñy
() const;

153 
boﬁ
 
Cª©eFﬁdî
() const;

157 
boﬁ
 
FûeOrDúe˘‹yExi°s
() const;

161 
boﬁ
 
Dúe˘‹yExi°s
() const;

166 
boﬁ
 
IsDúe˘‹y
() const;

170 
boﬁ
 
IsRoŸDúe˘‹y
() const;

173 
boﬁ
 
IsAbsﬁuãP©h
() const;

175 
	g¥iv©e
:

196 
N‹mÆize
();

201 c⁄° * 
FödLa°P©hSï¨©‹
() const;

203 
	g°d
::
°rög
 
∑th«me_
;

209 
	$GTEST_DISABLE_MSC_WARNINGS_POP_
()

	@/usr/include/gtest/internal/gtest-param-util.h

35 #i‚de‡
GOOGLETEST_INCLUDE_GTEST_INTERNAL_GTEST_PARAM_UTIL_H_


36 
	#GOOGLETEST_INCLUDE_GTEST_INTERNAL_GTEST_PARAM_UTIL_H_


	)

38 
	~<˘y≥.h
>

40 
	~<ˇs£π
>

41 
	~<ôî©‹
>

42 
	~<mem‹y
>

43 
	~<£t
>

44 
	~<tu∂e
>

45 
	~<ty≥_åaôs
>

46 
	~<utûôy
>

47 
	~<ve˘‹
>

49 
	~"gã°/öã∫Æ/gã°-öã∫Æ.h
"

50 
	~"gã°/öã∫Æ/gã°-p‹t.h
"

51 
	~"gã°/gã°-¥öãrs.h
"

52 
	~"gã°/gã°-ã°-∑π.h
"

54 
«me•a˚
 
	gã°ög
 {

57 
	gãm∂©e
 <
˛ass
 
	gP¨amTy≥
>

58 
	sTe°P¨amInfo
 {

59 
Te°P¨amInfo
(c⁄° 
P¨amTy≥
& 
a_∑øm
, 
size_t
 
™_ödex
) :

60 
∑øm
(
a_∑øm
),

61 
ödex
(
™_ödex
) {}

62 
P¨amTy≥
 
	g∑øm
;

63 
size_t
 
	gödex
;

68 
	sPrötToSåögP¨amName
 {

69 
	gãm∂©e
 <
˛ass
 
	gP¨amTy≥
>

70 
	g°d
::
°rög
 
›î©‹
()(c⁄° 
Te°P¨amInfo
<
P¨amTy≥
>& 
öfo
) const {

71  
PrötToSåög
(
öfo
.
∑øm
);

75 
«me•a˚
 
	göã∫Æ
 {

84 
GTEST_API_
 
Rï‹tInvÆidTe°SuôeTy≥
(c⁄° * 
ã°_suôe_«me
,

85 
CodeLoˇti⁄
 
code_loˇti⁄
);

87 
	gãm∂©e
 <
	gty≥«me
> 
˛ass
 
	gP¨amGíî©‹I¡îÁ˚
;

88 
	gãm∂©e
 <
	gty≥«me
> 
˛ass
 
	gP¨amGíî©‹
;

92 
	gãm∂©e
 <
ty≥«me
 
	gT
>

93 ˛as†
	cP¨amIãøt‹I¡îÁ˚
 {

94 
	gpublic
:

95 
vútuÆ
 ~
P¨amIãøt‹I¡îÁ˚
() {}

99 
vútuÆ
 c⁄° 
P¨amGíî©‹I¡îÁ˚
<
T
>* 
Ba£Gíî©‹
() const = 0;

104 
vútuÆ
 
Adv™˚
() = 0;

107 
vútuÆ
 
P¨amIãøt‹I¡îÁ˚
* 
Cl⁄e
() const = 0;

112 
vútuÆ
 c⁄° 
T
* 
Cuºít
() const = 0;

116 
vútuÆ
 
boﬁ
 
EquÆs
(c⁄° 
P¨amIãøt‹I¡îÁ˚
& 
Ÿhî
) const = 0;

122 
	gãm∂©e
 <
ty≥«me
 
	gT
>

123 ˛as†
	cP¨amIãøt‹
 {

124 
	gpublic
:

125 
T
 
	tvÆue_ty≥
;

126 c⁄° 
	tT
& 
	tª„ªn˚
;

127 
±rdiff_t
 
	tdif„ªn˚_ty≥
;

130 
P¨amIãøt‹
(c⁄° P¨amIãøt‹& 
Ÿhî
Ë: 
im∂_
(Ÿhî.im∂_->
Cl⁄e
()) {}

131 
P¨amIãøt‹
& 
›î©‹
=(c⁄° P¨amIãøt‹& 
Ÿhî
) {

132 i‡(
this
 !&
Ÿhî
)

133 
im∂_
.
ª£t
(
Ÿhî
.im∂_->
Cl⁄e
());

134  *
	gthis
;

137 c⁄° 
	gT
& 
	g›î©‹
*(Ëc⁄° {  *
	gim∂_
->
Cuºít
(); }

138 c⁄° 
T
* 
	g›î©‹
->(Ëc⁄° {  
	gim∂_
->
Cuºít
(); }

140 
	gP¨amIãøt‹
& 
	g›î©‹
++() {

141 
	gim∂_
->
Adv™˚
();

142  *
	gthis
;

145 
P¨amIãøt‹
 
	g›î©‹
++() {

146 
	gP¨amIãøt‹I¡îÁ˚
<
	gT
>* 
	g˛⁄e
 = 
im∂_
->
Cl⁄e
();

147 
	gim∂_
->
Adv™˚
();

148  
P¨amIãøt‹
(
˛⁄e
);

150 
boﬁ
 
	g›î©‹
==(c⁄° 
P¨amIãøt‹
& 
Ÿhî
) const {

151  
im∂_
.
gë
(Ë=
Ÿhî
.im∂_.gë(Ë|| im∂_->
EquÆs
(*other.impl_);

153 
boﬁ
 
	g›î©‹
!=(c⁄° 
P¨amIãøt‹
& 
Ÿhî
) const {

154  !(*
this
 =
Ÿhî
);

157 
	g¥iv©e
:

158 
‰õnd
 
˛ass
 
P¨amGíî©‹
<
T
>;

159 
ex∂icô
 
P¨amIãøt‹
(
P¨amIãøt‹I¡îÁ˚
<
T
>* 
im∂
Ë: 
im∂_
(impl) {}

160 
°d
::
unique_±r
<
P¨amIãøt‹I¡îÁ˚
<
T
> > 
im∂_
;

165 
	gãm∂©e
 <
ty≥«me
 
	gT
>

166 ˛as†
	cP¨amGíî©‹I¡îÁ˚
 {

167 
	gpublic
:

168 
T
 
	tP¨amTy≥
;

170 
	gvútuÆ
 ~
P¨amGíî©‹I¡îÁ˚
() {}

173 
vútuÆ
 
	gP¨amIãøt‹I¡îÁ˚
<
	gT
>* 
Begö
() const = 0;

174 
vútuÆ
 
	gP¨amIãøt‹I¡îÁ˚
<
	gT
>* 
End
() const = 0;

182 
	gãm∂©e
<
ty≥«me
 
	gT
>

183 ˛as†
	cP¨amGíî©‹
 {

184 
	gpublic
:

185 
P¨amIãøt‹
<
	tT
> 
	tôî©‹
;

187 
ex∂icô
 
P¨amGíî©‹
(
P¨amGíî©‹I¡îÁ˚
<
T
>* 
im∂
Ë: 
im∂_
(impl) {}

188 
P¨amGíî©‹
(c⁄° P¨amGíî©‹& 
Ÿhî
Ë: 
im∂_
(other.impl_) {}

190 
P¨amGíî©‹
& 
›î©‹
=(c⁄° P¨amGíî©‹& 
Ÿhî
) {

191 
im∂_
 = 
Ÿhî
.impl_;

192  *
	gthis
;

195 
ôî©‹
 
begö
(Ëc⁄° {  iãøt‹(
im∂_
->
Begö
()); }

196 
ôî©‹
 
íd
(Ëc⁄° {  iãøt‹(
im∂_
->
End
()); }

198 
	g¥iv©e
:

199 
°d
::
sh¨ed_±r
<c⁄° 
P¨amGíî©‹I¡îÁ˚
<
T
> > 
im∂_
;

206 
	gãm∂©e
 <
ty≥«me
 
	gT
,Åy≥«mê
	gIn¸emítT
>

207 
˛ass
 
	gR™geGíî©‹
 : 
public
 
P¨amGíî©‹I¡îÁ˚
<
T
> {

208 
public
:

209 
R™geGíî©‹
(
T
 
begö
, T 
íd
, 
In¸emítT
 
°ï
)

210 : 
begö_
(
begö
), 
íd_
(
íd
),

211 
°ï_
(
°ï
), 
íd_ödex_
(
CÆcuœãEndIndex
(
begö
, 
íd
, step)) {}

212 ~
R™geGíî©‹
(Ë
	govîride
 {}

214 
	gP¨amIãøt‹I¡îÁ˚
<
	gT
>* 
Begö
(Ëc⁄° 
	govîride
 {

215  
√w
 
Iãøt‹
(
this
, 
begö_
, 0, 
°ï_
);

217 
	gP¨amIãøt‹I¡îÁ˚
<
	gT
>* 
End
(Ëc⁄° 
	govîride
 {

218  
√w
 
Iãøt‹
(
this
, 
íd_
, 
íd_ödex_
, 
°ï_
);

221 
	g¥iv©e
:

222 
˛ass
 
Iãøt‹
 : 
public
 
P¨amIãøt‹I¡îÁ˚
<
T
> {

223 
public
:

224 
Iãøt‹
(c⁄° 
P¨amGíî©‹I¡îÁ˚
<
T
>* 
ba£
, T 
vÆue
, 
ödex
,

225 
In¸emítT
 
°ï
)

226 : 
ba£_
(
ba£
), 
vÆue_
(
vÆue
), 
ödex_
(
ödex
), 
°ï_
(
°ï
) {}

227 ~
Iãøt‹
(Ë
	govîride
 {}

229 c⁄° 
	gP¨amGíî©‹I¡îÁ˚
<
	gT
>* 
Ba£Gíî©‹
(Ëc⁄° 
	govîride
 {

230  
	gba£_
;

232 
Adv™˚
(Ë
	govîride
 {

233 
	gvÆue_
 = 
°©ic_ˇ°
<
T
>(
vÆue_
 + 
°ï_
);

234 
	gödex_
++;

236 
	gP¨amIãøt‹I¡îÁ˚
<
	gT
>* 
Cl⁄e
(Ëc⁄° 
	govîride
 {

237  
√w
 
Iãøt‹
(*
this
);

239 c⁄° 
T
* 
Cuºít
(Ëc⁄° 
	govîride
 {  &
	gvÆue_
; }

240 
boﬁ
 
EquÆs
(c⁄° 
P¨amIãøt‹I¡îÁ˚
<
T
>& 
Ÿhî
Ëc⁄° 
	govîride
 {

243 
GTEST_CHECK_
(
Ba£Gíî©‹
(Ë=
Ÿhî
.BaseGenerator())

245 << "‰om dif„ª¡ gíî©‹s." << 
°d
::
ídl
;

246 c⁄° 
	gŸhî_ödex
 =

247 
CheckedDownˇ°ToA˘uÆTy≥
<c⁄° 
Iãøt‹
>(&
Ÿhî
)->
ödex_
;

248  
	gödex_
 =
Ÿhî_ödex
;

251 
	g¥iv©e
:

252 
Iãøt‹
(c⁄° Iãøt‹& 
Ÿhî
)

253 : 
P¨amIãøt‹I¡îÁ˚
<
T
>(),

254 
ba£_
(
Ÿhî
.ba£_), 
vÆue_
(Ÿhî.vÆue_), 
ödex_
(other.index_),

255 
°ï_
(
Ÿhî
.step_) {}

258 
	g›î©‹
=(c⁄° 
Iãøt‹
& 
Ÿhî
);

260 c⁄° 
	gP¨amGíî©‹I¡îÁ˚
<
	gT
>* c⁄° 
	gba£_
;

261 
T
 
	gvÆue_
;

262 
	gödex_
;

263 c⁄° 
In¸emítT
 
	g°ï_
;

266 
CÆcuœãEndIndex
(c⁄° 
T
& 
begö
,

267 c⁄° 
T
& 
íd
,

268 c⁄° 
In¸emítT
& 
°ï
) {

269 
	gíd_ödex
 = 0;

270 
T
 
	gi
 = 
begö
; i < 
	gíd
; i = 
°©ic_ˇ°
<T>(
i
 + 
°ï
))

271 
íd_ödex
++;

272  
	gíd_ödex
;

276 
	g›î©‹
=(c⁄° 
R™geGíî©‹
& 
Ÿhî
);

278 c⁄° 
T
 
	gbegö_
;

279 c⁄° 
T
 
	gíd_
;

280 c⁄° 
In¸emítT
 
	g°ï_
;

283 c⁄° 
	gíd_ödex_
;

291 
	gãm∂©e
 <
ty≥«me
 
	gT
>

292 
˛ass
 
	gVÆuesInIãøt‹R™geGíî©‹
 : 
public
 
P¨amGíî©‹I¡îÁ˚
<
T
> {

293 
public
:

294 
ãm∂©e
 <
ty≥«me
 
F‹w¨dIãøt‹
>

295 
VÆuesInIãøt‹R™geGíî©‹
(
F‹w¨dIãøt‹
 
begö
, F‹w¨dIãøt‹ 
íd
)

296 : 
c⁄èöî_
(
begö
, 
íd
) {}

297 ~
VÆuesInIãøt‹R™geGíî©‹
(Ë
	govîride
 {}

299 
	gP¨amIãøt‹I¡îÁ˚
<
	gT
>* 
Begö
(Ëc⁄° 
	govîride
 {

300  
√w
 
Iãøt‹
(
this
, 
c⁄èöî_
.
begö
());

302 
	gP¨amIãøt‹I¡îÁ˚
<
	gT
>* 
End
(Ëc⁄° 
	govîride
 {

303  
√w
 
Iãøt‹
(
this
, 
c⁄èöî_
.
íd
());

306 
	g¥iv©e
:

307 
ty≥«me
 ::
	t°d
::
	tve˘‹
<
	tT
> 
	tC⁄èöîTy≥
;

309 
˛ass
 
	gIãøt‹
 : 
public
 
P¨amIãøt‹I¡îÁ˚
<
T
> {

310 
public
:

311 
Iãøt‹
(c⁄° 
P¨amGíî©‹I¡îÁ˚
<
T
>* 
ba£
,

312 
ty≥«me
 
C⁄èöîTy≥
::
c⁄°_ôî©‹
 
ôî©‹
)

313 : 
ba£_
(
ba£
), 
ôî©‹_
(
ôî©‹
) {}

314 ~
Iãøt‹
(Ë
	govîride
 {}

316 c⁄° 
	gP¨amGíî©‹I¡îÁ˚
<
	gT
>* 
Ba£Gíî©‹
(Ëc⁄° 
	govîride
 {

317  
	gba£_
;

319 
Adv™˚
(Ë
	govîride
 {

320 ++
	gôî©‹_
;

321 
	gvÆue_
.
ª£t
();

323 
	gP¨amIãøt‹I¡îÁ˚
<
	gT
>* 
Cl⁄e
(Ëc⁄° 
	govîride
 {

324  
√w
 
Iãøt‹
(*
this
);

333 c⁄° 
T
* 
Cuºít
(Ëc⁄° 
	govîride
 {

334 i‡(
	gvÆue_
.
gë
(Ë=
nuŒ±r
Ë
vÆue_
.
ª£t
(
√w
 
T
(*
ôî©‹_
));

335  
	gvÆue_
.
gë
();

337 
boﬁ
 
EquÆs
(c⁄° 
P¨amIãøt‹I¡îÁ˚
<
T
>& 
Ÿhî
Ëc⁄° 
	govîride
 {

340 
GTEST_CHECK_
(
Ba£Gíî©‹
(Ë=
Ÿhî
.BaseGenerator())

342 << "‰om dif„ª¡ gíî©‹s." << 
°d
::
ídl
;

343  
	gôî©‹_
 ==

344 
CheckedDownˇ°ToA˘uÆTy≥
<c⁄° 
Iãøt‹
>(&
Ÿhî
)->
ôî©‹_
;

347 
	g¥iv©e
:

348 
Iãøt‹
(c⁄° Iãøt‹& 
Ÿhî
)

351 : 
P¨amIãøt‹I¡îÁ˚
<
T
>(),

352 
ba£_
(
Ÿhî
.base_),

353 
ôî©‹_
(
Ÿhî
.iterator_) {}

355 c⁄° 
	gP¨amGíî©‹I¡îÁ˚
<
	gT
>* c⁄° 
	gba£_
;

356 
ty≥«me
 
	gC⁄èöîTy≥
::
c⁄°_ôî©‹
 
ôî©‹_
;

362 
muèbÀ
 
	g°d
::
unique_±r
<c⁄° 
T
> 
vÆue_
;

366 
	g›î©‹
=(c⁄° 
VÆuesInIãøt‹R™geGíî©‹
& 
Ÿhî
);

368 c⁄° 
C⁄èöîTy≥
 
	gc⁄èöî_
;

375 
	gãm∂©e
 <
˛ass
 
	gP¨amTy≥
>

376 
	g°d
::
°rög
 
DeÁu…P¨amName
(c⁄° 
Te°P¨amInfo
<
P¨amTy≥
>& 
öfo
) {

377 
Mesßge
 
«me_°ªam
;

378 
	g«me_°ªam
 << 
	göfo
.
	gödex
;

379  
	g«me_°ªam
.
GëSåög
();

382 
	gãm∂©e
 <
ty≥«me
 
	gT
 = >

383 
Te°NŸEm±y
() {

384 
°©ic_as£π
((
T
) == 0, "EmptyárgumentsáreÇotállowed.");

386 
	gãm∂©e
 <
ty≥«me
 
	gT
 = >

387 
Te°NŸEm±y
(c⁄° 
T
&) {}

393 
ãm∂©e
 <
˛ass
 
Te°Cœss
>

394 ˛as†
	cP¨amëîizedTe°Fa˘‹y
 : 
public
 
Te°Fa˘‹yBa£
 {

395 
public
:

396 
ty≥«me
 
	tTe°Cœss
::
	tP¨amTy≥
 ParamType;

397 
ex∂icô
 
P¨amëîizedTe°Fa˘‹y
(
P¨amTy≥
 
∑ømëî
) :

398 
∑ømëî_
(
∑ømëî
) {}

399 
Te°
* 
Cª©eTe°
(Ë
ovîride
 {

400 
Te°Cœss
::
SëP¨am
(&
∑ømëî_
);

401  
√w
 
Te°Cœss
();

404 
	g¥iv©e
:

405 c⁄° 
P¨amTy≥
 
∑ømëî_
;

407 
GTEST_DISALLOW_COPY_AND_ASSIGN_
(
P¨amëîizedTe°Fa˘‹y
);

414 
	gãm∂©e
 <
˛ass
 
	gP¨amTy≥
>

415 ˛as†
	cTe°MëaFa˘‹yBa£
 {

416 
	gpublic
:

417 
vútuÆ
 ~
Te°MëaFa˘‹yBa£
() {}

419 
vútuÆ
 
Te°Fa˘‹yBa£
* 
Cª©eTe°Fa˘‹y
(
P¨amTy≥
 
∑ømëî
) = 0;

430 
	gãm∂©e
 <
˛ass
 
	gTe°Suôe
>

431 
˛ass
 
	gTe°MëaFa˘‹y


432 : 
public
 
Te°MëaFa˘‹yBa£
<
ty≥«me
 
Te°Suôe
::
P¨amTy≥
> {

433 
public
:

434 
usög
 
P¨amTy≥
 = 
ty≥«me
 
Te°Suôe
::ParamType;

436 
Te°MëaFa˘‹y
() {}

438 
Te°Fa˘‹yBa£
* 
Cª©eTe°Fa˘‹y
(
P¨amTy≥
 
∑ømëî
Ë
	govîride
 {

439  
√w
 
	gP¨amëîizedTe°Fa˘‹y
<
	gTe°Suôe
>(
	g∑ømëî
);

442 
	g¥iv©e
:

443 
GTEST_DISALLOW_COPY_AND_ASSIGN_
(
Te°MëaFa˘‹y
);

456 ˛as†
	cP¨amëîizedTe°SuôeInfoBa£
 {

457 
	gpublic
:

458 
vútuÆ
 ~
P¨amëîizedTe°SuôeInfoBa£
() {}

461 
vútuÆ
 c⁄° 
°d
::
°rög
& 
GëTe°SuôeName
() const = 0;

463 
vútuÆ
 
Ty≥Id
 
GëTe°SuôeTy≥Id
() const = 0;

468 
vútuÆ
 
Regi°îTe°s
() = 0;

470 
	g¥Ÿe˘ed
:

471 
P¨amëîizedTe°SuôeInfoBa£
() {}

473 
¥iv©e
:

474 
GTEST_DISALLOW_COPY_AND_ASSIGN_
(
P¨amëîizedTe°SuôeInfoBa£
);

481 
GTEST_API_
 
	gM¨kAsIgn‹ed
 {

482 
ex∂icô
 
M¨kAsIgn‹ed
(c⁄° * 
ã°_suôe
);

485 
GTEST_API_
 
In£πSy¡hëicTe°Ca£
(c⁄° 
°d
::
°rög
& 
«me
,

486 
CodeLoˇti⁄
 
loˇti⁄
, 
boﬁ
 
has_ã°_p
);

495 
	gãm∂©e
 <
˛ass
 
	gTe°Suôe
>

496 ˛as†
	cP¨amëîizedTe°SuôeInfo
 : 
public
 
P¨amëîizedTe°SuôeInfoBa£
 {

497 
public
:

501 
usög
 
P¨amTy≥
 = 
ty≥«me
 
Te°Suôe
::ParamType;

503 
	gP¨amGíî©‹
<
	tP¨amTy≥
>(
	tGíî©‹Cª©i⁄Func
)();

504 
usög
 
	gP¨amNameGíî©‹Func
 = 
°d
::
°rög
(c⁄° 
Te°P¨amInfo
<
P¨amTy≥
>&);

506 
ex∂icô
 
P¨amëîizedTe°SuôeInfo
(c⁄° * 
«me
,

507 
CodeLoˇti⁄
 
code_loˇti⁄
)

508 : 
ã°_suôe_«me_
(
«me
), 
code_loˇti⁄_
(
code_loˇti⁄
) {}

511 c⁄° 
	g°d
::
°rög
& 
GëTe°SuôeName
(Ëc⁄° 
ovîride
 {

512  
ã°_suôe_«me_
;

515 
Ty≥Id
 
GëTe°SuôeTy≥Id
(Ëc⁄° 
	govîride
 {  
	gGëTy≥Id
<
	gTe°Suôe
>(); }

522 
AddTe°P©ã∫
(c⁄° * 
ã°_suôe_«me
, c⁄° * 
ã°_ba£_«me
,

523 
Te°MëaFa˘‹yBa£
<
P¨amTy≥
>* 
mëa_Á˘‹y
,

524 
CodeLoˇti⁄
 
code_loˇti⁄
) {

525 
	gã°s_
.
push_back
(
°d
::
sh¨ed_±r
<
Te°Info
>(
√w
 TestInfo(

526 
ã°_suôe_«me
, 
ã°_ba£_«me
, 
mëa_Á˘‹y
, 
code_loˇti⁄
)));

530 
AddTe°SuôeIn°™tüti⁄
(c⁄° 
°d
::
°rög
& 
ö°™tüti⁄_«me
,

531 
Gíî©‹Cª©i⁄Func
* 
func
,

532 
P¨amNameGíî©‹Func
* 
«me_func
,

533 c⁄° * 
fûe
, 
löe
) {

534 
	gö°™tüti⁄s_
.
push_back
(

535 
In°™tüti⁄Info
(
ö°™tüti⁄_«me
, 
func
, 
«me_func
, 
fûe
, 
löe
));

543 
Regi°îTe°s
(Ë
	govîride
 {

544 
boﬁ
 
	ggíî©ed_ö°™tüti⁄s
 = 
Ál£
;

546 
ty≥«me
 
	gTe°InfoC⁄èöî
::
ôî©‹
 
ã°_ô
 = 
ã°s_
.
begö
();

547 
	gã°_ô
 !
ã°s_
.
íd
(); ++test_it) {

548 
	g°d
::
sh¨ed_±r
<
Te°Info
> 
ã°_öfo
 = *
ã°_ô
;

549 
ty≥«me
 
	gIn°™tüti⁄C⁄èöî
::
ôî©‹
 
gí_ô
 =

550 
ö°™tüti⁄s_
.
begö
(); 
	ggí_ô
 !ö°™tüti⁄s_.
íd
();

551 ++
	ggí_ô
) {

552 c⁄° 
	g°d
::
°rög
& 
ö°™tüti⁄_«me
 = 
gí_ô
->
«me
;

553 
	gP¨amGíî©‹
<
	gP¨amTy≥
> 
gíî©‹
((*
gí_ô
->generator)());

554 
P¨amNameGíî©‹Func
* 
	g«me_func
 = 
gí_ô
->
«me_func
;

555 c⁄° * 
	gfûe
 = 
gí_ô
->
fûe
;

556 
	glöe
 = 
gí_ô
->
löe
;

558 
	g°d
::
°rög
 
ã°_suôe_«me
;

559 i‡–!
	gö°™tüti⁄_«me
.
em±y
() )

560 
	gã°_suôe_«me
 = 
ö°™tüti⁄_«me
 + "/";

561 
	gã°_suôe_«me
 +
ã°_öfo
->
ã°_suôe_ba£_«me
;

563 
size_t
 
	gi
 = 0;

564 
	g°d
::
£t
<
°d
::
°rög
> 
ã°_∑øm_«mes
;

565 
ty≥«me
 
	gP¨amGíî©‹
<
	gP¨amTy≥
>::
ôî©‹
 
∑øm_ô
 =

566 
gíî©‹
.
begö
();

567 
	g∑øm_ô
 !
gíî©‹
.
íd
(); ++∑øm_ô, ++
	gi
) {

568 
	ggíî©ed_ö°™tüti⁄s
 = 
åue
;

570 
Mesßge
 
	gã°_«me_°ªam
;

572 
	g°d
::
°rög
 
∑øm_«me
 = 
«me_func
(

573 
Te°P¨amInfo
<
P¨amTy≥
>(*
∑øm_ô
, 
i
));

575 
GTEST_CHECK_
(
IsVÆidP¨amName
(
∑øm_«me
))

576 << "P¨amëîizedÅe°Çamê'" << 
	g∑øm_«me


577 << "' i†övÆid, i¿" << 
	gfûe


578 << "Üöê" << 
	glöe
 << 
	g°d
::
ídl
;

580 
GTEST_CHECK_
(
ã°_∑øm_«mes
.
cou¡
(
∑øm_«me
) == 0)

581 << "Du∂iˇãÖ¨amëîizedÅe°Çamê'" << 
∑øm_«me


582 << "', i¿" << 
fûe
 << "Üöê" << 
löe
 << 
°d
::
ídl
;

584 
	gã°_∑øm_«mes
.
ö£π
(
∑øm_«me
);

586 i‡(!
	gã°_öfo
->
	gã°_ba£_«me
.
em±y
()) {

587 
	gã°_«me_°ªam
 << 
	gã°_öfo
->
	gã°_ba£_«me
 << "/";

589 
	gã°_«me_°ªam
 << 
	g∑øm_«me
;

590 
MakeAndRegi°îTe°Info
(

591 
ã°_suôe_«me
.
c_°r
(), 
ã°_«me_°ªam
.
GëSåög
().c_str(),

592 
nuŒ±r
,

593 
PrötToSåög
(*
∑øm_ô
).
c_°r
(), 
ã°_öfo
->
code_loˇti⁄
,

594 
GëTe°SuôeTy≥Id
(),

595 
SuôeApiResﬁvî
<
Te°Suôe
>::
GëSëUpCa£OrSuôe
(
fûe
, 
löe
),

596 
SuôeApiResﬁvî
<
Te°Suôe
>::
GëTórDownCa£OrSuôe
(
fûe
, 
löe
),

597 
ã°_öfo
->
ã°_mëa_Á˘‹y
->
Cª©eTe°Fa˘‹y
(*
∑øm_ô
));

602 i‡(!
	ggíî©ed_ö°™tüti⁄s
) {

604 
In£πSy¡hëicTe°Ca£
(
GëTe°SuôeName
(), 
code_loˇti⁄_
,

605 !
ã°s_
.
em±y
());

609 
	g¥iv©e
:

612 
	sTe°Info
 {

613 
Te°Info
(c⁄° * 
a_ã°_suôe_ba£_«me
, c⁄° * 
a_ã°_ba£_«me
,

614 
Te°MëaFa˘‹yBa£
<
P¨amTy≥
>* 
a_ã°_mëa_Á˘‹y
,

615 
CodeLoˇti⁄
 
a_code_loˇti⁄
)

616 : 
ã°_suôe_ba£_«me
(
a_ã°_suôe_ba£_«me
),

617 
ã°_ba£_«me
(
a_ã°_ba£_«me
),

618 
ã°_mëa_Á˘‹y
(
a_ã°_mëa_Á˘‹y
),

619 
code_loˇti⁄
(
a_code_loˇti⁄
) {}

621 c⁄° 
	g°d
::
°rög
 
ã°_suôe_ba£_«me
;

622 c⁄° 
	g°d
::
°rög
 
ã°_ba£_«me
;

623 c⁄° 
	g°d
::
unique_±r
<
Te°MëaFa˘‹yBa£
<
P¨amTy≥
> > 
ã°_mëa_Á˘‹y
;

624 c⁄° 
CodeLoˇti⁄
 
	gcode_loˇti⁄
;

626 
usög
 
	gTe°InfoC⁄èöî
 = ::
°d
::
ve˘‹
<°d::
sh¨ed_±r
<
Te°Info
> >;

630 
	sIn°™tüti⁄Info
 {

631 
In°™tüti⁄Info
(c⁄° 
°d
::
°rög
 &
«me_ö
,

632 
Gíî©‹Cª©i⁄Func
* 
gíî©‹_ö
,

633 
P¨amNameGíî©‹Func
* 
«me_func_ö
,

634 c⁄° * 
fûe_ö
,

635 
löe_ö
)

636 : 
«me
(
«me_ö
),

637 
gíî©‹
(
gíî©‹_ö
),

638 
«me_func
(
«me_func_ö
),

639 
fûe
(
fûe_ö
),

640 
löe
(
löe_ö
) {}

642 
	g°d
::
°rög
 
«me
;

643 
Gíî©‹Cª©i⁄Func
* 
	ggíî©‹
;

644 
P¨amNameGíî©‹Func
* 
	g«me_func
;

645 c⁄° * 
	gfûe
;

646 
	glöe
;

648 ::
°d
::
	tve˘‹
<
	tIn°™tüti⁄Info
> 
	tIn°™tüti⁄C⁄èöî
;

650 
boﬁ
 
IsVÆidP¨amName
(c⁄° 
°d
::
°rög
& 
«me
) {

652 i‡(
«me
.
em±y
())

653  
Ál£
;

656 
	g°d
::
°rög
::
size_ty≥
 
ödex
 = 0; 
	gödex
 < 
	g«me
.
size
(); ++index) {

657 i‡(!
IsAlNum
(
«me
[
ödex
]Ë&& 
	g«me
[index] != '_')

658  
Ál£
;

661  
	gåue
;

664 c⁄° 
	g°d
::
°rög
 
ã°_suôe_«me_
;

665 
CodeLoˇti⁄
 
	gcode_loˇti⁄_
;

666 
Te°InfoC⁄èöî
 
	gã°s_
;

667 
In°™tüti⁄C⁄èöî
 
	gö°™tüti⁄s_
;

669 
GTEST_DISALLOW_COPY_AND_ASSIGN_
(
P¨amëîizedTe°SuôeInfo
);

673 #i‚de‡
GTEST_REMOVE_LEGACY_TEST_CASEAPI_


674 
	gãm∂©e
 <
˛ass
 
	gTe°Ca£
>

675 
usög
 
	gP¨amëîizedTe°Ca£Info
 = 
P¨amëîizedTe°SuôeInfo
<
Te°Ca£
>;

684 ˛as†
	cP¨amëîizedTe°SuôeRegi°ry
 {

685 
	gpublic
:

686 
P¨amëîizedTe°SuôeRegi°ry
() {}

687 ~
P¨amëîizedTe°SuôeRegi°ry
() {

688 auto& 
ã°_suôe_öfo
 : 
ã°_suôe_öfos_
) {

689 
dñëe
 
ã°_suôe_öfo
;

695 
	gãm∂©e
 <
˛ass
 
	gTe°Suôe
>

696 
	gP¨amëîizedTe°SuôeInfo
<
	gTe°Suôe
>* 
GëTe°SuôeP©ã∫Hﬁdî
(

697 c⁄° * 
ã°_suôe_«me
, 
CodeLoˇti⁄
 
code_loˇti⁄
) {

698 
	gP¨amëîizedTe°SuôeInfo
<
	gTe°Suôe
>* 
	gty≥d_ã°_öfo
 = 
nuŒ±r
;

699 auto& 
	gã°_suôe_öfo
 : 
ã°_suôe_öfos_
) {

700 i‡(
ã°_suôe_öfo
->
GëTe°SuôeName
(Ë=
ã°_suôe_«me
) {

701 i‡(
ã°_suôe_öfo
->
GëTe°SuôeTy≥Id
(Ë!
GëTy≥Id
<
Te°Suôe
>()) {

705 
Rï‹tInvÆidTe°SuôeTy≥
(
ã°_suôe_«me
, 
code_loˇti⁄
);

706 
	gposix
::
Ab‹t
();

711 
	gty≥d_ã°_öfo
 = 
CheckedDownˇ°ToA˘uÆTy≥
<

712 
P¨amëîizedTe°SuôeInfo
<
Te°Suôe
> >(
ã°_suôe_öfo
);

717 i‡(
	gty≥d_ã°_öfo
 =
nuŒ±r
) {

718 
ty≥d_ã°_öfo
 = 
√w
 
P¨amëîizedTe°SuôeInfo
<
Te°Suôe
>(

719 
ã°_suôe_«me
, 
	gcode_loˇti⁄
);

720 
	gã°_suôe_öfos_
.
push_back
(
ty≥d_ã°_öfo
);

722  
	gty≥d_ã°_öfo
;

724 
Regi°îTe°s
() {

725 auto& 
	gã°_suôe_öfo
 : 
ã°_suôe_öfos_
) {

726 
ã°_suôe_öfo
->
Regi°îTe°s
();

730 #i‚de‡
GTEST_REMOVE_LEGACY_TEST_CASEAPI_


731 
	gãm∂©e
 <
˛ass
 
	gTe°Ca£
>

732 
	gP¨amëîizedTe°Ca£Info
<
	gTe°Ca£
>* 
GëTe°Ca£P©ã∫Hﬁdî
(

733 c⁄° * 
ã°_ˇ£_«me
, 
CodeLoˇti⁄
 
code_loˇti⁄
) {

734  
	gGëTe°SuôeP©ã∫Hﬁdî
<
	gTe°Ca£
>(
	gã°_ˇ£_«me
, 
	gcode_loˇti⁄
);

739 
	g¥iv©e
:

740 
usög
 
Te°SuôeInfoC⁄èöî
 = ::
°d
::
ve˘‹
<
P¨amëîizedTe°SuôeInfoBa£
*>;

742 
Te°SuôeInfoC⁄èöî
 
	gã°_suôe_öfos_
;

744 
GTEST_DISALLOW_COPY_AND_ASSIGN_
(
P¨amëîizedTe°SuôeRegi°ry
);

750 ˛as†
	cTy≥P¨amëîizedTe°SuôeRegi°ry
 {

751 
	gpublic
:

753 
Regi°îTe°Suôe
(c⁄° * 
ã°_suôe_«me
,

754 
CodeLoˇti⁄
 
code_loˇti⁄
);

757 
Regi°îIn°™tüti⁄
(c⁄° * 
ã°_suôe_«me
);

761 
CheckF‹In°™tüti⁄s
();

763 
	g¥iv©e
:

764 
	sTy≥P¨amëîizedTe°SuôeInfo
 {

765 
ex∂icô
 
Ty≥P¨amëîizedTe°SuôeInfo
(
CodeLoˇti⁄
 
c
)

766 : 
code_loˇti⁄
(
c
), 
ö°™tüãd
(
Ál£
) {}

768 
CodeLoˇti⁄
 
	gcode_loˇti⁄
;

769 
boﬁ
 
	gö°™tüãd
;

772 
	g°d
::
m≠
<
°d
::
°rög
, 
	gTy≥P¨amëîizedTe°SuôeInfo
> 
	gsuôes_
;

779 
	gãm∂©e
 <
˛ass
 
	gC⁄èöî
>

780 
	göã∫Æ
::
P¨amGíî©‹
<
ty≥«me
 
C⁄èöî
::
vÆue_ty≥
> 
VÆuesIn
(

781 c⁄° 
C⁄èöî
& 
c⁄èöî
);

783 
«me•a˚
 
	göã∫Æ
 {

786 #ifde‡
_MSC_VER


787 #¥agm®
w¨nög
(
push
)

788 #¥agm®
w¨nög
(
dißbÀ
 : 4100)

791 
	gãm∂©e
 <
	gty≥«me
... 
	gTs
>

792 ˛as†
	cVÆueAºay
 {

793 
	gpublic
:

794 
ex∂icô
 
VÆueAºay
(
Ts
... 
v
Ë: 
v_
(
FœtTu∂eC⁄°ru˘Tag
{}, 
°d
::
move
(v)...) {}

796 
ãm∂©e
 <
ty≥«me
 
T
>

797 
›î©‹
 
P¨amGíî©‹
<
T
>() const {

798  
VÆuesIn
(
MakeVe˘‹
<
T
>(
MakeIndexSequí˚
<...(
Ts
)>()));

801 
	g¥iv©e
:

802 
ãm∂©e
 <
ty≥«me
 
T
, 
	gsize_t
... 
	gI
>

803 
	g°d
::
ve˘‹
<
T
> 
MakeVe˘‹
(
IndexSequí˚
<
I
...>) const {

804  
°d
::
ve˘‹
<
T
>{
°©ic_ˇ°
<T>(
v_
.
ãm∂©e
 
Gë
<
I
>())...};

807 
	gFœtTu∂e
<
	gTs
...> 
	gv_
;

810 #ifde‡
_MSC_VER


811 #¥agm®
w¨nög
(
p›
)

814 
	gãm∂©e
 <
	gty≥«me
... 
	gT
>

815 
˛ass
 
	gC¨ãsünProdu˘Gíî©‹


816 : 
public
 
P¨amGíî©‹I¡îÁ˚
<::
°d
::
tu∂e
<
T
...>> {

817 
public
:

818 ::
°d
::
	ttu∂e
<
	tT
...> 
	tP¨amTy≥
;

820 
C¨ãsünProdu˘Gíî©‹
(c⁄° 
°d
::
tu∂e
<
P¨amGíî©‹
<
T
>...>& 
g
)

821 : 
gíî©‹s_
(
g
) {}

822 ~
C¨ãsünProdu˘Gíî©‹
(Ë
ovîride
 {}

824 
P¨amIãøt‹I¡îÁ˚
<
P¨amTy≥
>* 
Begö
(Ëc⁄° 
ovîride
 {

825  
√w
 
Iãøt‹
(
this
, 
gíî©‹s_
, 
Ál£
);

827 
	gP¨amIãøt‹I¡îÁ˚
<
	gP¨amTy≥
>* 
End
(Ëc⁄° 
	govîride
 {

828  
√w
 
Iãøt‹
(
this
, 
gíî©‹s_
, 
åue
);

831 
	g¥iv©e
:

832 
ãm∂©e
 <
˛ass
 
I
>

833 
˛ass
 
Iãøt‹Im∂
;

834 
	gãm∂©e
 <
	gsize_t
... 
	gI
>

835 
˛ass
 
	gIãøt‹Im∂
<
	gIndexSequí˚
<
	gI
...>>

836 : 
public
 
P¨amIãøt‹I¡îÁ˚
<
P¨amTy≥
> {

837 
public
:

838 
Iãøt‹Im∂
(c⁄° 
P¨amGíî©‹I¡îÁ˚
<
P¨amTy≥
>* 
ba£
,

839 c⁄° 
°d
::
tu∂e
<
P¨amGíî©‹
<
T
>...>& 
gíî©‹s
, 
boﬁ
 
is_íd
)

840 : 
ba£_
(
ba£
),

841 
begö_
(
°d
::
gë
<
I
>(
gíî©‹s
).
begö
()...),

842 
íd_
(
°d
::
gë
<
I
>(
gíî©‹s
).
íd
()...),

843 
cuºít_
(
is_íd
 ? 
íd_
 : 
begö_
) {

844 
CompuãCuºítVÆue
();

846 ~
Iãøt‹Im∂
(Ë
	govîride
 {}

848 c⁄° 
	gP¨amGíî©‹I¡îÁ˚
<
	gP¨amTy≥
>* 
Ba£Gíî©‹
(Ëc⁄° 
	govîride
 {

849  
	gba£_
;

853 
Adv™˚
(Ë
	govîride
 {

854 
as£π
(!
AtEnd
());

856 ++
	g°d
::
gë
<...(
T
Ë- 1>(
cuºít_
);

858 
	gAdv™˚IfEnd
<...(
	gT
) - 1>();

859 
CompuãCuºítVÆue
();

861 
	gP¨amIãøt‹I¡îÁ˚
<
	gP¨amTy≥
>* 
Cl⁄e
(Ëc⁄° 
	govîride
 {

862  
√w
 
Iãøt‹Im∂
(*
this
);

865 c⁄° 
P¨amTy≥
* 
Cuºít
(Ëc⁄° 
	govîride
 {  
	gcuºít_vÆue_
.
gë
(); }

867 
boﬁ
 
EquÆs
(c⁄° 
P¨amIãøt‹I¡îÁ˚
<
P¨amTy≥
>& 
Ÿhî
Ëc⁄° 
	govîride
 {

870 
GTEST_CHECK_
(
Ba£Gíî©‹
(Ë=
Ÿhî
.BaseGenerator())

872 << "‰om dif„ª¡ gíî©‹s." << 
°d
::
ídl
;

873 c⁄° 
Iãøt‹Im∂
* 
	gty≥d_Ÿhî
 =

874 
CheckedDownˇ°ToA˘uÆTy≥
<c⁄° 
Iãøt‹Im∂
>(&
Ÿhî
);

879 i‡(
AtEnd
(Ë&& 
	gty≥d_Ÿhî
->AtEnd()Ë 
	gåue
;

881 
boﬁ
 
	gßme
 = 
åue
;

882 
boﬁ
 
	gdummy
[] = {

883 (
ßme
 = samê&& 
°d
::
gë
<
I
>(
cuºít_
) ==

884 
°d
::
gë
<
I
>(
ty≥d_Ÿhî
->
cuºít_
))...};

885 ()
	gdummy
;

886  
	gßme
;

889 
	g¥iv©e
:

890 
ãm∂©e
 <
size_t
 
ThisI
>

891 
Adv™˚IfEnd
() {

892 i‡(
°d
::
gë
<
ThisI
>(
cuºít_
Ë!°d::gë<ThisI>(
íd_
)) ;

894 
boﬁ
 
	gœ°
 = 
ThisI
 == 0;

895 i‡(
	gœ°
) {

900 
c⁄°ex¥
 
size_t
 
	gNextI
 = 
ThisI
 - (ThisI != 0);

901 
	g°d
::
gë
<
ThisI
>(
cuºít_
Ë
°d
::gë<ThisI>(
begö_
);

902 ++
	g°d
::
gë
<
NextI
>(
cuºít_
);

903 
	gAdv™˚IfEnd
<
	gNextI
>();

906 
CompuãCuºítVÆue
() {

907 i‡(!
AtEnd
())

908 
	gcuºít_vÆue_
 = 
°d
::
make_sh¨ed
<
P¨amTy≥
>(*°d::
gë
<
I
>(
cuºít_
)...);

910 
boﬁ
 
AtEnd
() const {

911 
boﬁ
 
	g©_íd
 = 
Ál£
;

912 
boﬁ
 
	gdummy
[] = {

913 (
©_íd
 =át_íd || 
°d
::
gë
<
I
>(
cuºít_
Ë=°d::gë<I>(
íd_
))...};

914 ()
	gdummy
;

915  
	g©_íd
;

918 c⁄° 
	gP¨amGíî©‹I¡îÁ˚
<
	gP¨amTy≥
>* c⁄° 
	gba£_
;

919 
	g°d
::
tu∂e
<
ty≥«me
 
P¨amGíî©‹
<
T
>::
ôî©‹
...> 
begö_
;

920 
	g°d
::
tu∂e
<
ty≥«me
 
P¨amGíî©‹
<
T
>::
ôî©‹
...> 
íd_
;

921 
	g°d
::
tu∂e
<
ty≥«me
 
P¨amGíî©‹
<
T
>::
ôî©‹
...> 
cuºít_
;

922 
	g°d
::
sh¨ed_±r
<
P¨amTy≥
> 
cuºít_vÆue_
;

925 
usög
 
	gIãøt‹
 = 
Iãøt‹Im∂
<
ty≥«me
 
MakeIndexSequí˚
<...(
T
)>::
ty≥
>;

927 
	g°d
::
tu∂e
<
P¨amGíî©‹
<
T
>...> 
gíî©‹s_
;

930 
	gãm∂©e
 <
	g˛ass
... 
	gGí
>

931 ˛as†
	cC¨ãsünProdu˘Hﬁdî
 {

932 
	gpublic
:

933 
C¨ãsünProdu˘Hﬁdî
(c⁄° 
Gí
&... 
g
Ë: 
gíî©‹s_
(g...) {}

934 
ãm∂©e
 <
ty≥«me
... 
T
>

935 
›î©‹
 
P¨amGíî©‹
<::
°d
::
tu∂e
<
T
...>>() const {

936  
P¨amGíî©‹
<::
°d
::
tu∂e
<
T
...>>(

937 
√w
 
C¨ãsünProdu˘Gíî©‹
<
T
...>(
gíî©‹s_
));

940 
	g¥iv©e
:

941 
°d
::
tu∂e
<
Gí
...> 
gíî©‹s_
;

	@/usr/include/gtest/internal/gtest-port.h

43 #i‚de‡
GOOGLETEST_INCLUDE_GTEST_INTERNAL_GTEST_PORT_H_


44 
	#GOOGLETEST_INCLUDE_GTEST_INTERNAL_GTEST_PORT_H_


	)

260 
	~<˘y≥.h
>

261 
	~<°ddef.h
>

262 
	~<°dio.h
>

263 
	~<°dlib.h
>

264 
	~<°rög.h
>

266 
	~<˚ºno
>

267 
	~<c°döt
>

268 
	~<limôs
>

269 
	~<ty≥_åaôs
>

271 #i‚de‡
_WIN32_WCE


272 
	~<sys/ty≥s.h
>

273 
	~<sys/°©.h
>

276 #i‡
deföed
 
__APPLE__


277 
	~<AvaûabûôyMa¸os.h
>

278 
	~<T¨gëC⁄dôi⁄Æs.h
>

281 
	~<io°ªam
>

282 
	~<loˇÀ
>

283 
	~<mem‹y
>

284 
	~<°rög
>

285 
	~<tu∂e
>

286 
	~<ve˘‹
>

288 
	~"gã°/öã∫Æ/cu°om/gã°-p‹t.h
"

289 
	~"gã°/öã∫Æ/gã°-p‹t-¨ch.h
"

291 #i‡!
deföed
(
GTEST_DEV_EMAIL_
)

292 
	#GTEST_DEV_EMAIL_
 "googÀã°‰amew‹k@@googÀgroups.com"

	)

293 
	#GTEST_FLAG_PREFIX_
 "gã°_"

	)

294 
	#GTEST_FLAG_PREFIX_DASH_
 "gã°-"

	)

295 
	#GTEST_FLAG_PREFIX_UPPER_
 "GTEST_"

	)

296 
	#GTEST_NAME_
 "GoogÀ Te°"

	)

297 
	#GTEST_PROJECT_URL_
 "hâps://gôhub.com/googÀ/googÀã°/"

	)

300 #i‡!
deföed
(
GTEST_INIT_GOOGLE_TEST_NAME_
)

301 
	#GTEST_INIT_GOOGLE_TEST_NAME_
 "ã°ög::InôGoogÀTe°"

	)

305 #ifde‡
__GNUC__


307 
	#GTEST_GCC_VER_
 \

308 (
__GNUC__
*10000 + 
__GNUC_MINOR__
*100 + 
__GNUC_PATCHLEVEL__
)

	)

316 #i‡
deföed
(
_MSC_VER
)

317 
	#GTEST_DISABLE_MSC_WARNINGS_PUSH_
(
w¨nögs
) \

318 
	`__¥agma
(
	`w¨nög
(
push
)) \

319 
	`__¥agma
(
	`w¨nög
(
dißbÀ
: 
w¨nögs
))

	)

320 
	#GTEST_DISABLE_MSC_WARNINGS_POP_
() \

321 
	`__¥agma
(
	`w¨nög
(
p›
))

	)

324 
	#GTEST_DISABLE_MSC_WARNINGS_PUSH_
(
w¨nögs
)

	)

325 
	#GTEST_DISABLE_MSC_WARNINGS_POP_
()

	)

330 #ifde‡
__˛™g__


331 
	#GTEST_DISABLE_MSC_DEPRECATED_PUSH_
() \

332 
	`_Pøgma
("clang diagnosticÖush") \

333 
	`_Pøgma
("clang diagnostic ignored \"-Wdeprecated-declarations\"") \

334 
	`_Pøgma
("˛™g dügno°i¯ign‹ed \"-Wdïªˇãd-im∂emíèti⁄s\"")

	)

335 
	#GTEST_DISABLE_MSC_DEPRECATED_POP_
() \

336 
	`_Pøgma
("˛™g dügno°i¯p›")

	)

338 
	#GTEST_DISABLE_MSC_DEPRECATED_PUSH_
() \

339 
	`GTEST_DISABLE_MSC_WARNINGS_PUSH_
(4996)

	)

340 
	#GTEST_DISABLE_MSC_DEPRECATED_POP_
() \

341 
	`GTEST_DISABLE_MSC_WARNINGS_POP_
()

	)

347 #i‡
GTEST_OS_WINDOWS


348 #i‡!
GTEST_OS_WINDOWS_MOBILE


349 
	~<dúe˘.h
>

350 
	~<io.h
>

353 #i‡
GTEST_OS_WINDOWS_MINGW
 && !
deföed
(
__MINGW64_VERSION_MAJOR
)

356 
_CRITICAL_SECTION
 
	tGTEST_CRITICAL_SECTION
;

361 
_RTL_CRITICAL_SECTION
 
	tGTEST_CRITICAL_SECTION
;

363 #ñi‡
GTEST_OS_XTENSA


364 
	~<uni°d.h
>

371 
	~<uni°d.h
>

372 
	~<°rögs.h
>

375 #i‡
GTEST_OS_LINUX_ANDROID


377 
	~<™droid/≠i-Àvñ.h
>

382 #i‚de‡
GTEST_HAS_POSIX_RE


383 #i‡
GTEST_OS_LINUX_ANDROID


385 
	#GTEST_HAS_POSIX_RE
 (
__ANDROID_API__
 >9)

	)

387 
	#GTEST_HAS_POSIX_RE
 (!
GTEST_OS_WINDOWS
 && !
GTEST_OS_XTENSA
)

	)

391 #i‡
GTEST_USES_PCRE


394 #ñi‡
GTEST_HAS_POSIX_RE


400 
	~<ªgex.h
>

402 
	#GTEST_USES_POSIX_RE
 1

	)

404 #ñi‡
GTEST_OS_WINDOWS


408 
	#GTEST_USES_SIMPLE_RE
 1

	)

414 
	#GTEST_USES_SIMPLE_RE
 1

	)

418 #i‚de‡
GTEST_HAS_EXCEPTIONS


421 #i‡
deföed
(
_MSC_VER
Ë&& deföed(
_CPPUNWIND
)

423 
	#GTEST_HAS_EXCEPTIONS
 1

	)

424 #ñi‡
deföed
(
__BORLANDC__
)

428 #i‚de‡
_HAS_EXCEPTIONS


429 
	#_HAS_EXCEPTIONS
 1

	)

431 
	#GTEST_HAS_EXCEPTIONS
 
_HAS_EXCEPTIONS


	)

432 #ñi‡
deföed
(
__˛™g__
)

441 
	#GTEST_HAS_EXCEPTIONS
 (
__EXCEPTIONS
 && 
	`__has_„©uª
(
cxx_ex˚±i⁄s
))

	)

442 #ñi‡
deföed
(
__GNUC__
Ë&& 
__EXCEPTIONS


444 
	#GTEST_HAS_EXCEPTIONS
 1

	)

445 #ñi‡
deföed
(
__SUNPRO_CC
)

449 
	#GTEST_HAS_EXCEPTIONS
 1

	)

450 #ñi‡
deföed
(
__IBMCPP__
Ë&& 
__EXCEPTIONS


452 
	#GTEST_HAS_EXCEPTIONS
 1

	)

453 #ñi‡
deföed
(
__HP_aCC
)

456 
	#GTEST_HAS_EXCEPTIONS
 1

	)

460 
	#GTEST_HAS_EXCEPTIONS
 0

	)

464 #i‚de‡
GTEST_HAS_STD_WSTRING


470 
	#GTEST_HAS_STD_WSTRING
 \

471 (!(
GTEST_OS_LINUX_ANDROID
 || 
GTEST_OS_CYGWIN
 || 
GTEST_OS_SOLARIS
 || \

472 
GTEST_OS_HAIKU
 || 
GTEST_OS_ESP32
 || 
GTEST_OS_ESP8266
 || 
GTEST_OS_XTENSA
))

	)

477 #i‚de‡
GTEST_HAS_RTTI


481 #ifde‡
_MSC_VER


483 #ifde‡
_CPPRTTI


484 
	#GTEST_HAS_RTTI
 1

	)

486 
	#GTEST_HAS_RTTI
 0

	)

491 #ñi‡
deföed
(
__GNUC__
)

493 #ifde‡
__GXX_RTTI


498 #i‡
GTEST_OS_LINUX_ANDROID
 && 
deföed
(
_STLPORT_MAJOR
) && \

499 !
	$deföed
(
__EXCEPTIONS
)

500 
	#GTEST_HAS_RTTI
 0

	)

502 
	#GTEST_HAS_RTTI
 1

	)

505 
	#GTEST_HAS_RTTI
 0

	)

511 #ñi‡
	`deföed
(
__˛™g__
)

513 
	#GTEST_HAS_RTTI
 
	`__has_„©uª
(
cxx_πti
)

	)

517 #ñi‡
	`deföed
(
__IBMCPP__
) && (__IBMCPP__ >= 900)

519 #ifde‡
__RTTI_ALL__


520 
	#GTEST_HAS_RTTI
 1

	)

522 
	#GTEST_HAS_RTTI
 0

	)

528 
	#GTEST_HAS_RTTI
 1

	)

536 #i‡
GTEST_HAS_RTTI


537 
	~<ty≥öfo
>

541 #i‚de‡
GTEST_HAS_PTHREAD


547 
	#GTEST_HAS_PTHREAD
 \

548 (
GTEST_OS_LINUX
 || 
GTEST_OS_MAC
 || 
GTEST_OS_HPUX
 || 
GTEST_OS_QNX
 || \

549 
GTEST_OS_FREEBSD
 || 
GTEST_OS_NACL
 || 
GTEST_OS_NETBSD
 || 
GTEST_OS_FUCHSIA
 || \

550 
GTEST_OS_DRAGONFLY
 || 
GTEST_OS_GNU_KFREEBSD
 || 
GTEST_OS_OPENBSD
 || \

551 
GTEST_OS_HAIKU
 || 
GTEST_OS_GNU_HURD
)

	)

554 #i‡
GTEST_HAS_PTHREAD


557 
	~<±hªad.h
>

560 
	~<time.h
>

567 #i‚de‡
GTEST_HAS_CLONE


570 #i‡
GTEST_OS_LINUX
 && !
	`deföed
(
__ü64__
)

571 #i‡
GTEST_OS_LINUX_ANDROID


574 #i‡
	`deföed
(
__LP64__
) || \

575 (
	`deföed
(
__¨m__
Ë&& 
__ANDROID_API__
 >= 9) || \

576 (
	`deföed
(
__mùs__
Ë&& 
__ANDROID_API__
 >= 12) || \

577 (
	`deföed
(
__i386__
Ë&& 
__ANDROID_API__
 >= 17)

578 
	#GTEST_HAS_CLONE
 1

	)

580 
	#GTEST_HAS_CLONE
 0

	)

583 
	#GTEST_HAS_CLONE
 1

	)

586 
	#GTEST_HAS_CLONE
 0

	)

593 #i‚de‡
GTEST_HAS_STREAM_REDIRECTION


596 #i‡
GTEST_OS_WINDOWS_MOBILE
 || 
GTEST_OS_WINDOWS_PHONE
 || \

597 
GTEST_OS_WINDOWS_RT
 || 
GTEST_OS_ESP8266
 || 
GTEST_OS_XTENSA


598 
	#GTEST_HAS_STREAM_REDIRECTION
 0

	)

600 
	#GTEST_HAS_STREAM_REDIRECTION
 1

	)

606 #i‡(
GTEST_OS_LINUX
 || 
GTEST_OS_CYGWIN
 || 
GTEST_OS_SOLARIS
 || \

607 (
GTEST_OS_MAC
 && !
GTEST_OS_IOS
) || \

608 (
GTEST_OS_WINDOWS_DESKTOP
 && 
_MSC_VER
Ë|| 
GTEST_OS_WINDOWS_MINGW
 || \

609 
GTEST_OS_AIX
 || 
GTEST_OS_HPUX
 || 
GTEST_OS_OPENBSD
 || 
GTEST_OS_QNX
 || \

610 
GTEST_OS_FREEBSD
 || 
GTEST_OS_NETBSD
 || 
GTEST_OS_FUCHSIA
 || \

611 
GTEST_OS_DRAGONFLY
 || 
GTEST_OS_GNU_KFREEBSD
 || 
GTEST_OS_HAIKU
 || \

612 
GTEST_OS_GNU_HURD
)

613 
	#GTEST_HAS_DEATH_TEST
 1

	)

620 #i‡
	`deföed
(
__GNUC__
Ë|| deföed(
_MSC_VER
Ë|| deföed(
__SUNPRO_CC
) || \

621 
	`deföed
(
__IBMCPP__
Ë|| 
	$deföed
(
__HP_aCC
)

622 
	#GTEST_HAS_TYPED_TEST
 1

	)

623 
	#GTEST_HAS_TYPED_TEST_P
 1

	)

627 
	#GTEST_WIDE_STRING_USES_UTF16_
 \

628 (
GTEST_OS_WINDOWS
 || 
GTEST_OS_CYGWIN
 || 
GTEST_OS_AIX
 || 
GTEST_OS_OS2
)

	)

631 #i‡
GTEST_OS_LINUX
 || 
GTEST_OS_GNU_KFREEBSD
 || 
GTEST_OS_DRAGONFLY
 || \

632 
GTEST_OS_FREEBSD
 || 
GTEST_OS_NETBSD
 || 
GTEST_OS_OPENBSD
 || \

633 
GTEST_OS_GNU_HURD


634 
	#GTEST_CAN_STREAM_RESULTS_
 1

	)

647 #ifde‡
__INTEL_COMPILER


648 
	#GTEST_AMBIGUOUS_ELSE_BLOCKER_


	)

650 
	#GTEST_AMBIGUOUS_ELSE_BLOCKER_
 0) 0: :

652 

	)

664 #i‡
	`deföed
(
__GNUC__
Ë&& !deföed(
COMPILER_ICC
)

665 
	#GTEST_ATTRIBUTE_UNUSED_
 
	`__©åibuã__
 ((
unu£d
))

	)

666 #ñi‡
	`deföed
(
__˛™g__
)

667 #i‡
	`__has_©åibuã
(
unu£d
)

668 
	#GTEST_ATTRIBUTE_UNUSED_
 
	`__©åibuã__
 ((
unu£d
))

	)

671 #i‚de‡
GTEST_ATTRIBUTE_UNUSED_


672 
	#GTEST_ATTRIBUTE_UNUSED_


	)

676 #i‡(
	`deföed
(
__GNUC__
Ë|| deföed(
__˛™g__
)Ë&& !deföed(
COMPILER_ICC
)

677 #i‡
	`deföed
(
__MINGW_PRINTF_FORMAT
)

681 
	#GTEST_ATTRIBUTE_PRINTF_
(
°rög_ödex
, 
fú°_to_check
) \

682 
	`__©åibuã__
((
	`__f‹m©__
(
__MINGW_PRINTF_FORMAT
, 
°rög_ödex
, \

683 
fú°_to_check
)))

	)

685 
	#GTEST_ATTRIBUTE_PRINTF_
(
°rög_ödex
, 
fú°_to_check
) \

686 
	`__©åibuã__
((
	`__f‹m©__
(
__¥ötf__
, 
°rög_ödex
, 
fú°_to_check
)))

	)

689 
	#GTEST_ATTRIBUTE_PRINTF_
(
°rög_ödex
, 
fú°_to_check
)

	)

695 
	#GTEST_DISALLOW_ASSIGN_
(
ty≥
) \

696 
ty≥
& 
›î©‹
=—y≥ c⁄° &Ë
dñëe


	)

700 
	#GTEST_DISALLOW_COPY_AND_ASSIGN_
(
ty≥
) \

701 
	`ty≥
(
ty≥
 c⁄°&Ë
dñëe
; \

702 
ty≥
& 
›î©‹
=—y≥ c⁄°&Ë
dñëe


	)

706 
	#GTEST_DISALLOW_MOVE_ASSIGN_
(
ty≥
) \

707 
ty≥
& 
›î©‹
=—y≥ &&Ë
n€x˚±
 = 
dñëe


	)

711 
	#GTEST_DISALLOW_MOVE_AND_ASSIGN_
(
ty≥
) \

712 
	`ty≥
(
ty≥
&&Ë
n€x˚±
 = 
dñëe
; \

713 
ty≥
& 
›î©‹
=—y≥&&Ë
n€x˚±
 = 
dñëe


	)

720 #i‡
	`deföed
(
__GNUC__
Ë&& !deföed(
COMPILER_ICC
)

721 
	#GTEST_MUST_USE_RESULT_
 
	`__©åibuã__
 ((
w¨n_unu£d_ªsu…
))

	)

723 
	#GTEST_MUST_USE_RESULT_


	)

734 
	#GTEST_INTENTIONAL_CONST_COND_PUSH_
() \

735 
	`GTEST_DISABLE_MSC_WARNINGS_PUSH_
(4127)

	)

736 
	#GTEST_INTENTIONAL_CONST_COND_POP_
() \

737 
	`GTEST_DISABLE_MSC_WARNINGS_POP_
()

	)

742 #i‚de‡
GTEST_HAS_SEH


745 #i‡
	`deföed
(
_MSC_VER
Ë|| deföed(
__BORLANDC__
)

747 
	#GTEST_HAS_SEH
 1

	)

750 
	#GTEST_HAS_SEH
 0

	)

755 #i‚de‡
GTEST_IS_THREADSAFE


757 
	#GTEST_IS_THREADSAFE
 \

758 (
GTEST_HAS_MUTEX_AND_THREAD_LOCAL_
 || \

759 (
GTEST_OS_WINDOWS
 && !
GTEST_OS_WINDOWS_PHONE
 && !
GTEST_OS_WINDOWS_RT
) || \

760 
GTEST_HAS_PTHREAD
)

	)

767 #i‚de‡
GTEST_API_


769 #ifde‡
_MSC_VER


770 #i‡
GTEST_LINKED_AS_SHARED_LIBRARY


771 
	#GTEST_API_
 
	`__de˛•ec
(
dŒimp‹t
)

	)

772 #ñi‡
GTEST_CREATE_SHARED_LIBRARY


773 
	#GTEST_API_
 
	`__de˛•ec
(
dŒexp‹t
)

	)

775 #ñi‡
__GNUC__
 >4 || 
	`deföed
(
__˛™g__
)

776 
	#GTEST_API_
 
	`__©åibuã__
((
	`visibûôy
 ("deÁu…")))

	)

781 #i‚de‡
GTEST_API_


782 
	#GTEST_API_


	)

785 #i‚de‡
GTEST_DEFAULT_DEATH_TEST_STYLE


786 
	#GTEST_DEFAULT_DEATH_TEST_STYLE
 "Á°"

	)

789 #ifde‡
__GNUC__


791 
	#GTEST_NO_INLINE_
 
	`__©åibuã__
((
noölöe
))

	)

793 
	#GTEST_NO_INLINE_


	)

797 #i‡!
	`deföed
(
GTEST_HAS_CXXABI_H_
)

798 #i‡
	`deföed
(
__GLIBCXX__
Ë|| (deföed(
_LIBCPP_VERSION
Ë&& !deföed(
_MSC_VER
))

799 
	#GTEST_HAS_CXXABI_H_
 1

	)

801 
	#GTEST_HAS_CXXABI_H_
 0

	)

807 #i‡
	`deföed
(
__˛™g__
)

808 #i‡
	`__has_„©uª
(
mem‹y_ßnôizî
)

809 
	#GTEST_ATTRIBUTE_NO_SANITIZE_MEMORY_
 \

810 
	`__©åibuã__
((
no_ßnôize_mem‹y
))

	)

812 
	#GTEST_ATTRIBUTE_NO_SANITIZE_MEMORY_


	)

815 
	#GTEST_ATTRIBUTE_NO_SANITIZE_MEMORY_


	)

819 #i‡
	`deföed
(
__˛™g__
)

820 #i‡
	`__has_„©uª
(
addªss_ßnôizî
)

821 
	#GTEST_ATTRIBUTE_NO_SANITIZE_ADDRESS_
 \

822 
	`__©åibuã__
((
no_ßnôize_addªss
))

	)

824 
	#GTEST_ATTRIBUTE_NO_SANITIZE_ADDRESS_


	)

827 
	#GTEST_ATTRIBUTE_NO_SANITIZE_ADDRESS_


	)

831 #i‡
	`deföed
(
__˛™g__
)

832 #i‡
	`__has_„©uª
(
hwaddªss_ßnôizî
)

833 
	#GTEST_ATTRIBUTE_NO_SANITIZE_HWADDRESS_
 \

834 
	`__©åibuã__
((
	`no_ßnôize
("hwaddªss")))

	)

836 
	#GTEST_ATTRIBUTE_NO_SANITIZE_HWADDRESS_


	)

839 
	#GTEST_ATTRIBUTE_NO_SANITIZE_HWADDRESS_


	)

843 #i‡
	`deföed
(
__˛™g__
)

844 #i‡
	`__has_„©uª
(
thªad_ßnôizî
)

845 
	#GTEST_ATTRIBUTE_NO_SANITIZE_THREAD_
 \

846 
	`__©åibuã__
((
no_ßnôize_thªad
))

	)

848 
	#GTEST_ATTRIBUTE_NO_SANITIZE_THREAD_


	)

851 
	#GTEST_ATTRIBUTE_NO_SANITIZE_THREAD_


	)

854 
«me•a˚
 
ã°ög
 {

856 
˛ass
 
Mesßge
;

860 
usög
 
°d
::
gë
;

861 
usög
 
°d
::
make_tu∂e
;

862 
usög
 
°d
::
tu∂e
;

863 
usög
 
°d
::
tu∂e_ñemít
;

864 
usög
 
°d
::
tu∂e_size
;

866 
«me•a˚
 
öã∫Æ
 {

871 
˛ass
 
Se¸ë
;

882 
	#GTEST_COMPILE_ASSERT_
(
ex¥
, 
msg
Ë
	`°©ic_as£π
”x¥, #msg)

	)

886 
GTEST_API_
 
boﬁ
 
	`IsTrue
(boﬁ 
c⁄dôi⁄
);

890 #i‡
GTEST_USES_PCRE


892 #ñi‡
GTEST_USES_POSIX_RE
 || 
GTEST_USES_SIMPLE_RE


896 ˛as†
	cGTEST_API_
 
RE
 {

897 
public
:

900 
	`RE
(c⁄° 
RE
& 
Ÿhî
Ë{ 
	`Inô
(Ÿhî.
	`∑âîn
()); }

903 
	`RE
(c⁄° ::
°d
::
°rög
& 
ªgex
Ë{ 
	`Inô
‘egex.
	`c_°r
()); }

905 
	`RE
(c⁄° * 
ªgex
Ë{ 
	`Inô
(regex); }

906 ~
	`RE
();

909 c⁄° * 
	`∑âîn
(Ëc⁄° {  
∑âîn_
; }

915 
boﬁ
 
	`FuŒM©ch
(c⁄° ::
°d
::
°rög
& 
°r
, c⁄° 
RE
& 
ª
) {

916  
	`FuŒM©ch
(
°r
.
	`c_°r
(), 
ª
);

918 
boﬁ
 
	`P¨tülM©ch
(c⁄° ::
°d
::
°rög
& 
°r
, c⁄° 
RE
& 
ª
) {

919  
	`P¨tülM©ch
(
°r
.
	`c_°r
(), 
ª
);

922 
boﬁ
 
	`FuŒM©ch
(c⁄° * 
°r
, c⁄° 
RE
& 
ª
);

923 
boﬁ
 
	`P¨tülM©ch
(c⁄° * 
°r
, c⁄° 
RE
& 
ª
);

925 
¥iv©e
:

926 
	`Inô
(c⁄° * 
ªgex
);

927 c⁄° * 
∑âîn_
;

928 
boﬁ
 
is_vÆid_
;

930 #i‡
GTEST_USES_POSIX_RE


932 
ªgex_t
 
fuŒ_ªgex_
;

933 
ªgex_t
 
∑πül_ªgex_
;

937 c⁄° * 
fuŒ_∑âîn_
;

946 
GTEST_API_
 ::
°d
::
°rög
 
	`F‹m©FûeLoˇti⁄
(c⁄° * 
fûe
, 
löe
);

951 
GTEST_API_
 ::
°d
::
°rög
 
	`F‹m©CompûîIndïídítFûeLoˇti⁄
(c⁄° * 
fûe
,

952 
löe
);

960 
	eGTe°LogSevîôy
 {

961 
GTEST_INFO
,

962 
GTEST_WARNING
,

963 
GTEST_ERROR
,

964 
GTEST_FATAL


970 ˛as†
	cGTEST_API_
 
GTe°Log
 {

971 
public
:

972 
	`GTe°Log
(
GTe°LogSevîôy
 
£vîôy
, c⁄° * 
fûe
, 
löe
);

975 ~
	`GTe°Log
();

977 ::
°d
::
o°ªam
& 
	`GëSåóm
(Ë{  ::°d::
˚º
; }

979 
¥iv©e
:

980 c⁄° 
GTe°LogSevîôy
 
£vîôy_
;

982 
	`GTEST_DISALLOW_COPY_AND_ASSIGN_
(
GTe°Log
);

985 #i‡!
	`deföed
(
GTEST_LOG_
)

987 
	#GTEST_LOG_
(
£vîôy
) \

988 ::
ã°ög
::
öã∫Æ
::
	`GTe°Log
(::ã°ög::öã∫Æ::
GTEST_
##
£vîôy
, \

989 
__FILE__
, 
__LINE__
).
	`GëSåóm
()

	)

991 
ölöe
 
	`LogToStdîr
() {}

992 
ölöe
 
	`FlushInfoLog
(Ë{ 
	`fÊush
(
nuŒ±r
); }

996 #i‡!
	`deföed
(
GTEST_CHECK_
)

1011 
	#GTEST_CHECK_
(
c⁄dôi⁄
) \

1012 
GTEST_AMBIGUOUS_ELSE_BLOCKER_
 \

1013 i‡(::
ã°ög
::
öã∫Æ
::
	`IsTrue
(
c⁄dôi⁄
)) \

1016 
	`GTEST_LOG_
(
FATAL
Ë<< "C⁄dôi⁄ " #c⁄dôi⁄ " faûed. "

	)

1024 
	#GTEST_CHECK_POSIX_SUCCESS_
(
posix_ˇŒ
) \

1025 i‡(c⁄° 
gã°_îr‹
 = (
posix_ˇŒ
)) \

1026 
	`GTEST_LOG_
(
FATAL
) << #posix_call << "failed withÉrror " \

1027 << 
gã°_îr‹


	)

1040 
ãm∂©e
 <
ty≥«me
 
T
>

1041 
	sC⁄°Ref
 { c⁄° 
	tT
& 
	tty≥
; };

1042 
ãm∂©e
 <
ty≥«me
 
T
>

1043 
C⁄°Ref
<
T
&> { T& 
	tty≥
; };

1046 
	#GTEST_REFERENCE_TO_CONST_
(
T
) \

1047 
ty≥«me
 ::
ã°ög
::
öã∫Æ
::
C⁄°Ref
<
T
>::
ty≥


	)

1069 
ãm∂©e
<
ty≥«me
 
To
>

1070 
ölöe
 
To
 
	`Im∂icôCa°_
(Tÿ
x
) {  x; }

1093 
ãm∂©e
<
ty≥«me
 
To
,Åy≥«mê
From
>

1094 
ölöe
 
To
 
	`DownCa°_
(
From
* 
f
) {

1099 
	`GTEST_INTENTIONAL_CONST_COND_PUSH_
()

1100 i‡(
Ál£
) {

1101 
	`GTEST_INTENTIONAL_CONST_COND_POP_
()

1102 c⁄° 
To
 
to
 = 
nuŒ±r
;

1103 ::
ã°ög
::
öã∫Æ
::
Im∂icôCa°_
<
From
*>(
to
);

1106 #i‡
GTEST_HAS_RTTI


1108 
	`GTEST_CHECK_
(
f
 =
nuŒ±r
 || 
dy«mic_ˇ°
<
To
>(f) !=Çullptr);

1110  
°©ic_ˇ°
<
To
>(
f
);

1118 
ãm∂©e
 <
˛ass
 
Dîived
, cœs†
Ba£
>

1119 
Dîived
* 
	`CheckedDownˇ°ToA˘uÆTy≥
(
Ba£
* 
ba£
) {

1120 #i‡
GTEST_HAS_RTTI


1121 
	`GTEST_CHECK_
(
	`ty≥id
(*
ba£
Ë=ty≥id(
Dîived
));

1124 #i‡
GTEST_HAS_DOWNCAST_


1125  ::
down_ˇ°
<
Dîived
*>(
ba£
);

1126 #ñi‡
GTEST_HAS_RTTI


1127  
dy«mic_ˇ°
<
Dîived
*>(
ba£
);

1129  
°©ic_ˇ°
<
Dîived
*>(
ba£
);

1133 #i‡
GTEST_HAS_STREAM_REDIRECTION


1141 
GTEST_API_
 
	`C≠tuªStdout
();

1142 
GTEST_API_
 
°d
::
°rög
 
	`GëC≠tuªdStdout
();

1143 
GTEST_API_
 
	`C≠tuªStdîr
();

1144 
GTEST_API_
 
°d
::
°rög
 
	`GëC≠tuªdStdîr
();

1148 
GTEST_API_
 
size_t
 
	`GëFûeSize
(
FILE
* 
fûe
);

1151 
GTEST_API_
 
°d
::
°rög
 
	`RódE¡úeFûe
(
FILE
* 
fûe
);

1154 
GTEST_API_
 
°d
::
ve˘‹
<°d::
°rög
> 
	`GëArgvs
();

1156 #i‡
GTEST_HAS_DEATH_TEST


1158 
°d
::
ve˘‹
<°d::
°rög
> 
	`GëInje˘abÀArgvs
();

1160 
	`SëInje˘abÀArgvs
(c⁄° 
°d
::
ve˘‹
<°d::
°rög
>* 
√w_¨gvs
);

1161 
	`SëInje˘abÀArgvs
(c⁄° 
°d
::
ve˘‹
<°d::
°rög
>& 
√w_¨gvs
);

1162 
	`CÀ¨Inje˘abÀArgvs
();

1167 #i‡
GTEST_IS_THREADSAFE


1168 #i‡
GTEST_HAS_PTHREAD


1172 
ölöe
 
	`SÀïMûli£c⁄ds
(
n
) {

1173 c⁄° 
time•ec
 
time
 = {

1175 
n
 * 1000L * 1000L,

1177 
	`«no¶ìp
(&
time
, 
nuŒ±r
);

1181 #i‡
GTEST_HAS_NOTIFICATION_


1185 #ñi‡
GTEST_HAS_PTHREAD


1192 ˛as†
	cNŸifiˇti⁄
 {

1193 
public
:

1194 
	`NŸifiˇti⁄
(Ë: 
	`nŸifõd_
(
Ál£
) {

1195 
	`GTEST_CHECK_POSIX_SUCCESS_
(
	`±hªad_muãx_öô
(&
muãx_
, 
nuŒ±r
));

1197 ~
	`NŸifiˇti⁄
() {

1198 
	`±hªad_muãx_de°roy
(&
muãx_
);

1203 
	`NŸify
() {

1204 
	`±hªad_muãx_lock
(&
muãx_
);

1205 
nŸifõd_
 = 
åue
;

1206 
	`±hªad_muãx_u∆ock
(&
muãx_
);

1211 
	`WaôF‹NŸifiˇti⁄
() {

1213 
	`±hªad_muãx_lock
(&
muãx_
);

1214 c⁄° 
boﬁ
 
nŸifõd
 = 
nŸifõd_
;

1215 
	`±hªad_muãx_u∆ock
(&
muãx_
);

1216 i‡(
nŸifõd
)

1218 
	`SÀïMûli£c⁄ds
(10);

1222 
¥iv©e
:

1223 
±hªad_muãx_t
 
muãx_
;

1224 
boﬁ
 
nŸifõd_
;

1226 
	`GTEST_DISALLOW_COPY_AND_ASSIGN_
(
NŸifiˇti⁄
);

1229 #ñi‡
GTEST_OS_WINDOWS
 && !
GTEST_OS_WINDOWS_PHONE
 && !
GTEST_OS_WINDOWS_RT


1231 
GTEST_API_
 
	`SÀïMûli£c⁄ds
(
n
);

1235 ˛as†
	cGTEST_API_
 
AutoH™dÀ
 {

1236 
public
:

1242 * 
	tH™dÀ
;

1243 
	`AutoH™dÀ
();

1244 
ex∂icô
 
	`AutoH™dÀ
(
H™dÀ
 
h™dÀ
);

1246 ~
	`AutoH™dÀ
();

1248 
H™dÀ
 
	`Gë
() const;

1249 
	`Re£t
();

1250 
	`Re£t
(
H™dÀ
 
h™dÀ
);

1252 
¥iv©e
:

1255 
boﬁ
 
	`IsClo£abÀ
() const;

1257 
H™dÀ
 
h™dÀ_
;

1259 
	`GTEST_DISALLOW_COPY_AND_ASSIGN_
(
AutoH™dÀ
);

1268 ˛as†
	cGTEST_API_
 
NŸifiˇti⁄
 {

1269 
public
:

1270 
	`NŸifiˇti⁄
();

1271 
	`NŸify
();

1272 
	`WaôF‹NŸifiˇti⁄
();

1274 
¥iv©e
:

1275 
AutoH™dÀ
 
evít_
;

1277 
	`GTEST_DISALLOW_COPY_AND_ASSIGN_
(
NŸifiˇti⁄
);

1284 #i‡
GTEST_HAS_PTHREAD
 && !
GTEST_OS_WINDOWS_MINGW


1291 ˛as†
	cThªadWôhP¨amBa£
 {

1292 
public
:

1293 
vútuÆ
 ~
	`ThªadWôhP¨amBa£
() {}

1294 
vútuÆ
 
	`Run
() = 0;

1303 "C" 
ölöe
 * 
	`ThªadFuncWôhCLökage
(* 
thªad
) {

1304 
°©ic_ˇ°
<
ThªadWôhP¨amBa£
*>(
thªad
)->
	`Run
();

1305  
nuŒ±r
;

1320 
ãm∂©e
 <
ty≥«me
 
T
>

1321 ˛as†
	cThªadWôhP¨am
 : 
public
 
ThªadWôhP¨amBa£
 {

1322 
public
:

1323 
	tU£rThªadFunc
(
	tT
);

1325 
	`ThªadWôhP¨am
(
U£rThªadFunc
* 
func
, 
T
 
∑øm
, 
NŸifiˇti⁄
* 
thªad_ˇn_°¨t
)

1326 : 
	`func_
(
func
),

1327 
	`∑øm_
(
∑øm
),

1328 
	`thªad_ˇn_°¨t_
(
thªad_ˇn_°¨t
),

1329 
	`föished_
(
Ál£
) {

1330 
ThªadWôhP¨amBa£
* c⁄° 
ba£
 = 
this
;

1333 
	`GTEST_CHECK_POSIX_SUCCESS_
(

1334 
	`±hªad_¸óã
(&
thªad_
, 
nuŒ±r
, &
ThªadFuncWôhCLökage
, 
ba£
));

1336 ~
	`ThªadWôhP¨am
(Ë
ovîride
 { 
	`Joö
(); }

1338 
	`Joö
() {

1339 i‡(!
föished_
) {

1340 
	`GTEST_CHECK_POSIX_SUCCESS_
(
	`±hªad_joö
(
thªad_
, 
nuŒ±r
));

1341 
föished_
 = 
åue
;

1345 
	`Run
(Ë
ovîride
 {

1346 i‡(
thªad_ˇn_°¨t_
 !
nuŒ±r
Ëthªad_ˇn_°¨t_->
	`WaôF‹NŸifiˇti⁄
();

1347 
	`func_
(
∑øm_
);

1350 
¥iv©e
:

1351 
U£rThªadFunc
* c⁄° 
func_
;

1352 c⁄° 
T
 
∑øm_
;

1355 
NŸifiˇti⁄
* c⁄° 
thªad_ˇn_°¨t_
;

1356 
boﬁ
 
föished_
;

1358 
±hªad_t
 
thªad_
;

1360 
	`GTEST_DISALLOW_COPY_AND_ASSIGN_
(
ThªadWôhP¨am
);

1365 #i‡
GTEST_HAS_MUTEX_AND_THREAD_LOCAL_


1369 #ñi‡
GTEST_OS_WINDOWS
 && !
GTEST_OS_WINDOWS_PHONE
 && !
GTEST_OS_WINDOWS_RT


1385 ˛as†
	cGTEST_API_
 
Muãx
 {

1386 
public
:

1387 
	eMuãxTy≥
 { 
kSètic
 = 0, 
kDy«mic
 = 1 };

1391 
	eSèticC⁄°ru˘‹Sñe˘‹
 { 
kSèticMuãx
 = 0 };

1396 
ex∂icô
 
	`Muãx
(
SèticC⁄°ru˘‹Sñe˘‹
 ) {}

1398 
	`Muãx
();

1399 ~
	`Muãx
();

1401 
	`Lock
();

1403 
	`U∆ock
();

1407 
	`As£πHñd
();

1409 
¥iv©e
:

1411 
	`ThªadSa„LazyInô
();

1415 
ow√r_thªad_id_
;

1419 
MuãxTy≥
 
ty≥_
;

1420 
¸ôiˇl_£˘i⁄_öô_pha£_
;

1421 
GTEST_CRITICAL_SECTION
* 
¸ôiˇl_£˘i⁄_
;

1423 
	`GTEST_DISALLOW_COPY_AND_ASSIGN_
(
Muãx
);

1426 
	#GTEST_DECLARE_STATIC_MUTEX_
(
muãx
) \

1427 ::
ã°ög
::
öã∫Æ
::
Muãx
 
muãx


	)

1429 
	#GTEST_DEFINE_STATIC_MUTEX_
(
muãx
) \

1430 ::
ã°ög
::
öã∫Æ
::
Muãx
 
	`muãx
(::ã°ög::öã∫Æ::Muãx::
kSèticMuãx
)

	)

1437 ˛as†
	cGTe°MuãxLock
 {

1438 
public
:

1439 
ex∂icô
 
	`GTe°MuãxLock
(
Muãx
* 
muãx
)

1440 : 
	`muãx_
(
muãx
Ë{ 
muãx_
->
	`Lock
(); }

1442 ~
	`GTe°MuãxLock
(Ë{ 
muãx_
->
	`U∆ock
(); }

1444 
¥iv©e
:

1445 
Muãx
* c⁄° 
muãx_
;

1447 
	`GTEST_DISALLOW_COPY_AND_ASSIGN_
(
GTe°MuãxLock
);

1450 
GTe°MuãxLock
 
	tMuãxLock
;

1454 ˛as†
	cThªadLoˇlVÆueHﬁdîBa£
 {

1455 
public
:

1456 
vútuÆ
 ~
	`ThªadLoˇlVÆueHﬁdîBa£
() {}

1461 ˛as†
	cThªadLoˇlBa£
 {

1462 
public
:

1467 
vútuÆ
 
ThªadLoˇlVÆueHﬁdîBa£
* 
	`NewVÆueF‹CuºítThªad
() const = 0;

1469 
¥Ÿe˘ed
:

1470 
	`ThªadLoˇlBa£
() {}

1471 
vútuÆ
 ~
	`ThªadLoˇlBa£
() {}

1473 
¥iv©e
:

1474 
	`GTEST_DISALLOW_COPY_AND_ASSIGN_
(
ThªadLoˇlBa£
);

1480 ˛as†
	cGTEST_API_
 
ThªadLoˇlRegi°ry
 {

1481 
public
:

1484 
ThªadLoˇlVÆueHﬁdîBa£
* 
	`GëVÆueOnCuºítThªad
(

1485 c⁄° 
ThªadLoˇlBa£
* 
thªad_loˇl_ö°™˚
);

1488 
	`OnThªadLoˇlDe°royed
(

1489 c⁄° 
ThªadLoˇlBa£
* 
thªad_loˇl_ö°™˚
);

1492 ˛as†
	cGTEST_API_
 
ThªadWôhP¨amBa£
 {

1493 
public
:

1494 
	`Joö
();

1496 
¥Ÿe˘ed
:

1497 ˛as†
	cRu¬abÀ
 {

1498 
public
:

1499 
vútuÆ
 ~
	`Ru¬abÀ
() {}

1500 
vútuÆ
 
	`Run
() = 0;

1503 
	`ThªadWôhP¨amBa£
(
Ru¬abÀ
 *
ru¬abÀ
, 
NŸifiˇti⁄
* 
thªad_ˇn_°¨t
);

1504 
vútuÆ
 ~
	`ThªadWôhP¨amBa£
();

1506 
¥iv©e
:

1507 
AutoH™dÀ
 
thªad_
;

1511 
ãm∂©e
 <
ty≥«me
 
T
>

1512 ˛as†
	cThªadWôhP¨am
 : 
public
 
ThªadWôhP¨amBa£
 {

1513 
public
:

1514 
	tU£rThªadFunc
(
	tT
);

1516 
	`ThªadWôhP¨am
(
U£rThªadFunc
* 
func
, 
T
 
∑øm
, 
NŸifiˇti⁄
* 
thªad_ˇn_°¨t
)

1517 : 
	`ThªadWôhP¨amBa£
(
√w
 
	`Ru¬abÀIm∂
(
func
, 
∑øm
), 
thªad_ˇn_°¨t
) {

1519 
vútuÆ
 ~
	`ThªadWôhP¨am
() {}

1521 
¥iv©e
:

1522 ˛as†
	cRu¬abÀIm∂
 : 
public
 
Ru¬abÀ
 {

1523 
public
:

1524 
	`Ru¬abÀIm∂
(
U£rThªadFunc
* 
func
, 
T
 
∑øm
)

1525 : 
	`func_
(
func
),

1526 
	`∑øm_
(
∑øm
) {

1528 
vútuÆ
 ~
	`Ru¬abÀIm∂
() {}

1529 
vútuÆ
 
	`Run
() {

1530 
	`func_
(
∑øm_
);

1533 
¥iv©e
:

1534 
U£rThªadFunc
* c⁄° 
func_
;

1535 c⁄° 
T
 
∑øm_
;

1537 
	`GTEST_DISALLOW_COPY_AND_ASSIGN_
(
Ru¬abÀIm∂
);

1540 
	`GTEST_DISALLOW_COPY_AND_ASSIGN_
(
ThªadWôhP¨am
);

1570 
ãm∂©e
 <
ty≥«me
 
T
>

1571 ˛as†
	cThªadLoˇl
 : 
public
 
ThªadLoˇlBa£
 {

1572 
public
:

1573 
	`ThªadLoˇl
(Ë: 
	`deÁu…_Á˘‹y_
(
√w
 
	`DeÁu…VÆueHﬁdîFa˘‹y
()) {}

1574 
ex∂icô
 
	`ThªadLoˇl
(c⁄° 
T
& 
vÆue
)

1575 : 
	`deÁu…_Á˘‹y_
(
√w
 
	`In°™˚VÆueHﬁdîFa˘‹y
(
vÆue
)) {}

1577 ~
	`ThªadLoˇl
(Ë{ 
ThªadLoˇlRegi°ry
::
	`OnThªadLoˇlDe°royed
(
this
); }

1579 
T
* 
	`poöãr
(Ë{  
	`GëOrCª©eVÆue
(); }

1580 c⁄° 
T
* 
	`poöãr
(Ëc⁄° {  
	`GëOrCª©eVÆue
(); }

1581 c⁄° 
T
& 
	`gë
(Ëc⁄° {  *
	`poöãr
(); }

1582 
	`£t
(c⁄° 
T
& 
vÆue
Ë{ *
	`poöãr
() = value; }

1584 
¥iv©e
:

1587 ˛as†
	cVÆueHﬁdî
 : 
public
 
ThªadLoˇlVÆueHﬁdîBa£
 {

1588 
public
:

1589 
	`VÆueHﬁdî
(Ë: 
	`vÆue_
() {}

1590 
ex∂icô
 
	`VÆueHﬁdî
(c⁄° 
T
& 
vÆue
Ë: 
	`vÆue_
(value) {}

1592 
T
* 
	`poöãr
(Ë{  &
vÆue_
; }

1594 
¥iv©e
:

1595 
T
 
vÆue_
;

1596 
	`GTEST_DISALLOW_COPY_AND_ASSIGN_
(
VÆueHﬁdî
);

1600 
T
* 
	`GëOrCª©eVÆue
() const {

1601  
°©ic_ˇ°
<
VÆueHﬁdî
*>(

1602 
ThªadLoˇlRegi°ry
::
	`GëVÆueOnCuºítThªad
(
this
))->
	`poöãr
();

1605 
vútuÆ
 
ThªadLoˇlVÆueHﬁdîBa£
* 
	`NewVÆueF‹CuºítThªad
() const {

1606  
deÁu…_Á˘‹y_
->
	`MakeNewHﬁdî
();

1609 ˛as†
	cVÆueHﬁdîFa˘‹y
 {

1610 
public
:

1611 
	`VÆueHﬁdîFa˘‹y
() {}

1612 
vútuÆ
 ~
	`VÆueHﬁdîFa˘‹y
() {}

1613 
vútuÆ
 
VÆueHﬁdî
* 
	`MakeNewHﬁdî
() const = 0;

1615 
¥iv©e
:

1616 
	`GTEST_DISALLOW_COPY_AND_ASSIGN_
(
VÆueHﬁdîFa˘‹y
);

1619 ˛as†
	cDeÁu…VÆueHﬁdîFa˘‹y
 : 
public
 
VÆueHﬁdîFa˘‹y
 {

1620 
public
:

1621 
	`DeÁu…VÆueHﬁdîFa˘‹y
() {}

1622 
VÆueHﬁdî
* 
	`MakeNewHﬁdî
(Ëc⁄° 
ovîride
 {  
√w
 
	`VÆueHﬁdî
(); }

1624 
¥iv©e
:

1625 
	`GTEST_DISALLOW_COPY_AND_ASSIGN_
(
DeÁu…VÆueHﬁdîFa˘‹y
);

1628 ˛as†
	cIn°™˚VÆueHﬁdîFa˘‹y
 : 
public
 
VÆueHﬁdîFa˘‹y
 {

1629 
public
:

1630 
ex∂icô
 
	`In°™˚VÆueHﬁdîFa˘‹y
(c⁄° 
T
& 
vÆue
Ë: 
	`vÆue_
(value) {}

1631 
VÆueHﬁdî
* 
	`MakeNewHﬁdî
(Ëc⁄° 
ovîride
 {

1632  
√w
 
	`VÆueHﬁdî
(
vÆue_
);

1635 
¥iv©e
:

1636 c⁄° 
T
 
vÆue_
;

1638 
	`GTEST_DISALLOW_COPY_AND_ASSIGN_
(
In°™˚VÆueHﬁdîFa˘‹y
);

1641 
°d
::
unique_±r
<
VÆueHﬁdîFa˘‹y
> 
deÁu…_Á˘‹y_
;

1643 
	`GTEST_DISALLOW_COPY_AND_ASSIGN_
(
ThªadLoˇl
);

1646 #ñi‡
GTEST_HAS_PTHREAD


1649 ˛as†
	cMuãxBa£
 {

1650 
public
:

1652 
	`Lock
() {

1653 
	`GTEST_CHECK_POSIX_SUCCESS_
(
	`±hªad_muãx_lock
(&
muãx_
));

1654 
ow√r_
 = 
	`±hªad_£lf
();

1655 
has_ow√r_
 = 
åue
;

1659 
	`U∆ock
() {

1664 
has_ow√r_
 = 
Ál£
;

1665 
	`GTEST_CHECK_POSIX_SUCCESS_
(
	`±hªad_muãx_u∆ock
(&
muãx_
));

1670 
	`As£πHñd
() const {

1671 
	`GTEST_CHECK_
(
has_ow√r_
 && 
	`±hªad_equÆ
(
ow√r_
, 
	`±hªad_£lf
()))

1672 << "Thêcuºíàthªad i†nŸ hﬁdögÅhêmuãx @" << 
this
;

1680 
public
:

1681 
±hªad_muãx_t
 
muãx_
;

1688 
boﬁ
 
has_ow√r_
;

1689 
±hªad_t
 
ow√r_
;

1693 
	#GTEST_DECLARE_STATIC_MUTEX_
(
muãx
) \

1694 ::
ã°ög
::
öã∫Æ
::
MuãxBa£
 
muãx


	)

1702 
	#GTEST_DEFINE_STATIC_MUTEX_
(
muãx
) \

1703 ::
ã°ög
::
öã∫Æ
::
MuãxBa£
 
muãx
 = {
PTHREAD_MUTEX_INITIALIZER
, 
Ál£
, 0}

	)

1707 ˛as†
	cMuãx
 : 
public
 
MuãxBa£
 {

1708 
public
:

1709 
	`Muãx
() {

1710 
	`GTEST_CHECK_POSIX_SUCCESS_
(
	`±hªad_muãx_öô
(&
muãx_
, 
nuŒ±r
));

1711 
has_ow√r_
 = 
Ál£
;

1713 ~
	`Muãx
() {

1714 
	`GTEST_CHECK_POSIX_SUCCESS_
(
	`±hªad_muãx_de°roy
(&
muãx_
));

1717 
¥iv©e
:

1718 
	`GTEST_DISALLOW_COPY_AND_ASSIGN_
(
Muãx
);

1726 ˛as†
	cGTe°MuãxLock
 {

1727 
public
:

1728 
ex∂icô
 
	`GTe°MuãxLock
(
MuãxBa£
* 
muãx
)

1729 : 
	`muãx_
(
muãx
Ë{ 
muãx_
->
	`Lock
(); }

1731 ~
	`GTe°MuãxLock
(Ë{ 
muãx_
->
	`U∆ock
(); }

1733 
¥iv©e
:

1734 
MuãxBa£
* c⁄° 
muãx_
;

1736 
	`GTEST_DISALLOW_COPY_AND_ASSIGN_
(
GTe°MuãxLock
);

1739 
GTe°MuãxLock
 
	tMuãxLock
;

1747 ˛as†
	cThªadLoˇlVÆueHﬁdîBa£
 {

1748 
public
:

1749 
vútuÆ
 ~
	`ThªadLoˇlVÆueHﬁdîBa£
() {}

1754 "C" 
ölöe
 
	`DñëeThªadLoˇlVÆue
(* 
vÆue_hﬁdî
) {

1755 
dñëe
 
°©ic_ˇ°
<
ThªadLoˇlVÆueHﬁdîBa£
*>(
vÆue_hﬁdî
);

1759 
ãm∂©e
 <
ty≥«me
 
T
>

1760 ˛as†
	cGTEST_API_
 
ThªadLoˇl
 {

1761 
public
:

1762 
	`ThªadLoˇl
()

1763 : 
	`key_
(
	`Cª©eKey
()), 
	`deÁu…_Á˘‹y_
(
√w
 
	`DeÁu…VÆueHﬁdîFa˘‹y
()) {}

1764 
ex∂icô
 
	`ThªadLoˇl
(c⁄° 
T
& 
vÆue
)

1765 : 
	`key_
(
	`Cª©eKey
()),

1766 
	`deÁu…_Á˘‹y_
(
√w
 
	`In°™˚VÆueHﬁdîFa˘‹y
(
vÆue
)) {}

1768 ~
	`ThªadLoˇl
() {

1770 
	`DñëeThªadLoˇlVÆue
(
	`±hªad_gë•ecific
(
key_
));

1774 
	`GTEST_CHECK_POSIX_SUCCESS_
(
	`±hªad_key_dñëe
(
key_
));

1777 
T
* 
	`poöãr
(Ë{  
	`GëOrCª©eVÆue
(); }

1778 c⁄° 
T
* 
	`poöãr
(Ëc⁄° {  
	`GëOrCª©eVÆue
(); }

1779 c⁄° 
T
& 
	`gë
(Ëc⁄° {  *
	`poöãr
(); }

1780 
	`£t
(c⁄° 
T
& 
vÆue
Ë{ *
	`poöãr
() = value; }

1782 
¥iv©e
:

1784 ˛as†
	cVÆueHﬁdî
 : 
public
 
ThªadLoˇlVÆueHﬁdîBa£
 {

1785 
public
:

1786 
	`VÆueHﬁdî
(Ë: 
	`vÆue_
() {}

1787 
ex∂icô
 
	`VÆueHﬁdî
(c⁄° 
T
& 
vÆue
Ë: 
	`vÆue_
(value) {}

1789 
T
* 
	`poöãr
(Ë{  &
vÆue_
; }

1791 
¥iv©e
:

1792 
T
 
vÆue_
;

1793 
	`GTEST_DISALLOW_COPY_AND_ASSIGN_
(
VÆueHﬁdî
);

1796 
±hªad_key_t
 
	`Cª©eKey
() {

1797 
±hªad_key_t
 
key
;

1800 
	`GTEST_CHECK_POSIX_SUCCESS_
(

1801 
	`±hªad_key_¸óã
(&
key
, &
DñëeThªadLoˇlVÆue
));

1802  
key
;

1805 
T
* 
	`GëOrCª©eVÆue
() const {

1806 
ThªadLoˇlVÆueHﬁdîBa£
* c⁄° 
hﬁdî
 =

1807 
°©ic_ˇ°
<
ThªadLoˇlVÆueHﬁdîBa£
*>(
	`±hªad_gë•ecific
(
key_
));

1808 i‡(
hﬁdî
 !
nuŒ±r
) {

1809  
CheckedDownˇ°ToA˘uÆTy≥
<
VÆueHﬁdî
>(
hﬁdî
)->
	`poöãr
();

1812 
VÆueHﬁdî
* c⁄° 
√w_hﬁdî
 = 
deÁu…_Á˘‹y_
->
	`MakeNewHﬁdî
();

1813 
ThªadLoˇlVÆueHﬁdîBa£
* c⁄° 
hﬁdî_ba£
 = 
√w_hﬁdî
;

1814 
	`GTEST_CHECK_POSIX_SUCCESS_
(
	`±hªad_£t•ecific
(
key_
, 
hﬁdî_ba£
));

1815  
√w_hﬁdî
->
	`poöãr
();

1818 ˛as†
	cVÆueHﬁdîFa˘‹y
 {

1819 
public
:

1820 
	`VÆueHﬁdîFa˘‹y
() {}

1821 
vútuÆ
 ~
	`VÆueHﬁdîFa˘‹y
() {}

1822 
vútuÆ
 
VÆueHﬁdî
* 
	`MakeNewHﬁdî
() const = 0;

1824 
¥iv©e
:

1825 
	`GTEST_DISALLOW_COPY_AND_ASSIGN_
(
VÆueHﬁdîFa˘‹y
);

1828 ˛as†
	cDeÁu…VÆueHﬁdîFa˘‹y
 : 
public
 
VÆueHﬁdîFa˘‹y
 {

1829 
public
:

1830 
	`DeÁu…VÆueHﬁdîFa˘‹y
() {}

1831 
VÆueHﬁdî
* 
	`MakeNewHﬁdî
(Ëc⁄° 
ovîride
 {  
√w
 
	`VÆueHﬁdî
(); }

1833 
¥iv©e
:

1834 
	`GTEST_DISALLOW_COPY_AND_ASSIGN_
(
DeÁu…VÆueHﬁdîFa˘‹y
);

1837 ˛as†
	cIn°™˚VÆueHﬁdîFa˘‹y
 : 
public
 
VÆueHﬁdîFa˘‹y
 {

1838 
public
:

1839 
ex∂icô
 
	`In°™˚VÆueHﬁdîFa˘‹y
(c⁄° 
T
& 
vÆue
Ë: 
	`vÆue_
(value) {}

1840 
VÆueHﬁdî
* 
	`MakeNewHﬁdî
(Ëc⁄° 
ovîride
 {

1841  
√w
 
	`VÆueHﬁdî
(
vÆue_
);

1844 
¥iv©e
:

1845 c⁄° 
T
 
vÆue_
;

1847 
	`GTEST_DISALLOW_COPY_AND_ASSIGN_
(
In°™˚VÆueHﬁdîFa˘‹y
);

1851 c⁄° 
±hªad_key_t
 
key_
;

1852 
°d
::
unique_±r
<
VÆueHﬁdîFa˘‹y
> 
deÁu…_Á˘‹y_
;

1854 
	`GTEST_DISALLOW_COPY_AND_ASSIGN_
(
ThªadLoˇl
);

1866 ˛as†
	cMuãx
 {

1867 
public
:

1868 
	`Muãx
() {}

1869 
	`Lock
() {}

1870 
	`U∆ock
() {}

1871 
	`As£πHñd
() const {}

1874 
	#GTEST_DECLARE_STATIC_MUTEX_
(
muãx
) \

1875 ::
ã°ög
::
öã∫Æ
::
Muãx
 
muãx


	)

1877 
	#GTEST_DEFINE_STATIC_MUTEX_
(
muãx
Ë::
ã°ög
::
öã∫Æ
::
Muãx
 
	)
mutex

1884 ˛as†
	cGTe°MuãxLock
 {

1885 
public
:

1886 
ex∂icô
 
	`GTe°MuãxLock
(
Muãx
*) {}

1889 
GTe°MuãxLock
 
	tMuãxLock
;

1891 
ãm∂©e
 <
ty≥«me
 
T
>

1892 ˛as†
	cGTEST_API_
 
ThªadLoˇl
 {

1893 
public
:

1894 
	`ThªadLoˇl
(Ë: 
	`vÆue_
() {}

1895 
ex∂icô
 
	`ThªadLoˇl
(c⁄° 
T
& 
vÆue
Ë: 
	`vÆue_
(value) {}

1896 
T
* 
	`poöãr
(Ë{  &
vÆue_
; }

1897 c⁄° 
T
* 
	`poöãr
(Ëc⁄° {  &
vÆue_
; }

1898 c⁄° 
T
& 
	`gë
(Ëc⁄° {  
vÆue_
; }

1899 
	`£t
(c⁄° 
T
& 
vÆue
Ë{ 
vÆue_
 = value; }

1900 
¥iv©e
:

1901 
T
 
vÆue_
;

1908 
GTEST_API_
 
size_t
 
	`GëThªadCou¡
();

1910 #i‡
GTEST_OS_WINDOWS


1911 
	#GTEST_PATH_SEP_
 "\\"

	)

1912 
	#GTEST_HAS_ALT_PATH_SEP_
 1

	)

1914 
	#GTEST_PATH_SEP_
 "/"

	)

1915 
	#GTEST_HAS_ALT_PATH_SEP_
 0

	)

1925 
ölöe
 
boﬁ
 
	`IsAÕha
(
ch
) {

1926  
	`ißÕha
(
°©ic_ˇ°
<>(
ch
)) != 0;

1928 
ölöe
 
boﬁ
 
	`IsAlNum
(
ch
) {

1929  
	`iß um
(
°©ic_ˇ°
<>(
ch
)) != 0;

1931 
ölöe
 
boﬁ
 
	`IsDigô
(
ch
) {

1932  
	`isdigô
(
°©ic_ˇ°
<>(
ch
)) != 0;

1934 
ölöe
 
boﬁ
 
	`IsLowî
(
ch
) {

1935  
	`i¶owî
(
°©ic_ˇ°
<>(
ch
)) != 0;

1937 
ölöe
 
boﬁ
 
	`IsS∑˚
(
ch
) {

1938  
	`is•a˚
(
°©ic_ˇ°
<>(
ch
)) != 0;

1940 
ölöe
 
boﬁ
 
	`IsUµî
(
ch
) {

1941  
	`isuµî
(
°©ic_ˇ°
<>(
ch
)) != 0;

1943 
ölöe
 
boﬁ
 
	`IsXDigô
(
ch
) {

1944  
	`isxdigô
(
°©ic_ˇ°
<>(
ch
)) != 0;

1946 #ifde‡
__˝p_ch¨8_t


1947 
ölöe
 
boﬁ
 
	`IsXDigô
(
ch¨8_t
 
ch
) {

1948  
	`isxdigô
(
°©ic_ˇ°
<>(
ch
)) != 0;

1951 
ölöe
 
boﬁ
 
	`IsXDigô
(
ch¨16_t
 
ch
) {

1952 c⁄° 
low_byã
 = 
°©ic_ˇ°
<>(
ch
);

1953  
ch
 =
low_byã
 && 
	`isxdigô
(low_byte) != 0;

1955 
ölöe
 
boﬁ
 
	`IsXDigô
(
ch¨32_t
 
ch
) {

1956 c⁄° 
low_byã
 = 
°©ic_ˇ°
<>(
ch
);

1957  
ch
 =
low_byã
 && 
	`isxdigô
(low_byte) != 0;

1959 
ölöe
 
boﬁ
 
	`IsXDigô
(
wch¨_t
 
ch
) {

1960 c⁄° 
low_byã
 = 
°©ic_ˇ°
<>(
ch
);

1961  
ch
 =
low_byã
 && 
	`isxdigô
(low_byte) != 0;

1964 
ölöe
 
	`ToLowî
(
ch
) {

1965  
°©ic_ˇ°
<>(
	`tﬁowî
(°©ic_ˇ°<>(
ch
)));

1967 
ölöe
 
	`ToUµî
(
ch
) {

1968  
°©ic_ˇ°
<>(
	`touµî
(°©ic_ˇ°<>(
ch
)));

1971 
ölöe
 
°d
::
°rög
 
	`SåùTøûögS∑˚s
(°d::°rög 
°r
) {

1972 
°d
::
°rög
::
ôî©‹
 
ô
 = 
°r
.
	`íd
();

1973 
ô
 !
°r
.
	`begö
(Ë&& 
	`IsS∑˚
(*--it))

1974 
ô
 = 
°r
.
	`îa£
(it);

1975  
°r
;

1984 
«me•a˚
 
posix
 {

1988 #i‡
GTEST_OS_WINDOWS


1990 
_°©
 
	tSètSåu˘
;

1992 #ifde‡
__BORLANDC__


1993 
ölöe
 
	`DoIsATTY
(
fd
Ë{  
	`ißây
(fd); }

1994 
ölöe
 
	`SåCa£Cmp
(c⁄° * 
s1
, c⁄° * 
s2
) {

1995  
	`°ricmp
(
s1
, 
s2
);

1997 
ölöe
 * 
	`SåDup
(c⁄° * 
§c
Ë{  
	`°rdup
(src); }

1999 #i‡
GTEST_OS_WINDOWS_MOBILE


2000 
ölöe
 
	`DoIsATTY
() {  0; }

2002 
ölöe
 
	`DoIsATTY
(
fd
Ë{  
	`_ißây
(fd); }

2004 
ölöe
 
	`SåCa£Cmp
(c⁄° * 
s1
, c⁄° * 
s2
) {

2005  
	`_°ricmp
(
s1
, 
s2
);

2007 
ölöe
 * 
	`SåDup
(c⁄° * 
§c
Ë{  
	`_°rdup
(src); }

2010 #i‡
GTEST_OS_WINDOWS_MOBILE


2011 
ölöe
 
	`FûeNo
(
FILE
* 
fûe
Ë{  
ªöãΩªt_ˇ°
<>(
	`_fûío
(file)); }

2015 
ölöe
 
	`FûeNo
(
FILE
* 
fûe
Ë{  
	`_fûío
(file); }

2016 
ölöe
 
	`Sèt
(c⁄° * 
∑th
, 
SètSåu˘
* 
buf
Ë{  
	`_°©
(path, buf); }

2017 
ölöe
 
	`RmDú
(c⁄° * 
dú
Ë{  
	`_rmdú
(dir); }

2018 
ölöe
 
boﬁ
 
	`IsDú
(c⁄° 
SètSåu˘
& 
°
) {

2019  (
_S_IFDIR
 & 
°
.
°_mode
) != 0;

2023 #ñi‡
GTEST_OS_ESP8266


2024 
°©
 
	tSètSåu˘
;

2026 
ölöe
 
	`FûeNo
(
FILE
* 
fûe
Ë{  
	`fûío
(file); }

2027 
ölöe
 
	`DoIsATTY
(
fd
Ë{  
	`ißây
(fd); }

2028 
ölöe
 
	`Sèt
(c⁄° * 
∑th
, 
SètSåu˘
* 
buf
) {

2032 
ölöe
 
	`SåCa£Cmp
(c⁄° * 
s1
, c⁄° * 
s2
) {

2033  
	`°rˇ£cmp
(
s1
, 
s2
);

2035 
ölöe
 * 
	`SåDup
(c⁄° * 
§c
Ë{  
	`°rdup
(src); }

2036 
ölöe
 
	`RmDú
(c⁄° * 
dú
Ë{  
	`rmdú
(dir); }

2037 
ölöe
 
boﬁ
 
	`IsDú
(c⁄° 
SètSåu˘
& 
°
Ë{  
	`S_ISDIR
(°.
°_mode
); }

2041 
°©
 
	tSètSåu˘
;

2043 
ölöe
 
	`FûeNo
(
FILE
* 
fûe
Ë{  
	`fûío
(file); }

2044 
ölöe
 
	`DoIsATTY
(
fd
Ë{  
	`ißây
(fd); }

2045 
ölöe
 
	`Sèt
(c⁄° * 
∑th
, 
SètSåu˘
* 
buf
Ë{  
	`°©
(path, buf); }

2046 
ölöe
 
	`SåCa£Cmp
(c⁄° * 
s1
, c⁄° * 
s2
) {

2047  
	`°rˇ£cmp
(
s1
, 
s2
);

2049 
ölöe
 * 
	`SåDup
(c⁄° * 
§c
Ë{  
	`°rdup
(src); }

2050 
ölöe
 
	`RmDú
(c⁄° * 
dú
Ë{  
	`rmdú
(dir); }

2051 
ölöe
 
boﬁ
 
	`IsDú
(c⁄° 
SètSåu˘
& 
°
Ë{  
	`S_ISDIR
(°.
°_mode
); }

2055 
ölöe
 
	`IsATTY
(
fd
) {

2059 
ßvedEºno
 = 
î∫o
;

2060 
isAâyVÆue
 = 
	`DoIsATTY
(
fd
);

2061 
î∫o
 = 
ßvedEºno
;

2063  
isAâyVÆue
;

2068 
	`GTEST_DISABLE_MSC_DEPRECATED_PUSH_
()

2074 #i‡!
GTEST_OS_WINDOWS_MOBILE
 && !
GTEST_OS_WINDOWS_PHONE
 && \

2075 !
GTEST_OS_WINDOWS_RT
 && !
GTEST_OS_ESP8266
 && !
GTEST_OS_XTENSA


2076 
ölöe
 
	`ChDú
(c⁄° * 
dú
Ë{  
	`chdú
(dir); }

2078 
ölöe
 
FILE
* 
	`FO≥n
(c⁄° * 
∑th
, c⁄° * 
mode
) {

2079 #i‡
GTEST_OS_WINDOWS
 && !
GTEST_OS_WINDOWS_MINGW


2080 
wch¨_codecvt
 : 
public
 
°d
::
codecvt
<
wch¨_t
, , std::
mb°©e_t
> {};

2081 
°d
::
w°rög_c⁄vît
<
wch¨_codecvt
> 
c⁄vîãr
;

2082 
°d
::
w°rög
 
wide_∑th
 = 
c⁄vîãr
.
	`‰om_byãs
(
∑th
);

2083 
°d
::
w°rög
 
wide_mode
 = 
c⁄vîãr
.
	`‰om_byãs
(
mode
);

2084  
	`_wf›í
(
wide_∑th
.
	`c_°r
(), 
wide_mode
.c_str());

2086  
	`f›í
(
∑th
, 
mode
);

2089 #i‡!
GTEST_OS_WINDOWS_MOBILE


2090 
ölöe
 
FILE
 *
	`FRe›í
(c⁄° * 
∑th
, c⁄° * 
mode
, FILE* 
°ªam
) {

2091  
	`‰e›í
(
∑th
, 
mode
, 
°ªam
);

2093 
ölöe
 
FILE
* 
	`FDO≥n
(
fd
, c⁄° * 
mode
Ë{  
	`fd›í
(fd, mode); }

2095 
ölöe
 
	`FClo£
(
FILE
* 
Â
Ë{  
	`f˛o£
(fp); }

2096 #i‡!
GTEST_OS_WINDOWS_MOBILE


2097 
ölöe
 
	`Ród
(
fd
, * 
buf
, 
cou¡
) {

2098  
°©ic_ˇ°
<>(
	`ªad
(
fd
, 
buf
, 
cou¡
));

2100 
ölöe
 
	`Wrôe
(
fd
, c⁄° * 
buf
, 
cou¡
) {

2101  
°©ic_ˇ°
<>(
	`wrôe
(
fd
, 
buf
, 
cou¡
));

2103 
ölöe
 
	`Clo£
(
fd
Ë{  
	`˛o£
(fd); }

2104 
ölöe
 c⁄° * 
	`SåEº‹
(
î∫um
Ë{  
	`°ªº‹
(errnum); }

2106 
ölöe
 c⁄° * 
	`GëEnv
(c⁄° * 
«me
) {

2107 #i‡
GTEST_OS_WINDOWS_MOBILE
 || 
GTEST_OS_WINDOWS_PHONE
 || \

2108 
GTEST_OS_WINDOWS_RT
 || 
GTEST_OS_ESP8266
 || 
GTEST_OS_XTENSA


2110 
°©ic_ˇ°
<>(
«me
);

2111  
nuŒ±r
;

2112 #ñi‡
	`deföed
(
__BORLANDC__
Ë|| deföed(
__SunOS_5_8
Ë|| deföed(
__SunOS_5_9
)

2115 c⁄° * c⁄° 
ív
 = 
	`gëív
(
«me
);

2116  (
ív
 !
nuŒ±r
 &&Énv[0] != '\0') ?Énv :Çullptr;

2118  
	`gëív
(
«me
);

2122 
	`GTEST_DISABLE_MSC_DEPRECATED_POP_
()

2124 #i‡
GTEST_OS_WINDOWS_MOBILE


2128 [[
n‹ëu∫
]] 
	`Ab‹t
();

2130 [[
n‹ëu∫
]] 
ölöe
 
	`Ab‹t
(Ë{ 
	`ab‹t
(); }

2140 #i‡
_MSC_VER
 && !
GTEST_OS_WINDOWS_MOBILE


2142 
	#GTEST_SNPRINTF_
(
buf„r
, 
size
, 
f‹m©
, ...) \

2143 
	`_¢¥ötf_s
(
buf„r
, 
size
, size, 
f‹m©
, 
__VA_ARGS__
)

	)

2144 #ñi‡
	`deföed
(
_MSC_VER
)

2146 
	#GTEST_SNPRINTF_
 
_¢¥ötf


	)

2148 
	#GTEST_SNPRINTF_
 
¢¥ötf


	)

2154 
usög
 
Bigge°I¡
 = ;

2157 
c⁄°ex¥
 
Bigge°I¡
 
kMaxBigge°I¡
 = (
°d
::
numîic_limôs
<Bigge°I¡>::
max
)();

2177 
ãm∂©e
 <
size_t
 
size
>

2178 ˛as†
	cTy≥WôhSize
 {

2179 
public
:

2182 
usög
 
UI¡
 = ;

2186 
ãm∂©e
 <>

2187 
˛ass
 
Ty≥WôhSize
<4> {

2188 
public
:

2189 
usög
 
I¡
 = 
°d
::
öt32_t
;

2190 
usög
 
UI¡
 = 
°d
::
uöt32_t
;

2194 
ãm∂©e
 <>

2195 
˛ass
 
Ty≥WôhSize
<8> {

2196 
public
:

2197 
usög
 
I¡
 = 
°d
::
öt64_t
;

2198 
usög
 
UI¡
 = 
°d
::
uöt64_t
;

2202 
usög
 
TimeInMûlis
 = 
öt64_t
;

2207 #i‡!
	`deföed
(
GTEST_FLAG
)

2208 
	#GTEST_FLAG
(
«me
Ë
FLAGS_gã°_
##
	)
name

2211 #i‡!
	`deföed
(
GTEST_USE_OWN_FLAGFILE_FLAG_
)

2212 
	#GTEST_USE_OWN_FLAGFILE_FLAG_
 1

	)

2215 #i‡!
	`deföed
(
GTEST_DECLARE_boﬁ_
)

2216 
	#GTEST_FLAG_SAVER_
 ::
ã°ög
::
öã∫Æ
::
GTe°FœgSavî


	)

2219 
	#GTEST_DECLARE_boﬁ_
(
«me
Ë
GTEST_API_
 
boﬁ
 
	`GTEST_FLAG
“ame)

	)

2220 
	#GTEST_DECLARE_öt32_
(
«me
) \

2221 
GTEST_API_
 
°d
::
öt32_t
 
	`GTEST_FLAG
(
«me
)

	)

2222 
	#GTEST_DECLARE_°rög_
(
«me
) \

2223 
GTEST_API_
 ::
°d
::
°rög
 
	`GTEST_FLAG
(
«me
)

	)

2226 
	#GTEST_DEFINE_boﬁ_
(
«me
, 
deÁu…_vÆ
, 
doc
) \

2227 
GTEST_API_
 
boﬁ
 
	`GTEST_FLAG
(
«me
Ë(
deÁu…_vÆ
)

	)

2228 
	#GTEST_DEFINE_öt32_
(
«me
, 
deÁu…_vÆ
, 
doc
) \

2229 
GTEST_API_
 
°d
::
öt32_t
 
	`GTEST_FLAG
(
«me
Ë(
deÁu…_vÆ
)

	)

2230 
	#GTEST_DEFINE_°rög_
(
«me
, 
deÁu…_vÆ
, 
doc
) \

2231 
GTEST_API_
 ::
°d
::
°rög
 
	`GTEST_FLAG
(
«me
Ë(
deÁu…_vÆ
)

	)

2236 #i‡!
	`deföed
(
GTEST_EXCLUSIVE_LOCK_REQUIRED_
)

2237 
	#GTEST_EXCLUSIVE_LOCK_REQUIRED_
(
locks
)

	)

2238 
	#GTEST_LOCK_EXCLUDED_
(
locks
)

	)

2244 
GTEST_API_
 
boﬁ
 
	`P¨£I¡32
(c⁄° 
Mesßge
& 
§c_ãxt
, c⁄° * 
°r
,

2245 
öt32_t
* 
vÆue
);

2249 
boﬁ
 
	`BoﬁFromGTe°Env
(c⁄° * 
Êag
, boﬁ 
deÁu…_vÆ
);

2250 
GTEST_API_
 
öt32_t
 
	`I¡32FromGTe°Env
(c⁄° * 
Êag
, i¡32_à
deÁu…_vÆ
);

2251 
°d
::
°rög
 
	`OuçutFœgAlsoCheckEnvV¨
();

2252 c⁄° * 
	`SåögFromGTe°Env
(c⁄° * 
Êag
, c⁄° * 
deÁu…_vÆ
);

2254 
	}
}

2257 #i‡!
deföed
(
GTEST_INTERNAL_DEPRECATED
)

2267 #i‡
deföed
(
_MSC_VER
)

2268 
	#GTEST_INTERNAL_DEPRECATED
(
mesßge
Ë
	`__de˛•ec
(
	`dïªˇãd
(mesßge))

	)

2269 #ñi‡
deföed
(
__GNUC__
)

2270 
	#GTEST_INTERNAL_DEPRECATED
(
mesßge
Ë
	`__©åibuã__
((
	`dïªˇãd
(mesßge)))

	)

2272 
	#GTEST_INTERNAL_DEPRECATED
(
mesßge
)

	)

2277 #i‡
GTEST_HAS_ABSL


2280 
	#GTEST_INTERNAL_HAS_ANY
 1

	)

2281 
	~"ab¶/ty≥s/™y.h
"

2282 
«me•a˚
 
	gã°ög
 {

2283 
«me•a˚
 
	göã∫Æ
 {

2284 
usög
 
	gAny
 = ::
ab¶
::
™y
;

2288 #ifde‡
__has_ö˛ude


2289 #i‡
__has_ö˛ude
(<
™y
>Ë&& 
__˝lu•lus
 >= 201703L

2292 
	#GTEST_INTERNAL_HAS_ANY
 1

	)

2293 
	~<™y
>

2294 
«me•a˚
 
	gã°ög
 {

2295 
«me•a˚
 
	göã∫Æ
 {

2296 
usög
 
	gAny
 = ::
°d
::
™y
;

2305 #i‡
GTEST_HAS_ABSL


2308 
	#GTEST_INTERNAL_HAS_OPTIONAL
 1

	)

2309 
	~"ab¶/ty≥s/›ti⁄Æ.h
"

2310 
«me•a˚
 
	gã°ög
 {

2311 
«me•a˚
 
	göã∫Æ
 {

2312 
	gãm∂©e
 <
ty≥«me
 
	gT
>

2313 
usög
 
	gO±i⁄Æ
 = ::
ab¶
::
›ti⁄Æ
<
T
>;

2317 #ifde‡
__has_ö˛ude


2318 #i‡
__has_ö˛ude
(<
›ti⁄Æ
>Ë&& 
__˝lu•lus
 >= 201703L

2321 
	#GTEST_INTERNAL_HAS_OPTIONAL
 1

	)

2322 
	~<›ti⁄Æ
>

2323 
«me•a˚
 
	gã°ög
 {

2324 
«me•a˚
 
	göã∫Æ
 {

2325 
	gãm∂©e
 <
ty≥«me
 
	gT
>

2326 
usög
 
	gO±i⁄Æ
 = ::
°d
::
›ti⁄Æ
<
T
>;

2335 #i‡
GTEST_HAS_ABSL


2338 
	#GTEST_INTERNAL_HAS_STRING_VIEW
 1

	)

2339 
	~"ab¶/°rögs/°rög_võw.h
"

2340 
«me•a˚
 
	gã°ög
 {

2341 
«me•a˚
 
	göã∫Æ
 {

2342 
usög
 
	gSåögVõw
 = ::
ab¶
::
°rög_võw
;

2346 #ifde‡
__has_ö˛ude


2347 #i‡
__has_ö˛ude
(<
°rög_võw
>Ë&& 
__˝lu•lus
 >= 201703L

2350 
	#GTEST_INTERNAL_HAS_STRING_VIEW
 1

	)

2351 
	~<°rög_võw
>

2352 
«me•a˚
 
	gã°ög
 {

2353 
«me•a˚
 
	göã∫Æ
 {

2354 
usög
 
	gSåögVõw
 = ::
°d
::
°rög_võw
;

2363 #i‡
GTEST_HAS_ABSL


2366 
	#GTEST_INTERNAL_HAS_VARIANT
 1

	)

2367 
	~"ab¶/ty≥s/v¨ü¡.h
"

2368 
«me•a˚
 
	gã°ög
 {

2369 
«me•a˚
 
	göã∫Æ
 {

2370 
	gãm∂©e
 <
	gty≥«me
... 
	gT
>

2371 
usög
 
	gV¨ü¡
 = ::
ab¶
::
v¨ü¡
<
T
...>;

2375 #ifde‡
__has_ö˛ude


2376 #i‡
__has_ö˛ude
(<
v¨ü¡
>Ë&& 
__˝lu•lus
 >= 201703L

2379 
	#GTEST_INTERNAL_HAS_VARIANT
 1

	)

2380 
	~<v¨ü¡
>

2381 
«me•a˚
 
	gã°ög
 {

2382 
«me•a˚
 
	göã∫Æ
 {

2383 
	gãm∂©e
 <
	gty≥«me
... 
	gT
>

2384 
usög
 
	gV¨ü¡
 = ::
°d
::
v¨ü¡
<
T
...>;

	@/usr/include/gtest/internal/gtest-type-util.h

35 #i‚de‡
GOOGLETEST_INCLUDE_GTEST_INTERNAL_GTEST_TYPE_UTIL_H_


36 
	#GOOGLETEST_INCLUDE_GTEST_INTERNAL_GTEST_TYPE_UTIL_H_


	)

38 
	~"gã°/öã∫Æ/gã°-p‹t.h
"

42 #i‡
GTEST_HAS_CXXABI_H_


43 
	~<cxxabi.h
>

44 #ñi‡
deföed
(
__HP_aCC
)

45 
	~<acxx_dem™gÀ.h
>

48 
«me•a˚
 
	gã°ög
 {

49 
«me•a˚
 
	göã∫Æ
 {

55 
ölöe
 
	g°d
::
°rög
 
C™⁄iˇlizeF‹StdLibVîsi⁄ög
(
°d
::°rög 
s
) {

56 c⁄° 
¥efix
[] = "std::__";

57 i‡(
	gs
.
com∑ª
(0, 
°æí
(
¥efix
),Örefix) == 0) {

58 
°d
::
°rög
::
size_ty≥
 
íd
 = 
s
.
föd
("::", 
°æí
(
¥efix
));

59 i‡(
	gíd
 !
s
.
≈os
) {

61 
s
.
îa£
(
°æí
("°d"), 
íd
 - strlen("std"));

64  
	gs
;

67 #i‡
GTEST_HAS_RTTI


69 
ölöe
 
	g°d
::
°rög
 
GëTy≥Name
(c⁄° 
°d
::
ty≥_öfo
& 
ty≥
) {

70 c⁄° * c⁄° 
«me
 = 
ty≥
.name();

71 #i‡
GTEST_HAS_CXXABI_H_
 || 
deföed
(
__HP_aCC
)

72 
	g°©us
 = 0;

75 #i‡
GTEST_HAS_CXXABI_H_


76 
usög
 
	gabi
::
__cxa_dem™gÀ
;

78 * c⁄° 
	gªadabÀ_«me
 = 
__cxa_dem™gÀ
(
«me
, 
nuŒ±r
,ÇuŒ±r, &
°©us
);

79 c⁄° 
	g°d
::
°rög
 
«me_°r
(
°©us
 =0 ? 
ªadabÀ_«me
 : 
«me
);

80 
‰ì
(
ªadabÀ_«me
);

81  
C™⁄iˇlizeF‹StdLibVîsi⁄ög
(
«me_°r
);

83  
	g«me
;

92 
	gãm∂©e
 <
ty≥«me
 
	gT
>

93 
	g°d
::
°rög
 
GëTy≥Name
() {

94 #i‡
GTEST_HAS_RTTI


95  
GëTy≥Name
(
ty≥id
(
T
));

102 
	sN⁄e
 {};

104 
	#GTEST_TEMPLATE_
 
ãm∂©e
 <
ty≥«me
 
T
> 
˛ass


	)

114 
	gãm∂©e
 <
GTEST_TEMPLATE_
 
	gTm∂
>

115 
	sTem∂©eSñ
 {

116 
	gãm∂©e
 <
ty≥«me
 
	gT
>

117 
	sBöd
 {

118 
	gTm∂
<
	tT
> 
	tty≥
;

122 
	#GTEST_BIND_
(
Tm∂Sñ
, 
T
) \

123 
Tm∂Sñ
::
ãm∂©e
 
Böd
<
T
>::
ty≥


	)

125 
	gãm∂©e
 <
GTEST_TEMPLATE_
 
	gHód_
, 
	gGTEST_TEMPLATE_
... 
	gTaû_
>

126 
	sTem∂©es
 {

127 
usög
 
	gHód
 = 
Tem∂©eSñ
<
Hód_
>;

128 
usög
 
	gTaû
 = 
Tem∂©es
<
Taû_
...>;

131 
	gãm∂©e
 <
GTEST_TEMPLATE_
 
	gHód_
>

132 
	gTem∂©es
<
	gHód_
> {

133 
usög
 
	gHód
 = 
Tem∂©eSñ
<
Hód_
>;

134 
usög
 
	gTaû
 = 
N⁄e
;

138 
	gãm∂©e
 <
ty≥«me
 
	gHód_
, 
	gty≥«me
... 
	gTaû_
>

139 
	sTy≥s
 {

140 
usög
 
	gHód
 = 
Hód_
;

141 
usög
 
	gTaû
 = 
Ty≥s
<
Taû_
...>;

144 
	gãm∂©e
 <
ty≥«me
 
	gHód_
>

145 
	gTy≥s
<
	gHód_
> {

146 
usög
 
	gHód
 = 
Hód_
;

147 
usög
 
	gTaû
 = 
N⁄e
;

152 
	gãm∂©e
 <
	gty≥«me
... 
	gTs
>

153 
	sProxyTy≥Li°
 {

154 
usög
 
	gty≥
 = 
Ty≥s
<
Ts
...>;

157 
	gãm∂©e
 <
	gty≥«me
>

158 
	gis_¥oxy_ty≥_li°
 : 
°d
::
Ál£_ty≥
 {};

160 
	gãm∂©e
 <
	gty≥«me
... 
	gTs
>

161 
	gis_¥oxy_ty≥_li°
<
	gProxyTy≥Li°
<
	gTs
...>> : 
°d
::
åue_ty≥
 {};

166 
	gãm∂©e
 <
ty≥«me
 
	gT
>

167 
	sGíî©eTy≥Li°
 {

168 
	g¥iv©e
:

169 
usög
 
¥oxy
 = 
ty≥«me
 
°d
::
c⁄dôi⁄Æ
<
is_¥oxy_ty≥_li°
<
T
>::
vÆue
, 
	gT
,

170 
	gProxyTy≥Li°
<
	gT
>>::
ty≥
;

172 
	gpublic
:

173 
usög
 
ty≥
 = 
ty≥«me
 
¥oxy
::type;

178 
	gãm∂©e
 <
	gty≥«me
... 
	gTs
>

179 
usög
 
	gTy≥s
 = 
öã∫Æ
::
ProxyTy≥Li°
<
Ts
...>;

	@/usr/include/limits.h

22 #i‚de‡
_LIBC_LIMITS_H_


23 
	#_LIBC_LIMITS_H_
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

32 
	#MB_LEN_MAX
 16

	)

37 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

42 #i‚de‡
_LIMITS_H


43 
	#_LIMITS_H
 1

	)

45 
	~<bôs/w‹dsize.h
>

54 
	#CHAR_BIT
 8

	)

57 
	#SCHAR_MIN
 (-128)

	)

58 
	#SCHAR_MAX
 127

	)

61 
	#UCHAR_MAX
 255

	)

64 #ifde‡
__CHAR_UNSIGNED__


65 
	#CHAR_MIN
 0

	)

66 
	#CHAR_MAX
 
UCHAR_MAX


	)

68 
	#CHAR_MIN
 
SCHAR_MIN


	)

69 
	#CHAR_MAX
 
SCHAR_MAX


	)

73 
	#SHRT_MIN
 (-32768)

	)

74 
	#SHRT_MAX
 32767

	)

77 
	#USHRT_MAX
 65535

	)

80 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

81 
	#INT_MAX
 2147483647

	)

84 
	#UINT_MAX
 4294967295U

	)

87 #i‡
__WORDSIZE
 == 64

88 
	#LONG_MAX
 9223372036854775807L

	)

90 
	#LONG_MAX
 2147483647L

	)

92 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

95 #i‡
__WORDSIZE
 == 64

96 
	#ULONG_MAX
 18446744073709551615UL

	)

98 
	#ULONG_MAX
 4294967295UL

	)

101 #ifde‡
__USE_ISOC99


104 
	#LLONG_MAX
 9223372036854775807LL

	)

105 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

108 
	#ULLONG_MAX
 18446744073709551615ULL

	)

122 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


124 #ö˛ude_√xà<
limôs
.
h
>

130 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


131 #i‚de‡
LLONG_MIN


132 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

134 #i‚de‡
LLONG_MAX


135 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

137 #i‚de‡
ULLONG_MAX


138 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

145 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

146 #i‚de‡
CHAR_WIDTH


147 
	#CHAR_WIDTH
 8

	)

149 #i‚de‡
SCHAR_WIDTH


150 
	#SCHAR_WIDTH
 8

	)

152 #i‚de‡
UCHAR_WIDTH


153 
	#UCHAR_WIDTH
 8

	)

155 #i‚de‡
SHRT_WIDTH


156 
	#SHRT_WIDTH
 16

	)

158 #i‚de‡
USHRT_WIDTH


159 
	#USHRT_WIDTH
 16

	)

161 #i‚de‡
INT_WIDTH


162 
	#INT_WIDTH
 32

	)

164 #i‚de‡
UINT_WIDTH


165 
	#UINT_WIDTH
 32

	)

167 #i‚de‡
LONG_WIDTH


168 
	#LONG_WIDTH
 
__WORDSIZE


	)

170 #i‚de‡
ULONG_WIDTH


171 
	#ULONG_WIDTH
 
__WORDSIZE


	)

173 #i‚de‡
LLONG_WIDTH


174 
	#LLONG_WIDTH
 64

	)

176 #i‚de‡
ULLONG_WIDTH


177 
	#ULLONG_WIDTH
 64

	)

184 #i‡
__GLIBC_USE
 (
ISOC2X
)

185 #i‚de‡
BOOL_MAX


186 
	#BOOL_MAX
 1

	)

188 #i‚de‡
BOOL_WIDTH


189 
	#BOOL_WIDTH
 1

	)

193 #ifdef 
__USE_POSIX


195 
	~<bôs/posix1_lim.h
>

198 #ifdef 
__USE_POSIX2


199 
	~<bôs/posix2_lim.h
>

202 #ifdef 
__USE_XOPEN


203 
	~<bôs/x›í_lim.h
>

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

39 
	#__STDC_IEC_60559_BFP__
 201404L

	)

42 
	#__STDC_IEC_559__
 1

	)

43 
	#__STDC_IEC_60559_BFP__
 201404L

	)

46 #ifde‡
__GCC_IEC_559_COMPLEX


47 #i‡
__GCC_IEC_559_COMPLEX
 > 0

48 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_60559_COMPLEX__
 201404L

	)

52 
	#__STDC_IEC_559_COMPLEX__
 1

	)

53 
	#__STDC_IEC_60559_COMPLEX__
 201404L

	)

62 
	#__STDC_ISO_10646__
 201706L

	)

	@/usr/include/assert.h

22 #ifdef 
_ASSERT_H


24 #unde‡
_ASSERT_H


25 #unde‡
as£π


26 #unde‡
__ASSERT_VOID_CAST


28 #ifdef 
__USE_GNU


29 #unde‡
as£π_≥º‹


34 
	#_ASSERT_H
 1

	)

35 
	~<„©uªs.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

38 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

40 
	#__ASSERT_VOID_CAST
 ()

	)

48 #ifdef 
NDEBUG


50 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

58 #ifdef 
__USE_GNU


59 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

64 #i‚de‡
_ASSERT_H_DECLS


65 
	#_ASSERT_H_DECLS


	)

66 
__BEGIN_DECLS


69 
	$__as£π_Áû
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
,

70 
__löe
, c⁄° *
__fun˘i⁄
)

71 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

74 
	$__as£π_≥º‹_Áû
 (
__î∫um
, c⁄° *
__fûe
,

75 
__löe
, c⁄° *
__fun˘i⁄
)

76 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

81 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

82 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

85 
__END_DECLS


91 #i‡
deföed
 
__˝lu•lus


92 
	#as£π
(
ex¥
) \

93 (
°©ic_ˇ°
 <
boﬁ
> (
ex¥
) \

95 : 
	`__as£π_Áû
 (#ex¥, 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

96 #ñi‡!
deföed
 
__GNUC__
 || deföed 
__STRICT_ANSI__


97 
	#as£π
(
ex¥
) \

98 ((
ex¥
) \

99 ? 
	`__ASSERT_VOID_CAST
 (0) \

100 : 
	`__as£π_Áû
 (#ex¥, 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

107 
	#as£π
(
ex¥
) \

108 ((Ë ((
ex¥
Ë? 1 : 0), 
	`__exãnsi⁄__
 ({ \

109 i‡(
ex¥
) \

112 
	`__as£π_Áû
 (#ex¥, 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
); \

113 
	}
}))

	)

116 #ifdef 
__USE_GNU


117 
	#as£π_≥º‹
(
î∫um
) \

118 (!(
î∫um
) \

119 ? 
	`__ASSERT_VOID_CAST
 (0) \

120 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

128 #i‡
deföed
 
__˝lu•lus
 ? 
__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

129 
	#__ASSERT_FUNCTION
 
__exãnsi⁄__
 
__PRETTY_FUNCTION__


	)

131 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

132 
	#__ASSERT_FUNCTION
 
__func__


	)

134 
	#__ASSERT_FUNCTION
 ((c⁄° *Ë0)

	)

141 #i‡
deföed
 
__USE_ISOC11
 && !deföed 
__˝lu•lus


142 #unde‡
°©ic_as£π


143 
	#°©ic_as£π
 
_Sètic_as£π


	)

	@/usr/include/gmock/internal/custom/gmock-port.h

36 #i‚de‡
GOOGLEMOCK_INCLUDE_GMOCK_INTERNAL_CUSTOM_GMOCK_PORT_H_


37 
	#GOOGLEMOCK_INCLUDE_GMOCK_INTERNAL_CUSTOM_GMOCK_PORT_H_


	)

	@/usr/include/gtest/internal/custom/gtest-port.h

34 #i‚de‡
GOOGLETEST_INCLUDE_GTEST_INTERNAL_CUSTOM_GTEST_PORT_H_


35 
	#GOOGLETEST_INCLUDE_GTEST_INTERNAL_CUSTOM_GTEST_PORT_H_


	)

	@/usr/include/gtest/internal/gtest-port-arch.h

35 #i‚de‡
GOOGLETEST_INCLUDE_GTEST_INTERNAL_GTEST_PORT_ARCH_H_


36 
	#GOOGLETEST_INCLUDE_GTEST_INTERNAL_GTEST_PORT_ARCH_H_


	)

39 #ifde‡
__CYGWIN__


40 
	#GTEST_OS_CYGWIN
 1

	)

41 #ñi‡
deföed
(
__MINGW__
Ë|| deföed(
__MINGW32__
Ë|| deföed(
__MINGW64__
)

42 
	#GTEST_OS_WINDOWS_MINGW
 1

	)

43 
	#GTEST_OS_WINDOWS
 1

	)

44 #ñi‡
deföed
 
_WIN32


45 
	#GTEST_OS_WINDOWS
 1

	)

46 #ifde‡
_WIN32_WCE


47 
	#GTEST_OS_WINDOWS_MOBILE
 1

	)

48 #ñi‡
deföed
(
WINAPI_FAMILY
)

49 
	~<wö≠iÁmûy.h
>

50 #i‡
WINAPI_FAMILY_PARTITION
(
WINAPI_PARTITION_DESKTOP
)

51 
	#GTEST_OS_WINDOWS_DESKTOP
 1

	)

52 #ñi‡
WINAPI_FAMILY_PARTITION
(
WINAPI_PARTITION_PHONE_APP
)

53 
	#GTEST_OS_WINDOWS_PHONE
 1

	)

54 #ñi‡
WINAPI_FAMILY_PARTITION
(
WINAPI_PARTITION_APP
)

55 
	#GTEST_OS_WINDOWS_RT
 1

	)

56 #ñi‡
WINAPI_FAMILY_PARTITION
(
WINAPI_PARTITION_TV_TITLE
)

57 
	#GTEST_OS_WINDOWS_PHONE
 1

	)

58 
	#GTEST_OS_WINDOWS_TV_TITLE
 1

	)

62 
	#GTEST_OS_WINDOWS_DESKTOP
 1

	)

65 
	#GTEST_OS_WINDOWS_DESKTOP
 1

	)

67 #ñi‡
deföed
 
__OS2__


68 
	#GTEST_OS_OS2
 1

	)

69 #ñi‡
deföed
 
__APPLE__


70 
	#GTEST_OS_MAC
 1

	)

71 
	~<T¨gëC⁄dôi⁄Æs.h
>

72 #i‡
TARGET_OS_IPHONE


73 
	#GTEST_OS_IOS
 1

	)

75 #ñi‡
deföed
 
__Døg⁄Fly__


76 
	#GTEST_OS_DRAGONFLY
 1

	)

77 #ñi‡
deföed
 
__FªeBSD__


78 
	#GTEST_OS_FREEBSD
 1

	)

79 #ñi‡
deföed
 
__Fuchsü__


80 
	#GTEST_OS_FUCHSIA
 1

	)

81 #ñi‡
deföed
(
__GNU__
)

82 
	#GTEST_OS_GNU_HURD
 1

	)

83 #ñi‡
deföed
(
__GLIBC__
Ë&& deföed(
__FªeBSD_kî√l__
)

84 
	#GTEST_OS_GNU_KFREEBSD
 1

	)

85 #ñi‡
deföed
 
__löux__


86 
	#GTEST_OS_LINUX
 1

	)

87 #i‡
deföed
 
__ANDROID__


88 
	#GTEST_OS_LINUX_ANDROID
 1

	)

90 #ñi‡
deföed
 
__MVS__


91 
	#GTEST_OS_ZOS
 1

	)

92 #ñi‡
deföed
(
__sun
Ë&& deföed(
__SVR4
)

93 
	#GTEST_OS_SOLARIS
 1

	)

94 #ñi‡
deföed
(
_AIX
)

95 
	#GTEST_OS_AIX
 1

	)

96 #ñi‡
deföed
(
__hpux
)

97 
	#GTEST_OS_HPUX
 1

	)

98 #ñi‡
deföed
 
__«tive_˛õ¡__


99 
	#GTEST_OS_NACL
 1

	)

100 #ñi‡
deföed
 
__NëBSD__


101 
	#GTEST_OS_NETBSD
 1

	)

102 #ñi‡
deföed
 
__O≥nBSD__


103 
	#GTEST_OS_OPENBSD
 1

	)

104 #ñi‡
deföed
 
__QNX__


105 
	#GTEST_OS_QNX
 1

	)

106 #ñi‡
deföed
(
__HAIKU__
)

107 
	#GTEST_OS_HAIKU
 1

	)

108 #ñi‡
deföed
 
ESP8266


109 
	#GTEST_OS_ESP8266
 1

	)

110 #ñi‡
deföed
 
ESP32


111 
	#GTEST_OS_ESP32
 1

	)

112 #ñi‡
deföed
(
__XTENSA__
)

113 
	#GTEST_OS_XTENSA
 1

	)

	@/usr/include/regex.h

20 #i‚de‡
_REGEX_H


21 
	#_REGEX_H
 1

	)

23 
	~<sys/ty≥s.h
>

26 #ifde‡
__˝lu•lus


32 #ifde‡
_GNU_SOURCE


33 
	#__USE_GNU
 1

	)

36 #ifde‡
_REGEX_LARGE_OFFSETS


45 
size_t
 
	t__ª_size_t
;

49 
size_t
 
	t__ª_l⁄g_size_t
;

55 
	t__ª_size_t
;

56 
	t__ª_l⁄g_size_t
;

64 
	ts_ªg_t
;

65 
	ta˘ive_ªg_t
;

72 
	tªg_sy¡ax_t
;

74 #ifde‡
__USE_GNU


77 
	#RE_BACKSLASH_ESCAPE_IN_LISTS
 ((Ë1)

	)

82 
	#RE_BK_PLUS_QM
 (
RE_BACKSLASH_ESCAPE_IN_LISTS
 << 1)

	)

88 
	#RE_CHAR_CLASSES
 (
RE_BK_PLUS_QM
 << 1)

	)

102 
	#RE_CONTEXT_INDEP_ANCHORS
 (
RE_CHAR_CLASSES
 << 1)

	)

110 
	#RE_CONTEXT_INDEP_OPS
 (
RE_CONTEXT_INDEP_ANCHORS
 << 1)

	)

114 
	#RE_CONTEXT_INVALID_OPS
 (
RE_CONTEXT_INDEP_OPS
 << 1)

	)

118 
	#RE_DOT_NEWLINE
 (
RE_CONTEXT_INVALID_OPS
 << 1)

	)

122 
	#RE_DOT_NOT_NULL
 (
RE_DOT_NEWLINE
 << 1)

	)

126 
	#RE_HAT_LISTS_NOT_NEWLINE
 (
RE_DOT_NOT_NULL
 << 1)

	)

131 
	#RE_INTERVALS
 (
RE_HAT_LISTS_NOT_NEWLINE
 << 1)

	)

135 
	#RE_LIMITED_OPS
 (
RE_INTERVALS
 << 1)

	)

139 
	#RE_NEWLINE_ALT
 (
RE_LIMITED_OPS
 << 1)

	)

144 
	#RE_NO_BK_BRACES
 (
RE_NEWLINE_ALT
 << 1)

	)

148 
	#RE_NO_BK_PARENS
 (
RE_NO_BK_BRACES
 << 1)

	)

152 
	#RE_NO_BK_REFS
 (
RE_NO_BK_PARENS
 << 1)

	)

156 
	#RE_NO_BK_VBAR
 (
RE_NO_BK_REFS
 << 1)

	)

162 
	#RE_NO_EMPTY_RANGES
 (
RE_NO_BK_VBAR
 << 1)

	)

166 
	#RE_UNMATCHED_RIGHT_PAREN_ORD
 (
RE_NO_EMPTY_RANGES
 << 1)

	)

170 
	#RE_NO_POSIX_BACKTRACKING
 (
RE_UNMATCHED_RIGHT_PAREN_ORD
 << 1)

	)

174 
	#RE_NO_GNU_OPS
 (
RE_NO_POSIX_BACKTRACKING
 << 1)

	)

182 
	#RE_DEBUG
 (
RE_NO_GNU_OPS
 << 1)

	)

187 
	#RE_INVALID_INTERVAL_ORD
 (
RE_DEBUG
 << 1)

	)

191 
	#RE_ICASE
 (
RE_INVALID_INTERVAL_ORD
 << 1)

	)

196 
	#RE_CARET_ANCHORS_HERE
 (
RE_ICASE
 << 1)

	)

200 
	#RE_CONTEXT_INVALID_DUP
 (
RE_CARET_ANCHORS_HERE
 << 1)

	)

204 
	#RE_NO_SUB
 (
RE_CONTEXT_INVALID_DUP
 << 1)

	)

211 
ªg_sy¡ax_t
 
ª_sy¡ax_›ti⁄s
;

213 #ifde‡
__USE_GNU


218 
	#RE_SYNTAX_EMACS
 0

	)

220 
	#RE_SYNTAX_AWK
 \

221 (
RE_BACKSLASH_ESCAPE_IN_LISTS
 | 
RE_DOT_NOT_NULL
 \

222 | 
RE_NO_BK_PARENS
 | 
RE_NO_BK_REFS
 \

223 | 
RE_NO_BK_VBAR
 | 
RE_NO_EMPTY_RANGES
 \

224 | 
RE_DOT_NEWLINE
 | 
RE_CONTEXT_INDEP_ANCHORS
 \

225 | 
RE_CHAR_CLASSES
 \

226 | 
RE_UNMATCHED_RIGHT_PAREN_ORD
 | 
RE_NO_GNU_OPS
)

	)

228 
	#RE_SYNTAX_GNU_AWK
 \

229 ((
RE_SYNTAX_POSIX_EXTENDED
 | 
RE_BACKSLASH_ESCAPE_IN_LISTS
 \

230 | 
RE_INVALID_INTERVAL_ORD
) \

231 & ~(
RE_DOT_NOT_NULL
 | 
RE_CONTEXT_INDEP_OPS
 \

232 | 
RE_CONTEXT_INVALID_OPS
 ))

	)

234 
	#RE_SYNTAX_POSIX_AWK
 \

235 (
RE_SYNTAX_POSIX_EXTENDED
 | 
RE_BACKSLASH_ESCAPE_IN_LISTS
 \

236 | 
RE_INTERVALS
 | 
RE_NO_GNU_OPS
 \

237 | 
RE_INVALID_INTERVAL_ORD
)

	)

239 
	#RE_SYNTAX_GREP
 \

240 ((
RE_SYNTAX_POSIX_BASIC
 | 
RE_NEWLINE_ALT
) \

241 & ~(
RE_CONTEXT_INVALID_DUP
 | 
RE_DOT_NOT_NULL
))

	)

243 
	#RE_SYNTAX_EGREP
 \

244 ((
RE_SYNTAX_POSIX_EXTENDED
 | 
RE_INVALID_INTERVAL_ORD
 | 
RE_NEWLINE_ALT
) \

245 & ~(
RE_CONTEXT_INVALID_OPS
 | 
RE_DOT_NOT_NULL
))

	)

248 
	#RE_SYNTAX_POSIX_EGREP
 \

249 
RE_SYNTAX_EGREP


	)

252 
	#RE_SYNTAX_ED
 
RE_SYNTAX_POSIX_BASIC


	)

254 
	#RE_SYNTAX_SED
 
RE_SYNTAX_POSIX_BASIC


	)

257 
	#_RE_SYNTAX_POSIX_COMMON
 \

258 (
RE_CHAR_CLASSES
 | 
RE_DOT_NEWLINE
 | 
RE_DOT_NOT_NULL
 \

259 | 
RE_INTERVALS
 | 
RE_NO_EMPTY_RANGES
)

	)

261 
	#RE_SYNTAX_POSIX_BASIC
 \

262 (
_RE_SYNTAX_POSIX_COMMON
 | 
RE_BK_PLUS_QM
 | 
RE_CONTEXT_INVALID_DUP
)

	)

267 
	#RE_SYNTAX_POSIX_MINIMAL_BASIC
 \

268 (
_RE_SYNTAX_POSIX_COMMON
 | 
RE_LIMITED_OPS
)

	)

270 
	#RE_SYNTAX_POSIX_EXTENDED
 \

271 (
_RE_SYNTAX_POSIX_COMMON
 | 
RE_CONTEXT_INDEP_ANCHORS
 \

272 | 
RE_CONTEXT_INDEP_OPS
 | 
RE_NO_BK_BRACES
 \

273 | 
RE_NO_BK_PARENS
 | 
RE_NO_BK_VBAR
 \

274 | 
RE_CONTEXT_INVALID_OPS
 | 
RE_UNMATCHED_RIGHT_PAREN_ORD
)

	)

278 
	#RE_SYNTAX_POSIX_MINIMAL_EXTENDED
 \

279 (
_RE_SYNTAX_POSIX_COMMON
 | 
RE_CONTEXT_INDEP_ANCHORS
 \

280 | 
RE_CONTEXT_INVALID_OPS
 | 
RE_NO_BK_BRACES
 \

281 | 
RE_NO_BK_PARENS
 | 
RE_NO_BK_REFS
 \

282 | 
RE_NO_BK_VBAR
 | 
RE_UNMATCHED_RIGHT_PAREN_ORD
)

	)

288 #ifde‡
_REGEX_INCLUDE_LIMITS_H


289 
	~<limôs.h
>

291 #ifde‡
RE_DUP_MAX


292 #unde‡
RE_DUP_MAX


302 
	#RE_DUP_MAX
 (0x7fff)

	)

310 
	#REG_EXTENDED
 1

	)

314 
	#REG_ICASE
 (1 << 1)

	)

319 
	#REG_NEWLINE
 (1 << 2)

	)

323 
	#REG_NOSUB
 (1 << 3)

	)

333 
	#REG_NOTBOL
 1

	)

336 
	#REG_NOTEOL
 (1 << 1)

	)

340 
	#REG_STARTEND
 (1 << 2)

	)

348 
	g_REG_ENOSYS
 = -1,

349 
	g_REG_NOERROR
 = 0,

350 
	g_REG_NOMATCH
,

354 
	g_REG_BADPAT
,

355 
	g_REG_ECOLLATE
,

356 
	g_REG_ECTYPE
,

357 
	g_REG_EESCAPE
,

358 
	g_REG_ESUBREG
,

359 
	g_REG_EBRACK
,

360 
	g_REG_EPAREN
,

361 
	g_REG_EBRACE
,

362 
	g_REG_BADBR
,

363 
	g_REG_ERANGE
,

364 
	g_REG_ESPACE
,

365 
	g_REG_BADRPT
,

368 
	g_REG_EEND
,

369 
	g_REG_ESIZE
,

370 
	g_REG_ERPAREN


371 } 
	tªg_îrcode_t
;

373 #i‡
deföed
 
_XOPEN_SOURCE
 || deföed 
__USE_XOPEN2K


374 
	#REG_ENOSYS
 
_REG_ENOSYS


	)

376 
	#REG_NOERROR
 
_REG_NOERROR


	)

377 
	#REG_NOMATCH
 
_REG_NOMATCH


	)

378 
	#REG_BADPAT
 
_REG_BADPAT


	)

379 
	#REG_ECOLLATE
 
_REG_ECOLLATE


	)

380 
	#REG_ECTYPE
 
_REG_ECTYPE


	)

381 
	#REG_EESCAPE
 
_REG_EESCAPE


	)

382 
	#REG_ESUBREG
 
_REG_ESUBREG


	)

383 
	#REG_EBRACK
 
_REG_EBRACK


	)

384 
	#REG_EPAREN
 
_REG_EPAREN


	)

385 
	#REG_EBRACE
 
_REG_EBRACE


	)

386 
	#REG_BADBR
 
_REG_BADBR


	)

387 
	#REG_ERANGE
 
_REG_ERANGE


	)

388 
	#REG_ESPACE
 
_REG_ESPACE


	)

389 
	#REG_BADRPT
 
_REG_BADRPT


	)

390 
	#REG_EEND
 
_REG_EEND


	)

391 
	#REG_ESIZE
 
_REG_ESIZE


	)

392 
	#REG_ERPAREN
 
_REG_ERPAREN


	)

400 #i‚de‡
RE_TRANSLATE_TYPE


401 
	#__RE_TRANSLATE_TYPE
 *

	)

402 #ifde‡
__USE_GNU


403 
	#RE_TRANSLATE_TYPE
 
__RE_TRANSLATE_TYPE


	)

407 #ifde‡
__USE_GNU


408 
	#__REPB_PREFIX
(
«me
Ë
	)
name

410 
	#__REPB_PREFIX
(
«me
Ë
__
##
	)
name

413 
	sª_∑âîn_buf„r


417 
ª_dÁ_t
 *
__REPB_PREFIX
(
buf„r
);

420 
__ª_l⁄g_size_t
 
__REPB_PREFIX
(
Æloˇãd
);

423 
__ª_l⁄g_size_t
 
__REPB_PREFIX
(
u£d
);

426 
ªg_sy¡ax_t
 
__REPB_PREFIX
(
sy¡ax
);

431 *
__REPB_PREFIX
(
Á°m≠
);

437 
__RE_TRANSLATE_TYPE
 
__REPB_PREFIX
(
å™¶©e
);

440 
size_t
 
	gª_nsub
;

446 
__REPB_PREFIX
(
ˇn_be_nuŒ
) : 1;

452 #ifde‡
__USE_GNU


453 
	#REGS_UNALLOCATED
 0

	)

454 
	#REGS_REALLOCATE
 1

	)

455 
	#REGS_FIXED
 2

	)

457 
__REPB_PREFIX
(
ªgs_Æloˇãd
) : 2;

461 
__REPB_PREFIX
(
Á°m≠_accuøã
) : 1;

465 
__REPB_PREFIX
(
no_sub
) : 1;

469 
__REPB_PREFIX
(
nŸ_bﬁ
) : 1;

472 
__REPB_PREFIX
(
nŸ_eﬁ
) : 1;

475 
__REPB_PREFIX
(
√wlöe_™ch‹
) : 1;

478 
ª_∑âîn_buf„r
 
	tªgex_t
;

481 #ifde‡
_REGEX_LARGE_OFFSETS


486 
ssize_t
 
	tªgoff_t
;

490 
	tªgoff_t
;

494 #ifde‡
__USE_GNU


497 
	sª_ªgi°îs


499 
__ª_size_t
 
	gnum_ªgs
;

500 
ªgoff_t
 *
	g°¨t
;

501 
ªgoff_t
 *
	gíd
;

508 #i‚de‡
RE_NREGS


509 
	#RE_NREGS
 30

	)

519 
ªgoff_t
 
	grm_so
;

520 
ªgoff_t
 
	grm_eo
;

521 } 
	tªgm©ch_t
;

525 #i‚de‡
_REGEX_NELTS


526 #i‡(
deföed
 
__STDC_VERSION__
 && 199901L <= __STDC_VERSION__ \

527 && !
deföed
 
	g__STDC_NO_VLA__
)

528 
	#_REGEX_NELTS
(
n
Ë
	)
n

530 
	#_REGEX_NELTS
(
n
)

	)

534 #i‡
deföed
 
__GNUC__
 && 4 < __GNUC__ + (6 <
__GNUC_MINOR__
)

535 #¥agm®
GCC
 
dügno°ic
 
push


536 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wvla"

539 #i‚de‡
_Aâr_ac˚ss_


540 #ifde‡
__©å_ac˚ss


541 
	#_Aâr_ac˚ss_
(
¨g
Ë
	`__©å_ac˚ss
 (¨g)

	)

542 #ñi‡
deföed
 
__GNUC__
 && 10 <= __GNUC__

543 
	#_Aâr_ac˚ss_
(
x
Ë
	`__©åibuã__
 ((
__ac˚ss__
 x))

	)

545 
	#_Aâr_ac˚ss_
(
x
)

	)

549 #ifde‡
__USE_GNU


552 
ªg_sy¡ax_t
 
ª_£t_sy¡ax
 (ªg_sy¡ax_à
__sy¡ax
);

562 c⁄° *
ª_compûe_∑âîn
 (c⁄° *
__∑âîn
, 
size_t
 
__Àngth
,

563 
ª_∑âîn_buf„r
 *
__buf„r
)

564 
_Aâr_ac˚ss_
 ((
__ªad_⁄ly__
, 1, 2));

570 
ª_compûe_Á°m≠
 (
ª_∑âîn_buf„r
 *
__buf„r
);

578 
ªgoff_t
 
ª_£¨ch
 (
ª_∑âîn_buf„r
 *
__buf„r
,

579 c⁄° *
__Såög
, 
ªgoff_t
 
__Àngth
,

580 
ªgoff_t
 
__°¨t
,Ñegoff_à
__ønge
,

581 
ª_ªgi°îs
 *
__ªgs
)

582 
_Aâr_ac˚ss_
 ((
__ªad_⁄ly__
, 2, 3));

587 
ªgoff_t
 
ª_£¨ch_2
 (
ª_∑âîn_buf„r
 *
__buf„r
,

588 c⁄° *
__°rög1
, 
ªgoff_t
 
__Àngth1
,

589 c⁄° *
__°rög2
, 
ªgoff_t
 
__Àngth2
,

590 
ªgoff_t
 
__°¨t
,Ñegoff_à
__ønge
,

591 
ª_ªgi°îs
 *
__ªgs
,

592 
ªgoff_t
 
__°›
)

593 
_Aâr_ac˚ss_
 ((
__ªad_⁄ly__
, 2, 3))

594 
_Aâr_ac˚ss_
 ((
__ªad_⁄ly__
, 4, 5));

599 
ªgoff_t
 
ª_m©ch
 (
ª_∑âîn_buf„r
 *
__buf„r
,

600 c⁄° *
__Såög
, 
ªgoff_t
 
__Àngth
,

601 
ªgoff_t
 
__°¨t
, 
ª_ªgi°îs
 *
__ªgs
)

602 
_Aâr_ac˚ss_
 ((
__ªad_⁄ly__
, 2, 3));

606 
ªgoff_t
 
ª_m©ch_2
 (
ª_∑âîn_buf„r
 *
__buf„r
,

607 c⁄° *
__°rög1
, 
ªgoff_t
 
__Àngth1
,

608 c⁄° *
__°rög2
, 
ªgoff_t
 
__Àngth2
,

609 
ªgoff_t
 
__°¨t
, 
ª_ªgi°îs
 *
__ªgs
,

610 
ªgoff_t
 
__°›
)

611 
_Aâr_ac˚ss_
 ((
__ªad_⁄ly__
, 2, 3))

612 
_Aâr_ac˚ss_
 ((
__ªad_⁄ly__
, 4, 5));

627 
ª_£t_ªgi°îs
 (
ª_∑âîn_buf„r
 *
__buf„r
,

628 
ª_ªgi°îs
 *
__ªgs
,

629 
__ª_size_t
 
__num_ªgs
,

630 
ªgoff_t
 *
__°¨ts
,Ñegoff_à*
__íds
);

633 #i‡
deföed
 
_REGEX_RE_COMP
 || (deföed 
_LIBC
 && deföed 
__USE_MISC
)

635 *
ª_comp
 (const *);

636 
ª_exec
 (const *);

645 #i‚de‡
_Re°ri˘_


646 #i‡
deföed
 
__ª°ri˘
 \

647 || 2 < 
	g__GNUC__
 + (95 <
__GNUC_MINOR__
) \

648 || 
__˛™g_maj‹__
 >= 3

649 
	#_Re°ri˘_
 
__ª°ri˘


	)

650 #ñi‡199901L <
__STDC_VERSION__
 || 
deföed
 
ª°ri˘


651 
	#_Re°ri˘_
 
ª°ri˘


	)

653 
	#_Re°ri˘_


	)

661 #i‚de‡
_Re°ri˘_¨r_


662 #ifde‡
__ª°ri˘_¨r


663 
	#_Re°ri˘_¨r_
 
__ª°ri˘_¨r


	)

664 #ñi‡((199901L <
__STDC_VERSION__
 \

665 || 3 < 
__GNUC__
 + (1 <
__GNUC_MINOR__
) \

666 || 
__˛™g_maj‹__
 >= 3) \

667 && !
deföed
 
__˝lu•lus
)

668 
	#_Re°ri˘_¨r_
 
_Re°ri˘_


	)

670 
	#_Re°ri˘_¨r_


	)

675 
ªgcomp
 (
ªgex_t
 *
_Re°ri˘_
 
__¥eg
,

676 c⁄° *
_Re°ri˘_
 
__∑âîn
,

677 
__cÊags
);

679 
ªgexec
 (c⁄° 
ªgex_t
 *
_Re°ri˘_
 
__¥eg
,

680 c⁄° *
_Re°ri˘_
 
__Såög
, 
size_t
 
__nm©ch
,

681 
ªgm©ch_t
 
__pm©ch
[
_Re°ri˘_¨r_


682 
_REGEX_NELTS
 (
__nm©ch
)],

683 
__eÊags
);

685 
size_t
 
ªgîr‹
 (
__îrcode
, c⁄° 
ªgex_t
 *
_Re°ri˘_
 
__¥eg
,

686 *
_Re°ri˘_
 
__îrbuf
, 
size_t
 
__îrbuf_size
)

687 
_Aâr_ac˚ss_
 ((
__wrôe_⁄ly__
, 3, 4));

689 
ªg‰ì
 (
ªgex_t
 *
__¥eg
);

691 #i‡
deföed
 
__GNUC__
 && 4 < __GNUC__ + (6 <
__GNUC_MINOR__
)

692 #¥agm®
GCC
 
dügno°ic
 
p›


695 #ifde‡
__˝lu•lus


	@
1
.
1
/usr/include
101
3293
src/cedmInterface/codebigUtils.c
src/cedmInterface/codebigUtils.h
src/cedmInterface/mtlsUtils.c
src/cedmInterface/mtlsUtils.h
src/chunk.c
src/device_status_helper.c
src/deviceutils/device_api.c
src/deviceutils/device_api.h
src/deviceutils/deviceutils.c
src/deviceutils/deviceutils.h
src/download_status_helper.c
src/flash.c
src/iarmInterface/iarmInterface.c
src/include/device_status_helper.h
src/include/download_status_helper.h
src/include/iarmInterface.h
src/include/json_process.h
src/include/rdkv_cdl.h
src/include/rdkv_upgrade.h
src/include/rfcinterface.h
src/json_process.c
src/rdkv_main.c
src/rdkv_upgrade.c
src/rfcInterface/rfcinterface.c
test/functional-tests/tests/mfrutils.c
test/testiarmInterface.c
test/testiarmInterface.h
unittest/basic_rdkv_main_gtest.cpp
unittest/device_status_helper_gtest.cpp
unittest/deviceutils/device_api_gtest.cpp
unittest/deviceutils/deviceutils_gtest.cpp
unittest/deviceutils/json_parse.c
unittest/deviceutils/json_parse.h
unittest/fwdl_interface_gtest.cpp
unittest/miscellaneous.h
unittest/miscellaneous_mock.cpp
unittest/mocks/device_status_helper_mock.cpp
unittest/mocks/device_status_helper_mock.h
unittest/mocks/deviceutils_mock.cpp
unittest/mocks/deviceutils_mock.h
unittest/mocks/interface_mock.cpp
unittest/mocks/interface_mock.h
unittest/rdkv_cdl_log_wrapper.h
/usr/include/cjson/cJSON.h
/usr/include/ctype.h
/usr/include/dirent.h
/usr/include/fcntl.h
/usr/include/gmock/gmock.h
/usr/include/gtest/gtest.h
/usr/include/inttypes.h
/usr/include/pthread.h
/usr/include/signal.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/strings.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/alloca.h
/usr/include/features.h
/usr/include/gmock/gmock-actions.h
/usr/include/gmock/gmock-cardinalities.h
/usr/include/gmock/gmock-function-mocker.h
/usr/include/gmock/gmock-matchers.h
/usr/include/gmock/gmock-more-actions.h
/usr/include/gmock/gmock-more-matchers.h
/usr/include/gmock/gmock-nice-strict.h
/usr/include/gmock/internal/gmock-internal-utils.h
/usr/include/gtest/gtest-death-test.h
/usr/include/gtest/gtest-matchers.h
/usr/include/gtest/gtest-message.h
/usr/include/gtest/gtest-param-test.h
/usr/include/gtest/gtest-printers.h
/usr/include/gtest/gtest-test-part.h
/usr/include/gtest/gtest-typed-test.h
/usr/include/gtest/gtest_pred_impl.h
/usr/include/gtest/gtest_prod.h
/usr/include/gtest/internal/gtest-internal.h
/usr/include/gtest/internal/gtest-string.h
/usr/include/sched.h
/usr/include/stdint.h
/usr/include/errno.h
/usr/include/features-time64.h
/usr/include/gmock/gmock-spec-builders.h
/usr/include/gmock/internal/custom/gmock-generated-actions.h
/usr/include/gmock/internal/custom/gmock-matchers.h
/usr/include/gmock/internal/gmock-port.h
/usr/include/gmock/internal/gmock-pp.h
/usr/include/gtest/internal/custom/gtest-printers.h
/usr/include/gtest/internal/gtest-death-test-internal.h
/usr/include/gtest/internal/gtest-filepath.h
/usr/include/gtest/internal/gtest-param-util.h
/usr/include/gtest/internal/gtest-port.h
/usr/include/gtest/internal/gtest-type-util.h
/usr/include/limits.h
/usr/include/stdc-predef.h
/usr/include/assert.h
/usr/include/gmock/internal/custom/gmock-port.h
/usr/include/gtest/internal/custom/gtest-port.h
/usr/include/gtest/internal/gtest-port-arch.h
/usr/include/regex.h
